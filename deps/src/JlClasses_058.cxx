// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoScaledShape> : std::false_type { };
  template<> struct DefaultConstructible<TGeoScaledShape> : std::false_type { };
template<> struct SuperType<TGeoScaledShape> { typedef TGeoBBox type; };
}

// Class generating the wrapper for type TGeoScaledShape
// signature to use in the veto file: TGeoScaledShape
struct JlTGeoScaledShape: public Wrapper {

  JlTGeoScaledShape(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoScaledShape (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:20:7
    jlcxx::TypeWrapper<TGeoScaledShape>  t = jlModule.add_type<TGeoScaledShape>("TGeoScaledShape",
      jlcxx::julia_base_type<TGeoBBox>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoScaledShape>>(new jlcxx::TypeWrapper<TGeoScaledShape>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::TGeoScaledShape(const char *, TGeoShape *, TGeoScale *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:29:4
    t.constructor<const char *, TGeoShape *, TGeoScale *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::TGeoScaledShape(TGeoShape *, TGeoScale *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:30:4
    t.constructor<TGeoShape *, TGeoScale *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoScaledShape::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoScaledShape::Capacity()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:34:13
    t.method("Capacity", static_cast<Double_t (TGeoScaledShape::*)()  const>(&TGeoScaledShape::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::ComputeBBox()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:35:9
    t.method("ComputeBBox", static_cast<void (TGeoScaledShape::*)() >(&TGeoScaledShape::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:36:9
    t.method("ComputeNormal", static_cast<void (TGeoScaledShape::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoScaledShape::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:37:9
    t.method("ComputeNormal_v", static_cast<void (TGeoScaledShape::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoScaledShape::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoScaledShape::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoScaledShape::Contains(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:38:11
    t.method("Contains", static_cast<Bool_t (TGeoScaledShape::*)(const Double_t *)  const>(&TGeoScaledShape::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:39:9
    t.method("Contains_v", static_cast<void (TGeoScaledShape::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoScaledShape::Contains_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoScaledShape::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoScaledShape::DistancetoPrimitive(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:40:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoScaledShape::*)(Int_t, Int_t) >(&TGeoScaledShape::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for Double_t TGeoScaledShape::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoScaledShape::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:41:13
    t.method("DistFromInside", static_cast<Double_t (TGeoScaledShape::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoScaledShape::DistFromInside));
    t.method("DistFromInside", [](TGeoScaledShape const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoScaledShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoScaledShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoScaledShape const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoScaledShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoScaledShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:43:9
    t.method("DistFromInside_v", static_cast<void (TGeoScaledShape::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoScaledShape::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoScaledShape::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoScaledShape::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:45:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoScaledShape::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoScaledShape::DistFromOutside));
    t.method("DistFromOutside", [](TGeoScaledShape const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoScaledShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoScaledShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoScaledShape const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoScaledShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoScaledShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:47:9
    t.method("DistFromOutside_v", static_cast<void (TGeoScaledShape::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoScaledShape::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoScaledShape::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoScaledShape::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:50:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoScaledShape::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoScaledShape::Divide));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoScaledShape::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoScaledShape::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:51:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoScaledShape::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoScaledShape::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:53:9
    t.method("GetMeshNumbers", static_cast<void (TGeoScaledShape::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoScaledShape::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoScaledShape::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoScaledShape::GetNmeshVertices()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:54:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoScaledShape::*)()  const>(&TGeoScaledShape::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoScaledShape::GetShape() (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoScaledShape::GetShape()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:55:15
    t.method("GetShape", static_cast<TGeoShape * (TGeoScaledShape::*)()  const>(&TGeoScaledShape::GetShape));

    DEBUG_MSG("Adding wrapper for TGeoScale * TGeoScaledShape::GetScale() (" __HERE__ ")");
    // signature to use in the veto list: TGeoScale * TGeoScaledShape::GetScale()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:56:15
    t.method("GetScale", static_cast<TGeoScale * (TGeoScaledShape::*)()  const>(&TGeoScaledShape::GetScale));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::InspectShape()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:57:9
    t.method("InspectShape", static_cast<void (TGeoScaledShape::*)()  const>(&TGeoScaledShape::InspectShape));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoScaledShape::IsAssembly() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoScaledShape::IsAssembly()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:58:11
    t.method("IsAssembly", static_cast<Bool_t (TGeoScaledShape::*)()  const>(&TGeoScaledShape::IsAssembly));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoScaledShape::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoScaledShape::IsCylType()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:59:11
    t.method("IsCylType", static_cast<Bool_t (TGeoScaledShape::*)()  const>(&TGeoScaledShape::IsCylType));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoScaledShape::IsReflected() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoScaledShape::IsReflected()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:60:11
    t.method("IsReflected", static_cast<Bool_t (TGeoScaledShape::*)()  const>(&TGeoScaledShape::IsReflected));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoScaledShape::MakeScaledShape(const char *, TGeoShape *, TGeoScale *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoScaledShape::MakeScaledShape(const char *, TGeoShape *, TGeoScale *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:62:22
    module_.method("TGeoScaledShape!MakeScaledShape", static_cast<TGeoShape * (*)(const char *, TGeoShape *, TGeoScale *) >(&TGeoScaledShape::MakeScaledShape));

    DEBUG_MSG("Adding wrapper for Double_t TGeoScaledShape::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoScaledShape::Safety(const Double_t *, Bool_t)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:63:13
    t.method("Safety", static_cast<Double_t (TGeoScaledShape::*)(const Double_t *, Bool_t)  const>(&TGeoScaledShape::Safety));
    t.method("Safety", [](TGeoScaledShape const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoScaledShape const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:64:9
    t.method("Safety_v", static_cast<void (TGeoScaledShape::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoScaledShape::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::SetScale(TGeoScale *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::SetScale(TGeoScale *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:66:9
    t.method("SetScale", static_cast<void (TGeoScaledShape::*)(TGeoScale *) >(&TGeoScaledShape::SetScale));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::SetPoints(Double_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:67:9
    t.method("SetPoints", static_cast<void (TGeoScaledShape::*)(Double_t *)  const>(&TGeoScaledShape::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::SetPoints(Float_t *)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:68:9
    t.method("SetPoints", static_cast<void (TGeoScaledShape::*)(Float_t *)  const>(&TGeoScaledShape::SetPoints));

    DEBUG_MSG("Adding wrapper for Version_t TGeoScaledShape::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoScaledShape::Class_Version()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!Class_Version", static_cast<Version_t (*)() >(&TGeoScaledShape::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoScaledShape::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoScaledShape::IsA()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    t.method("IsA", static_cast<TClass * (TGeoScaledShape::*)()  const>(&TGeoScaledShape::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    t.method("StreamerNVirtual", static_cast<void (TGeoScaledShape::*)(TBuffer &) >(&TGeoScaledShape::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoScaledShape::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoScaledShape::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!DeclFileName", []() { return (std::string)TGeoScaledShape::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoScaledShape::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoScaledShape::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!ImplFileLine", static_cast<int (*)() >(&TGeoScaledShape::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoScaledShape::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoScaledShape::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!ImplFileName", []() { return (std::string)TGeoScaledShape::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoScaledShape::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoScaledShape::Class_Name()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!Class_Name", []() { return (std::string)TGeoScaledShape::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoScaledShape::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoScaledShape::Dictionary()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!Dictionary", static_cast<TClass * (*)() >(&TGeoScaledShape::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoScaledShape::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoScaledShape::Class()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!Class", static_cast<TClass * (*)() >(&TGeoScaledShape::Class));

    DEBUG_MSG("Adding wrapper for void TGeoScaledShape::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScaledShape::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    t.method("Streamer", static_cast<void (TGeoScaledShape::*)(TBuffer &) >(&TGeoScaledShape::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoScaledShape::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoScaledShape::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoScaledShape.h:71:4
    module_.method("TGeoScaledShape!DeclFileLine", static_cast<int (*)() >(&TGeoScaledShape::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoScaledShape>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoScaledShape(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoScaledShape(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoShapeAssembly> : std::false_type { };
  template<> struct DefaultConstructible<TGeoShapeAssembly> : std::false_type { };
template<> struct SuperType<TGeoShapeAssembly> { typedef TGeoBBox type; };
}

// Class generating the wrapper for type TGeoShapeAssembly
// signature to use in the veto file: TGeoShapeAssembly
struct JlTGeoShapeAssembly: public Wrapper {

  JlTGeoShapeAssembly(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoShapeAssembly (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:19:7
    jlcxx::TypeWrapper<TGeoShapeAssembly>  t = jlModule.add_type<TGeoShapeAssembly>("TGeoShapeAssembly",
      jlcxx::julia_base_type<TGeoBBox>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoShapeAssembly>>(new jlcxx::TypeWrapper<TGeoShapeAssembly>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::TGeoShapeAssembly(TGeoVolumeAssembly *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:29:4
    t.constructor<TGeoVolumeAssembly *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::ComputeBBox()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:33:9
    t.method("ComputeBBox", static_cast<void (TGeoShapeAssembly::*)() >(&TGeoShapeAssembly::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:34:9
    t.method("ComputeNormal", static_cast<void (TGeoShapeAssembly::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoShapeAssembly::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:35:9
    t.method("ComputeNormal_v", static_cast<void (TGeoShapeAssembly::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoShapeAssembly::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShapeAssembly::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShapeAssembly::Contains(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:36:11
    t.method("Contains", static_cast<Bool_t (TGeoShapeAssembly::*)(const Double_t *)  const>(&TGeoShapeAssembly::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:37:9
    t.method("Contains_v", static_cast<void (TGeoShapeAssembly::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoShapeAssembly::Contains_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoShapeAssembly::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShapeAssembly::DistancetoPrimitive(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:38:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoShapeAssembly::*)(Int_t, Int_t) >(&TGeoShapeAssembly::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for Double_t TGeoShapeAssembly::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShapeAssembly::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:39:13
    t.method("DistFromInside", static_cast<Double_t (TGeoShapeAssembly::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoShapeAssembly::DistFromInside));
    t.method("DistFromInside", [](TGeoShapeAssembly const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoShapeAssembly const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoShapeAssembly const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoShapeAssembly const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoShapeAssembly const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoShapeAssembly const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:41:9
    t.method("DistFromInside_v", static_cast<void (TGeoShapeAssembly::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoShapeAssembly::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoShapeAssembly::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShapeAssembly::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:43:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoShapeAssembly::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoShapeAssembly::DistFromOutside));
    t.method("DistFromOutside", [](TGeoShapeAssembly const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoShapeAssembly const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoShapeAssembly const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoShapeAssembly const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoShapeAssembly const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoShapeAssembly const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:45:9
    t.method("DistFromOutside_v", static_cast<void (TGeoShapeAssembly::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoShapeAssembly::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoShapeAssembly::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoShapeAssembly::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:48:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoShapeAssembly::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoShapeAssembly::Divide));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoShapeAssembly::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoShapeAssembly::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:49:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoShapeAssembly::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoShapeAssembly::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:50:9
    t.method("GetMeshNumbers", static_cast<void (TGeoShapeAssembly::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoShapeAssembly::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoShapeAssembly::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShapeAssembly::GetNmeshVertices()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:51:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoShapeAssembly::*)()  const>(&TGeoShapeAssembly::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::InspectShape()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:52:9
    t.method("InspectShape", static_cast<void (TGeoShapeAssembly::*)()  const>(&TGeoShapeAssembly::InspectShape));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShapeAssembly::IsAssembly() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShapeAssembly::IsAssembly()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:53:11
    t.method("IsAssembly", static_cast<Bool_t (TGeoShapeAssembly::*)()  const>(&TGeoShapeAssembly::IsAssembly));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShapeAssembly::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShapeAssembly::IsCylType()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:54:11
    t.method("IsCylType", static_cast<Bool_t (TGeoShapeAssembly::*)()  const>(&TGeoShapeAssembly::IsCylType));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::NeedsBBoxRecompute() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::NeedsBBoxRecompute()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:55:9
    t.method("NeedsBBoxRecompute", static_cast<void (TGeoShapeAssembly::*)() >(&TGeoShapeAssembly::NeedsBBoxRecompute));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::RecomputeBoxLast() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::RecomputeBoxLast()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:56:9
    t.method("RecomputeBoxLast", static_cast<void (TGeoShapeAssembly::*)() >(&TGeoShapeAssembly::RecomputeBoxLast));

    DEBUG_MSG("Adding wrapper for Double_t TGeoShapeAssembly::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShapeAssembly::Safety(const Double_t *, Bool_t)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:57:13
    t.method("Safety", static_cast<Double_t (TGeoShapeAssembly::*)(const Double_t *, Bool_t)  const>(&TGeoShapeAssembly::Safety));
    t.method("Safety", [](TGeoShapeAssembly const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoShapeAssembly const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:58:9
    t.method("Safety_v", static_cast<void (TGeoShapeAssembly::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoShapeAssembly::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::SetPoints(Double_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:60:9
    t.method("SetPoints", static_cast<void (TGeoShapeAssembly::*)(Double_t *)  const>(&TGeoShapeAssembly::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::SetPoints(Float_t *)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:61:9
    t.method("SetPoints", static_cast<void (TGeoShapeAssembly::*)(Float_t *)  const>(&TGeoShapeAssembly::SetPoints));

    DEBUG_MSG("Adding wrapper for Version_t TGeoShapeAssembly::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoShapeAssembly::Class_Version()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!Class_Version", static_cast<Version_t (*)() >(&TGeoShapeAssembly::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoShapeAssembly::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoShapeAssembly::IsA()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    t.method("IsA", static_cast<TClass * (TGeoShapeAssembly::*)()  const>(&TGeoShapeAssembly::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    t.method("StreamerNVirtual", static_cast<void (TGeoShapeAssembly::*)(TBuffer &) >(&TGeoShapeAssembly::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoShapeAssembly::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShapeAssembly::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!DeclFileName", []() { return (std::string)TGeoShapeAssembly::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoShapeAssembly::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoShapeAssembly::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!ImplFileLine", static_cast<int (*)() >(&TGeoShapeAssembly::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoShapeAssembly::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShapeAssembly::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!ImplFileName", []() { return (std::string)TGeoShapeAssembly::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShapeAssembly::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShapeAssembly::Class_Name()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!Class_Name", []() { return (std::string)TGeoShapeAssembly::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoShapeAssembly::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoShapeAssembly::Dictionary()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!Dictionary", static_cast<TClass * (*)() >(&TGeoShapeAssembly::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoShapeAssembly::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoShapeAssembly::Class()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!Class", static_cast<TClass * (*)() >(&TGeoShapeAssembly::Class));

    DEBUG_MSG("Adding wrapper for void TGeoShapeAssembly::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShapeAssembly::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    t.method("Streamer", static_cast<void (TGeoShapeAssembly::*)(TBuffer &) >(&TGeoShapeAssembly::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoShapeAssembly::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoShapeAssembly::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoShapeAssembly.h:64:4
    module_.method("TGeoShapeAssembly!DeclFileLine", static_cast<int (*)() >(&TGeoShapeAssembly::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoShapeAssembly>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoShapeAssembly(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoShapeAssembly(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoSphere> : std::false_type { };
  template<> struct DefaultConstructible<TGeoSphere> : std::false_type { };
template<> struct SuperType<TGeoSphere> { typedef TGeoBBox type; };
}

// Class generating the wrapper for type TGeoSphere
// signature to use in the veto file: TGeoSphere
struct JlTGeoSphere: public Wrapper {

  JlTGeoSphere(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoSphere (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoSphere.h:17:7
    jlcxx::TypeWrapper<TGeoSphere>  t = jlModule.add_type<TGeoSphere>("TGeoSphere",
      jlcxx::julia_base_type<TGeoBBox>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoSphere>>(new jlcxx::TypeWrapper<TGeoSphere>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoSphere::TGeoSphere(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoSphere.h:34:4
    t.constructor<Double_t, Double_t>(/*finalize=*/true);
    t.constructor<Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoSphere::TGeoSphere(const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoSphere.h:36:4
    t.constructor<const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoSphere::TGeoSphere(Double_t *, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoSphere.h:38:4
    t.constructor<Double_t *>(/*finalize=*/true);
    t.constructor<Double_t *, Int_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::Capacity()
    // defined in /opt/root63206jll/include/TGeoSphere.h:42:13
    t.method("Capacity", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::ComputeBBox()
    // defined in /opt/root63206jll/include/TGeoSphere.h:43:9
    t.method("ComputeBBox", static_cast<void (TGeoSphere::*)() >(&TGeoSphere::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:44:9
    t.method("ComputeNormal", static_cast<void (TGeoSphere::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoSphere::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:45:9
    t.method("ComputeNormal_v", static_cast<void (TGeoSphere::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoSphere::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoSphere::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoSphere::Contains(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:46:11
    t.method("Contains", static_cast<Bool_t (TGeoSphere::*)(const Double_t *)  const>(&TGeoSphere::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:47:9
    t.method("Contains_v", static_cast<void (TGeoSphere::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoSphere::Contains_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoSphere::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoSphere::DistancetoPrimitive(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:48:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoSphere::*)(Int_t, Int_t) >(&TGeoSphere::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:49:13
    t.method("DistFromInside", static_cast<Double_t (TGeoSphere::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoSphere::DistFromInside));
    t.method("DistFromInside", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoSphere::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:51:9
    t.method("DistFromInside_v", static_cast<void (TGeoSphere::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoSphere::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:53:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoSphere::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoSphere::DistFromOutside));
    t.method("DistFromOutside", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoSphere::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:55:9
    t.method("DistFromOutside_v", static_cast<void (TGeoSphere::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoSphere::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::DistToSphere(const Double_t *, const Double_t *, Double_t, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::DistToSphere(const Double_t *, const Double_t *, Double_t, Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:57:13
    t.method("DistToSphere", static_cast<Double_t (TGeoSphere::*)(const Double_t *, const Double_t *, Double_t, Bool_t, Bool_t)  const>(&TGeoSphere::DistToSphere));
    t.method("DistToSphere", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1, Double_t arg2)->Double_t { return a.DistToSphere(arg0, arg1, arg2); });
    t.method("DistToSphere", [](TGeoSphere const& a, const Double_t * arg0, const Double_t * arg1, Double_t arg2, Bool_t arg3)->Double_t { return a.DistToSphere(arg0, arg1, arg2, arg3); });
    t.method("DistToSphere", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1, Double_t arg2)->Double_t { return a->DistToSphere(arg0, arg1, arg2); });
    t.method("DistToSphere", [](TGeoSphere const* a, const Double_t * arg0, const Double_t * arg1, Double_t arg2, Bool_t arg3)->Double_t { return a->DistToSphere(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoSphere::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoSphere::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:60:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoSphere::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoSphere::Divide));

    DEBUG_MSG("Adding wrapper for const char * TGeoSphere::GetAxisName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoSphere::GetAxisName(Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:61:16
    t.method("GetAxisName", [](TGeoSphere const& a, Int_t arg0) { return (std::string)a.GetAxisName(arg0); });
    t.method("GetAxisName", [](TGeoSphere const* a, Int_t arg0) { return (std::string)a->GetAxisName(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetAxisRange(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetAxisRange(Int_t, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TGeoSphere.h:62:13
    t.method("GetAxisRange", static_cast<Double_t (TGeoSphere::*)(Int_t, Double_t &, Double_t &)  const>(&TGeoSphere::GetAxisRange));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::GetBoundingCylinder(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::GetBoundingCylinder(Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:63:9
    t.method("GetBoundingCylinder", static_cast<void (TGeoSphere::*)(Double_t *)  const>(&TGeoSphere::GetBoundingCylinder));

    DEBUG_MSG("Adding wrapper for Int_t TGeoSphere::GetByteCount() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoSphere::GetByteCount()
    // defined in /opt/root63206jll/include/TGeoSphere.h:65:10
    t.method("GetByteCount", static_cast<Int_t (TGeoSphere::*)()  const>(&TGeoSphere::GetByteCount));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoSphere::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoSphere::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:66:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoSphere::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoSphere::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /opt/root63206jll/include/TGeoSphere.h:67:9
    t.method("GetMeshNumbers", static_cast<void (TGeoSphere::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoSphere::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoSphere::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoSphere::GetNmeshVertices()
    // defined in /opt/root63206jll/include/TGeoSphere.h:68:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoSphere::*)()  const>(&TGeoSphere::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for Int_t TGeoSphere::GetNumberOfDivisions() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoSphere::GetNumberOfDivisions()
    // defined in /opt/root63206jll/include/TGeoSphere.h:69:10
    t.method("GetNumberOfDivisions", static_cast<Int_t (TGeoSphere::*)()  const>(&TGeoSphere::GetNumberOfDivisions));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoSphere::GetPointsOnSegments(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoSphere::GetPointsOnSegments(Int_t, Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:70:11
    t.method("GetPointsOnSegments", static_cast<Bool_t (TGeoSphere::*)(Int_t, Double_t *)  const>(&TGeoSphere::GetPointsOnSegments));

    DEBUG_MSG("Adding wrapper for Int_t TGeoSphere::GetNz() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoSphere::GetNz()
    // defined in /opt/root63206jll/include/TGeoSphere.h:71:10
    t.method("GetNz", static_cast<Int_t (TGeoSphere::*)()  const>(&TGeoSphere::GetNz));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetRmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetRmin()
    // defined in /opt/root63206jll/include/TGeoSphere.h:72:21
    t.method("GetRmin", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::GetRmin));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetRmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetRmax()
    // defined in /opt/root63206jll/include/TGeoSphere.h:73:21
    t.method("GetRmax", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::GetRmax));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetTheta1() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetTheta1()
    // defined in /opt/root63206jll/include/TGeoSphere.h:74:13
    t.method("GetTheta1", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::GetTheta1));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetTheta2() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetTheta2()
    // defined in /opt/root63206jll/include/TGeoSphere.h:75:13
    t.method("GetTheta2", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::GetTheta2));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetPhi1() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetPhi1()
    // defined in /opt/root63206jll/include/TGeoSphere.h:76:13
    t.method("GetPhi1", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::GetPhi1));

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::GetPhi2() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::GetPhi2()
    // defined in /opt/root63206jll/include/TGeoSphere.h:77:13
    t.method("GetPhi2", static_cast<Double_t (TGeoSphere::*)()  const>(&TGeoSphere::GetPhi2));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::InspectShape()
    // defined in /opt/root63206jll/include/TGeoSphere.h:78:9
    t.method("InspectShape", static_cast<void (TGeoSphere::*)()  const>(&TGeoSphere::InspectShape));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoSphere::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoSphere::IsCylType()
    // defined in /opt/root63206jll/include/TGeoSphere.h:79:11
    t.method("IsCylType", static_cast<Bool_t (TGeoSphere::*)()  const>(&TGeoSphere::IsCylType));

    DEBUG_MSG("Adding wrapper for Int_t TGeoSphere::IsOnBoundary(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoSphere::IsOnBoundary(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:80:10
    t.method("IsOnBoundary", static_cast<Int_t (TGeoSphere::*)(const Double_t *)  const>(&TGeoSphere::IsOnBoundary));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoSphere::IsPointInside(const Double_t *, Bool_t, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoSphere::IsPointInside(const Double_t *, Bool_t, Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:82:4
    t.method("IsPointInside", static_cast<Bool_t (TGeoSphere::*)(const Double_t *, Bool_t, Bool_t, Bool_t)  const>(&TGeoSphere::IsPointInside));
    t.method("IsPointInside", [](TGeoSphere const& a, const Double_t * arg0)->Bool_t { return a.IsPointInside(arg0); });
    t.method("IsPointInside", [](TGeoSphere const& a, const Double_t * arg0, Bool_t arg1)->Bool_t { return a.IsPointInside(arg0, arg1); });
    t.method("IsPointInside", [](TGeoSphere const& a, const Double_t * arg0, Bool_t arg1, Bool_t arg2)->Bool_t { return a.IsPointInside(arg0, arg1, arg2); });
    t.method("IsPointInside", [](TGeoSphere const* a, const Double_t * arg0)->Bool_t { return a->IsPointInside(arg0); });
    t.method("IsPointInside", [](TGeoSphere const* a, const Double_t * arg0, Bool_t arg1)->Bool_t { return a->IsPointInside(arg0, arg1); });
    t.method("IsPointInside", [](TGeoSphere const* a, const Double_t * arg0, Bool_t arg1, Bool_t arg2)->Bool_t { return a->IsPointInside(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoSphere::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoSphere::Safety(const Double_t *, Bool_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:84:13
    t.method("Safety", static_cast<Double_t (TGeoSphere::*)(const Double_t *, Bool_t)  const>(&TGeoSphere::Safety));
    t.method("Safety", [](TGeoSphere const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoSphere const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoSphere::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:85:9
    t.method("Safety_v", static_cast<void (TGeoSphere::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoSphere::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::SetSphDimensions(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::SetSphDimensions(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:87:9
    t.method("SetSphDimensions", static_cast<void (TGeoSphere::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TGeoSphere::SetSphDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::SetNumberOfDivisions(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::SetNumberOfDivisions(Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:88:17
    t.method("SetNumberOfDivisions", static_cast<void (TGeoSphere::*)(Int_t) >(&TGeoSphere::SetNumberOfDivisions));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::SetDimensions(Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:89:9
    t.method("SetDimensions", static_cast<void (TGeoSphere::*)(Double_t *) >(&TGeoSphere::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::SetDimensions(Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::SetDimensions(Double_t *, Int_t)
    // defined in /opt/root63206jll/include/TGeoSphere.h:90:9
    t.method("SetDimensions", static_cast<void (TGeoSphere::*)(Double_t *, Int_t) >(&TGeoSphere::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::SetPoints(Double_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:91:9
    t.method("SetPoints", static_cast<void (TGeoSphere::*)(Double_t *)  const>(&TGeoSphere::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::SetPoints(Float_t *)
    // defined in /opt/root63206jll/include/TGeoSphere.h:92:9
    t.method("SetPoints", static_cast<void (TGeoSphere::*)(Float_t *)  const>(&TGeoSphere::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::Sizeof3D() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::Sizeof3D()
    // defined in /opt/root63206jll/include/TGeoSphere.h:94:9
    t.method("Sizeof3D", static_cast<void (TGeoSphere::*)()  const>(&TGeoSphere::Sizeof3D));

    DEBUG_MSG("Adding wrapper for Version_t TGeoSphere::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoSphere::Class_Version()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!Class_Version", static_cast<Version_t (*)() >(&TGeoSphere::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoSphere::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoSphere::IsA()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    t.method("IsA", static_cast<TClass * (TGeoSphere::*)()  const>(&TGeoSphere::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    t.method("StreamerNVirtual", static_cast<void (TGeoSphere::*)(TBuffer &) >(&TGeoSphere::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoSphere::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoSphere::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!DeclFileName", []() { return (std::string)TGeoSphere::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoSphere::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoSphere::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!ImplFileLine", static_cast<int (*)() >(&TGeoSphere::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoSphere::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoSphere::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!ImplFileName", []() { return (std::string)TGeoSphere::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoSphere::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoSphere::Class_Name()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!Class_Name", []() { return (std::string)TGeoSphere::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoSphere::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoSphere::Dictionary()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!Dictionary", static_cast<TClass * (*)() >(&TGeoSphere::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoSphere::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoSphere::Class()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!Class", static_cast<TClass * (*)() >(&TGeoSphere::Class));

    DEBUG_MSG("Adding wrapper for void TGeoSphere::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoSphere::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    t.method("Streamer", static_cast<void (TGeoSphere::*)(TBuffer &) >(&TGeoSphere::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoSphere::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoSphere::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoSphere.h:96:4
    module_.method("TGeoSphere!DeclFileLine", static_cast<int (*)() >(&TGeoSphere::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoSphere>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoSphere(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoSphere(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Geom::Vertex_t> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Geom::Vertex_t> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Geom::Vertex_t
// signature to use in the veto file: ROOT::Geom::Vertex_t
struct JlROOT_Geom_Vertex_t: public Wrapper {

  JlROOT_Geom_Vertex_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Geom::Vertex_t (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoVector3.h:21:8
    jlcxx::TypeWrapper<ROOT::Geom::Vertex_t>  t = jlModule.add_type<ROOT::Geom::Vertex_t>("ROOT!Geom!Vertex_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Geom::Vertex_t>>(new jlcxx::TypeWrapper<ROOT::Geom::Vertex_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void ROOT::Geom::Vertex_t::Vertex_t(const double, const double, const double) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoVector3.h:24:4
    t.constructor<const double, const double, const double>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void ROOT::Geom::Vertex_t::Vertex_t(const double) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoVector3.h:31:4
    t.constructor<const double>(/*finalize=*/true);
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding setindex! method  to wrap double & ROOT::Geom::Vertex_t::operator[](const int) (" __HERE__ ")");
// defined in /opt/root63206jll/include/TGeoVector3.h:38:12
    t.method("setindex!",
      [](ROOT::Geom::Vertex_t& a, const int i, double const & val){
      return a[i] = val;
    });

    DEBUG_MSG("Adding getindex method to wrap double & ROOT::Geom::Vertex_t::operator[](const int) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoVector3.h:38:12
    t.method("getindex",
      [](ROOT::Geom::Vertex_t& a, const int i){
      return a[i];
    });


    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator+=(const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator+=(const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:58:4
    t.method("add!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const ROOT::Geom::Vertex_t &) >(&ROOT::Geom::Vertex_t::operator+=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator+=(const double &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator+=(const double &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:58:4
    t.method("add!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const double &) >(&ROOT::Geom::Vertex_t::operator+=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator-=(const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator-=(const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:58:35
    t.method("sub!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const ROOT::Geom::Vertex_t &) >(&ROOT::Geom::Vertex_t::operator-=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator-=(const double &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator-=(const double &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:58:35
    t.method("sub!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const double &) >(&ROOT::Geom::Vertex_t::operator-=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator*=(const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator*=(const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:58:66
    t.method("mult!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const ROOT::Geom::Vertex_t &) >(&ROOT::Geom::Vertex_t::operator*=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator*=(const double &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator*=(const double &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:58:66
    t.method("mult!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const double &) >(&ROOT::Geom::Vertex_t::operator*=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator/=(const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator/=(const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:59:7
    t.method("fdiv!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const ROOT::Geom::Vertex_t &) >(&ROOT::Geom::Vertex_t::operator/=));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator/=(const double &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t & ROOT::Geom::Vertex_t::operator/=(const double &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:59:7
    t.method("fdiv!", static_cast<ROOT::Geom::Vertex_t & (ROOT::Geom::Vertex_t::*)(const double &) >(&ROOT::Geom::Vertex_t::operator/=));

    DEBUG_MSG("Adding wrapper for double & ROOT::Geom::Vertex_t::x() (" __HERE__ ")");
    // signature to use in the veto list: double & ROOT::Geom::Vertex_t::x()
    // defined in /opt/root63206jll/include/TGeoVector3.h:62:18
    t.method("x", static_cast<double & (ROOT::Geom::Vertex_t::*)() >(&ROOT::Geom::Vertex_t::x));

    DEBUG_MSG("Adding wrapper for const double & ROOT::Geom::Vertex_t::x() (" __HERE__ ")");
    // signature to use in the veto list: const double & ROOT::Geom::Vertex_t::x()
    // defined in /opt/root63206jll/include/TGeoVector3.h:66:18
    t.method("x", static_cast<const double & (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::x));

    DEBUG_MSG("Adding wrapper for double & ROOT::Geom::Vertex_t::y() (" __HERE__ ")");
    // signature to use in the veto list: double & ROOT::Geom::Vertex_t::y()
    // defined in /opt/root63206jll/include/TGeoVector3.h:68:12
    t.method("y", static_cast<double & (ROOT::Geom::Vertex_t::*)() >(&ROOT::Geom::Vertex_t::y));

    DEBUG_MSG("Adding wrapper for const double & ROOT::Geom::Vertex_t::y() (" __HERE__ ")");
    // signature to use in the veto list: const double & ROOT::Geom::Vertex_t::y()
    // defined in /opt/root63206jll/include/TGeoVector3.h:69:18
    t.method("y", static_cast<const double & (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::y));

    DEBUG_MSG("Adding wrapper for double & ROOT::Geom::Vertex_t::z() (" __HERE__ ")");
    // signature to use in the veto list: double & ROOT::Geom::Vertex_t::z()
    // defined in /opt/root63206jll/include/TGeoVector3.h:71:12
    t.method("z", static_cast<double & (ROOT::Geom::Vertex_t::*)() >(&ROOT::Geom::Vertex_t::z));

    DEBUG_MSG("Adding wrapper for const double & ROOT::Geom::Vertex_t::z() (" __HERE__ ")");
    // signature to use in the veto list: const double & ROOT::Geom::Vertex_t::z()
    // defined in /opt/root63206jll/include/TGeoVector3.h:72:18
    t.method("z", static_cast<const double & (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::z));

    DEBUG_MSG("Adding wrapper for void ROOT::Geom::Vertex_t::CopyTo(double *) (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::Geom::Vertex_t::CopyTo(double *)
    // defined in /opt/root63206jll/include/TGeoVector3.h:74:16
    t.method("CopyTo", static_cast<void (ROOT::Geom::Vertex_t::*)(double *)  const>(&ROOT::Geom::Vertex_t::CopyTo));

    DEBUG_MSG("Adding wrapper for void ROOT::Geom::Vertex_t::Set(const double &, const double &, const double &) (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::Geom::Vertex_t::Set(const double &, const double &, const double &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:81:9
    t.method("Set", static_cast<void (ROOT::Geom::Vertex_t::*)(const double &, const double &, const double &) >(&ROOT::Geom::Vertex_t::Set));

    DEBUG_MSG("Adding wrapper for void ROOT::Geom::Vertex_t::Set(const double) (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::Geom::Vertex_t::Set(const double)
    // defined in /opt/root63206jll/include/TGeoVector3.h:88:9
    t.method("Set", static_cast<void (ROOT::Geom::Vertex_t::*)(const double) >(&ROOT::Geom::Vertex_t::Set));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Perp2() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Perp2()
    // defined in /opt/root63206jll/include/TGeoVector3.h:91:11
    t.method("Perp2", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Perp2));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Perp() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Perp()
    // defined in /opt/root63206jll/include/TGeoVector3.h:94:11
    t.method("Perp", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Perp));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Dot(const ROOT::Geom::Vertex_t &, const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Dot(const ROOT::Geom::Vertex_t &, const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:97:18
    module_.method("ROOT!Geom!Vertex_t!Dot", static_cast<double (*)(const ROOT::Geom::Vertex_t &, const ROOT::Geom::Vertex_t &) >(&ROOT::Geom::Vertex_t::Dot));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Dot(const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Dot(const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:103:11
    t.method("Dot", static_cast<double (ROOT::Geom::Vertex_t::*)(const ROOT::Geom::Vertex_t &)  const>(&ROOT::Geom::Vertex_t::Dot));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Mag2() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Mag2()
    // defined in /opt/root63206jll/include/TGeoVector3.h:106:11
    t.method("Mag2", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Mag2));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Mag() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Mag()
    // defined in /opt/root63206jll/include/TGeoVector3.h:109:11
    t.method("Mag", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Mag));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Length() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Length()
    // defined in /opt/root63206jll/include/TGeoVector3.h:111:11
    t.method("Length", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Length));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Length2() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Length2()
    // defined in /opt/root63206jll/include/TGeoVector3.h:113:11
    t.method("Length2", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Length2));

    DEBUG_MSG("Adding wrapper for void ROOT::Geom::Vertex_t::Normalize() (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::Geom::Vertex_t::Normalize()
    // defined in /opt/root63206jll/include/TGeoVector3.h:116:9
    t.method("Normalize", static_cast<void (ROOT::Geom::Vertex_t::*)() >(&ROOT::Geom::Vertex_t::Normalize));

    DEBUG_MSG("Adding wrapper for bool ROOT::Geom::Vertex_t::IsNormalized() (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Geom::Vertex_t::IsNormalized()
    // defined in /opt/root63206jll/include/TGeoVector3.h:121:9
    t.method("IsNormalized", static_cast<bool (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::IsNormalized));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Phi() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Phi()
    // defined in /opt/root63206jll/include/TGeoVector3.h:129:11
    t.method("Phi", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Phi));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Theta() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Theta()
    // defined in /opt/root63206jll/include/TGeoVector3.h:132:11
    t.method("Theta", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Theta));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t ROOT::Geom::Vertex_t::Cross(const ROOT::Geom::Vertex_t &, const ROOT::Geom::Vertex_t &) (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t ROOT::Geom::Vertex_t::Cross(const ROOT::Geom::Vertex_t &, const ROOT::Geom::Vertex_t &)
    // defined in /opt/root63206jll/include/TGeoVector3.h:135:20
    module_.method("ROOT!Geom!Vertex_t!Cross", static_cast<ROOT::Geom::Vertex_t (*)(const ROOT::Geom::Vertex_t &, const ROOT::Geom::Vertex_t &) >(&ROOT::Geom::Vertex_t::Cross));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t ROOT::Geom::Vertex_t::Abs() (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t ROOT::Geom::Vertex_t::Abs()
    // defined in /opt/root63206jll/include/TGeoVector3.h:141:13
    t.method("Abs", static_cast<ROOT::Geom::Vertex_t (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Abs));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Min() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Min()
    // defined in /opt/root63206jll/include/TGeoVector3.h:143:11
    t.method("Min", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Min));

    DEBUG_MSG("Adding wrapper for double ROOT::Geom::Vertex_t::Max() (" __HERE__ ")");
    // signature to use in the veto list: double ROOT::Geom::Vertex_t::Max()
    // defined in /opt/root63206jll/include/TGeoVector3.h:145:11
    t.method("Max", static_cast<double (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Max));

    DEBUG_MSG("Adding wrapper for ROOT::Geom::Vertex_t ROOT::Geom::Vertex_t::Unit() (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Geom::Vertex_t ROOT::Geom::Vertex_t::Unit()
    // defined in /opt/root63206jll/include/TGeoVector3.h:147:13
    t.method("Unit", static_cast<ROOT::Geom::Vertex_t (ROOT::Geom::Vertex_t::*)()  const>(&ROOT::Geom::Vertex_t::Unit));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Geom::Vertex_t>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Geom_Vertex_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Geom_Vertex_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoFacet> : std::false_type { };
  template<> struct DefaultConstructible<TGeoFacet> : std::false_type { };
}

// Class generating the wrapper for type TGeoFacet
// signature to use in the veto file: TGeoFacet
struct JlTGeoFacet: public Wrapper {

  JlTGeoFacet(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoFacet (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoTessellated.h:20:7
    jlcxx::TypeWrapper<TGeoFacet>  t = jlModule.add_type<TGeoFacet>("TGeoFacet");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoFacet>>(new jlcxx::TypeWrapper<TGeoFacet>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoFacet::TGeoFacet(int, int, int) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoTessellated.h:40:4
    t.constructor<int, int, int>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoFacet::TGeoFacet(int, int, int, int) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoTessellated.h:41:4
    t.constructor<int, int, int, int>(/*finalize=*/true);
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding getindex method to wrap int TGeoFacet::operator[](int) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoTessellated.h:43:8
    t.method("getindex",
      [](TGeoFacet& a, int i){
      return a[i];
    });

    module_.unset_override_module();


    DEBUG_MSG("Adding wrapper for int TGeoFacet::GetNvert() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoFacet::GetNvert()
    // defined in /opt/root63206jll/include/TGeoTessellated.h:45:8
    t.method("GetNvert", static_cast<int (TGeoFacet::*)()  const>(&TGeoFacet::GetNvert));

    DEBUG_MSG("Adding wrapper for void TGeoFacet::Flip() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoFacet::Flip()
    // defined in /opt/root63206jll/include/TGeoTessellated.h:47:9
    t.method("Flip", static_cast<void (TGeoFacet::*)() >(&TGeoFacet::Flip));

    DEBUG_MSG("Adding wrapper for bool TGeoFacet::IsNeighbour(const TGeoFacet &, bool &) (" __HERE__ ")");
    // signature to use in the veto list: bool TGeoFacet::IsNeighbour(const TGeoFacet &, bool &)
    // defined in /opt/root63206jll/include/TGeoTessellated.h:53:9
    t.method("IsNeighbour", static_cast<bool (TGeoFacet::*)(const TGeoFacet &, bool &)  const>(&TGeoFacet::IsNeighbour));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoFacet>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoFacet(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoFacet(module));
}
