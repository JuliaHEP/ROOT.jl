// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TF1Convolution> : std::false_type { };
  template<> struct DefaultConstructible<TF1Convolution> : std::false_type { };
template<> struct SuperType<TF1Convolution> { typedef TF1AbsComposition type; };
}

// Class generating the wrapper for type TF1Convolution
// signature to use in the veto file: TF1Convolution
struct JlTF1Convolution: public Wrapper {

  JlTF1Convolution(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1Convolution (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:20:7
    jlcxx::TypeWrapper<TF1Convolution>  t = jlModule.add_type<TF1Convolution>("TF1Convolution",
      jlcxx::julia_base_type<TF1AbsComposition>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1Convolution>>(new jlcxx::TypeWrapper<TF1Convolution>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1Convolution::TF1Convolution(TF1 *, TF1 *, Bool_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:47:4
    t.constructor<TF1 *, TF1 *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, Bool_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1Convolution::TF1Convolution(TF1 *, TF1 *, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:48:4
    t.constructor<TF1 *, TF1 *, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, Double_t, Double_t, Bool_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1Convolution::TF1Convolution(TString, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:49:4
    t.constructor<TString>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TString, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TString, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TString, Double_t, Double_t, Bool_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1Convolution::TF1Convolution(TString, TString, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:50:4
    t.constructor<TString, TString>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TString, TString, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TString, TString, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TString, TString, Double_t, Double_t, Bool_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1Convolution::TF1Convolution(const TF1Convolution &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:53:4
    t.constructor<const TF1Convolution &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TF1Convolution & TF1Convolution::operator=(const TF1Convolution &) (" __HERE__ ")");
    // signature to use in the veto list: TF1Convolution & TF1Convolution::operator=(const TF1Convolution &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:55:20
    t.method("assign", [](TF1Convolution& a, const TF1Convolution & arg0)->TF1Convolution & { return a.operator=(arg0); });
    t.method("assign", [](TF1Convolution* a, const TF1Convolution & arg0)->TF1Convolution & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:58:9
    t.method("SetParameters", [](TF1Convolution& a, const Double_t * arg0)->void { a.SetParameters(arg0); });
    t.method("SetParameters", [](TF1Convolution* a, const Double_t * arg0)->void { a->SetParameters(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:59:9
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1Convolution& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1Convolution* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:61:9
    t.method("SetRange", [](TF1Convolution& a, Double_t arg0, Double_t arg1)->void { a.SetRange(arg0, arg1); });
    t.method("SetRange", [](TF1Convolution* a, Double_t arg0, Double_t arg1)->void { a->SetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::SetExtraRange(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::SetExtraRange(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:62:9
    t.method("SetExtraRange", [](TF1Convolution& a, Double_t arg0)->void { a.SetExtraRange(arg0); });
    t.method("SetExtraRange", [](TF1Convolution* a, Double_t arg0)->void { a->SetExtraRange(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::SetNofPointsFFT(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::SetNofPointsFFT(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:63:9
    t.method("SetNofPointsFFT", [](TF1Convolution& a, Int_t arg0)->void { a.SetNofPointsFFT(arg0); });
    t.method("SetNofPointsFFT", [](TF1Convolution* a, Int_t arg0)->void { a->SetNofPointsFFT(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::SetNumConv(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::SetNumConv(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:64:9
    t.method("SetNumConv", [](TF1Convolution& a)->void { a.SetNumConv(); });
    t.method("SetNumConv", [](TF1Convolution& a, Bool_t arg0)->void { a.SetNumConv(arg0); });
    t.method("SetNumConv", [](TF1Convolution* a)->void { a->SetNumConv(); });
    t.method("SetNumConv", [](TF1Convolution* a, Bool_t arg0)->void { a->SetNumConv(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1Convolution::SetDefaultExtraRange(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Convolution::SetDefaultExtraRange(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:66:20
    module_.method("TF1Convolution!SetDefaultExtraRange", [](Double_t arg0)->Double_t { return TF1Convolution::SetDefaultExtraRange(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TF1Convolution::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1Convolution::GetNpar()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:68:10
    t.method("GetNpar", [](TF1Convolution const& a)->Int_t { return a.GetNpar(); });
    t.method("GetNpar", [](TF1Convolution const* a)->Int_t { return a->GetNpar(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1Convolution::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Convolution::GetXmin()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:69:13
    t.method("GetXmin", [](TF1Convolution const& a)->Double_t { return a.GetXmin(); });
    t.method("GetXmin", [](TF1Convolution const* a)->Double_t { return a->GetXmin(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1Convolution::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Convolution::GetXmax()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:70:13
    t.method("GetXmax", [](TF1Convolution const& a)->Double_t { return a.GetXmax(); });
    t.method("GetXmax", [](TF1Convolution const* a)->Double_t { return a->GetXmax(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Convolution::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Convolution::GetParName(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:71:16
    t.method("GetParName", [](TF1Convolution const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1Convolution const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::GetRange(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::GetRange(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:72:9
    t.method("GetRange", [](TF1Convolution const& a, Double_t & arg0, Double_t & arg1)->void { a.GetRange(arg0, arg1); });
    t.method("GetRange", [](TF1Convolution const* a, Double_t & arg0, Double_t & arg1)->void { a->GetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::Update()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:74:9
    t.method("Update", [](TF1Convolution& a)->void { a.Update(); });
    t.method("Update", [](TF1Convolution* a)->void { a->Update(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1Convolution::operator()(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Convolution::operator()(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:76:13
    t.method("paren", [](TF1Convolution& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.operator()(arg0, arg1); });
    t.method("paren", [](TF1Convolution* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->operator()(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:78:9
    t.method("Copy", [](TF1Convolution const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TF1Convolution const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TF1Convolution::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1Convolution::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!Class_Version", []()->Version_t { return TF1Convolution::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Convolution::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Convolution::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    t.method("IsA", [](TF1Convolution const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TF1Convolution const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    t.method("StreamerNVirtual", [](TF1Convolution& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TF1Convolution* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TF1Convolution::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Convolution::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!DeclFileName", []() { return (std::string)TF1Convolution::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1Convolution::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Convolution::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!ImplFileLine", []()->int { return TF1Convolution::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Convolution::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Convolution::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!ImplFileName", []() { return (std::string)TF1Convolution::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Convolution::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Convolution::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!Class_Name", []() { return (std::string)TF1Convolution::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Convolution::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Convolution::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!Dictionary", []()->TClass * { return TF1Convolution::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Convolution::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Convolution::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!Class", []()->TClass * { return TF1Convolution::Class(); });

    DEBUG_MSG("Adding wrapper for void TF1Convolution::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Convolution::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    t.method("Streamer", [](TF1Convolution& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TF1Convolution* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TF1Convolution::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Convolution::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1Convolution.h:80:4
    module_.method("TF1Convolution!DeclFileLine", []()->int { return TF1Convolution::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1Convolution>> type_;
};
std::shared_ptr<Wrapper> newJlTF1Convolution(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1Convolution(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1NormSum> : std::false_type { };
  template<> struct DefaultConstructible<TF1NormSum> : std::false_type { };
template<> struct SuperType<TF1NormSum> { typedef TF1AbsComposition type; };
}

// Class generating the wrapper for type TF1NormSum
// signature to use in the veto file: TF1NormSum
struct JlTF1NormSum: public Wrapper {

  JlTF1NormSum(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1NormSum (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:19:7
    jlcxx::TypeWrapper<TF1NormSum>  t = jlModule.add_type<TF1NormSum>("TF1NormSum",
      jlcxx::julia_base_type<TF1AbsComposition>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1NormSum>>(new jlcxx::TypeWrapper<TF1NormSum>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1NormSum::TF1NormSum(const std::vector<TF1 *> &, const std::vector<Double_t> &, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:37:4
    t.constructor<const std::vector<TF1 *> &, const std::vector<Double_t> &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const std::vector<TF1 *> &, const std::vector<Double_t> &, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1NormSum::TF1NormSum(TF1 *, TF1 *, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:38:4
    t.constructor<TF1 *, TF1 *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1NormSum::TF1NormSum(TF1 *, TF1 *, TF1 *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:39:4
    t.constructor<TF1 *, TF1 *, TF1 *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, TF1 *, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, TF1 *, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, TF1 *, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TF1 *, TF1 *, TF1 *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1NormSum::TF1NormSum(const TString &, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:40:4
    t.constructor<const TString &, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1NormSum::TF1NormSum(const TF1NormSum &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:43:4
    t.constructor<const TF1NormSum &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TF1NormSum & TF1NormSum::operator=(const TF1NormSum &) (" __HERE__ ")");
    // signature to use in the veto list: TF1NormSum & TF1NormSum::operator=(const TF1NormSum &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:45:16
    t.method("assign", [](TF1NormSum& a, const TF1NormSum & arg0)->TF1NormSum & { return a.operator=(arg0); });
    t.method("assign", [](TF1NormSum* a, const TF1NormSum & arg0)->TF1NormSum & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for double TF1NormSum::operator()(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: double TF1NormSum::operator()(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:49:11
    t.method("paren", [](TF1NormSum& a, const Double_t * arg0, const Double_t * arg1)->double { return a.operator()(arg0, arg1); });
    t.method("paren", [](TF1NormSum* a, const Double_t * arg0, const Double_t * arg1)->double { return a->operator()(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for std::vector<double> TF1NormSum::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<double> TF1NormSum::GetParameters()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:51:24
    t.method("GetParameters", [](TF1NormSum const& a)->std::vector<double> { return a.GetParameters(); });
    t.method("GetParameters", [](TF1NormSum const* a)->std::vector<double> { return a->GetParameters(); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::SetScale(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::SetScale(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:53:16
    t.method("SetScale", [](TF1NormSum& a, Double_t arg0)->void { a.SetScale(arg0); });
    t.method("SetScale", [](TF1NormSum* a, Double_t arg0)->void { a->SetScale(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:55:9
    t.method("SetParameters", [](TF1NormSum& a, const Double_t * arg0)->void { a.SetParameters(arg0); });
    t.method("SetParameters", [](TF1NormSum* a, const Double_t * arg0)->void { a->SetParameters(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:57:16
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1NormSum& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9, Double_t arg10)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1NormSum* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9, Double_t arg10)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:60:9
    t.method("SetRange", [](TF1NormSum& a, Double_t arg0, Double_t arg1)->void { a.SetRange(arg0, arg1); });
    t.method("SetRange", [](TF1NormSum* a, Double_t arg0, Double_t arg1)->void { a->SetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TF1NormSum::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1NormSum::GetNpar()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:62:16
    t.method("GetNpar", [](TF1NormSum const& a)->Int_t { return a.GetNpar(); });
    t.method("GetNpar", [](TF1NormSum const* a)->Int_t { return a->GetNpar(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1NormSum::GetScale() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1NormSum::GetScale()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:64:16
    t.method("GetScale", [](TF1NormSum const& a)->Double_t { return a.GetScale(); });
    t.method("GetScale", [](TF1NormSum const* a)->Double_t { return a->GetScale(); });

    DEBUG_MSG("Adding wrapper for const char * TF1NormSum::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1NormSum::GetParName(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:66:16
    t.method("GetParName", [](TF1NormSum const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1NormSum const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1NormSum::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1NormSum::GetXmin()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:68:13
    t.method("GetXmin", [](TF1NormSum const& a)->Double_t { return a.GetXmin(); });
    t.method("GetXmin", [](TF1NormSum const* a)->Double_t { return a->GetXmin(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1NormSum::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1NormSum::GetXmax()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:70:13
    t.method("GetXmax", [](TF1NormSum const& a)->Double_t { return a.GetXmax(); });
    t.method("GetXmax", [](TF1NormSum const* a)->Double_t { return a->GetXmax(); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::GetRange(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::GetRange(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:72:9
    t.method("GetRange", [](TF1NormSum const& a, Double_t & arg0, Double_t & arg1)->void { a.GetRange(arg0, arg1); });
    t.method("GetRange", [](TF1NormSum const* a, Double_t & arg0, Double_t & arg1)->void { a->GetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::Update()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:74:9
    t.method("Update", [](TF1NormSum& a)->void { a.Update(); });
    t.method("Update", [](TF1NormSum* a)->void { a->Update(); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:76:9
    t.method("Copy", [](TF1NormSum const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TF1NormSum const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TF1NormSum::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1NormSum::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!Class_Version", []()->Version_t { return TF1NormSum::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1NormSum::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1NormSum::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    t.method("IsA", [](TF1NormSum const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TF1NormSum const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    t.method("StreamerNVirtual", [](TF1NormSum& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TF1NormSum* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TF1NormSum::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1NormSum::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!DeclFileName", []() { return (std::string)TF1NormSum::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1NormSum::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1NormSum::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!ImplFileLine", []()->int { return TF1NormSum::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF1NormSum::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1NormSum::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!ImplFileName", []() { return (std::string)TF1NormSum::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1NormSum::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1NormSum::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!Class_Name", []() { return (std::string)TF1NormSum::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1NormSum::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1NormSum::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!Dictionary", []()->TClass * { return TF1NormSum::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1NormSum::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1NormSum::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!Class", []()->TClass * { return TF1NormSum::Class(); });

    DEBUG_MSG("Adding wrapper for void TF1NormSum::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1NormSum::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    t.method("Streamer", [](TF1NormSum& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TF1NormSum* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TF1NormSum::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1NormSum::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1NormSum.h:78:4
    module_.method("TF1NormSum!DeclFileLine", []()->int { return TF1NormSum::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1NormSum>> type_;
};
std::shared_ptr<Wrapper> newJlTF1NormSum(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1NormSum(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF3> : std::false_type { };
  template<> struct DefaultConstructible<TF3> : std::false_type { };
template<> struct SuperType<TF3> { typedef TF2 type; };
}

// Class generating the wrapper for type TF3
// signature to use in the veto file: TF3
struct JlTF3: public Wrapper {

  JlTF3(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF3 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:28:7
    jlcxx::TypeWrapper<TF3>  t = jlModule.add_type<TF3>("TF3",
      jlcxx::julia_base_type<TF2>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF3>>(new jlcxx::TypeWrapper<TF3>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF3::TF3(const char *, const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:38:4
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF3::TF3(const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Int_t, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:42:4
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *)>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Int_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF3::TF3(const TF3 &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:80:4
    t.constructor<const TF3 &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TF3 & TF3::operator=(const TF3 &) (" __HERE__ ")");
    // signature to use in the veto list: TF3 & TF3::operator=(const TF3 &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:81:9
    t.method("assign", [](TF3& a, const TF3 & arg0)->TF3 & { return a.operator=(arg0); });
    t.method("assign", [](TF3* a, const TF3 & arg0)->TF3 & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void TF3::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:83:13
    t.method("Copy", [](TF3 const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TF3 const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TF3::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF3::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:84:13
    t.method("DistancetoPrimitive", [](TF3& a, Int_t arg0, Int_t arg1)->Int_t { return a.DistancetoPrimitive(arg0, arg1); });
    t.method("DistancetoPrimitive", [](TF3* a, Int_t arg0, Int_t arg1)->Int_t { return a->DistancetoPrimitive(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF3::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:85:13
    t.method("Draw", [](TF3& a)->void { a.Draw(); });
    t.method("Draw", [](TF3& a, Option_t * arg0)->void { a.Draw(arg0); });
    t.method("Draw", [](TF3* a)->void { a->Draw(); });
    t.method("Draw", [](TF3* a, Option_t * arg0)->void { a->Draw(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TF3::DrawDerivative(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF3::DrawDerivative(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:86:13
    t.method("DrawDerivative", [](TF3& a)->TObject * { return a.DrawDerivative(); });
    t.method("DrawDerivative", [](TF3& a, Option_t * arg0)->TObject * { return a.DrawDerivative(arg0); });
    t.method("DrawDerivative", [](TF3* a)->TObject * { return a->DrawDerivative(); });
    t.method("DrawDerivative", [](TF3* a, Option_t * arg0)->TObject * { return a->DrawDerivative(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TF3::DrawIntegral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF3::DrawIntegral(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:87:13
    t.method("DrawIntegral", [](TF3& a)->TObject * { return a.DrawIntegral(); });
    t.method("DrawIntegral", [](TF3& a, Option_t * arg0)->TObject * { return a.DrawIntegral(arg0); });
    t.method("DrawIntegral", [](TF3* a)->TObject * { return a->DrawIntegral(); });
    t.method("DrawIntegral", [](TF3* a, Option_t * arg0)->TObject * { return a->DrawIntegral(arg0); });

    DEBUG_MSG("Adding wrapper for void TF3::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:88:13
    t.method("ExecuteEvent", [](TF3& a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a.ExecuteEvent(arg0, arg1, arg2); });
    t.method("ExecuteEvent", [](TF3* a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a->ExecuteEvent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::GetMinimumXYZ(Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::GetMinimumXYZ(Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:89:21
    t.method("GetMinimumXYZ", [](TF3& a, Double_t & arg0, Double_t & arg1, Double_t & arg2)->Double_t { return a.GetMinimumXYZ(arg0, arg1, arg2); });
    t.method("GetMinimumXYZ", [](TF3* a, Double_t & arg0, Double_t & arg1, Double_t & arg2)->Double_t { return a->GetMinimumXYZ(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::GetMaximumXYZ(Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::GetMaximumXYZ(Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:90:21
    t.method("GetMaximumXYZ", [](TF3& a, Double_t & arg0, Double_t & arg1, Double_t & arg2)->Double_t { return a.GetMaximumXYZ(arg0, arg1, arg2); });
    t.method("GetMaximumXYZ", [](TF3* a, Double_t & arg0, Double_t & arg1, Double_t & arg2)->Double_t { return a->GetMaximumXYZ(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TF3::GetNpz() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF3::GetNpz()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:91:21
    t.method("GetNpz", [](TF3 const& a)->Int_t { return a.GetNpz(); });
    t.method("GetNpz", [](TF3 const* a)->Int_t { return a->GetNpz(); });

    DEBUG_MSG("Adding wrapper for void TF3::GetRandom3(Double_t &, Double_t &, Double_t &, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::GetRandom3(Double_t &, Double_t &, Double_t &, TRandom *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:92:21
    t.method("GetRandom3", [](TF3& a, Double_t & arg0, Double_t & arg1, Double_t & arg2)->void { a.GetRandom3(arg0, arg1, arg2); });
    t.method("GetRandom3", [](TF3& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, TRandom * arg3)->void { a.GetRandom3(arg0, arg1, arg2, arg3); });
    t.method("GetRandom3", [](TF3* a, Double_t & arg0, Double_t & arg1, Double_t & arg2)->void { a->GetRandom3(arg0, arg1, arg2); });
    t.method("GetRandom3", [](TF3* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, TRandom * arg3)->void { a->GetRandom3(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF3::GetRange(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::GetRange(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:94:13
    t.method("GetRange", [](TF3 const& a, Double_t & arg0, Double_t & arg1)->void { a.GetRange(arg0, arg1); });
    t.method("GetRange", [](TF3 const* a, Double_t & arg0, Double_t & arg1)->void { a->GetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF3::GetRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::GetRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:95:13
    t.method("GetRange", [](TF3 const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a.GetRange(arg0, arg1, arg2, arg3); });
    t.method("GetRange", [](TF3 const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a->GetRange(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF3::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:96:13
    t.method("GetRange", [](TF3 const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4, Double_t & arg5)->void { a.GetRange(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetRange", [](TF3 const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4, Double_t & arg5)->void { a->GetRange(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::GetSave(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::GetSave(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:97:13
    t.method("GetSave", [](TF3& a, const Double_t * arg0)->Double_t { return a.GetSave(arg0); });
    t.method("GetSave", [](TF3* a, const Double_t * arg0)->Double_t { return a->GetSave(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::GetZmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::GetZmin()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:98:21
    t.method("GetZmin", [](TF3 const& a)->Double_t { return a.GetZmin(); });
    t.method("GetZmin", [](TF3 const* a)->Double_t { return a->GetZmin(); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::GetZmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::GetZmax()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:99:21
    t.method("GetZmax", [](TF3 const& a)->Double_t { return a.GetZmax(); });
    t.method("GetZmax", [](TF3 const* a)->Double_t { return a->GetZmax(); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Integral(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Integral(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:101:21
    t.method("Integral", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Integral(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Integral", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Integral(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Integral", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Integral(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Integral", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Integral(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Bool_t TF3::IsInside(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF3::IsInside(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:102:13
    t.method("IsInside", [](TF3 const& a, const Double_t * arg0)->Bool_t { return a.IsInside(arg0); });
    t.method("IsInside", [](TF3 const* a, const Double_t * arg0)->Bool_t { return a->IsInside(arg0); });

    DEBUG_MSG("Adding wrapper for TH1 * TF3::CreateHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF3::CreateHistogram()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:103:13
    t.method("CreateHistogram", [](TF3& a)->TH1 * { return a.CreateHistogram(); });
    t.method("CreateHistogram", [](TF3* a)->TH1 * { return a->CreateHistogram(); });

    DEBUG_MSG("Adding wrapper for void TF3::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:104:13
    t.method("Paint", [](TF3& a)->void { a.Paint(); });
    t.method("Paint", [](TF3& a, Option_t * arg0)->void { a.Paint(arg0); });
    t.method("Paint", [](TF3* a)->void { a->Paint(); });
    t.method("Paint", [](TF3* a, Option_t * arg0)->void { a->Paint(arg0); });

    DEBUG_MSG("Adding wrapper for void TF3::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:105:13
    t.method("Save", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.Save(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Save", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->Save(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TF3::SetClippingBoxOff() (" __HERE__ ")");
    // signature to use in the veto list: void TF3::SetClippingBoxOff()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:107:21
    t.method("SetClippingBoxOff", [](TF3& a)->void { a.SetClippingBoxOff(); });
    t.method("SetClippingBoxOff", [](TF3* a)->void { a->SetClippingBoxOff(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF3::GetClippingBoxOn() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF3::GetClippingBoxOn()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:108:21
    t.method("GetClippingBoxOn", [](TF3 const& a)->Bool_t { return a.GetClippingBoxOn(); });
    t.method("GetClippingBoxOn", [](TF3 const* a)->Bool_t { return a->GetClippingBoxOn(); });

    DEBUG_MSG("Adding wrapper for void TF3::SetClippingBoxOn(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::SetClippingBoxOn(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:109:21
    t.method("SetClippingBoxOn", [](TF3& a)->void { a.SetClippingBoxOn(); });
    t.method("SetClippingBoxOn", [](TF3& a, Double_t arg0)->void { a.SetClippingBoxOn(arg0); });
    t.method("SetClippingBoxOn", [](TF3& a, Double_t arg0, Double_t arg1)->void { a.SetClippingBoxOn(arg0, arg1); });
    t.method("SetClippingBoxOn", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetClippingBoxOn(arg0, arg1, arg2); });
    t.method("SetClippingBoxOn", [](TF3* a)->void { a->SetClippingBoxOn(); });
    t.method("SetClippingBoxOn", [](TF3* a, Double_t arg0)->void { a->SetClippingBoxOn(arg0); });
    t.method("SetClippingBoxOn", [](TF3* a, Double_t arg0, Double_t arg1)->void { a->SetClippingBoxOn(arg0, arg1); });
    t.method("SetClippingBoxOn", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetClippingBoxOn(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const Double_t * TF3::GetClippingBox() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF3::GetClippingBox()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:110:28
    t.method("GetClippingBox", [](TF3 const& a)->const Double_t * { return a.GetClippingBox(); });
    t.method("GetClippingBox", [](TF3 const* a)->const Double_t * { return a->GetClippingBox(); });

    DEBUG_MSG("Adding wrapper for void TF3::SetNpz(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::SetNpz(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:111:21
    t.method("SetNpz", [](TF3& a)->void { a.SetNpz(); });
    t.method("SetNpz", [](TF3& a, Int_t arg0)->void { a.SetNpz(arg0); });
    t.method("SetNpz", [](TF3* a)->void { a->SetNpz(); });
    t.method("SetNpz", [](TF3* a, Int_t arg0)->void { a->SetNpz(arg0); });

    DEBUG_MSG("Adding wrapper for void TF3::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:112:13
    t.method("SetRange", [](TF3& a, Double_t arg0, Double_t arg1)->void { a.SetRange(arg0, arg1); });
    t.method("SetRange", [](TF3* a, Double_t arg0, Double_t arg1)->void { a->SetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF3::SetRange(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::SetRange(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:113:13
    t.method("SetRange", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetRange(arg0, arg1, arg2, arg3); });
    t.method("SetRange", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetRange(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF3::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:114:13
    t.method("SetRange", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetRange(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetRange", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetRange(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Moment3(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Moment3(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:117:21
    t.method("Moment3", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->Double_t { return a.Moment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("Moment3", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->Double_t { return a.Moment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("Moment3", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->Double_t { return a->Moment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("Moment3", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->Double_t { return a->Moment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::CentralMoment3(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::CentralMoment3(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:118:21
    t.method("CentralMoment3", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->Double_t { return a.CentralMoment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("CentralMoment3", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->Double_t { return a.CentralMoment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("CentralMoment3", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->Double_t { return a->CentralMoment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("CentralMoment3", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->Double_t { return a->CentralMoment3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Mean3X(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Mean3X(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:120:21
    t.method("Mean3X", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Mean3X(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Mean3X", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Mean3X(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Mean3X", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Mean3X(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Mean3X", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Mean3X(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Mean3Y(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Mean3Y(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:121:21
    t.method("Mean3Y", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Mean3Y(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Mean3Y", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Mean3Y(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Mean3Y", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Mean3Y(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Mean3Y", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Mean3Y(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Mean3Z(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Mean3Z(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:122:21
    t.method("Mean3Z", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Mean3Z(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Mean3Z", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Mean3Z(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Mean3Z", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Mean3Z(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Mean3Z", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Mean3Z(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Variance3X(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Variance3X(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:124:21
    t.method("Variance3X", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Variance3X(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Variance3X", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Variance3X(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Variance3X", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Variance3X(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Variance3X", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Variance3X(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Variance3Y(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Variance3Y(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:125:21
    t.method("Variance3Y", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Variance3Y(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Variance3Y", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Variance3Y(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Variance3Y", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Variance3Y(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Variance3Y", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Variance3Y(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Variance3Z(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Variance3Z(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:126:21
    t.method("Variance3Z", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Variance3Z(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Variance3Z", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Variance3Z(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Variance3Z", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Variance3Z(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Variance3Z", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Variance3Z(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Covariance3XY(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Covariance3XY(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:128:21
    t.method("Covariance3XY", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Covariance3XY(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Covariance3XY", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Covariance3XY(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Covariance3XY", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Covariance3XY(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Covariance3XY", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Covariance3XY(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Covariance3XZ(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Covariance3XZ(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:129:21
    t.method("Covariance3XZ", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Covariance3XZ(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Covariance3XZ", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Covariance3XZ(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Covariance3XZ", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Covariance3XZ(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Covariance3XZ", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Covariance3XZ(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF3::Covariance3YZ(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF3::Covariance3YZ(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:130:21
    t.method("Covariance3YZ", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Covariance3YZ(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Covariance3YZ", [](TF3& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Covariance3YZ(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Covariance3YZ", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Covariance3YZ(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Covariance3YZ", [](TF3* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Covariance3YZ(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Version_t TF3::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF3::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!Class_Version", []()->Version_t { return TF3::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF3::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF3::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    t.method("IsA", [](TF3 const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TF3 const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TF3::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    t.method("StreamerNVirtual", [](TF3& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TF3* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TF3::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF3::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!DeclFileName", []() { return (std::string)TF3::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF3::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF3::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!ImplFileLine", []()->int { return TF3::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF3::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF3::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!ImplFileName", []() { return (std::string)TF3::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF3::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF3::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!Class_Name", []() { return (std::string)TF3::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF3::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF3::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!Dictionary", []()->TClass * { return TF3::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF3::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF3::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!Class", []()->TClass * { return TF3::Class(); });

    DEBUG_MSG("Adding wrapper for void TF3::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF3::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    t.method("Streamer", [](TF3& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TF3* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TF3::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF3::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF3.h:136:4
    module_.method("TF3!DeclFileLine", []()->int { return TF3::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF3>> type_;
};
std::shared_ptr<Wrapper> newJlTF3(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF3(module));
}

namespace jlcxx {

  template<typename Element>
  struct BuildParameterList<TMatrixTSym<Element>>
  {
    typedef ParameterList<Element> type;
  };

  template<typename Element> struct IsMirroredType<TMatrixTSym<Element>> : std::false_type { };
  template<typename Element> struct DefaultConstructible<TMatrixTSym<Element>> : std::false_type { };
}

// Class generating the wrapper for type TMatrixTSym
// signature to use in the veto file: TMatrixTSym
struct JlTMatrixTSym: public Wrapper {

  JlTMatrixTSym(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TMatrixTSym (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TMatrixT.h:35:31
    jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>  t =  jlModule.add_type<jlcxx::Parametric<jlcxx::TypeVar<1>>>("TMatrixTSym");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>>(new jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>(jlModule, t));
    t.constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
    auto t182_decl_methods = [this]<typename Element> (jlcxx::TypeWrapper<TMatrixTSym<Element>> wrapped){
      auto module_ = this->module_;
      wrapped.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
    };
    t.apply<TMatrixTSym<double>>(t182_decl_methods);
  }

  void add_methods() const{
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>> type_;
};
std::shared_ptr<Wrapper> newJlTMatrixTSym(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTMatrixTSym(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFractionFitter> : std::false_type { };
  template<> struct DefaultConstructible<TFractionFitter> : std::false_type { };
template<> struct SuperType<TFractionFitter> { typedef TObject type; };
}

// Class generating the wrapper for type TFractionFitter
// signature to use in the veto file: TFractionFitter
struct JlTFractionFitter: public Wrapper {

  JlTFractionFitter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFractionFitter (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:27:7
    jlcxx::TypeWrapper<TFractionFitter>  t = jlModule.add_type<TFractionFitter>("TFractionFitter",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFractionFitter>>(new jlcxx::TypeWrapper<TFractionFitter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFractionFitter::TFractionFitter(TH1 *, TObjArray *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:30:4
    t.constructor<TH1 *, TObjArray *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<TH1 *, TObjArray *, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for ROOT::Fit::Fitter * TFractionFitter::GetFitter() (" __HERE__ ")");
    // signature to use in the veto list: ROOT::Fit::Fitter * TFractionFitter::GetFitter()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:34:23
    t.method("GetFitter", [](TFractionFitter const& a)->ROOT::Fit::Fitter * { return a.GetFitter(); });
    t.method("GetFitter", [](TFractionFitter const* a)->ROOT::Fit::Fitter * { return a->GetFitter(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::ErrorAnalysis(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::ErrorAnalysis(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:35:9
    t.method("ErrorAnalysis", [](TFractionFitter& a, Double_t arg0)->void { a.ErrorAnalysis(arg0); });
    t.method("ErrorAnalysis", [](TFractionFitter* a, Double_t arg0)->void { a->ErrorAnalysis(arg0); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::SetRangeX(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::SetRangeX(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:36:9
    t.method("SetRangeX", [](TFractionFitter& a, Int_t arg0, Int_t arg1)->void { a.SetRangeX(arg0, arg1); });
    t.method("SetRangeX", [](TFractionFitter* a, Int_t arg0, Int_t arg1)->void { a->SetRangeX(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::ReleaseRangeX() (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::ReleaseRangeX()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:37:9
    t.method("ReleaseRangeX", [](TFractionFitter& a)->void { a.ReleaseRangeX(); });
    t.method("ReleaseRangeX", [](TFractionFitter* a)->void { a->ReleaseRangeX(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::SetRangeY(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::SetRangeY(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:38:9
    t.method("SetRangeY", [](TFractionFitter& a, Int_t arg0, Int_t arg1)->void { a.SetRangeY(arg0, arg1); });
    t.method("SetRangeY", [](TFractionFitter* a, Int_t arg0, Int_t arg1)->void { a->SetRangeY(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::ReleaseRangeY() (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::ReleaseRangeY()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:39:9
    t.method("ReleaseRangeY", [](TFractionFitter& a)->void { a.ReleaseRangeY(); });
    t.method("ReleaseRangeY", [](TFractionFitter* a)->void { a->ReleaseRangeY(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::SetRangeZ(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::SetRangeZ(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:40:9
    t.method("SetRangeZ", [](TFractionFitter& a, Int_t arg0, Int_t arg1)->void { a.SetRangeZ(arg0, arg1); });
    t.method("SetRangeZ", [](TFractionFitter* a, Int_t arg0, Int_t arg1)->void { a->SetRangeZ(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::ReleaseRangeZ() (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::ReleaseRangeZ()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:41:9
    t.method("ReleaseRangeZ", [](TFractionFitter& a)->void { a.ReleaseRangeZ(); });
    t.method("ReleaseRangeZ", [](TFractionFitter* a)->void { a->ReleaseRangeZ(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::ExcludeBin(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::ExcludeBin(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:42:9
    t.method("ExcludeBin", [](TFractionFitter& a, Int_t arg0)->void { a.ExcludeBin(arg0); });
    t.method("ExcludeBin", [](TFractionFitter* a, Int_t arg0)->void { a->ExcludeBin(arg0); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::IncludeBin(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::IncludeBin(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:43:9
    t.method("IncludeBin", [](TFractionFitter& a, Int_t arg0)->void { a.IncludeBin(arg0); });
    t.method("IncludeBin", [](TFractionFitter* a, Int_t arg0)->void { a->IncludeBin(arg0); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::Constrain(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::Constrain(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:44:9
    t.method("Constrain", [](TFractionFitter& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.Constrain(arg0, arg1, arg2); });
    t.method("Constrain", [](TFractionFitter* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->Constrain(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::UnConstrain(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::UnConstrain(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:45:9
    t.method("UnConstrain", [](TFractionFitter& a, Int_t arg0)->void { a.UnConstrain(arg0); });
    t.method("UnConstrain", [](TFractionFitter* a, Int_t arg0)->void { a->UnConstrain(arg0); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::SetData(TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::SetData(TH1 *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:46:9
    t.method("SetData", [](TFractionFitter& a, TH1 * arg0)->void { a.SetData(arg0); });
    t.method("SetData", [](TFractionFitter* a, TH1 * arg0)->void { a->SetData(arg0); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::SetMC(Int_t, TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::SetMC(Int_t, TH1 *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:47:9
    t.method("SetMC", [](TFractionFitter& a, Int_t arg0, TH1 * arg1)->void { a.SetMC(arg0, arg1); });
    t.method("SetMC", [](TFractionFitter* a, Int_t arg0, TH1 * arg1)->void { a->SetMC(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::SetWeight(Int_t, TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::SetWeight(Int_t, TH1 *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:48:9
    t.method("SetWeight", [](TFractionFitter& a, Int_t arg0, TH1 * arg1)->void { a.SetWeight(arg0, arg1); });
    t.method("SetWeight", [](TFractionFitter* a, Int_t arg0, TH1 * arg1)->void { a->SetWeight(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TFitResultPtr TFractionFitter::Fit() (" __HERE__ ")");
    // signature to use in the veto list: TFitResultPtr TFractionFitter::Fit()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:49:18
    t.method("Fit", [](TFractionFitter& a)->TFitResultPtr { return a.Fit(); });
    t.method("Fit", [](TFractionFitter* a)->TFitResultPtr { return a->Fit(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::GetResult(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::GetResult(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:51:9
    t.method("GetResult", [](TFractionFitter const& a, Int_t arg0, Double_t & arg1, Double_t & arg2)->void { a.GetResult(arg0, arg1, arg2); });
    t.method("GetResult", [](TFractionFitter const* a, Int_t arg0, Double_t & arg1, Double_t & arg2)->void { a->GetResult(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TH1 * TFractionFitter::GetPlot() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TFractionFitter::GetPlot()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:52:9
    t.method("GetPlot", [](TFractionFitter& a)->TH1 * { return a.GetPlot(); });
    t.method("GetPlot", [](TFractionFitter* a)->TH1 * { return a->GetPlot(); });

    DEBUG_MSG("Adding wrapper for Double_t TFractionFitter::GetChisquare() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFractionFitter::GetChisquare()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:58:13
    t.method("GetChisquare", [](TFractionFitter const& a)->Double_t { return a.GetChisquare(); });
    t.method("GetChisquare", [](TFractionFitter const* a)->Double_t { return a->GetChisquare(); });

    DEBUG_MSG("Adding wrapper for Int_t TFractionFitter::GetNDF() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFractionFitter::GetNDF()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:59:10
    t.method("GetNDF", [](TFractionFitter const& a)->Int_t { return a.GetNDF(); });
    t.method("GetNDF", [](TFractionFitter const* a)->Int_t { return a->GetNDF(); });

    DEBUG_MSG("Adding wrapper for Double_t TFractionFitter::GetProb() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFractionFitter::GetProb()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:60:13
    t.method("GetProb", [](TFractionFitter const& a)->Double_t { return a.GetProb(); });
    t.method("GetProb", [](TFractionFitter const* a)->Double_t { return a->GetProb(); });

    DEBUG_MSG("Adding wrapper for TH1 * TFractionFitter::GetMCPrediction(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TFractionFitter::GetMCPrediction(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:63:9
    t.method("GetMCPrediction", [](TFractionFitter const& a, Int_t arg0)->TH1 * { return a.GetMCPrediction(arg0); });
    t.method("GetMCPrediction", [](TFractionFitter const* a, Int_t arg0)->TH1 * { return a->GetMCPrediction(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TFractionFitter::EvaluateFCN(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFractionFitter::EvaluateFCN(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:66:13
    t.method("EvaluateFCN", [](TFractionFitter& a, const Double_t * arg0)->Double_t { return a.EvaluateFCN(arg0); });
    t.method("EvaluateFCN", [](TFractionFitter* a, const Double_t * arg0)->Double_t { return a->EvaluateFCN(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TFractionFitter::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TFractionFitter::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!Class_Version", []()->Version_t { return TFractionFitter::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TFractionFitter::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFractionFitter::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    t.method("IsA", [](TFractionFitter const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TFractionFitter const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    t.method("StreamerNVirtual", [](TFractionFitter& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TFractionFitter* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TFractionFitter::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFractionFitter::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!DeclFileName", []() { return (std::string)TFractionFitter::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TFractionFitter::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFractionFitter::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!ImplFileLine", []()->int { return TFractionFitter::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TFractionFitter::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFractionFitter::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!ImplFileName", []() { return (std::string)TFractionFitter::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TFractionFitter::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFractionFitter::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!Class_Name", []() { return (std::string)TFractionFitter::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TFractionFitter::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFractionFitter::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!Dictionary", []()->TClass * { return TFractionFitter::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TFractionFitter::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFractionFitter::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!Class", []()->TClass * { return TFractionFitter::Class(); });

    DEBUG_MSG("Adding wrapper for void TFractionFitter::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFractionFitter::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    t.method("Streamer", [](TFractionFitter& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TFractionFitter* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TFractionFitter::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFractionFitter::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFractionFitter.h:112:4
    module_.method("TFractionFitter!DeclFileLine", []()->int { return TFractionFitter::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFractionFitter>> type_;
};
std::shared_ptr<Wrapper> newJlTFractionFitter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFractionFitter(module));
}
