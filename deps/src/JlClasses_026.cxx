// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGraphMultiErrors> : std::false_type { };
  template<> struct DefaultConstructible<TGraphMultiErrors> : std::false_type { };
template<> struct SuperType<TGraphMultiErrors> { typedef TGraph type; };
}

// Class generating the wrapper for type TGraphMultiErrors
// signature to use in the veto file: TGraphMultiErrors
struct JlTGraphMultiErrors: public Wrapper {

  JlTGraphMultiErrors(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraphMultiErrors (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:29:7
    jlcxx::TypeWrapper<TGraphMultiErrors>  t = jlModule.add_type<TGraphMultiErrors>("TGraphMultiErrors",
      jlcxx::julia_base_type<TGraph>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraphMultiErrors>>(new jlcxx::TypeWrapper<TGraphMultiErrors>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:64:4
    t.constructor<const Char_t *, const Char_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:65:4
    t.constructor<Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np")    );
    t.constructor<Int_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:66:4
    t.constructor<const Char_t *, const Char_t *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:68:4
    t.constructor<Int_t, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y")    );
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL")    );
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH")    );
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL")    );
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:71:4
    t.constructor<const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:74:4
    t.constructor<Int_t, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y")    );
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL")    );
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH")    );
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL")    );
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:77:4
    t.constructor<const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<std::vector<Float_t>>, std::vector<std::vector<Float_t>>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:81:4
    t.constructor<Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<std::vector<Float_t>>, std::vector<std::vector<Float_t>>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<std::vector<Float_t>>, std::vector<std::vector<Float_t>>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<std::vector<Float_t>>, std::vector<std::vector<Float_t>>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:84:4
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<std::vector<Float_t>>, std::vector<std::vector<Float_t>>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<std::vector<Float_t>>, std::vector<std::vector<Float_t>>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<std::vector<Double_t>>, std::vector<std::vector<Double_t>>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:87:4
    t.constructor<Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<std::vector<Double_t>>, std::vector<std::vector<Double_t>>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<std::vector<Double_t>>, std::vector<std::vector<Double_t>>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<std::vector<Double_t>>, std::vector<std::vector<Double_t>>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:90:4
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<std::vector<Double_t>>, std::vector<std::vector<Double_t>>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<std::vector<Double_t>>, std::vector<std::vector<Double_t>>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<TArrayF>, std::vector<TArrayF>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:94:4
    t.constructor<Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<TArrayF>, std::vector<TArrayF>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<TArrayF>, std::vector<TArrayF>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<TArrayF>, std::vector<TArrayF>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:96:4
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<TArrayF>, std::vector<TArrayF>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, std::vector<TArrayF>, std::vector<TArrayF>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<TArrayD>, std::vector<TArrayD>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:99:4
    t.constructor<Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<TArrayD>, std::vector<TArrayD>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<TArrayD>, std::vector<TArrayD>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const Char_t *, const Char_t *, Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<TArrayD>, std::vector<TArrayD>, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:101:4
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<TArrayD>, std::vector<TArrayD>>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH")    );
    t.constructor<const Char_t *, const Char_t *, Int_t, Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, std::vector<TArrayD>, std::vector<TArrayD>, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("np"), jlcxx::arg("ne"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:107:4
    t.constructor<const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("tvX"), jlcxx::arg("tvY"), jlcxx::arg("tvExL"), jlcxx::arg("tvExH"), jlcxx::arg("tvEyL"), jlcxx::arg("tvEyH")    );
    t.constructor<const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("tvX"), jlcxx::arg("tvY"), jlcxx::arg("tvExL"), jlcxx::arg("tvExH"), jlcxx::arg("tvEyL"), jlcxx::arg("tvEyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(Int_t, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD *, const TVectorD *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:112:4
    t.constructor<Int_t, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD *, const TVectorD *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("ne"), jlcxx::arg("tvX"), jlcxx::arg("tvY"), jlcxx::arg("tvExL"), jlcxx::arg("tvExH"), jlcxx::arg("tvEyL"), jlcxx::arg("tvEyH")    );
    t.constructor<Int_t, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD *, const TVectorD *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("ne"), jlcxx::arg("tvX"), jlcxx::arg("tvY"), jlcxx::arg("tvExL"), jlcxx::arg("tvExH"), jlcxx::arg("tvEyL"), jlcxx::arg("tvEyH"), jlcxx::arg("m")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const TGraphMultiErrors &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:115:4
    t.constructor<const TGraphMultiErrors &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("tgme")    );

    DEBUG_MSG("Adding wrapper for TGraphMultiErrors & TGraphMultiErrors::operator=(const TGraphMultiErrors &) (" __HERE__ ")");
    // signature to use in the veto list: TGraphMultiErrors & TGraphMultiErrors::operator=(const TGraphMultiErrors &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:116:23
    t.method("assign", [](TGraphMultiErrors& a, const TGraphMultiErrors & arg0)->TGraphMultiErrors & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("tgme"));
    t.method("assign", [](TGraphMultiErrors* a, const TGraphMultiErrors & arg0)->TGraphMultiErrors & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("tgme"));


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const TH1 *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:118:4
    t.constructor<const TH1 *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("th")    );
    t.constructor<const TH1 *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("th"), jlcxx::arg("ne")    );


    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::TGraphMultiErrors(const TH1 *, const TH1 *, Int_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:119:4
    t.constructor<const TH1 *, const TH1 *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total")    );
    t.constructor<const TH1 *, const TH1 *, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"), jlcxx::arg("ne")    );
    t.constructor<const TH1 *, const TH1 *, Int_t, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"), jlcxx::arg("ne"), jlcxx::arg("option")    );

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::AddYError(Int_t, const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::AddYError(Int_t, const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:123:17
    t.method("AddYError", [](TGraphMultiErrors& a, Int_t arg0)->void { a.AddYError(arg0); }, jlcxx::arg("this"), jlcxx::arg("np"));
    t.method("AddYError", [](TGraphMultiErrors& a, Int_t arg0, const Double_t * arg1)->void { a.AddYError(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("eyL"));
    t.method("AddYError", [](TGraphMultiErrors& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->void { a.AddYError(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));
    t.method("AddYError", [](TGraphMultiErrors* a, Int_t arg0)->void { a->AddYError(arg0); }, jlcxx::arg("this"), jlcxx::arg("np"));
    t.method("AddYError", [](TGraphMultiErrors* a, Int_t arg0, const Double_t * arg1)->void { a->AddYError(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("eyL"));
    t.method("AddYError", [](TGraphMultiErrors* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->void { a->AddYError(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("np"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::Apply(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::Apply(TF1 *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:124:9
    t.method("Apply", [](TGraphMultiErrors& a, TF1 * arg0)->void { a.Apply(arg0); }, jlcxx::arg("this"), jlcxx::arg("f"));
    t.method("Apply", [](TGraphMultiErrors* a, TF1 * arg0)->void { a->Apply(arg0); }, jlcxx::arg("this"), jlcxx::arg("f"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::BayesDivide(const TH1 *, const TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::BayesDivide(const TH1 *, const TH1 *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:125:17
    t.method("BayesDivide", [](TGraphMultiErrors& a, const TH1 * arg0, const TH1 * arg1)->void { a.BayesDivide(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"));
    t.method("BayesDivide", [](TGraphMultiErrors& a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a.BayesDivide(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"), jlcxx::arg("opt"));
    t.method("BayesDivide", [](TGraphMultiErrors* a, const TH1 * arg0, const TH1 * arg1)->void { a->BayesDivide(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"));
    t.method("BayesDivide", [](TGraphMultiErrors* a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a->BayesDivide(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"), jlcxx::arg("opt"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::Divide(const TH1 *, const TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::Divide(const TH1 *, const TH1 *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:126:9
    t.method("Divide", [](TGraphMultiErrors& a, const TH1 * arg0, const TH1 * arg1)->void { a.Divide(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"));
    t.method("Divide", [](TGraphMultiErrors& a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a.Divide(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"), jlcxx::arg("opt"));
    t.method("Divide", [](TGraphMultiErrors* a, const TH1 * arg0, const TH1 * arg1)->void { a->Divide(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"));
    t.method("Divide", [](TGraphMultiErrors* a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a->Divide(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("pass"), jlcxx::arg("total"), jlcxx::arg("opt"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:127:9
    t.method("ComputeRange", [](TGraphMultiErrors const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a.ComputeRange(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"));
    t.method("ComputeRange", [](TGraphMultiErrors const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a->ComputeRange(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::DeleteYError(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::DeleteYError(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:128:17
    t.method("DeleteYError", [](TGraphMultiErrors& a, Int_t arg0)->void { a.DeleteYError(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("DeleteYError", [](TGraphMultiErrors* a, Int_t arg0)->void { a->DeleteYError(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorX(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:130:13
    t.method("GetErrorX", [](TGraphMultiErrors const& a, Int_t arg0)->Double_t { return a.GetErrorX(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetErrorX", [](TGraphMultiErrors const* a, Int_t arg0)->Double_t { return a->GetErrorX(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorY(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:131:13
    t.method("GetErrorY", [](TGraphMultiErrors const& a, Int_t arg0)->Double_t { return a.GetErrorY(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetErrorY", [](TGraphMultiErrors const* a, Int_t arg0)->Double_t { return a->GetErrorY(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorY(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorY(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:132:21
    t.method("GetErrorY", [](TGraphMultiErrors const& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetErrorY(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"));
    t.method("GetErrorY", [](TGraphMultiErrors const* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetErrorY(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorXlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorXlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:134:13
    t.method("GetErrorXlow", [](TGraphMultiErrors const& a, Int_t arg0)->Double_t { return a.GetErrorXlow(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetErrorXlow", [](TGraphMultiErrors const* a, Int_t arg0)->Double_t { return a->GetErrorXlow(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorXhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorXhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:135:13
    t.method("GetErrorXhigh", [](TGraphMultiErrors const& a, Int_t arg0)->Double_t { return a.GetErrorXhigh(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetErrorXhigh", [](TGraphMultiErrors const* a, Int_t arg0)->Double_t { return a->GetErrorXhigh(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorYlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorYlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:136:13
    t.method("GetErrorYlow", [](TGraphMultiErrors const& a, Int_t arg0)->Double_t { return a.GetErrorYlow(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetErrorYlow", [](TGraphMultiErrors const* a, Int_t arg0)->Double_t { return a->GetErrorYlow(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorYhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorYhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:137:13
    t.method("GetErrorYhigh", [](TGraphMultiErrors const& a, Int_t arg0)->Double_t { return a.GetErrorYhigh(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetErrorYhigh", [](TGraphMultiErrors const* a, Int_t arg0)->Double_t { return a->GetErrorYhigh(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorYlow(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorYlow(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:138:21
    t.method("GetErrorYlow", [](TGraphMultiErrors const& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetErrorYlow(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"));
    t.method("GetErrorYlow", [](TGraphMultiErrors const* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetErrorYlow(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphMultiErrors::GetErrorYhigh(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphMultiErrors::GetErrorYhigh(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:139:21
    t.method("GetErrorYhigh", [](TGraphMultiErrors const& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetErrorYhigh(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"));
    t.method("GetErrorYhigh", [](TGraphMultiErrors const* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetErrorYhigh(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphMultiErrors::GetEXlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphMultiErrors::GetEXlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:141:14
    t.method("GetEXlow", [](TGraphMultiErrors const& a)->Double_t * { return a.GetEXlow(); }, jlcxx::arg("this"));
    t.method("GetEXlow", [](TGraphMultiErrors const* a)->Double_t * { return a->GetEXlow(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphMultiErrors::GetEXhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphMultiErrors::GetEXhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:142:14
    t.method("GetEXhigh", [](TGraphMultiErrors const& a)->Double_t * { return a.GetEXhigh(); }, jlcxx::arg("this"));
    t.method("GetEXhigh", [](TGraphMultiErrors const* a)->Double_t * { return a->GetEXhigh(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphMultiErrors::GetEYlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphMultiErrors::GetEYlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:143:14
    t.method("GetEYlow", [](TGraphMultiErrors const& a)->Double_t * { return a.GetEYlow(); }, jlcxx::arg("this"));
    t.method("GetEYlow", [](TGraphMultiErrors const* a)->Double_t * { return a->GetEYlow(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphMultiErrors::GetEYhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphMultiErrors::GetEYhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:144:14
    t.method("GetEYhigh", [](TGraphMultiErrors const& a)->Double_t * { return a.GetEYhigh(); }, jlcxx::arg("this"));
    t.method("GetEYhigh", [](TGraphMultiErrors const* a)->Double_t * { return a->GetEYhigh(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphMultiErrors::GetEYlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphMultiErrors::GetEYlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:145:22
    t.method("GetEYlow", [](TGraphMultiErrors& a, Int_t arg0)->Double_t * { return a.GetEYlow(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetEYlow", [](TGraphMultiErrors* a, Int_t arg0)->Double_t * { return a->GetEYlow(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphMultiErrors::GetEYhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphMultiErrors::GetEYhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:146:22
    t.method("GetEYhigh", [](TGraphMultiErrors& a, Int_t arg0)->Double_t * { return a.GetEYhigh(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetEYhigh", [](TGraphMultiErrors* a, Int_t arg0)->Double_t * { return a->GetEYhigh(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for TAttFill * TGraphMultiErrors::GetAttFill(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TAttFill * TGraphMultiErrors::GetAttFill(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:148:22
    t.method("GetAttFill", [](TGraphMultiErrors& a, Int_t arg0)->TAttFill * { return a.GetAttFill(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetAttFill", [](TGraphMultiErrors* a, Int_t arg0)->TAttFill * { return a->GetAttFill(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for TAttLine * TGraphMultiErrors::GetAttLine(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TAttLine * TGraphMultiErrors::GetAttLine(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:149:22
    t.method("GetAttLine", [](TGraphMultiErrors& a, Int_t arg0)->TAttLine * { return a.GetAttLine(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetAttLine", [](TGraphMultiErrors* a, Int_t arg0)->TAttLine * { return a->GetAttLine(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Color_t TGraphMultiErrors::GetFillColor(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Color_t TGraphMultiErrors::GetFillColor(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:154:20
    t.method("GetFillColor", [](TGraphMultiErrors const& a, Int_t arg0)->Color_t { return a.GetFillColor(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetFillColor", [](TGraphMultiErrors const* a, Int_t arg0)->Color_t { return a->GetFillColor(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Style_t TGraphMultiErrors::GetFillStyle(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Style_t TGraphMultiErrors::GetFillStyle(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:155:20
    t.method("GetFillStyle", [](TGraphMultiErrors const& a, Int_t arg0)->Style_t { return a.GetFillStyle(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetFillStyle", [](TGraphMultiErrors const* a, Int_t arg0)->Style_t { return a->GetFillStyle(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Color_t TGraphMultiErrors::GetLineColor(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Color_t TGraphMultiErrors::GetLineColor(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:161:20
    t.method("GetLineColor", [](TGraphMultiErrors const& a, Int_t arg0)->Color_t { return a.GetLineColor(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetLineColor", [](TGraphMultiErrors const* a, Int_t arg0)->Color_t { return a->GetLineColor(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Style_t TGraphMultiErrors::GetLineStyle(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Style_t TGraphMultiErrors::GetLineStyle(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:162:20
    t.method("GetLineStyle", [](TGraphMultiErrors const& a, Int_t arg0)->Style_t { return a.GetLineStyle(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetLineStyle", [](TGraphMultiErrors const* a, Int_t arg0)->Style_t { return a->GetLineStyle(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Width_t TGraphMultiErrors::GetLineWidth(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Width_t TGraphMultiErrors::GetLineWidth(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:163:20
    t.method("GetLineWidth", [](TGraphMultiErrors const& a, Int_t arg0)->Width_t { return a.GetLineWidth(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));
    t.method("GetLineWidth", [](TGraphMultiErrors const* a, Int_t arg0)->Width_t { return a->GetLineWidth(arg0); }, jlcxx::arg("this"), jlcxx::arg("e"));

    DEBUG_MSG("Adding wrapper for Int_t TGraphMultiErrors::GetSumErrorsMode() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphMultiErrors::GetSumErrorsMode()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:165:10
    t.method("GetSumErrorsMode", [](TGraphMultiErrors const& a)->Int_t { return a.GetSumErrorsMode(); }, jlcxx::arg("this"));
    t.method("GetSumErrorsMode", [](TGraphMultiErrors const* a)->Int_t { return a->GetSumErrorsMode(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Int_t TGraphMultiErrors::GetNYErrors() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphMultiErrors::GetNYErrors()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:166:10
    t.method("GetNYErrors", [](TGraphMultiErrors const& a)->Int_t { return a.GetNYErrors(); }, jlcxx::arg("this"));
    t.method("GetNYErrors", [](TGraphMultiErrors const* a)->Int_t { return a->GetNYErrors(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:168:9
    t.method("Print", [](TGraphMultiErrors const& a)->void { a.Print(); }, jlcxx::arg("this"));
    t.method("Print", [](TGraphMultiErrors const& a, Option_t * arg0)->void { a.Print(arg0); }, jlcxx::arg("this"), jlcxx::arg("chopt"));
    t.method("Print", [](TGraphMultiErrors const* a)->void { a->Print(); }, jlcxx::arg("this"));
    t.method("Print", [](TGraphMultiErrors const* a, Option_t * arg0)->void { a->Print(arg0); }, jlcxx::arg("this"), jlcxx::arg("chopt"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::Scale(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::Scale(Double_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:170:9
    t.method("Scale", [](TGraphMultiErrors& a)->void { a.Scale(); }, jlcxx::arg("this"));
    t.method("Scale", [](TGraphMultiErrors& a, Double_t arg0)->void { a.Scale(arg0); }, jlcxx::arg("this"), jlcxx::arg("c1"));
    t.method("Scale", [](TGraphMultiErrors& a, Double_t arg0, Option_t * arg1)->void { a.Scale(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("c1"), jlcxx::arg("option"));
    t.method("Scale", [](TGraphMultiErrors* a)->void { a->Scale(); }, jlcxx::arg("this"));
    t.method("Scale", [](TGraphMultiErrors* a, Double_t arg0)->void { a->Scale(arg0); }, jlcxx::arg("this"), jlcxx::arg("c1"));
    t.method("Scale", [](TGraphMultiErrors* a, Double_t arg0, Option_t * arg1)->void { a->Scale(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("c1"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointError(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointError(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:172:17
    t.method("SetPointError", [](TGraphMultiErrors& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetPointError(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"));
    t.method("SetPointError", [](TGraphMultiErrors& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"));
    t.method("SetPointError", [](TGraphMultiErrors& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"), jlcxx::arg("eyH2"));
    t.method("SetPointError", [](TGraphMultiErrors& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"), jlcxx::arg("eyH2"), jlcxx::arg("eyL3"));
    t.method("SetPointError", [](TGraphMultiErrors& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"), jlcxx::arg("eyH2"), jlcxx::arg("eyL3"), jlcxx::arg("eyH3"));
    t.method("SetPointError", [](TGraphMultiErrors* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetPointError(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"));
    t.method("SetPointError", [](TGraphMultiErrors* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"));
    t.method("SetPointError", [](TGraphMultiErrors* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"), jlcxx::arg("eyH2"));
    t.method("SetPointError", [](TGraphMultiErrors* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"), jlcxx::arg("eyH2"), jlcxx::arg("eyL3"));
    t.method("SetPointError", [](TGraphMultiErrors* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); }, jlcxx::arg("this"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL1"), jlcxx::arg("eyH1"), jlcxx::arg("eyL2"), jlcxx::arg("eyH2"), jlcxx::arg("eyL3"), jlcxx::arg("eyH3"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointError(Int_t, Int_t, Double_t, Double_t, const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointError(Int_t, Int_t, Double_t, Double_t, const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:174:17
    t.method("SetPointError", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, Double_t arg2, Double_t arg3, const Double_t * arg4, const Double_t * arg5)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));
    t.method("SetPointError", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, Double_t arg2, Double_t arg3, const Double_t * arg4, const Double_t * arg5)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("exL"), jlcxx::arg("exH"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEX(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEX(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:176:17
    t.method("SetPointEX", [](TGraphMultiErrors& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.SetPointEX(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("exL"), jlcxx::arg("exH"));
    t.method("SetPointEX", [](TGraphMultiErrors* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->SetPointEX(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("exL"), jlcxx::arg("exH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEXlow(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEXlow(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:177:17
    t.method("SetPointEXlow", [](TGraphMultiErrors& a, Int_t arg0, Double_t arg1)->void { a.SetPointEXlow(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("exL"));
    t.method("SetPointEXlow", [](TGraphMultiErrors* a, Int_t arg0, Double_t arg1)->void { a->SetPointEXlow(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("exL"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEXhigh(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEXhigh(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:178:17
    t.method("SetPointEXhigh", [](TGraphMultiErrors& a, Int_t arg0, Double_t arg1)->void { a.SetPointEXhigh(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("exH"));
    t.method("SetPointEXhigh", [](TGraphMultiErrors* a, Int_t arg0, Double_t arg1)->void { a->SetPointEXhigh(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("exH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEY(Int_t, Int_t, const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEY(Int_t, Int_t, const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:179:17
    t.method("SetPointEY", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3)->void { a.SetPointEY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));
    t.method("SetPointEY", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3)->void { a->SetPointEY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEYlow(Int_t, Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEYlow(Int_t, Int_t, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:180:17
    t.method("SetPointEYlow", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a.SetPointEYlow(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("eyL"));
    t.method("SetPointEYlow", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a->SetPointEYlow(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("eyL"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEYhigh(Int_t, Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEYhigh(Int_t, Int_t, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:181:17
    t.method("SetPointEYhigh", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a.SetPointEYhigh(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("eyH"));
    t.method("SetPointEYhigh", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a->SetPointEYhigh(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("ne"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEY(Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEY(Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:182:17
    t.method("SetPointEY", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, Double_t arg2, Double_t arg3)->void { a.SetPointEY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));
    t.method("SetPointEY", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, Double_t arg2, Double_t arg3)->void { a->SetPointEY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEYlow(Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEYlow(Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:183:17
    t.method("SetPointEYlow", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a.SetPointEYlow(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"), jlcxx::arg("eyL"));
    t.method("SetPointEYlow", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a->SetPointEYlow(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"), jlcxx::arg("eyL"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetPointEYhigh(Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetPointEYhigh(Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:184:17
    t.method("SetPointEYhigh", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a.SetPointEYhigh(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"), jlcxx::arg("eyH"));
    t.method("SetPointEYhigh", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a->SetPointEYhigh(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("e"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetEY(Int_t, Int_t, const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetEY(Int_t, Int_t, const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:186:17
    t.method("SetEY", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3)->void { a.SetEY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("np"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));
    t.method("SetEY", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3)->void { a->SetEY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("np"), jlcxx::arg("eyL"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetEYlow(Int_t, Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetEYlow(Int_t, Int_t, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:187:17
    t.method("SetEYlow", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a.SetEYlow(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("np"), jlcxx::arg("eyL"));
    t.method("SetEYlow", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a->SetEYlow(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("np"), jlcxx::arg("eyL"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetEYhigh(Int_t, Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetEYhigh(Int_t, Int_t, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:188:17
    t.method("SetEYhigh", [](TGraphMultiErrors& a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a.SetEYhigh(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("np"), jlcxx::arg("eyH"));
    t.method("SetEYhigh", [](TGraphMultiErrors* a, Int_t arg0, Int_t arg1, const Double_t * arg2)->void { a->SetEYhigh(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("np"), jlcxx::arg("eyH"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetSumErrorsMode(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetSumErrorsMode(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:190:17
    t.method("SetSumErrorsMode", [](TGraphMultiErrors& a, Int_t arg0)->void { a.SetSumErrorsMode(arg0); }, jlcxx::arg("this"), jlcxx::arg("m"));
    t.method("SetSumErrorsMode", [](TGraphMultiErrors* a, Int_t arg0)->void { a->SetSumErrorsMode(arg0); }, jlcxx::arg("this"), jlcxx::arg("m"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetAttFill(Int_t, TAttFill *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetAttFill(Int_t, TAttFill *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:192:17
    t.method("SetAttFill", [](TGraphMultiErrors& a, Int_t arg0, TAttFill * arg1)->void { a.SetAttFill(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("taf"));
    t.method("SetAttFill", [](TGraphMultiErrors* a, Int_t arg0, TAttFill * arg1)->void { a->SetAttFill(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("taf"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetAttLine(Int_t, TAttLine *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetAttLine(Int_t, TAttLine *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:193:17
    t.method("SetAttLine", [](TGraphMultiErrors& a, Int_t arg0, TAttLine * arg1)->void { a.SetAttLine(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("tal"));
    t.method("SetAttLine", [](TGraphMultiErrors* a, Int_t arg0, TAttLine * arg1)->void { a->SetAttLine(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("tal"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetFillColor(Int_t, Color_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetFillColor(Int_t, Color_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:199:17
    t.method("SetFillColor", [](TGraphMultiErrors& a, Int_t arg0, Color_t arg1)->void { a.SetFillColor(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("fcolor"));
    t.method("SetFillColor", [](TGraphMultiErrors* a, Int_t arg0, Color_t arg1)->void { a->SetFillColor(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("fcolor"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetFillColorAlpha(Int_t, Color_t, Float_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetFillColorAlpha(Int_t, Color_t, Float_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:200:17
    t.method("SetFillColorAlpha", [](TGraphMultiErrors& a, Int_t arg0, Color_t arg1, Float_t arg2)->void { a.SetFillColorAlpha(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("fcolor"), jlcxx::arg("falpha"));
    t.method("SetFillColorAlpha", [](TGraphMultiErrors* a, Int_t arg0, Color_t arg1, Float_t arg2)->void { a->SetFillColorAlpha(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("fcolor"), jlcxx::arg("falpha"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetFillStyle(Int_t, Style_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetFillStyle(Int_t, Style_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:201:17
    t.method("SetFillStyle", [](TGraphMultiErrors& a, Int_t arg0, Style_t arg1)->void { a.SetFillStyle(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("fstyle"));
    t.method("SetFillStyle", [](TGraphMultiErrors* a, Int_t arg0, Style_t arg1)->void { a->SetFillStyle(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("fstyle"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetLineColor(Int_t, Color_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetLineColor(Int_t, Color_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:208:17
    t.method("SetLineColor", [](TGraphMultiErrors& a, Int_t arg0, Color_t arg1)->void { a.SetLineColor(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lcolor"));
    t.method("SetLineColor", [](TGraphMultiErrors* a, Int_t arg0, Color_t arg1)->void { a->SetLineColor(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lcolor"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetLineColorAlpha(Int_t, Color_t, Float_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetLineColorAlpha(Int_t, Color_t, Float_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:209:17
    t.method("SetLineColorAlpha", [](TGraphMultiErrors& a, Int_t arg0, Color_t arg1, Float_t arg2)->void { a.SetLineColorAlpha(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lcolor"), jlcxx::arg("lalpha"));
    t.method("SetLineColorAlpha", [](TGraphMultiErrors* a, Int_t arg0, Color_t arg1, Float_t arg2)->void { a->SetLineColorAlpha(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lcolor"), jlcxx::arg("lalpha"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetLineStyle(Int_t, Style_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetLineStyle(Int_t, Style_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:210:17
    t.method("SetLineStyle", [](TGraphMultiErrors& a, Int_t arg0, Style_t arg1)->void { a.SetLineStyle(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lstyle"));
    t.method("SetLineStyle", [](TGraphMultiErrors* a, Int_t arg0, Style_t arg1)->void { a->SetLineStyle(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lstyle"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::SetLineWidth(Int_t, Width_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::SetLineWidth(Int_t, Width_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphMultiErrors.h:211:17
    t.method("SetLineWidth", [](TGraphMultiErrors& a, Int_t arg0, Width_t arg1)->void { a.SetLineWidth(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lwidth"));
    t.method("SetLineWidth", [](TGraphMultiErrors* a, Int_t arg0, Width_t arg1)->void { a->SetLineWidth(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("e"), jlcxx::arg("lwidth"));

    DEBUG_MSG("Adding wrapper for Version_t TGraphMultiErrors::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraphMultiErrors::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TGraphMultiErrors!Class_Version", []()->Version_t { return TGraphMultiErrors::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphMultiErrors::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphMultiErrors::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TGraphMultiErrors const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TGraphMultiErrors const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TGraphMultiErrors& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TGraphMultiErrors* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TGraphMultiErrors::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphMultiErrors::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TGraphMultiErrors!DeclFileName", []() { return (std::string)TGraphMultiErrors::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraphMultiErrors::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphMultiErrors::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TGraphMultiErrors!ImplFileLine", []()->int { return TGraphMultiErrors::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphMultiErrors::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphMultiErrors::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TGraphMultiErrors!ImplFileName", []() { return (std::string)TGraphMultiErrors::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphMultiErrors::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphMultiErrors::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TGraphMultiErrors!Class_Name", []() { return (std::string)TGraphMultiErrors::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphMultiErrors::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphMultiErrors::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TGraphMultiErrors!Dictionary", []()->TClass * { return TGraphMultiErrors::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphMultiErrors::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphMultiErrors::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TGraphMultiErrors!Class", []()->TClass * { return TGraphMultiErrors::Class(); });

    DEBUG_MSG("Adding wrapper for void TGraphMultiErrors::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphMultiErrors::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TGraphMultiErrors& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TGraphMultiErrors* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TGraphMultiErrors::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphMultiErrors::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TGraphMultiErrors!DeclFileLine", []()->int { return TGraphMultiErrors::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraphMultiErrors>> type_;
};
std::shared_ptr<Wrapper> newJlTGraphMultiErrors(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraphMultiErrors(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TArrayF> : std::false_type { };
  template<> struct DefaultConstructible<TArrayF> : std::false_type { };
template<> struct SuperType<TArrayF> { typedef TArray type; };
}

// Class generating the wrapper for type TArrayF
// signature to use in the veto file: TArrayF
struct JlTArrayF: public Wrapper {

  JlTArrayF(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TArrayF (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TArrayF.h:27:7
    jlcxx::TypeWrapper<TArrayF>  t = jlModule.add_type<TArrayF>("TArrayF",
      jlcxx::julia_base_type<TArray>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TArrayF>>(new jlcxx::TypeWrapper<TArrayF>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TArrayF>> type_;
};
std::shared_ptr<Wrapper> newJlTArrayF(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTArrayF(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TAttFill> : std::false_type { };
  template<> struct DefaultConstructible<TAttFill> : std::false_type { };
}

// Class generating the wrapper for type TAttFill
// signature to use in the veto file: TAttFill
struct JlTAttFill: public Wrapper {

  JlTAttFill(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TAttFill (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TAttFill.h:19:7
    jlcxx::TypeWrapper<TAttFill>  t = jlModule.add_type<TAttFill>("TAttFill");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TAttFill>>(new jlcxx::TypeWrapper<TAttFill>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TAttFill>> type_;
};
std::shared_ptr<Wrapper> newJlTAttFill(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTAttFill(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TAttLine> : std::false_type { };
  template<> struct DefaultConstructible<TAttLine> : std::false_type { };
}

// Class generating the wrapper for type TAttLine
// signature to use in the veto file: TAttLine
struct JlTAttLine: public Wrapper {

  JlTAttLine(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TAttLine (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TAttLine.h:18:7
    jlcxx::TypeWrapper<TAttLine>  t = jlModule.add_type<TAttLine>("TAttLine");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TAttLine>>(new jlcxx::TypeWrapper<TAttLine>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TAttLine>> type_;
};
std::shared_ptr<Wrapper> newJlTAttLine(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTAttLine(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGraphSmooth> : std::false_type { };
  template<> struct DefaultConstructible<TGraphSmooth> : std::false_type { };
template<> struct SuperType<TGraphSmooth> { typedef TNamed type; };
}

// Class generating the wrapper for type TGraphSmooth
// signature to use in the veto file: TGraphSmooth
struct JlTGraphSmooth: public Wrapper {

  JlTGraphSmooth(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraphSmooth (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:34:7
    jlcxx::TypeWrapper<TGraphSmooth>  t = jlModule.add_type<TGraphSmooth>("TGraphSmooth",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraphSmooth>>(new jlcxx::TypeWrapper<TGraphSmooth>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void TGraphSmooth::TGraphSmooth(const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:50:4
    t.constructor<const char *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name")    );

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::Approx(TGraph *, Option_t *, Int_t, Double_t *, Double_t, Double_t, Int_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::Approx(TGraph *, Option_t *, Int_t, Double_t *, Double_t, Double_t, Int_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:54:20
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.Approx(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.Approx(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2)->TGraph * { return a.Approx(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"), jlcxx::arg("rule"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6, Double_t arg7)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"), jlcxx::arg("rule"), jlcxx::arg("f"));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6, Double_t arg7, Option_t * arg8)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"), jlcxx::arg("rule"), jlcxx::arg("f"), jlcxx::arg("ties"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->Approx(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->Approx(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2)->TGraph * { return a->Approx(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"), jlcxx::arg("rule"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6, Double_t arg7)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"), jlcxx::arg("rule"), jlcxx::arg("f"));
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6, Double_t arg7, Option_t * arg8)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("nout"), jlcxx::arg("xout"), jlcxx::arg("yleft"), jlcxx::arg("yright"), jlcxx::arg("rule"), jlcxx::arg("f"), jlcxx::arg("ties"));

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::SmoothKern(TGraph *, Option_t *, Double_t, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::SmoothKern(TGraph *, Option_t *, Double_t, Int_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:56:20
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.SmoothKern(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.SmoothKern(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a.SmoothKern(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bandwidth"));
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a.SmoothKern(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bandwidth"), jlcxx::arg("nout"));
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3, Double_t * arg4)->TGraph * { return a.SmoothKern(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bandwidth"), jlcxx::arg("nout"), jlcxx::arg("xout"));
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->SmoothKern(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->SmoothKern(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a->SmoothKern(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bandwidth"));
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a->SmoothKern(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bandwidth"), jlcxx::arg("nout"));
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3, Double_t * arg4)->TGraph * { return a->SmoothKern(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bandwidth"), jlcxx::arg("nout"), jlcxx::arg("xout"));

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::SmoothLowess(TGraph *, Option_t *, Double_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::SmoothLowess(TGraph *, Option_t *, Double_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:57:20
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.SmoothLowess(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.SmoothLowess(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a.SmoothLowess(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("span"));
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a.SmoothLowess(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("span"), jlcxx::arg("iter"));
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3, Double_t arg4)->TGraph * { return a.SmoothLowess(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("span"), jlcxx::arg("iter"), jlcxx::arg("delta"));
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->SmoothLowess(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->SmoothLowess(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a->SmoothLowess(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("span"));
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a->SmoothLowess(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("span"), jlcxx::arg("iter"));
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3, Double_t arg4)->TGraph * { return a->SmoothLowess(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("span"), jlcxx::arg("iter"), jlcxx::arg("delta"));

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::SmoothSuper(TGraph *, Option_t *, Double_t, Double_t, Bool_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::SmoothSuper(TGraph *, Option_t *, Double_t, Double_t, Bool_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:58:20
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.SmoothSuper(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.SmoothSuper(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"));
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"), jlcxx::arg("span"));
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3, Bool_t arg4)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"), jlcxx::arg("span"), jlcxx::arg("isPeriodic"));
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3, Bool_t arg4, Double_t * arg5)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"), jlcxx::arg("span"), jlcxx::arg("isPeriodic"), jlcxx::arg("w"));
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->SmoothSuper(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->SmoothSuper(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"));
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"));
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"), jlcxx::arg("span"));
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3, Bool_t arg4)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"), jlcxx::arg("span"), jlcxx::arg("isPeriodic"));
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3, Bool_t arg4, Double_t * arg5)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("option"), jlcxx::arg("bass"), jlcxx::arg("span"), jlcxx::arg("isPeriodic"), jlcxx::arg("w"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Approxin(TGraph *, Int_t, Double_t &, Double_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Approxin(TGraph *, Int_t, Double_t &, Double_t &, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:60:20
    t.method("Approxin", [](TGraphSmooth& a, TGraph * arg0, Int_t arg1, Double_t & arg2, Double_t & arg3, Int_t arg4, Int_t arg5)->void { a.Approxin(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("iKind"), jlcxx::arg("Ylow"), jlcxx::arg("Yhigh"), jlcxx::arg("rule"), jlcxx::arg("iTies"));
    t.method("Approxin", [](TGraphSmooth* a, TGraph * arg0, Int_t arg1, Double_t & arg2, Double_t & arg3, Int_t arg4, Int_t arg5)->void { a->Approxin(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("grin"), jlcxx::arg("iKind"), jlcxx::arg("Ylow"), jlcxx::arg("Yhigh"), jlcxx::arg("rule"), jlcxx::arg("iTies"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Smoothin(TGraph *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Smoothin(TGraph *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:61:20
    t.method("Smoothin", [](TGraphSmooth& a, TGraph * arg0)->void { a.Smoothin(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));
    t.method("Smoothin", [](TGraphSmooth* a, TGraph * arg0)->void { a->Smoothin(arg0); }, jlcxx::arg("this"), jlcxx::arg("grin"));

    DEBUG_MSG("Adding wrapper for Double_t TGraphSmooth::Approx1(Double_t, Double_t, Double_t *, Double_t *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphSmooth::Approx1(Double_t, Double_t, Double_t *, Double_t *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:62:20
    module_.method("TGraphSmooth!Approx1", [](Double_t arg0, Double_t arg1, Double_t * arg2, Double_t * arg3, Int_t arg4, Int_t arg5, Double_t arg6, Double_t arg7)->Double_t { return TGraphSmooth::Approx1(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); }, jlcxx::arg("v"), jlcxx::arg("f"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("n"), jlcxx::arg("iKind"), jlcxx::arg("Ylow"), jlcxx::arg("Yhigh"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Lowess(Double_t *, Double_t *, Int_t, Double_t *, Double_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Lowess(Double_t *, Double_t *, Int_t, Double_t *, Double_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:63:20
    t.method("Lowess", [](TGraphSmooth& a, Double_t * arg0, Double_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Int_t arg5, Double_t arg6)->void { a.Lowess(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("n"), jlcxx::arg("ys"), jlcxx::arg("span"), jlcxx::arg("iter"), jlcxx::arg("delta"));
    t.method("Lowess", [](TGraphSmooth* a, Double_t * arg0, Double_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Int_t arg5, Double_t arg6)->void { a->Lowess(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("n"), jlcxx::arg("ys"), jlcxx::arg("span"), jlcxx::arg("iter"), jlcxx::arg("delta"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Lowest(Double_t *, Double_t *, Int_t, Double_t &, Double_t &, Int_t, Int_t, Double_t *, Bool_t, Double_t *, Bool_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Lowest(Double_t *, Double_t *, Int_t, Double_t &, Double_t &, Int_t, Int_t, Double_t *, Bool_t, Double_t *, Bool_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:64:20
    module_.method("TGraphSmooth!Lowest", [](Double_t * arg0, Double_t * arg1, Int_t arg2, Double_t & arg3, Double_t & arg4, Int_t arg5, Int_t arg6, Double_t * arg7, Bool_t arg8, Double_t * arg9, Bool_t & arg10)->void { TGraphSmooth::Lowest(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); }, jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("n"), jlcxx::arg("xs"), jlcxx::arg("ys"), jlcxx::arg("nleft"), jlcxx::arg("nright"), jlcxx::arg("w"), jlcxx::arg("userw"), jlcxx::arg("rw"), jlcxx::arg("ok"));

    DEBUG_MSG("Adding wrapper for Int_t TGraphSmooth::Rcmp(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphSmooth::Rcmp(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:66:20
    module_.method("TGraphSmooth!Rcmp", [](Double_t arg0, Double_t arg1)->Int_t { return TGraphSmooth::Rcmp(arg0, arg1); }, jlcxx::arg("x"), jlcxx::arg("y"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Psort(Double_t *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Psort(Double_t *, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:67:20
    module_.method("TGraphSmooth!Psort", [](Double_t * arg0, Int_t arg1, Int_t arg2)->void { TGraphSmooth::Psort(arg0, arg1, arg2); }, jlcxx::arg("x"), jlcxx::arg("n"), jlcxx::arg("k"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Rank(Int_t, Double_t *, Int_t *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Rank(Int_t, Double_t *, Int_t *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:68:20
    module_.method("TGraphSmooth!Rank", [](Int_t arg0, Double_t * arg1, Int_t * arg2, Int_t * arg3)->void { TGraphSmooth::Rank(arg0, arg1, arg2, arg3); }, jlcxx::arg("n"), jlcxx::arg("a"), jlcxx::arg("index"), jlcxx::arg("rank"));
    module_.method("TGraphSmooth!Rank", [](Int_t arg0, Double_t * arg1, Int_t * arg2, Int_t * arg3, Bool_t arg4)->void { TGraphSmooth::Rank(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("n"), jlcxx::arg("a"), jlcxx::arg("index"), jlcxx::arg("rank"), jlcxx::arg("down"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::BDRksmooth(Double_t *, Double_t *, Int_t, Double_t *, Double_t *, Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::BDRksmooth(Double_t *, Double_t *, Int_t, Double_t *, Double_t *, Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:69:20
    module_.method("TGraphSmooth!BDRksmooth", [](Double_t * arg0, Double_t * arg1, Int_t arg2, Double_t * arg3, Double_t * arg4, Int_t arg5, Int_t arg6, Double_t arg7)->void { TGraphSmooth::BDRksmooth(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); }, jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("n"), jlcxx::arg("xp"), jlcxx::arg("yp"), jlcxx::arg("np"), jlcxx::arg("kernel"), jlcxx::arg("bw"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::BDRsupsmu(Int_t, Double_t *, Double_t *, Double_t *, Int_t, Double_t, Double_t, Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::BDRsupsmu(Int_t, Double_t *, Double_t *, Double_t *, Int_t, Double_t, Double_t, Double_t *, Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:71:20
    module_.method("TGraphSmooth!BDRsupsmu", [](Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t * arg3, Int_t arg4, Double_t arg5, Double_t arg6, Double_t * arg7, Double_t * arg8)->void { TGraphSmooth::BDRsupsmu(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); }, jlcxx::arg("n"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("w"), jlcxx::arg("iper"), jlcxx::arg("span"), jlcxx::arg("alpha"), jlcxx::arg("smo"), jlcxx::arg("sc"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::BDRsmooth(Int_t, Double_t *, Double_t *, Double_t *, Double_t, Int_t, Double_t, Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::BDRsmooth(Int_t, Double_t *, Double_t *, Double_t *, Double_t, Int_t, Double_t, Double_t *, Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphSmooth.h:73:20
    module_.method("TGraphSmooth!BDRsmooth", [](Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t * arg3, Double_t arg4, Int_t arg5, Double_t arg6, Double_t * arg7, Double_t * arg8)->void { TGraphSmooth::BDRsmooth(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); }, jlcxx::arg("n"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("w"), jlcxx::arg("span"), jlcxx::arg("iper"), jlcxx::arg("vsmlsq"), jlcxx::arg("smo"), jlcxx::arg("acvr"));

    DEBUG_MSG("Adding wrapper for Version_t TGraphSmooth::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraphSmooth::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TGraphSmooth!Class_Version", []()->Version_t { return TGraphSmooth::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphSmooth::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphSmooth::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TGraphSmooth const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TGraphSmooth const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TGraphSmooth& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TGraphSmooth* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TGraphSmooth::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphSmooth::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TGraphSmooth!DeclFileName", []() { return (std::string)TGraphSmooth::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraphSmooth::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphSmooth::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TGraphSmooth!ImplFileLine", []()->int { return TGraphSmooth::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphSmooth::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphSmooth::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TGraphSmooth!ImplFileName", []() { return (std::string)TGraphSmooth::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphSmooth::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphSmooth::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TGraphSmooth!Class_Name", []() { return (std::string)TGraphSmooth::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphSmooth::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphSmooth::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TGraphSmooth!Dictionary", []()->TClass * { return TGraphSmooth::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphSmooth::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphSmooth::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TGraphSmooth!Class", []()->TClass * { return TGraphSmooth::Class(); });

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TGraphSmooth& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TGraphSmooth* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TGraphSmooth::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphSmooth::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TGraphSmooth!DeclFileLine", []()->int { return TGraphSmooth::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraphSmooth>> type_;
};
std::shared_ptr<Wrapper> newJlTGraphSmooth(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraphSmooth(module));
}
