// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TArrayF> : std::false_type { };
  template<> struct DefaultConstructible<TArrayF> : std::false_type { };
template<> struct SuperType<TArrayF> { typedef TArray type; };
}

// Class generating the wrapper for type TArrayF
// signature to use in the veto file: TArrayF
struct JlTArrayF: public Wrapper {

  JlTArrayF(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TArrayF (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TArrayF.h:27:7
    jlcxx::TypeWrapper<TArrayF>  t = jlModule.add_type<TArrayF>("TArrayF",
      jlcxx::julia_base_type<TArray>());
    jlcxx::stl::apply_stl<TArrayF>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TArrayF>>(new jlcxx::TypeWrapper<TArrayF>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TArrayF>> type_;
};
std::shared_ptr<Wrapper> newJlTArrayF(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTArrayF(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TAttFill> : std::false_type { };
  template<> struct DefaultConstructible<TAttFill> : std::false_type { };
}

// Class generating the wrapper for type TAttFill
// signature to use in the veto file: TAttFill
struct JlTAttFill: public Wrapper {

  JlTAttFill(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TAttFill (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TAttFill.h:19:7
    jlcxx::TypeWrapper<TAttFill>  t = jlModule.add_type<TAttFill>("TAttFill");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TAttFill>>(new jlcxx::TypeWrapper<TAttFill>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TAttFill>> type_;
};
std::shared_ptr<Wrapper> newJlTAttFill(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTAttFill(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TAttLine> : std::false_type { };
  template<> struct DefaultConstructible<TAttLine> : std::false_type { };
}

// Class generating the wrapper for type TAttLine
// signature to use in the veto file: TAttLine
struct JlTAttLine: public Wrapper {

  JlTAttLine(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TAttLine (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TAttLine.h:18:7
    jlcxx::TypeWrapper<TAttLine>  t = jlModule.add_type<TAttLine>("TAttLine");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TAttLine>>(new jlcxx::TypeWrapper<TAttLine>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TAttLine>> type_;
};
std::shared_ptr<Wrapper> newJlTAttLine(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTAttLine(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGraphSmooth> : std::false_type { };
  template<> struct DefaultConstructible<TGraphSmooth> : std::false_type { };
template<> struct SuperType<TGraphSmooth> { typedef TNamed type; };
}

// Class generating the wrapper for type TGraphSmooth
// signature to use in the veto file: TGraphSmooth
struct JlTGraphSmooth: public Wrapper {

  JlTGraphSmooth(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraphSmooth (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:34:7
    jlcxx::TypeWrapper<TGraphSmooth>  t = jlModule.add_type<TGraphSmooth>("TGraphSmooth",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraphSmooth>>(new jlcxx::TypeWrapper<TGraphSmooth>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphSmooth::TGraphSmooth(const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:50:4
    t.constructor<const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::Approx(TGraph *, Option_t *, Int_t, Double_t *, Double_t, Double_t, Int_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::Approx(TGraph *, Option_t *, Int_t, Double_t *, Double_t, Double_t, Int_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:54:20
    t.method("Approx", static_cast<TGraph * (TGraphSmooth::*)(TGraph *, Option_t *, Int_t, Double_t *, Double_t, Double_t, Int_t, Double_t, Option_t *) >(&TGraphSmooth::Approx));
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.Approx(arg0); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.Approx(arg0, arg1); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2)->TGraph * { return a.Approx(arg0, arg1, arg2); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Approx", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6, Double_t arg7)->TGraph * { return a.Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->Approx(arg0); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->Approx(arg0, arg1); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2)->TGraph * { return a->Approx(arg0, arg1, arg2); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Approx", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Int_t arg2, Double_t * arg3, Double_t arg4, Double_t arg5, Int_t arg6, Double_t arg7)->TGraph * { return a->Approx(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::SmoothKern(TGraph *, Option_t *, Double_t, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::SmoothKern(TGraph *, Option_t *, Double_t, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:56:20
    t.method("SmoothKern", static_cast<TGraph * (TGraphSmooth::*)(TGraph *, Option_t *, Double_t, Int_t, Double_t *) >(&TGraphSmooth::SmoothKern));
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.SmoothKern(arg0); });
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.SmoothKern(arg0, arg1); });
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a.SmoothKern(arg0, arg1, arg2); });
    t.method("SmoothKern", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a.SmoothKern(arg0, arg1, arg2, arg3); });
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->SmoothKern(arg0); });
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->SmoothKern(arg0, arg1); });
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a->SmoothKern(arg0, arg1, arg2); });
    t.method("SmoothKern", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a->SmoothKern(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::SmoothLowess(TGraph *, Option_t *, Double_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::SmoothLowess(TGraph *, Option_t *, Double_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:57:20
    t.method("SmoothLowess", static_cast<TGraph * (TGraphSmooth::*)(TGraph *, Option_t *, Double_t, Int_t, Double_t) >(&TGraphSmooth::SmoothLowess));
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.SmoothLowess(arg0); });
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.SmoothLowess(arg0, arg1); });
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a.SmoothLowess(arg0, arg1, arg2); });
    t.method("SmoothLowess", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a.SmoothLowess(arg0, arg1, arg2, arg3); });
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->SmoothLowess(arg0); });
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->SmoothLowess(arg0, arg1); });
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a->SmoothLowess(arg0, arg1, arg2); });
    t.method("SmoothLowess", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Int_t arg3)->TGraph * { return a->SmoothLowess(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TGraph * TGraphSmooth::SmoothSuper(TGraph *, Option_t *, Double_t, Double_t, Bool_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGraph * TGraphSmooth::SmoothSuper(TGraph *, Option_t *, Double_t, Double_t, Bool_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:58:20
    t.method("SmoothSuper", static_cast<TGraph * (TGraphSmooth::*)(TGraph *, Option_t *, Double_t, Double_t, Bool_t, Double_t *) >(&TGraphSmooth::SmoothSuper));
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0)->TGraph * { return a.SmoothSuper(arg0); });
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1)->TGraph * { return a.SmoothSuper(arg0, arg1); });
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2); });
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2, arg3); });
    t.method("SmoothSuper", [](TGraphSmooth& a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3, Bool_t arg4)->TGraph * { return a.SmoothSuper(arg0, arg1, arg2, arg3, arg4); });
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0)->TGraph * { return a->SmoothSuper(arg0); });
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1)->TGraph * { return a->SmoothSuper(arg0, arg1); });
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2); });
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2, arg3); });
    t.method("SmoothSuper", [](TGraphSmooth* a, TGraph * arg0, Option_t * arg1, Double_t arg2, Double_t arg3, Bool_t arg4)->TGraph * { return a->SmoothSuper(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Approxin(TGraph *, Int_t, Double_t &, Double_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Approxin(TGraph *, Int_t, Double_t &, Double_t &, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:60:20
    t.method("Approxin", static_cast<void (TGraphSmooth::*)(TGraph *, Int_t, Double_t &, Double_t &, Int_t, Int_t) >(&TGraphSmooth::Approxin));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Smoothin(TGraph *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Smoothin(TGraph *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:61:20
    t.method("Smoothin", static_cast<void (TGraphSmooth::*)(TGraph *) >(&TGraphSmooth::Smoothin));

    DEBUG_MSG("Adding wrapper for Double_t TGraphSmooth::Approx1(Double_t, Double_t, Double_t *, Double_t *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphSmooth::Approx1(Double_t, Double_t, Double_t *, Double_t *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:62:20
    module_.method("TGraphSmooth!Approx1", static_cast<Double_t (*)(Double_t, Double_t, Double_t *, Double_t *, Int_t, Int_t, Double_t, Double_t) >(&TGraphSmooth::Approx1));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Lowess(Double_t *, Double_t *, Int_t, Double_t *, Double_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Lowess(Double_t *, Double_t *, Int_t, Double_t *, Double_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:63:20
    t.method("Lowess", static_cast<void (TGraphSmooth::*)(Double_t *, Double_t *, Int_t, Double_t *, Double_t, Int_t, Double_t) >(&TGraphSmooth::Lowess));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Lowest(Double_t *, Double_t *, Int_t, Double_t &, Double_t &, Int_t, Int_t, Double_t *, Bool_t, Double_t *, Bool_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Lowest(Double_t *, Double_t *, Int_t, Double_t &, Double_t &, Int_t, Int_t, Double_t *, Bool_t, Double_t *, Bool_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:64:20
    module_.method("TGraphSmooth!Lowest", static_cast<void (*)(Double_t *, Double_t *, Int_t, Double_t &, Double_t &, Int_t, Int_t, Double_t *, Bool_t, Double_t *, Bool_t &) >(&TGraphSmooth::Lowest));

    DEBUG_MSG("Adding wrapper for Int_t TGraphSmooth::Rcmp(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphSmooth::Rcmp(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:66:20
    module_.method("TGraphSmooth!Rcmp", static_cast<Int_t (*)(Double_t, Double_t) >(&TGraphSmooth::Rcmp));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Psort(Double_t *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Psort(Double_t *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:67:20
    module_.method("TGraphSmooth!Psort", static_cast<void (*)(Double_t *, Int_t, Int_t) >(&TGraphSmooth::Psort));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Rank(Int_t, Double_t *, Int_t *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Rank(Int_t, Double_t *, Int_t *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:68:20
    module_.method("TGraphSmooth!Rank", static_cast<void (*)(Int_t, Double_t *, Int_t *, Int_t *, Bool_t) >(&TGraphSmooth::Rank));
    module_.method("TGraphSmooth!Rank", [](Int_t arg0, Double_t * arg1, Int_t * arg2, Int_t * arg3)->void { TGraphSmooth::Rank(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::BDRksmooth(Double_t *, Double_t *, Int_t, Double_t *, Double_t *, Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::BDRksmooth(Double_t *, Double_t *, Int_t, Double_t *, Double_t *, Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:69:20
    module_.method("TGraphSmooth!BDRksmooth", static_cast<void (*)(Double_t *, Double_t *, Int_t, Double_t *, Double_t *, Int_t, Int_t, Double_t) >(&TGraphSmooth::BDRksmooth));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::BDRsupsmu(Int_t, Double_t *, Double_t *, Double_t *, Int_t, Double_t, Double_t, Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::BDRsupsmu(Int_t, Double_t *, Double_t *, Double_t *, Int_t, Double_t, Double_t, Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:71:20
    module_.method("TGraphSmooth!BDRsupsmu", static_cast<void (*)(Int_t, Double_t *, Double_t *, Double_t *, Int_t, Double_t, Double_t, Double_t *, Double_t *) >(&TGraphSmooth::BDRsupsmu));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::BDRsmooth(Int_t, Double_t *, Double_t *, Double_t *, Double_t, Int_t, Double_t, Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::BDRsmooth(Int_t, Double_t *, Double_t *, Double_t *, Double_t, Int_t, Double_t, Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:73:20
    module_.method("TGraphSmooth!BDRsmooth", static_cast<void (*)(Int_t, Double_t *, Double_t *, Double_t *, Double_t, Int_t, Double_t, Double_t *, Double_t *) >(&TGraphSmooth::BDRsmooth));

    DEBUG_MSG("Adding wrapper for Version_t TGraphSmooth::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraphSmooth::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!Class_Version", static_cast<Version_t (*)() >(&TGraphSmooth::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGraphSmooth::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphSmooth::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    t.method("IsA", static_cast<TClass * (TGraphSmooth::*)()  const>(&TGraphSmooth::IsA));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    t.method("StreamerNVirtual", static_cast<void (TGraphSmooth::*)(TBuffer &) >(&TGraphSmooth::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGraphSmooth::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphSmooth::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!DeclFileName", []() { return (std::string)TGraphSmooth::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraphSmooth::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphSmooth::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!ImplFileLine", static_cast<int (*)() >(&TGraphSmooth::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGraphSmooth::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphSmooth::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!ImplFileName", []() { return (std::string)TGraphSmooth::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphSmooth::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphSmooth::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!Class_Name", []() { return (std::string)TGraphSmooth::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphSmooth::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphSmooth::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!Dictionary", static_cast<TClass * (*)() >(&TGraphSmooth::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGraphSmooth::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphSmooth::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!Class", static_cast<TClass * (*)() >(&TGraphSmooth::Class));

    DEBUG_MSG("Adding wrapper for void TGraphSmooth::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphSmooth::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    t.method("Streamer", static_cast<void (TGraphSmooth::*)(TBuffer &) >(&TGraphSmooth::Streamer));

    DEBUG_MSG("Adding wrapper for int TGraphSmooth::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphSmooth::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGraphSmooth.h:76:4
    module_.method("TGraphSmooth!DeclFileLine", static_cast<int (*)() >(&TGraphSmooth::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraphSmooth>> type_;
};
std::shared_ptr<Wrapper> newJlTGraphSmooth(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraphSmooth(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGraphTime> : std::false_type { };
  template<> struct DefaultConstructible<TGraphTime> : std::false_type { };
template<> struct SuperType<TGraphTime> { typedef TNamed type; };
}

// Class generating the wrapper for type TGraphTime
// signature to use in the veto file: TGraphTime
struct JlTGraphTime: public Wrapper {

  JlTGraphTime(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraphTime (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:29:7
    jlcxx::TypeWrapper<TGraphTime>  t = jlModule.add_type<TGraphTime>("TGraphTime",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraphTime>>(new jlcxx::TypeWrapper<TGraphTime>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphTime::TGraphTime(Int_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:45:4
    t.constructor<Int_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphTime::TGraphTime(const TGraphTime &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:46:4
    t.constructor<const TGraphTime &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Int_t TGraphTime::Add(const TObject *, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphTime::Add(const TObject *, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:49:20
    t.method("Add", static_cast<Int_t (TGraphTime::*)(const TObject *, Int_t, Option_t *) >(&TGraphTime::Add));
    t.method("Add", [](TGraphTime& a, const TObject * arg0, Int_t arg1)->Int_t { return a.Add(arg0, arg1); });
    t.method("Add", [](TGraphTime* a, const TObject * arg0, Int_t arg1)->Int_t { return a->Add(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGraphTime::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphTime::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:50:12
    t.method("Draw", static_cast<void (TGraphTime::*)(Option_t *) >(&TGraphTime::Draw));
    t.method("Draw", [](TGraphTime& a)->void { a.Draw(); });
    t.method("Draw", [](TGraphTime* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for TObjArray * TGraphTime::GetSteps() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TGraphTime::GetSteps()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:51:20
    t.method("GetSteps", static_cast<TObjArray * (TGraphTime::*)()  const>(&TGraphTime::GetSteps));

    DEBUG_MSG("Adding wrapper for void TGraphTime::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphTime::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:52:12
    t.method("Paint", static_cast<void (TGraphTime::*)(Option_t *) >(&TGraphTime::Paint));
    t.method("Paint", [](TGraphTime& a)->void { a.Paint(); });
    t.method("Paint", [](TGraphTime* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TGraphTime::SaveAnimatedGif(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphTime::SaveAnimatedGif(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:53:20
    t.method("SaveAnimatedGif", static_cast<void (TGraphTime::*)(const char *)  const>(&TGraphTime::SaveAnimatedGif));
    t.method("SaveAnimatedGif", [](TGraphTime const& a)->void { a.SaveAnimatedGif(); });
    t.method("SaveAnimatedGif", [](TGraphTime const* a)->void { a->SaveAnimatedGif(); });

    DEBUG_MSG("Adding wrapper for void TGraphTime::SetSleepTime(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphTime::SetSleepTime(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:54:20
    t.method("SetSleepTime", static_cast<void (TGraphTime::*)(Int_t) >(&TGraphTime::SetSleepTime));
    t.method("SetSleepTime", [](TGraphTime& a)->void { a.SetSleepTime(); });
    t.method("SetSleepTime", [](TGraphTime* a)->void { a->SetSleepTime(); });

    DEBUG_MSG("Adding wrapper for Version_t TGraphTime::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraphTime::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!Class_Version", static_cast<Version_t (*)() >(&TGraphTime::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGraphTime::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphTime::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    t.method("IsA", static_cast<TClass * (TGraphTime::*)()  const>(&TGraphTime::IsA));

    DEBUG_MSG("Adding wrapper for void TGraphTime::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphTime::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    t.method("StreamerNVirtual", static_cast<void (TGraphTime::*)(TBuffer &) >(&TGraphTime::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGraphTime::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphTime::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!DeclFileName", []() { return (std::string)TGraphTime::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraphTime::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphTime::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!ImplFileLine", static_cast<int (*)() >(&TGraphTime::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGraphTime::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphTime::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!ImplFileName", []() { return (std::string)TGraphTime::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphTime::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphTime::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!Class_Name", []() { return (std::string)TGraphTime::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphTime::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphTime::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!Dictionary", static_cast<TClass * (*)() >(&TGraphTime::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGraphTime::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphTime::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!Class", static_cast<TClass * (*)() >(&TGraphTime::Class));

    DEBUG_MSG("Adding wrapper for void TGraphTime::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphTime::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    t.method("Streamer", static_cast<void (TGraphTime::*)(TBuffer &) >(&TGraphTime::Streamer));

    DEBUG_MSG("Adding wrapper for int TGraphTime::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphTime::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGraphTime.h:56:4
    module_.method("TGraphTime!DeclFileLine", static_cast<int (*)() >(&TGraphTime::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraphTime>> type_;
};
std::shared_ptr<Wrapper> newJlTGraphTime(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraphTime(module));
}
