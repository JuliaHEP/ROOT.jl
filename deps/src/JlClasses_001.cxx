// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TClass> : std::false_type { };
  template<> struct DefaultConstructible<TClass> : std::false_type { };
}

// Class generating the wrapper for type TClass
// signature to use in the veto file: TClass
struct JlTClass: public Wrapper {

  JlTClass(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TClass (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TClass.h:81:7
    jlcxx::TypeWrapper<TClass>  t = jlModule.add_type<TClass>("TClass");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TClass>>(new jlcxx::TypeWrapper<TClass>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TClass>> type_;
};
std::shared_ptr<Wrapper> newJlTClass(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTClass(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<std::type_info> : std::false_type { };
  template<> struct DefaultConstructible<std::type_info> : std::false_type { };
}

// Class generating the wrapper for type std::type_info
// signature to use in the veto file: std::type_info
struct Jlstd_type_info: public Wrapper {

  Jlstd_type_info(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type std::type_info (" __HERE__ ")");
    // defined in /usr/lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/typeinfo:92:9
    jlcxx::TypeWrapper<std::type_info>  t = jlModule.add_type<std::type_info>("std!type_info");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<std::type_info>>(new jlcxx::TypeWrapper<std::type_info>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<std::type_info>> type_;
};
std::shared_ptr<Wrapper> newJlstd_type_info(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlstd_type_info(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualIsAProxy> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualIsAProxy> : std::false_type { };
}

// Class generating the wrapper for type TVirtualIsAProxy
// signature to use in the veto file: TVirtualIsAProxy
struct JlTVirtualIsAProxy: public Wrapper {

  JlTVirtualIsAProxy(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualIsAProxy (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualIsAProxy.h:27:7
    jlcxx::TypeWrapper<TVirtualIsAProxy>  t = jlModule.add_type<TVirtualIsAProxy>("TVirtualIsAProxy");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualIsAProxy>>(new jlcxx::TypeWrapper<TVirtualIsAProxy>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualIsAProxy>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualIsAProxy(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualIsAProxy(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TObject> : std::false_type { };
  template<> struct DefaultConstructible<TObject> : std::false_type { };
}

// Class generating the wrapper for type TObject
// signature to use in the veto file: TObject
struct JlTObject: public Wrapper {

  JlTObject(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TObject (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:41:7
    jlcxx::TypeWrapper<TObject>  t = jlModule.add_type<TObject>("TObject");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TObject>>(new jlcxx::TypeWrapper<TObject>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TObject::TObject(const TObject &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:112:4
    t.constructor<const TObject &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TObject & TObject::operator=(const TObject &) (" __HERE__ ")");
    // signature to use in the veto list: TObject & TObject::operator=(const TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:113:13
    t.method("assign", [](TObject& a, const TObject & arg0)->TObject & { return a.operator=(arg0); });
    t.method("assign", [](TObject* a, const TObject & arg0)->TObject & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::AppendPad(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::AppendPad(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:116:24
    t.method("AppendPad", [](TObject& a)->void { a.AppendPad(); });
    t.method("AppendPad", [](TObject& a, Option_t * arg0)->void { a.AppendPad(arg0); });
    t.method("AppendPad", [](TObject* a)->void { a->AppendPad(); });
    t.method("AppendPad", [](TObject* a, Option_t * arg0)->void { a->AppendPad(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Browse(TBrowser *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:117:24
    t.method("Browse", [](TObject& a, TBrowser * arg0)->void { a.Browse(arg0); });
    t.method("Browse", [](TObject* a, TBrowser * arg0)->void { a->Browse(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TObject::ClassName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::ClassName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:118:24
    t.method("ClassName", [](TObject const& a) { return (std::string)a.ClassName(); });
    t.method("ClassName", [](TObject const* a) { return (std::string)a->ClassName(); });

    DEBUG_MSG("Adding wrapper for void TObject::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Clear(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:119:24
    t.method("Clear", [](TObject& a)->void { a.Clear(); });
    t.method("Clear", [](TObject& a, Option_t * arg0)->void { a.Clear(arg0); });
    t.method("Clear", [](TObject* a)->void { a->Clear(); });
    t.method("Clear", [](TObject* a, Option_t * arg0)->void { a->Clear(arg0); });

    DEBUG_MSG("Adding wrapper for ULong_t TObject::CheckedHash() (" __HERE__ ")");
    // signature to use in the veto list: ULong_t TObject::CheckedHash()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:120:24
    t.method("CheckedHash", [](TObject& a)->ULong_t { return a.CheckedHash(); });
    t.method("CheckedHash", [](TObject* a)->ULong_t { return a->CheckedHash(); });

    DEBUG_MSG("Adding wrapper for TObject * TObject::Clone(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TObject::Clone(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:121:24
    t.method("Clone", [](TObject const& a)->TObject * { return a.Clone(); });
    t.method("Clone", [](TObject const& a, const char * arg0)->TObject * { return a.Clone(arg0); });
    t.method("Clone", [](TObject const* a)->TObject * { return a->Clone(); });
    t.method("Clone", [](TObject const* a, const char * arg0)->TObject * { return a->Clone(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TObject::Compare(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TObject::Compare(const TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:122:24
    t.method("Compare", [](TObject const& a, const TObject * arg0)->Int_t { return a.Compare(arg0); });
    t.method("Compare", [](TObject const* a, const TObject * arg0)->Int_t { return a->Compare(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:123:24
    t.method("Copy", [](TObject const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TObject const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Delete(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Delete(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:124:24
    t.method("Delete", [](TObject& a)->void { a.Delete(); });
    t.method("Delete", [](TObject& a, Option_t * arg0)->void { a.Delete(arg0); });
    t.method("Delete", [](TObject* a)->void { a->Delete(); });
    t.method("Delete", [](TObject* a, Option_t * arg0)->void { a->Delete(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TObject::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TObject::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:125:24
    t.method("DistancetoPrimitive", [](TObject& a, Int_t arg0, Int_t arg1)->Int_t { return a.DistancetoPrimitive(arg0, arg1); });
    t.method("DistancetoPrimitive", [](TObject* a, Int_t arg0, Int_t arg1)->Int_t { return a->DistancetoPrimitive(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:126:24
    t.method("Draw", [](TObject& a)->void { a.Draw(); });
    t.method("Draw", [](TObject& a, Option_t * arg0)->void { a.Draw(arg0); });
    t.method("Draw", [](TObject* a)->void { a->Draw(); });
    t.method("Draw", [](TObject* a, Option_t * arg0)->void { a->Draw(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::DrawClass() (" __HERE__ ")");
    // signature to use in the veto list: void TObject::DrawClass()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:127:24
    t.method("DrawClass", [](TObject const& a)->void { a.DrawClass(); });
    t.method("DrawClass", [](TObject const* a)->void { a->DrawClass(); });

    DEBUG_MSG("Adding wrapper for TObject * TObject::DrawClone(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TObject::DrawClone(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:128:24
    t.method("DrawClone", [](TObject const& a)->TObject * { return a.DrawClone(); });
    t.method("DrawClone", [](TObject const& a, Option_t * arg0)->TObject * { return a.DrawClone(arg0); });
    t.method("DrawClone", [](TObject const* a)->TObject * { return a->DrawClone(); });
    t.method("DrawClone", [](TObject const* a, Option_t * arg0)->TObject * { return a->DrawClone(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Dump() (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Dump()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:129:24
    t.method("Dump", [](TObject const& a)->void { a.Dump(); });
    t.method("Dump", [](TObject const* a)->void { a->Dump(); });

    DEBUG_MSG("Adding wrapper for void TObject::Execute(const char *, const char *, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Execute(const char *, const char *, Int_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:130:24
    t.method("Execute", [](TObject& a, const char * arg0, const char * arg1)->void { a.Execute(arg0, arg1); });
    t.method("Execute", [](TObject& a, const char * arg0, const char * arg1, Int_t * arg2)->void { a.Execute(arg0, arg1, arg2); });
    t.method("Execute", [](TObject* a, const char * arg0, const char * arg1)->void { a->Execute(arg0, arg1); });
    t.method("Execute", [](TObject* a, const char * arg0, const char * arg1, Int_t * arg2)->void { a->Execute(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TObject::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:132:24
    t.method("ExecuteEvent", [](TObject& a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a.ExecuteEvent(arg0, arg1, arg2); });
    t.method("ExecuteEvent", [](TObject* a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a->ExecuteEvent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TObject * TObject::FindObject(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TObject::FindObject(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:133:24
    t.method("FindObject", [](TObject const& a, const char * arg0)->TObject * { return a.FindObject(arg0); });
    t.method("FindObject", [](TObject const* a, const char * arg0)->TObject * { return a->FindObject(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TObject::FindObject(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TObject::FindObject(const TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:134:24
    t.method("FindObject", [](TObject const& a, const TObject * arg0)->TObject * { return a.FindObject(arg0); });
    t.method("FindObject", [](TObject const* a, const TObject * arg0)->TObject * { return a->FindObject(arg0); });

    DEBUG_MSG("Adding wrapper for Option_t * TObject::GetDrawOption() (" __HERE__ ")");
    // signature to use in the veto list: Option_t * TObject::GetDrawOption()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:135:24
    t.method("GetDrawOption", [](TObject const& a)->Option_t * { return a.GetDrawOption(); });
    t.method("GetDrawOption", [](TObject const* a)->Option_t * { return a->GetDrawOption(); });

    DEBUG_MSG("Adding wrapper for UInt_t TObject::GetUniqueID() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TObject::GetUniqueID()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:136:24
    t.method("GetUniqueID", [](TObject const& a)->UInt_t { return a.GetUniqueID(); });
    t.method("GetUniqueID", [](TObject const* a)->UInt_t { return a->GetUniqueID(); });

    DEBUG_MSG("Adding wrapper for const char * TObject::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::GetName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:137:24
    t.method("GetName", [](TObject const& a) { return (std::string)a.GetName(); });
    t.method("GetName", [](TObject const* a) { return (std::string)a->GetName(); });

    DEBUG_MSG("Adding wrapper for const char * TObject::GetIconName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::GetIconName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:138:24
    t.method("GetIconName", [](TObject const& a) { return (std::string)a.GetIconName(); });
    t.method("GetIconName", [](TObject const* a) { return (std::string)a->GetIconName(); });

    DEBUG_MSG("Adding wrapper for Option_t * TObject::GetOption() (" __HERE__ ")");
    // signature to use in the veto list: Option_t * TObject::GetOption()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:139:24
    t.method("GetOption", [](TObject const& a)->Option_t * { return a.GetOption(); });
    t.method("GetOption", [](TObject const* a)->Option_t * { return a->GetOption(); });

    DEBUG_MSG("Adding wrapper for char * TObject::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TObject::GetObjectInfo(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:140:24
    t.method("GetObjectInfo", [](TObject const& a, Int_t arg0, Int_t arg1)->char * { return a.GetObjectInfo(arg0, arg1); });
    t.method("GetObjectInfo", [](TObject const* a, Int_t arg0, Int_t arg1)->char * { return a->GetObjectInfo(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const char * TObject::GetTitle() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::GetTitle()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:141:24
    t.method("GetTitle", [](TObject const& a) { return (std::string)a.GetTitle(); });
    t.method("GetTitle", [](TObject const* a) { return (std::string)a->GetTitle(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::HandleTimer(TTimer *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::HandleTimer(TTimer *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:142:24
    t.method("HandleTimer", [](TObject& a, TTimer * arg0)->Bool_t { return a.HandleTimer(arg0); });
    t.method("HandleTimer", [](TObject* a, TTimer * arg0)->Bool_t { return a->HandleTimer(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::HasInconsistentHash() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::HasInconsistentHash()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:143:24
    t.method("HasInconsistentHash", [](TObject const& a)->Bool_t { return a.HasInconsistentHash(); });
    t.method("HasInconsistentHash", [](TObject const* a)->Bool_t { return a->HasInconsistentHash(); });

    DEBUG_MSG("Adding wrapper for ULong_t TObject::Hash() (" __HERE__ ")");
    // signature to use in the veto list: ULong_t TObject::Hash()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:144:24
    t.method("Hash", [](TObject const& a)->ULong_t { return a.Hash(); });
    t.method("Hash", [](TObject const* a)->ULong_t { return a->Hash(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::InheritsFrom(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::InheritsFrom(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:145:24
    t.method("InheritsFrom", [](TObject const& a, const char * arg0)->Bool_t { return a.InheritsFrom(arg0); });
    t.method("InheritsFrom", [](TObject const* a, const char * arg0)->Bool_t { return a->InheritsFrom(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::InheritsFrom(const TClass *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::InheritsFrom(const TClass *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:146:24
    t.method("InheritsFrom", [](TObject const& a, const TClass * arg0)->Bool_t { return a.InheritsFrom(arg0); });
    t.method("InheritsFrom", [](TObject const* a, const TClass * arg0)->Bool_t { return a->InheritsFrom(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Inspect() (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Inspect()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:147:24
    t.method("Inspect", [](TObject const& a)->void { a.Inspect(); });
    t.method("Inspect", [](TObject const* a)->void { a->Inspect(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::IsFolder() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::IsFolder()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:148:24
    t.method("IsFolder", [](TObject const& a)->Bool_t { return a.IsFolder(); });
    t.method("IsFolder", [](TObject const* a)->Bool_t { return a->IsFolder(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::IsEqual(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::IsEqual(const TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:149:24
    t.method("IsEqual", [](TObject const& a, const TObject * arg0)->Bool_t { return a.IsEqual(arg0); });
    t.method("IsEqual", [](TObject const* a, const TObject * arg0)->Bool_t { return a->IsEqual(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::IsSortable() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::IsSortable()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:150:24
    t.method("IsSortable", [](TObject const& a)->Bool_t { return a.IsSortable(); });
    t.method("IsSortable", [](TObject const* a)->Bool_t { return a->IsSortable(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::IsOnHeap() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::IsOnHeap()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:152:28
    t.method("IsOnHeap", [](TObject const& a)->Bool_t { return a.IsOnHeap(); });
    t.method("IsOnHeap", [](TObject const* a)->Bool_t { return a->IsOnHeap(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::IsZombie() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::IsZombie()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:153:28
    t.method("IsZombie", [](TObject const& a)->Bool_t { return a.IsZombie(); });
    t.method("IsZombie", [](TObject const* a)->Bool_t { return a->IsZombie(); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::Notify() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::Notify()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:155:24
    t.method("Notify", [](TObject& a)->Bool_t { return a.Notify(); });
    t.method("Notify", [](TObject* a)->Bool_t { return a->Notify(); });

    DEBUG_MSG("Adding wrapper for void TObject::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::ls(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:156:24
    t.method("ls", [](TObject const& a)->void { a.ls(); });
    t.method("ls", [](TObject const& a, Option_t * arg0)->void { a.ls(arg0); });
    t.method("ls", [](TObject const* a)->void { a->ls(); });
    t.method("ls", [](TObject const* a, Option_t * arg0)->void { a->ls(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:157:24
    t.method("Paint", [](TObject& a)->void { a.Paint(); });
    t.method("Paint", [](TObject& a, Option_t * arg0)->void { a.Paint(arg0); });
    t.method("Paint", [](TObject* a)->void { a->Paint(); });
    t.method("Paint", [](TObject* a, Option_t * arg0)->void { a->Paint(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Pop() (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Pop()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:158:24
    t.method("Pop", [](TObject& a)->void { a.Pop(); });
    t.method("Pop", [](TObject* a)->void { a->Pop(); });

    DEBUG_MSG("Adding wrapper for void TObject::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:159:24
    t.method("Print", [](TObject const& a)->void { a.Print(); });
    t.method("Print", [](TObject const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TObject const* a)->void { a->Print(); });
    t.method("Print", [](TObject const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TObject::Read(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TObject::Read(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:160:24
    t.method("Read", [](TObject& a, const char * arg0)->Int_t { return a.Read(arg0); });
    t.method("Read", [](TObject* a, const char * arg0)->Int_t { return a->Read(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::RecursiveRemove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::RecursiveRemove(TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:161:24
    t.method("RecursiveRemove", [](TObject& a, TObject * arg0)->void { a.RecursiveRemove(arg0); });
    t.method("RecursiveRemove", [](TObject* a, TObject * arg0)->void { a->RecursiveRemove(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::SaveAs(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SaveAs(const char *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:162:24
    t.method("SaveAs", [](TObject const& a)->void { a.SaveAs(); });
    t.method("SaveAs", [](TObject const& a, const char * arg0)->void { a.SaveAs(arg0); });
    t.method("SaveAs", [](TObject const& a, const char * arg0, Option_t * arg1)->void { a.SaveAs(arg0, arg1); });
    t.method("SaveAs", [](TObject const* a)->void { a->SaveAs(); });
    t.method("SaveAs", [](TObject const* a, const char * arg0)->void { a->SaveAs(arg0); });
    t.method("SaveAs", [](TObject const* a, const char * arg0, Option_t * arg1)->void { a->SaveAs(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::SetDrawOption(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SetDrawOption(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:164:24
    t.method("SetDrawOption", [](TObject& a)->void { a.SetDrawOption(); });
    t.method("SetDrawOption", [](TObject& a, Option_t * arg0)->void { a.SetDrawOption(arg0); });
    t.method("SetDrawOption", [](TObject* a)->void { a->SetDrawOption(); });
    t.method("SetDrawOption", [](TObject* a, Option_t * arg0)->void { a->SetDrawOption(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::SetUniqueID(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SetUniqueID(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:165:24
    t.method("SetUniqueID", [](TObject& a, UInt_t arg0)->void { a.SetUniqueID(arg0); });
    t.method("SetUniqueID", [](TObject* a, UInt_t arg0)->void { a->SetUniqueID(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::UseCurrentStyle() (" __HERE__ ")");
    // signature to use in the veto list: void TObject::UseCurrentStyle()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:166:24
    t.method("UseCurrentStyle", [](TObject& a)->void { a.UseCurrentStyle(); });
    t.method("UseCurrentStyle", [](TObject* a)->void { a->UseCurrentStyle(); });

    DEBUG_MSG("Adding wrapper for Int_t TObject::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TObject::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:167:24
    t.method("Write", [](TObject& a)->Int_t { return a.Write(); });
    t.method("Write", [](TObject& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TObject& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TObject& a, const char * arg0, Int_t arg1, Int_t arg2)->Int_t { return a.Write(arg0, arg1, arg2); });
    t.method("Write", [](TObject* a)->Int_t { return a->Write(); });
    t.method("Write", [](TObject* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TObject* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });
    t.method("Write", [](TObject* a, const char * arg0, Int_t arg1, Int_t arg2)->Int_t { return a->Write(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TObject::Write(const char *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TObject::Write(const char *, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:168:24
    t.method("Write", [](TObject const& a)->Int_t { return a.Write(); });
    t.method("Write", [](TObject const& a, const char * arg0)->Int_t { return a.Write(arg0); });
    t.method("Write", [](TObject const& a, const char * arg0, Int_t arg1)->Int_t { return a.Write(arg0, arg1); });
    t.method("Write", [](TObject const& a, const char * arg0, Int_t arg1, Int_t arg2)->Int_t { return a.Write(arg0, arg1, arg2); });
    t.method("Write", [](TObject const* a)->Int_t { return a->Write(); });
    t.method("Write", [](TObject const* a, const char * arg0)->Int_t { return a->Write(arg0); });
    t.method("Write", [](TObject const* a, const char * arg0, Int_t arg1)->Int_t { return a->Write(arg0, arg1); });
    t.method("Write", [](TObject const* a, const char * arg0, Int_t arg1, Int_t arg2)->Int_t { return a->Write(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::IsDestructed() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::IsDestructed()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:178:11
    t.method("IsDestructed", [](TObject const& a)->Bool_t { return a.IsDestructed(); });
    t.method("IsDestructed", [](TObject const* a)->Bool_t { return a->IsDestructed(); });

    DEBUG_MSG("Adding wrapper for void * TObject::operator new(size_t) (" __HERE__ ")");
    // signature to use in the veto list: void * TObject::operator new(size_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:181:13
    module_.method("TObject!new", [](size_t arg0)->void * { return TObject::operator new(arg0); });

    DEBUG_MSG("Adding wrapper for void * TObject::operator new[](size_t) (" __HERE__ ")");
    // signature to use in the veto list: void * TObject::operator new[](size_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:182:13
    module_.method("TObject!new[]", [](size_t arg0)->void * { return TObject::operator new[](arg0); });

    DEBUG_MSG("Adding wrapper for void * TObject::operator new(size_t, void *) (" __HERE__ ")");
    // signature to use in the veto list: void * TObject::operator new(size_t, void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:183:13
    module_.method("TObject!new", [](size_t arg0, void * arg1)->void * { return TObject::operator new(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void * TObject::operator new[](size_t, void *) (" __HERE__ ")");
    // signature to use in the veto list: void * TObject::operator new[](size_t, void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:184:13
    module_.method("TObject!new[]", [](size_t arg0, void * arg1)->void * { return TObject::operator new[](arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::operator delete(void *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::operator delete(void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:185:13
    module_.method("TObject!delete", [](void * arg0)->void { TObject::operator delete(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::operator delete[](void *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::operator delete[](void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:186:13
    module_.method("TObject!delete[]", [](void * arg0)->void { TObject::operator delete[](arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::operator delete(void *, size_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::operator delete(void *, size_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:189:13
    module_.method("TObject!delete", [](void * arg0, size_t arg1)->void { TObject::operator delete(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::operator delete[](void *, size_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::operator delete[](void *, size_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:190:13
    module_.method("TObject!delete[]", [](void * arg0, size_t arg1)->void { TObject::operator delete[](arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::operator delete(void *, void *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::operator delete(void *, void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:192:13
    module_.method("TObject!delete", [](void * arg0, void * arg1)->void { TObject::operator delete(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::operator delete[](void *, void *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::operator delete[](void *, void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:193:13
    module_.method("TObject!delete[]", [](void * arg0, void * arg1)->void { TObject::operator delete[](arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::SetBit(UInt_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SetBit(UInt_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:196:13
    t.method("SetBit", [](TObject& a, UInt_t arg0, Bool_t arg1)->void { a.SetBit(arg0, arg1); });
    t.method("SetBit", [](TObject* a, UInt_t arg0, Bool_t arg1)->void { a->SetBit(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TObject::SetBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SetBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:197:13
    t.method("SetBit", [](TObject& a, UInt_t arg0)->void { a.SetBit(arg0); });
    t.method("SetBit", [](TObject* a, UInt_t arg0)->void { a->SetBit(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::ResetBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::ResetBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:198:13
    t.method("ResetBit", [](TObject& a, UInt_t arg0)->void { a.ResetBit(arg0); });
    t.method("ResetBit", [](TObject* a, UInt_t arg0)->void { a->ResetBit(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::TestBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::TestBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:199:28
    t.method("TestBit", [](TObject const& a, UInt_t arg0)->Bool_t { return a.TestBit(arg0); });
    t.method("TestBit", [](TObject const* a, UInt_t arg0)->Bool_t { return a->TestBit(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TObject::TestBits(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TObject::TestBits(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:200:13
    t.method("TestBits", [](TObject const& a, UInt_t arg0)->Int_t { return a.TestBits(arg0); });
    t.method("TestBits", [](TObject const* a, UInt_t arg0)->Int_t { return a->TestBits(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::InvertBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::InvertBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:201:13
    t.method("InvertBit", [](TObject& a, UInt_t arg0)->void { a.InvertBit(arg0); });
    t.method("InvertBit", [](TObject* a, UInt_t arg0)->void { a->InvertBit(arg0); });






    DEBUG_MSG("Adding wrapper for void TObject::AbstractMethod(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::AbstractMethod(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:230:13
    t.method("AbstractMethod", [](TObject const& a, const char * arg0)->void { a.AbstractMethod(arg0); });
    t.method("AbstractMethod", [](TObject const* a, const char * arg0)->void { a->AbstractMethod(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::MayNotUse(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::MayNotUse(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:231:13
    t.method("MayNotUse", [](TObject const& a, const char * arg0)->void { a.MayNotUse(arg0); });
    t.method("MayNotUse", [](TObject const* a, const char * arg0)->void { a->MayNotUse(arg0); });

    DEBUG_MSG("Adding wrapper for void TObject::Obsolete(const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Obsolete(const char *, const char *, const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:232:13
    t.method("Obsolete", [](TObject const& a, const char * arg0, const char * arg1, const char * arg2)->void { a.Obsolete(arg0, arg1, arg2); });
    t.method("Obsolete", [](TObject const* a, const char * arg0, const char * arg1, const char * arg2)->void { a->Obsolete(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Longptr_t TObject::GetDtorOnly() (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TObject::GetDtorOnly()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:235:21
    module_.method("TObject!GetDtorOnly", []()->Longptr_t { return TObject::GetDtorOnly(); });

    DEBUG_MSG("Adding wrapper for void TObject::SetDtorOnly(void *) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SetDtorOnly(void *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:236:21
    module_.method("TObject!SetDtorOnly", [](void * arg0)->void { TObject::SetDtorOnly(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TObject::GetObjectStat() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TObject::GetObjectStat()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:237:21
    module_.method("TObject!GetObjectStat", []()->Bool_t { return TObject::GetObjectStat(); });

    DEBUG_MSG("Adding wrapper for void TObject::SetObjectStat(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::SetObjectStat(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:238:21
    module_.method("TObject!SetObjectStat", [](Bool_t arg0)->void { TObject::SetObjectStat(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TObject::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TObject::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!Class_Version", []()->Version_t { return TObject::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TObject::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TObject::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    t.method("IsA", [](TObject const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TObject const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TObject::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    t.method("StreamerNVirtual", [](TObject& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TObject* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TObject::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!DeclFileName", []() { return (std::string)TObject::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TObject::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TObject::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!ImplFileLine", []()->int { return TObject::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TObject::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!ImplFileName", []() { return (std::string)TObject::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TObject::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TObject::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!Class_Name", []() { return (std::string)TObject::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TObject::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TObject::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!Dictionary", []()->TClass * { return TObject::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TObject::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TObject::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!Class", []()->TClass * { return TObject::Class(); });

    DEBUG_MSG("Adding wrapper for void TObject::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TObject::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    t.method("Streamer", [](TObject& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TObject* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TObject::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TObject::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TObject.h:243:4
    module_.method("TObject!DeclFileLine", []()->int { return TObject::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TObject>> type_;
};
std::shared_ptr<Wrapper> newJlTObject(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTObject(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TNamed> : std::false_type { };
  template<> struct DefaultConstructible<TNamed> : std::false_type { };
template<> struct SuperType<TNamed> { typedef TObject type; };
}

// Class generating the wrapper for type TNamed
// signature to use in the veto file: TNamed
struct JlTNamed: public Wrapper {

  JlTNamed(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TNamed (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:29:7
    jlcxx::TypeWrapper<TNamed>  t = jlModule.add_type<TNamed>("TNamed",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TNamed>>(new jlcxx::TypeWrapper<TNamed>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TNamed::TNamed(const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:37:4
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TNamed::TNamed(const TString &, const TString &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:38:4
    t.constructor<const TString &, const TString &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TNamed::TNamed(const TNamed &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:39:4
    t.constructor<const TNamed &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TNamed & TNamed::operator=(const TNamed &) (" __HERE__ ")");
    // signature to use in the veto list: TNamed & TNamed::operator=(const TNamed &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:40:12
    t.method("assign", [](TNamed& a, const TNamed & arg0)->TNamed & { return a.operator=(arg0); });
    t.method("assign", [](TNamed* a, const TNamed & arg0)->TNamed & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void TNamed::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::Clear(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:42:22
    t.method("Clear", [](TNamed& a)->void { a.Clear(); });
    t.method("Clear", [](TNamed& a, Option_t * arg0)->void { a.Clear(arg0); });
    t.method("Clear", [](TNamed* a)->void { a->Clear(); });
    t.method("Clear", [](TNamed* a, Option_t * arg0)->void { a->Clear(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TNamed::Clone(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TNamed::Clone(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:43:22
    t.method("Clone", [](TNamed const& a)->TObject * { return a.Clone(); });
    t.method("Clone", [](TNamed const& a, const char * arg0)->TObject * { return a.Clone(arg0); });
    t.method("Clone", [](TNamed const* a)->TObject * { return a->Clone(); });
    t.method("Clone", [](TNamed const* a, const char * arg0)->TObject * { return a->Clone(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TNamed::Compare(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TNamed::Compare(const TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:44:22
    t.method("Compare", [](TNamed const& a, const TObject * arg0)->Int_t { return a.Compare(arg0); });
    t.method("Compare", [](TNamed const* a, const TObject * arg0)->Int_t { return a->Compare(arg0); });

    DEBUG_MSG("Adding wrapper for void TNamed::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:45:22
    t.method("Copy", [](TNamed const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TNamed const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for void TNamed::FillBuffer(char *&) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::FillBuffer(char *&)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:46:22
    t.method("FillBuffer", [](TNamed& a, char *& arg0)->void { a.FillBuffer(arg0); });
    t.method("FillBuffer", [](TNamed* a, char *& arg0)->void { a->FillBuffer(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TNamed::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNamed::GetName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:47:26
    t.method("GetName", [](TNamed const& a) { return (std::string)a.GetName(); });
    t.method("GetName", [](TNamed const* a) { return (std::string)a->GetName(); });

    DEBUG_MSG("Adding wrapper for const char * TNamed::GetTitle() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNamed::GetTitle()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:48:26
    t.method("GetTitle", [](TNamed const& a) { return (std::string)a.GetTitle(); });
    t.method("GetTitle", [](TNamed const* a) { return (std::string)a->GetTitle(); });

    DEBUG_MSG("Adding wrapper for ULong_t TNamed::Hash() (" __HERE__ ")");
    // signature to use in the veto list: ULong_t TNamed::Hash()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:49:22
    t.method("Hash", [](TNamed const& a)->ULong_t { return a.Hash(); });
    t.method("Hash", [](TNamed const* a)->ULong_t { return a->Hash(); });

    DEBUG_MSG("Adding wrapper for Bool_t TNamed::IsSortable() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TNamed::IsSortable()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:50:22
    t.method("IsSortable", [](TNamed const& a)->Bool_t { return a.IsSortable(); });
    t.method("IsSortable", [](TNamed const* a)->Bool_t { return a->IsSortable(); });

    DEBUG_MSG("Adding wrapper for void TNamed::SetName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::SetName(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:51:22
    t.method("SetName", [](TNamed& a, const char * arg0)->void { a.SetName(arg0); });
    t.method("SetName", [](TNamed* a, const char * arg0)->void { a->SetName(arg0); });

    DEBUG_MSG("Adding wrapper for void TNamed::SetNameTitle(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::SetNameTitle(const char *, const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:52:22
    t.method("SetNameTitle", [](TNamed& a, const char * arg0, const char * arg1)->void { a.SetNameTitle(arg0, arg1); });
    t.method("SetNameTitle", [](TNamed* a, const char * arg0, const char * arg1)->void { a->SetNameTitle(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TNamed::SetTitle(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::SetTitle(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:53:22
    t.method("SetTitle", [](TNamed& a)->void { a.SetTitle(); });
    t.method("SetTitle", [](TNamed& a, const char * arg0)->void { a.SetTitle(arg0); });
    t.method("SetTitle", [](TNamed* a)->void { a->SetTitle(); });
    t.method("SetTitle", [](TNamed* a, const char * arg0)->void { a->SetTitle(arg0); });

    DEBUG_MSG("Adding wrapper for void TNamed::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::ls(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:54:22
    t.method("ls", [](TNamed const& a)->void { a.ls(); });
    t.method("ls", [](TNamed const& a, Option_t * arg0)->void { a.ls(arg0); });
    t.method("ls", [](TNamed const* a)->void { a->ls(); });
    t.method("ls", [](TNamed const* a, Option_t * arg0)->void { a->ls(arg0); });

    DEBUG_MSG("Adding wrapper for void TNamed::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:55:22
    t.method("Print", [](TNamed const& a)->void { a.Print(); });
    t.method("Print", [](TNamed const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TNamed const* a)->void { a->Print(); });
    t.method("Print", [](TNamed const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TNamed::Sizeof() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TNamed::Sizeof()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:56:22
    t.method("Sizeof", [](TNamed const& a)->Int_t { return a.Sizeof(); });
    t.method("Sizeof", [](TNamed const* a)->Int_t { return a->Sizeof(); });

    DEBUG_MSG("Adding wrapper for Version_t TNamed::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TNamed::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!Class_Version", []()->Version_t { return TNamed::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TNamed::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNamed::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    t.method("IsA", [](TNamed const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TNamed const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TNamed::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    t.method("StreamerNVirtual", [](TNamed& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TNamed* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TNamed::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNamed::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!DeclFileName", []() { return (std::string)TNamed::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TNamed::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TNamed::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!ImplFileLine", []()->int { return TNamed::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TNamed::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNamed::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!ImplFileName", []() { return (std::string)TNamed::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TNamed::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNamed::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!Class_Name", []() { return (std::string)TNamed::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TNamed::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNamed::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!Dictionary", []()->TClass * { return TNamed::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TNamed::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNamed::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!Class", []()->TClass * { return TNamed::Class(); });

    DEBUG_MSG("Adding wrapper for void TNamed::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TNamed::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    t.method("Streamer", [](TNamed& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TNamed* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TNamed::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TNamed::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNamed.h:58:4
    module_.method("TNamed!DeclFileLine", []()->int { return TNamed::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TNamed>> type_;
};
std::shared_ptr<Wrapper> newJlTNamed(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTNamed(module));
}
