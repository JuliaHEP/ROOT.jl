// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TSVDUnfold> : std::false_type { };
  template<> struct DefaultConstructible<TSVDUnfold> : std::false_type { };
template<> struct SuperType<TSVDUnfold> { typedef TObject type; };
}

// Class generating the wrapper for type TSVDUnfold
// signature to use in the veto file: TSVDUnfold
struct JlTSVDUnfold: public Wrapper {

  JlTSVDUnfold(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSVDUnfold (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:46:7
    jlcxx::TypeWrapper<TSVDUnfold>  t = jlModule.add_type<TSVDUnfold>("TSVDUnfold",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSVDUnfold>>(new jlcxx::TypeWrapper<TSVDUnfold>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TSVDUnfold::TSVDUnfold(const TH1D *, const TH1D *, const TH1D *, const TH2D *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:57:4
    t.constructor<const TH1D *, const TH1D *, const TH1D *, const TH2D *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TSVDUnfold::TSVDUnfold(const TH1D *, TH2D *, const TH1D *, const TH1D *, const TH2D *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:58:4
    t.constructor<const TH1D *, TH2D *, const TH1D *, const TH1D *, const TH2D *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TSVDUnfold::TSVDUnfold(const TSVDUnfold &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:59:4
    t.constructor<const TSVDUnfold &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void TSVDUnfold::SetNormalize(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSVDUnfold::SetNormalize(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:66:13
    t.method("SetNormalize", [](TSVDUnfold& a, Bool_t arg0)->void { a.SetNormalize(arg0); });
    t.method("SetNormalize", [](TSVDUnfold* a, Bool_t arg0)->void { a->SetNormalize(arg0); });

    DEBUG_MSG("Adding wrapper for TH1D * TSVDUnfold::Unfold(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TSVDUnfold::Unfold(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:70:13
    t.method("Unfold", [](TSVDUnfold& a, Int_t arg0)->TH1D * { return a.Unfold(arg0); });
    t.method("Unfold", [](TSVDUnfold* a, Int_t arg0)->TH1D * { return a->Unfold(arg0); });

    DEBUG_MSG("Adding wrapper for TH2D * TSVDUnfold::GetUnfoldCovMatrix(const TH2D *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TH2D * TSVDUnfold::GetUnfoldCovMatrix(const TH2D *, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:77:13
    t.method("GetUnfoldCovMatrix", [](TSVDUnfold& a, const TH2D * arg0, Int_t arg1)->TH2D * { return a.GetUnfoldCovMatrix(arg0, arg1); });
    t.method("GetUnfoldCovMatrix", [](TSVDUnfold& a, const TH2D * arg0, Int_t arg1, Int_t arg2)->TH2D * { return a.GetUnfoldCovMatrix(arg0, arg1, arg2); });
    t.method("GetUnfoldCovMatrix", [](TSVDUnfold* a, const TH2D * arg0, Int_t arg1)->TH2D * { return a->GetUnfoldCovMatrix(arg0, arg1); });
    t.method("GetUnfoldCovMatrix", [](TSVDUnfold* a, const TH2D * arg0, Int_t arg1, Int_t arg2)->TH2D * { return a->GetUnfoldCovMatrix(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TH2D * TSVDUnfold::GetAdetCovMatrix(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TH2D * TSVDUnfold::GetAdetCovMatrix(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:83:13
    t.method("GetAdetCovMatrix", [](TSVDUnfold& a, Int_t arg0)->TH2D * { return a.GetAdetCovMatrix(arg0); });
    t.method("GetAdetCovMatrix", [](TSVDUnfold& a, Int_t arg0, Int_t arg1)->TH2D * { return a.GetAdetCovMatrix(arg0, arg1); });
    t.method("GetAdetCovMatrix", [](TSVDUnfold* a, Int_t arg0)->TH2D * { return a->GetAdetCovMatrix(arg0); });
    t.method("GetAdetCovMatrix", [](TSVDUnfold* a, Int_t arg0, Int_t arg1)->TH2D * { return a->GetAdetCovMatrix(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TSVDUnfold::GetKReg() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSVDUnfold::GetKReg()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:86:13
    t.method("GetKReg", [](TSVDUnfold const& a)->Int_t { return a.GetKReg(); });
    t.method("GetKReg", [](TSVDUnfold const* a)->Int_t { return a->GetKReg(); });

    DEBUG_MSG("Adding wrapper for TH1D * TSVDUnfold::GetD() (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TSVDUnfold::GetD()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:89:13
    t.method("GetD", [](TSVDUnfold const& a)->TH1D * { return a.GetD(); });
    t.method("GetD", [](TSVDUnfold const* a)->TH1D * { return a->GetD(); });

    DEBUG_MSG("Adding wrapper for TH1D * TSVDUnfold::GetSV() (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TSVDUnfold::GetSV()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:92:13
    t.method("GetSV", [](TSVDUnfold const& a)->TH1D * { return a.GetSV(); });
    t.method("GetSV", [](TSVDUnfold const* a)->TH1D * { return a->GetSV(); });

    DEBUG_MSG("Adding wrapper for TH2D * TSVDUnfold::GetXtau() (" __HERE__ ")");
    // signature to use in the veto list: TH2D * TSVDUnfold::GetXtau()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:95:13
    t.method("GetXtau", [](TSVDUnfold const& a)->TH2D * { return a.GetXtau(); });
    t.method("GetXtau", [](TSVDUnfold const* a)->TH2D * { return a->GetXtau(); });

    DEBUG_MSG("Adding wrapper for TH2D * TSVDUnfold::GetXinv() (" __HERE__ ")");
    // signature to use in the veto list: TH2D * TSVDUnfold::GetXinv()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:98:13
    t.method("GetXinv", [](TSVDUnfold const& a)->TH2D * { return a.GetXinv(); });
    t.method("GetXinv", [](TSVDUnfold const* a)->TH2D * { return a->GetXinv(); });

    DEBUG_MSG("Adding wrapper for TH2D * TSVDUnfold::GetBCov() (" __HERE__ ")");
    // signature to use in the veto list: TH2D * TSVDUnfold::GetBCov()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:101:13
    t.method("GetBCov", [](TSVDUnfold const& a)->TH2D * { return a.GetBCov(); });
    t.method("GetBCov", [](TSVDUnfold const* a)->TH2D * { return a->GetBCov(); });

    DEBUG_MSG("Adding wrapper for Double_t TSVDUnfold::ComputeChiSquared(const TH1D &, const TH1D &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSVDUnfold::ComputeChiSquared(const TH1D &, const TH1D &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:104:13
    t.method("ComputeChiSquared", [](TSVDUnfold& a, const TH1D & arg0, const TH1D & arg1)->Double_t { return a.ComputeChiSquared(arg0, arg1); });
    t.method("ComputeChiSquared", [](TSVDUnfold* a, const TH1D & arg0, const TH1D & arg1)->Double_t { return a->ComputeChiSquared(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Version_t TSVDUnfold::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSVDUnfold::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!Class_Version", []()->Version_t { return TSVDUnfold::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TSVDUnfold::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSVDUnfold::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    t.method("IsA", [](TSVDUnfold const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TSVDUnfold const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TSVDUnfold::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSVDUnfold::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    t.method("StreamerNVirtual", [](TSVDUnfold& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TSVDUnfold* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TSVDUnfold::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSVDUnfold::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!DeclFileName", []() { return (std::string)TSVDUnfold::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSVDUnfold::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSVDUnfold::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!ImplFileLine", []()->int { return TSVDUnfold::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TSVDUnfold::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSVDUnfold::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!ImplFileName", []() { return (std::string)TSVDUnfold::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSVDUnfold::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSVDUnfold::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!Class_Name", []() { return (std::string)TSVDUnfold::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSVDUnfold::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSVDUnfold::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!Dictionary", []()->TClass * { return TSVDUnfold::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TSVDUnfold::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSVDUnfold::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!Class", []()->TClass * { return TSVDUnfold::Class(); });

    DEBUG_MSG("Adding wrapper for void TSVDUnfold::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSVDUnfold::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    t.method("Streamer", [](TSVDUnfold& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TSVDUnfold* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TSVDUnfold::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSVDUnfold::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TSVDUnfold.h:156:4
    module_.method("TSVDUnfold!DeclFileLine", []()->int { return TSVDUnfold::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSVDUnfold>> type_;
};
std::shared_ptr<Wrapper> newJlTSVDUnfold(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSVDUnfold(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualGraphPainter> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualGraphPainter> : std::false_type { };
template<> struct SuperType<TVirtualGraphPainter> { typedef TObject type; };
}

// Class generating the wrapper for type TVirtualGraphPainter
// signature to use in the veto file: TVirtualGraphPainter
struct JlTVirtualGraphPainter: public Wrapper {

  JlTVirtualGraphPainter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualGraphPainter (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:28:7
    jlcxx::TypeWrapper<TVirtualGraphPainter>  t = jlModule.add_type<TVirtualGraphPainter>("TVirtualGraphPainter",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualGraphPainter>>(new jlcxx::TypeWrapper<TVirtualGraphPainter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGraphPainter::DistancetoPrimitiveHelper(TGraph *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGraphPainter::DistancetoPrimitiveHelper(TGraph *, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:37:18
    t.method("DistancetoPrimitiveHelper", [](TVirtualGraphPainter& a, TGraph * arg0, Int_t arg1, Int_t arg2)->Int_t { return a.DistancetoPrimitiveHelper(arg0, arg1, arg2); });
    t.method("DistancetoPrimitiveHelper", [](TVirtualGraphPainter* a, TGraph * arg0, Int_t arg1, Int_t arg2)->Int_t { return a->DistancetoPrimitiveHelper(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::DrawPanelHelper(TGraph *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::DrawPanelHelper(TGraph *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:38:18
    t.method("DrawPanelHelper", [](TVirtualGraphPainter& a, TGraph * arg0)->void { a.DrawPanelHelper(arg0); });
    t.method("DrawPanelHelper", [](TVirtualGraphPainter* a, TGraph * arg0)->void { a->DrawPanelHelper(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::ExecuteEventHelper(TGraph *, Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::ExecuteEventHelper(TGraph *, Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:39:18
    t.method("ExecuteEventHelper", [](TVirtualGraphPainter& a, TGraph * arg0, Int_t arg1, Int_t arg2, Int_t arg3)->void { a.ExecuteEventHelper(arg0, arg1, arg2, arg3); });
    t.method("ExecuteEventHelper", [](TVirtualGraphPainter* a, TGraph * arg0, Int_t arg1, Int_t arg2, Int_t arg3)->void { a->ExecuteEventHelper(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for char * TVirtualGraphPainter::GetObjectInfoHelper(TGraph *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TVirtualGraphPainter::GetObjectInfoHelper(TGraph *, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:40:18
    t.method("GetObjectInfoHelper", [](TVirtualGraphPainter const& a, TGraph * arg0, Int_t arg1, Int_t arg2)->char * { return a.GetObjectInfoHelper(arg0, arg1, arg2); });
    t.method("GetObjectInfoHelper", [](TVirtualGraphPainter const* a, TGraph * arg0, Int_t arg1, Int_t arg2)->char * { return a->GetObjectInfoHelper(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::PaintHelper(TGraph *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::PaintHelper(TGraph *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:41:18
    t.method("PaintHelper", [](TVirtualGraphPainter& a, TGraph * arg0, Option_t * arg1)->void { a.PaintHelper(arg0, arg1); });
    t.method("PaintHelper", [](TVirtualGraphPainter* a, TGraph * arg0, Option_t * arg1)->void { a->PaintHelper(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::PaintGraph(TGraph *, Int_t, const Double_t *, const Double_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::PaintGraph(TGraph *, Int_t, const Double_t *, const Double_t *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:42:18
    t.method("PaintGraph", [](TVirtualGraphPainter& a, TGraph * arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3, Option_t * arg4)->void { a.PaintGraph(arg0, arg1, arg2, arg3, arg4); });
    t.method("PaintGraph", [](TVirtualGraphPainter* a, TGraph * arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3, Option_t * arg4)->void { a->PaintGraph(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::PaintGrapHist(TGraph *, Int_t, const Double_t *, const Double_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::PaintGrapHist(TGraph *, Int_t, const Double_t *, const Double_t *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:43:18
    t.method("PaintGrapHist", [](TVirtualGraphPainter& a, TGraph * arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3, Option_t * arg4)->void { a.PaintGrapHist(arg0, arg1, arg2, arg3, arg4); });
    t.method("PaintGrapHist", [](TVirtualGraphPainter* a, TGraph * arg0, Int_t arg1, const Double_t * arg2, const Double_t * arg3, Option_t * arg4)->void { a->PaintGrapHist(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::PaintScatter(TScatter *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::PaintScatter(TScatter *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:44:18
    t.method("PaintScatter", [](TVirtualGraphPainter& a, TScatter * arg0, Option_t * arg1)->void { a.PaintScatter(arg0, arg1); });
    t.method("PaintScatter", [](TVirtualGraphPainter* a, TScatter * arg0, Option_t * arg1)->void { a->PaintScatter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::PaintStats(TGraph *, TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::PaintStats(TGraph *, TF1 *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:45:18
    t.method("PaintStats", [](TVirtualGraphPainter& a, TGraph * arg0, TF1 * arg1)->void { a.PaintStats(arg0, arg1); });
    t.method("PaintStats", [](TVirtualGraphPainter* a, TGraph * arg0, TF1 * arg1)->void { a->PaintStats(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::SetHighlight(TGraph *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::SetHighlight(TGraph *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:46:18
    t.method("SetHighlight", [](TVirtualGraphPainter& a, TGraph * arg0)->void { a.SetHighlight(arg0); });
    t.method("SetHighlight", [](TVirtualGraphPainter* a, TGraph * arg0)->void { a->SetHighlight(arg0); });

    DEBUG_MSG("Adding wrapper for TVirtualGraphPainter * TVirtualGraphPainter::GetPainter() (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGraphPainter * TVirtualGraphPainter::GetPainter()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:48:33
    module_.method("TVirtualGraphPainter!GetPainter", []()->TVirtualGraphPainter * { return TVirtualGraphPainter::GetPainter(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::SetPainter(TVirtualGraphPainter *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::SetPainter(TVirtualGraphPainter *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:49:33
    module_.method("TVirtualGraphPainter!SetPainter", [](TVirtualGraphPainter * arg0)->void { TVirtualGraphPainter::SetPainter(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TVirtualGraphPainter::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TVirtualGraphPainter::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!Class_Version", []()->Version_t { return TVirtualGraphPainter::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGraphPainter::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGraphPainter::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    t.method("IsA", [](TVirtualGraphPainter const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TVirtualGraphPainter const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    t.method("StreamerNVirtual", [](TVirtualGraphPainter& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TVirtualGraphPainter* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualGraphPainter::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGraphPainter::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!DeclFileName", []() { return (std::string)TVirtualGraphPainter::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TVirtualGraphPainter::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualGraphPainter::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!ImplFileLine", []()->int { return TVirtualGraphPainter::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualGraphPainter::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGraphPainter::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!ImplFileName", []() { return (std::string)TVirtualGraphPainter::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualGraphPainter::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGraphPainter::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!Class_Name", []() { return (std::string)TVirtualGraphPainter::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGraphPainter::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGraphPainter::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!Dictionary", []()->TClass * { return TVirtualGraphPainter::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGraphPainter::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGraphPainter::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!Class", []()->TClass * { return TVirtualGraphPainter::Class(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGraphPainter::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGraphPainter::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    t.method("Streamer", [](TVirtualGraphPainter& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TVirtualGraphPainter* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TVirtualGraphPainter::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualGraphPainter::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualGraphPainter.h:51:4
    module_.method("TVirtualGraphPainter!DeclFileLine", []()->int { return TVirtualGraphPainter::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualGraphPainter>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualGraphPainter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualGraphPainter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualPaveStats> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualPaveStats> : std::false_type { };
}

// Class generating the wrapper for type TVirtualPaveStats
// signature to use in the veto file: TVirtualPaveStats
struct JlTVirtualPaveStats: public Wrapper {

  JlTVirtualPaveStats(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualPaveStats (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:28:7
    jlcxx::TypeWrapper<TVirtualPaveStats>  t = jlModule.add_type<TVirtualPaveStats>("TVirtualPaveStats");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualPaveStats>>(new jlcxx::TypeWrapper<TVirtualPaveStats>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for TObject * TVirtualPaveStats::GetParent() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TVirtualPaveStats::GetParent()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:33:21
    t.method("GetParent", [](TVirtualPaveStats const& a)->TObject * { return a.GetParent(); });
    t.method("GetParent", [](TVirtualPaveStats const* a)->TObject * { return a->GetParent(); });

    DEBUG_MSG("Adding wrapper for void TVirtualPaveStats::SetParent(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualPaveStats::SetParent(TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:34:17
    t.method("SetParent", [](TVirtualPaveStats& a, TObject * arg0)->void { a.SetParent(arg0); });
    t.method("SetParent", [](TVirtualPaveStats* a, TObject * arg0)->void { a->SetParent(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TVirtualPaveStats::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TVirtualPaveStats::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!Class_Version", []()->Version_t { return TVirtualPaveStats::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualPaveStats::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualPaveStats::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    t.method("IsA", [](TVirtualPaveStats const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TVirtualPaveStats const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TVirtualPaveStats::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualPaveStats::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    t.method("StreamerNVirtual", [](TVirtualPaveStats& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TVirtualPaveStats* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualPaveStats::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualPaveStats::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!DeclFileName", []() { return (std::string)TVirtualPaveStats::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TVirtualPaveStats::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualPaveStats::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!ImplFileLine", []()->int { return TVirtualPaveStats::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualPaveStats::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualPaveStats::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!ImplFileName", []() { return (std::string)TVirtualPaveStats::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualPaveStats::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualPaveStats::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!Class_Name", []() { return (std::string)TVirtualPaveStats::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualPaveStats::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualPaveStats::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!Dictionary", []()->TClass * { return TVirtualPaveStats::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualPaveStats::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualPaveStats::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!Class", []()->TClass * { return TVirtualPaveStats::Class(); });

    DEBUG_MSG("Adding wrapper for void TVirtualPaveStats::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualPaveStats::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    t.method("Streamer", [](TVirtualPaveStats& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TVirtualPaveStats* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TVirtualPaveStats::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualPaveStats::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TVirtualPaveStats.h:36:4
    module_.method("TVirtualPaveStats!DeclFileLine", []()->int { return TVirtualPaveStats::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualPaveStats>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualPaveStats(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualPaveStats(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGDMLMatrix> : std::false_type { };
  template<> struct DefaultConstructible<TGDMLMatrix> : std::false_type { };
template<> struct SuperType<TGDMLMatrix> { typedef TNamed type; };
}

// Class generating the wrapper for type TGDMLMatrix
// signature to use in the veto file: TGDMLMatrix
struct JlTGDMLMatrix: public Wrapper {

  JlTGDMLMatrix(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGDMLMatrix (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:33:7
    jlcxx::TypeWrapper<TGDMLMatrix>  t = jlModule.add_type<TGDMLMatrix>("TGDMLMatrix",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGDMLMatrix>>(new jlcxx::TypeWrapper<TGDMLMatrix>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::TGDMLMatrix(const char *, size_t, size_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:36:4
    t.constructor<const char *, size_t, size_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::TGDMLMatrix(const TGDMLMatrix &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:37:4
    t.constructor<const TGDMLMatrix &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TGDMLMatrix & TGDMLMatrix::operator=(const TGDMLMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: TGDMLMatrix & TGDMLMatrix::operator=(const TGDMLMatrix &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:38:17
    t.method("assign", [](TGDMLMatrix& a, const TGDMLMatrix & arg0)->TGDMLMatrix & { return a.operator=(arg0); });
    t.method("assign", [](TGDMLMatrix* a, const TGDMLMatrix & arg0)->TGDMLMatrix & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::Set(size_t, size_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGDMLMatrix::Set(size_t, size_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:41:9
    t.method("Set", [](TGDMLMatrix& a, size_t arg0, size_t arg1, Double_t arg2)->void { a.Set(arg0, arg1, arg2); });
    t.method("Set", [](TGDMLMatrix* a, size_t arg0, size_t arg1, Double_t arg2)->void { a->Set(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TGDMLMatrix::Get(size_t, size_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGDMLMatrix::Get(size_t, size_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:42:13
    t.method("Get", [](TGDMLMatrix const& a, size_t arg0, size_t arg1)->Double_t { return a.Get(arg0, arg1); });
    t.method("Get", [](TGDMLMatrix const* a, size_t arg0, size_t arg1)->Double_t { return a->Get(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for size_t TGDMLMatrix::GetRows() (" __HERE__ ")");
    // signature to use in the veto list: size_t TGDMLMatrix::GetRows()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:43:11
    t.method("GetRows", [](TGDMLMatrix const& a)->size_t { return a.GetRows(); });
    t.method("GetRows", [](TGDMLMatrix const* a)->size_t { return a->GetRows(); });

    DEBUG_MSG("Adding wrapper for size_t TGDMLMatrix::GetCols() (" __HERE__ ")");
    // signature to use in the veto list: size_t TGDMLMatrix::GetCols()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:44:11
    t.method("GetCols", [](TGDMLMatrix const& a)->size_t { return a.GetCols(); });
    t.method("GetCols", [](TGDMLMatrix const* a)->size_t { return a->GetCols(); });

    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::SetMatrixAsString(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TGDMLMatrix::SetMatrixAsString(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:45:9
    t.method("SetMatrixAsString", [](TGDMLMatrix& a, const char * arg0)->void { a.SetMatrixAsString(arg0); });
    t.method("SetMatrixAsString", [](TGDMLMatrix* a, const char * arg0)->void { a->SetMatrixAsString(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TGDMLMatrix::GetMatrixAsString() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGDMLMatrix::GetMatrixAsString()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:46:16
    t.method("GetMatrixAsString", [](TGDMLMatrix const& a) { return (std::string)a.GetMatrixAsString(); });
    t.method("GetMatrixAsString", [](TGDMLMatrix const* a) { return (std::string)a->GetMatrixAsString(); });

    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGDMLMatrix::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:48:9
    t.method("Print", [](TGDMLMatrix const& a)->void { a.Print(); });
    t.method("Print", [](TGDMLMatrix const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TGDMLMatrix const* a)->void { a->Print(); });
    t.method("Print", [](TGDMLMatrix const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TGDMLMatrix::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGDMLMatrix::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!Class_Version", []()->Version_t { return TGDMLMatrix::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TGDMLMatrix::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGDMLMatrix::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    t.method("IsA", [](TGDMLMatrix const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TGDMLMatrix const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGDMLMatrix::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    t.method("StreamerNVirtual", [](TGDMLMatrix& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TGDMLMatrix* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TGDMLMatrix::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGDMLMatrix::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!DeclFileName", []() { return (std::string)TGDMLMatrix::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGDMLMatrix::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGDMLMatrix::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!ImplFileLine", []()->int { return TGDMLMatrix::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TGDMLMatrix::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGDMLMatrix::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!ImplFileName", []() { return (std::string)TGDMLMatrix::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGDMLMatrix::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGDMLMatrix::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!Class_Name", []() { return (std::string)TGDMLMatrix::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGDMLMatrix::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGDMLMatrix::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!Dictionary", []()->TClass * { return TGDMLMatrix::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TGDMLMatrix::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGDMLMatrix::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!Class", []()->TClass * { return TGDMLMatrix::Class(); });

    DEBUG_MSG("Adding wrapper for void TGDMLMatrix::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGDMLMatrix::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    t.method("Streamer", [](TGDMLMatrix& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TGDMLMatrix* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TGDMLMatrix::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGDMLMatrix::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGDMLMatrix.h:56:4
    module_.method("TGDMLMatrix!DeclFileLine", []()->int { return TGDMLMatrix::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGDMLMatrix>> type_;
};
std::shared_ptr<Wrapper> newJlTGDMLMatrix(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGDMLMatrix(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoShape> : std::false_type { };
  template<> struct DefaultConstructible<TGeoShape> : std::false_type { };
template<> struct SuperType<TGeoShape> { typedef TNamed type; };
}

// Class generating the wrapper for type TGeoShape
// signature to use in the veto file: TGeoShape
struct JlTGeoShape: public Wrapper {

  JlTGeoShape(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoShape (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:25:7
    jlcxx::TypeWrapper<TGeoShape>  t = jlModule.add_type<TGeoShape>("TGeoShape",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoShape>>(new jlcxx::TypeWrapper<TGeoShape>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void TGeoShape::ClearThreadData() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::ClearThreadData()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:66:17
    t.method("ClearThreadData", [](TGeoShape const& a)->void { a.ClearThreadData(); });
    t.method("ClearThreadData", [](TGeoShape const* a)->void { a->ClearThreadData(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::CreateThreadData(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::CreateThreadData(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:67:17
    t.method("CreateThreadData", [](TGeoShape& a, Int_t arg0)->void { a.CreateThreadData(arg0); });
    t.method("CreateThreadData", [](TGeoShape* a, Int_t arg0)->void { a->CreateThreadData(arg0); });


    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::Big() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::Big()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:87:20
    module_.method("TGeoShape!Big", []()->Double_t { return TGeoShape::Big(); });

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoShape::GetTransform() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoShape::GetTransform()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:88:23
    module_.method("TGeoShape!GetTransform", []()->TGeoMatrix * { return TGeoShape::GetTransform(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetTransform(TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetTransform(TGeoMatrix *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:89:16
    module_.method("TGeoShape!SetTransform", [](TGeoMatrix * arg0)->void { TGeoShape::SetTransform(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::Tolerance() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::Tolerance()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:90:20
    module_.method("TGeoShape!Tolerance", []()->Double_t { return TGeoShape::Tolerance(); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::ComputeEpsMch() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::ComputeEpsMch()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:91:20
    module_.method("TGeoShape!ComputeEpsMch", []()->Double_t { return TGeoShape::ComputeEpsMch(); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::EpsMch() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::EpsMch()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:92:20
    module_.method("TGeoShape!EpsMch", []()->Double_t { return TGeoShape::EpsMch(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::AfterStreamer() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::AfterStreamer()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:93:17
    t.method("AfterStreamer", [](TGeoShape& a)->void { a.AfterStreamer(); });
    t.method("AfterStreamer", [](TGeoShape* a)->void { a->AfterStreamer(); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::Capacity()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:94:21
    t.method("Capacity", [](TGeoShape const& a)->Double_t { return a.Capacity(); });
    t.method("Capacity", [](TGeoShape const* a)->Double_t { return a->Capacity(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::CheckShape(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::CheckShape(Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:95:9
    t.method("CheckShape", [](TGeoShape& a, Int_t arg0)->void { a.CheckShape(arg0); });
    t.method("CheckShape", [](TGeoShape& a, Int_t arg0, Int_t arg1)->void { a.CheckShape(arg0, arg1); });
    t.method("CheckShape", [](TGeoShape& a, Int_t arg0, Int_t arg1, Option_t * arg2)->void { a.CheckShape(arg0, arg1, arg2); });
    t.method("CheckShape", [](TGeoShape* a, Int_t arg0)->void { a->CheckShape(arg0); });
    t.method("CheckShape", [](TGeoShape* a, Int_t arg0, Int_t arg1)->void { a->CheckShape(arg0, arg1); });
    t.method("CheckShape", [](TGeoShape* a, Int_t arg0, Int_t arg1, Option_t * arg2)->void { a->CheckShape(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::ComputeBBox()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:96:17
    t.method("ComputeBBox", [](TGeoShape& a)->void { a.ComputeBBox(); });
    t.method("ComputeBBox", [](TGeoShape* a)->void { a->ComputeBBox(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:97:17
    t.method("ComputeNormal", [](TGeoShape& a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2)->void { a.ComputeNormal(arg0, arg1, arg2); });
    t.method("ComputeNormal", [](TGeoShape* a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2)->void { a->ComputeNormal(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:98:17
    t.method("ComputeNormal_v", [](TGeoShape& a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Int_t arg3)->void { a.ComputeNormal_v(arg0, arg1, arg2, arg3); });
    t.method("ComputeNormal_v", [](TGeoShape* a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Int_t arg3)->void { a->ComputeNormal_v(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::Contains(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:99:19
    t.method("Contains", [](TGeoShape const& a, const Double_t * arg0)->Bool_t { return a.Contains(arg0); });
    t.method("Contains", [](TGeoShape const* a, const Double_t * arg0)->Bool_t { return a->Contains(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:100:17
    t.method("Contains_v", [](TGeoShape const& a, const Double_t * arg0, Bool_t * arg1, Int_t arg2)->void { a.Contains_v(arg0, arg1, arg2); });
    t.method("Contains_v", [](TGeoShape const* a, const Double_t * arg0, Bool_t * arg1, Int_t arg2)->void { a->Contains_v(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::CouldBeCrossed(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::CouldBeCrossed(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:101:19
    t.method("CouldBeCrossed", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1)->Bool_t { return a.CouldBeCrossed(arg0, arg1); });
    t.method("CouldBeCrossed", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1)->Bool_t { return a->CouldBeCrossed(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:102:10
    t.method("DistancetoPrimitive", [](TGeoShape& a, Int_t arg0, Int_t arg1)->Int_t { return a.DistancetoPrimitive(arg0, arg1); });
    t.method("DistancetoPrimitive", [](TGeoShape* a, Int_t arg0, Int_t arg1)->Int_t { return a->DistancetoPrimitive(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:103:21
    t.method("DistFromInside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3, Double_t * arg4)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3, arg4); });
    t.method("DistFromInside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3, Double_t * arg4)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:105:17
    t.method("DistFromInside_v", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Int_t arg3, Double_t * arg4)->void { a.DistFromInside_v(arg0, arg1, arg2, arg3, arg4); });
    t.method("DistFromInside_v", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Int_t arg3, Double_t * arg4)->void { a->DistFromInside_v(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:106:21
    t.method("DistFromOutside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3, Double_t * arg4)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3, arg4); });
    t.method("DistFromOutside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3, Double_t * arg4)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:108:17
    t.method("DistFromOutside_v", [](TGeoShape const& a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Int_t arg3, Double_t * arg4)->void { a.DistFromOutside_v(arg0, arg1, arg2, arg3, arg4); });
    t.method("DistFromOutside_v", [](TGeoShape const* a, const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Int_t arg3, Double_t * arg4)->void { a->DistFromOutside_v(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::DistToPhiMin(const Double_t *, const Double_t *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::DistToPhiMin(const Double_t *, const Double_t *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:109:20
    module_.method("TGeoShape!DistToPhiMin", [](const Double_t * arg0, const Double_t * arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->Double_t { return TGeoShape::DistToPhiMin(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    module_.method("TGeoShape!DistToPhiMin", [](const Double_t * arg0, const Double_t * arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Bool_t arg8)->Double_t { return TGeoShape::DistToPhiMin(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoShape::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoShape::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:112:4
    t.method("Divide", [](TGeoShape& a, TGeoVolume * arg0, const char * arg1, Int_t arg2, Int_t arg3, Double_t arg4, Double_t arg5)->TGeoVolume * { return a.Divide(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Divide", [](TGeoShape* a, TGeoVolume * arg0, const char * arg1, Int_t arg2, Int_t arg3, Double_t arg4, Double_t arg5)->TGeoVolume * { return a->Divide(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:113:9
    t.method("Draw", [](TGeoShape& a)->void { a.Draw(); });
    t.method("Draw", [](TGeoShape& a, Option_t * arg0)->void { a.Draw(arg0); });
    t.method("Draw", [](TGeoShape* a)->void { a->Draw(); });
    t.method("Draw", [](TGeoShape* a, Option_t * arg0)->void { a->Draw(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:114:9
    t.method("ExecuteEvent", [](TGeoShape& a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a.ExecuteEvent(arg0, arg1, arg2); });
    t.method("ExecuteEvent", [](TGeoShape* a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a->ExecuteEvent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShape::GetAxisName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShape::GetAxisName(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:115:24
    t.method("GetAxisName", [](TGeoShape const& a, Int_t arg0) { return (std::string)a.GetAxisName(arg0); });
    t.method("GetAxisName", [](TGeoShape const* a, Int_t arg0) { return (std::string)a->GetAxisName(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::GetAxisRange(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::GetAxisRange(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:116:21
    t.method("GetAxisRange", [](TGeoShape const& a, Int_t arg0, Double_t & arg1, Double_t & arg2)->Double_t { return a.GetAxisRange(arg0, arg1, arg2); });
    t.method("GetAxisRange", [](TGeoShape const* a, Int_t arg0, Double_t & arg1, Double_t & arg2)->Double_t { return a->GetAxisRange(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::GetBoundingCylinder(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::GetBoundingCylinder(Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:117:17
    t.method("GetBoundingCylinder", [](TGeoShape const& a, Double_t * arg0)->void { a.GetBoundingCylinder(arg0); });
    t.method("GetBoundingCylinder", [](TGeoShape const* a, Double_t * arg0)->void { a->GetBoundingCylinder(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::GetByteCount() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::GetByteCount()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:119:18
    t.method("GetByteCount", [](TGeoShape const& a)->Int_t { return a.GetByteCount(); });
    t.method("GetByteCount", [](TGeoShape const* a)->Int_t { return a->GetByteCount(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::GetPointsOnSegments(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::GetPointsOnSegments(Int_t, Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:120:19
    t.method("GetPointsOnSegments", [](TGeoShape const& a, Int_t arg0, Double_t * arg1)->Bool_t { return a.GetPointsOnSegments(arg0, arg1); });
    t.method("GetPointsOnSegments", [](TGeoShape const* a, Int_t arg0, Double_t * arg1)->Bool_t { return a->GetPointsOnSegments(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::GetFittingBox(const TGeoBBox *, TGeoMatrix *, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::GetFittingBox(const TGeoBBox *, TGeoMatrix *, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:122:4
    t.method("GetFittingBox", [](TGeoShape const& a, const TGeoBBox * arg0, TGeoMatrix * arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4)->Int_t { return a.GetFittingBox(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetFittingBox", [](TGeoShape const* a, const TGeoBBox * arg0, TGeoMatrix * arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4)->Int_t { return a->GetFittingBox(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::GetId() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::GetId()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:123:10
    t.method("GetId", [](TGeoShape const& a)->Int_t { return a.GetId(); });
    t.method("GetId", [](TGeoShape const* a)->Int_t { return a->GetId(); });

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoShape::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoShape::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:124:23
    t.method("GetMakeRuntimeShape", [](TGeoShape const& a, TGeoShape * arg0, TGeoMatrix * arg1)->TGeoShape * { return a.GetMakeRuntimeShape(arg0, arg1); });
    t.method("GetMakeRuntimeShape", [](TGeoShape const* a, TGeoShape * arg0, TGeoMatrix * arg1)->TGeoShape * { return a->GetMakeRuntimeShape(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:125:17
    t.method("GetMeshNumbers", [](TGeoShape const& a, Int_t & arg0, Int_t & arg1, Int_t & arg2)->void { a.GetMeshNumbers(arg0, arg1, arg2); });
    t.method("GetMeshNumbers", [](TGeoShape const* a, Int_t & arg0, Int_t & arg1, Int_t & arg2)->void { a->GetMeshNumbers(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShape::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShape::GetName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:126:16
    t.method("GetName", [](TGeoShape const& a) { return (std::string)a.GetName(); });
    t.method("GetName", [](TGeoShape const* a) { return (std::string)a->GetName(); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::GetNmeshVertices()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:127:18
    t.method("GetNmeshVertices", [](TGeoShape const& a)->Int_t { return a.GetNmeshVertices(); });
    t.method("GetNmeshVertices", [](TGeoShape const* a)->Int_t { return a->GetNmeshVertices(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShape::GetPointerName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShape::GetPointerName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:128:16
    t.method("GetPointerName", [](TGeoShape const& a) { return (std::string)a.GetPointerName(); });
    t.method("GetPointerName", [](TGeoShape const* a) { return (std::string)a->GetPointerName(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsAssembly() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsAssembly()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:129:19
    t.method("IsAssembly", [](TGeoShape const& a)->Bool_t { return a.IsAssembly(); });
    t.method("IsAssembly", [](TGeoShape const* a)->Bool_t { return a->IsAssembly(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsComposite() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsComposite()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:130:19
    t.method("IsComposite", [](TGeoShape const& a)->Bool_t { return a.IsComposite(); });
    t.method("IsComposite", [](TGeoShape const* a)->Bool_t { return a->IsComposite(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsCylType()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:131:19
    t.method("IsCylType", [](TGeoShape const& a)->Bool_t { return a.IsCylType(); });
    t.method("IsCylType", [](TGeoShape const* a)->Bool_t { return a->IsCylType(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsCloseToPhi(Double_t, const Double_t *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsCloseToPhi(Double_t, const Double_t *, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:133:4
    module_.method("TGeoShape!IsCloseToPhi", [](Double_t arg0, const Double_t * arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Bool_t { return TGeoShape::IsCloseToPhi(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsCrossingSemiplane(const Double_t *, const Double_t *, Double_t, Double_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsCrossingSemiplane(const Double_t *, const Double_t *, Double_t, Double_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:134:18
    module_.method("TGeoShape!IsCrossingSemiplane", [](const Double_t * arg0, const Double_t * arg1, Double_t arg2, Double_t arg3, Double_t & arg4, Double_t & arg5)->Bool_t { return TGeoShape::IsCrossingSemiplane(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsSameWithinTolerance(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsSameWithinTolerance(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:136:18
    module_.method("TGeoShape!IsSameWithinTolerance", [](Double_t arg0, Double_t arg1)->Bool_t { return TGeoShape::IsSameWithinTolerance(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsSegCrossing(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsSegCrossing(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:137:18
    module_.method("TGeoShape!IsSegCrossing", [](Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->Bool_t { return TGeoShape::IsSegCrossing(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsInPhiRange(const Double_t *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsInPhiRange(const Double_t *, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:139:18
    module_.method("TGeoShape!IsInPhiRange", [](const Double_t * arg0, Double_t arg1, Double_t arg2)->Bool_t { return TGeoShape::IsInPhiRange(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsReflected() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsReflected()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:140:19
    t.method("IsReflected", [](TGeoShape const& a)->Bool_t { return a.IsReflected(); });
    t.method("IsReflected", [](TGeoShape const* a)->Bool_t { return a->IsReflected(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsVecGeom() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsVecGeom()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:141:19
    t.method("IsVecGeom", [](TGeoShape const& a)->Bool_t { return a.IsVecGeom(); });
    t.method("IsVecGeom", [](TGeoShape const* a)->Bool_t { return a->IsVecGeom(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsRunTimeShape() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsRunTimeShape()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:142:11
    t.method("IsRunTimeShape", [](TGeoShape const& a)->Bool_t { return a.IsRunTimeShape(); });
    t.method("IsRunTimeShape", [](TGeoShape const* a)->Bool_t { return a->IsRunTimeShape(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsValid()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:143:11
    t.method("IsValid", [](TGeoShape const& a)->Bool_t { return a.IsValid(); });
    t.method("IsValid", [](TGeoShape const* a)->Bool_t { return a->IsValid(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::IsValidBox() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::IsValidBox()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:144:19
    t.method("IsValidBox", [](TGeoShape const& a)->Bool_t { return a.IsValidBox(); });
    t.method("IsValidBox", [](TGeoShape const* a)->Bool_t { return a->IsValidBox(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::InspectShape()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:145:17
    t.method("InspectShape", [](TGeoShape const& a)->void { a.InspectShape(); });
    t.method("InspectShape", [](TGeoShape const* a)->void { a->InspectShape(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::NormalPhi(const Double_t *, const Double_t *, Double_t *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::NormalPhi(const Double_t *, const Double_t *, Double_t *, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:147:16
    module_.method("TGeoShape!NormalPhi", [](const Double_t * arg0, const Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { TGeoShape::NormalPhi(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:149:9
    t.method("Paint", [](TGeoShape& a)->void { a.Paint(); });
    t.method("Paint", [](TGeoShape& a, Option_t * arg0)->void { a.Paint(arg0); });
    t.method("Paint", [](TGeoShape* a)->void { a->Paint(); });
    t.method("Paint", [](TGeoShape* a, Option_t * arg0)->void { a->Paint(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::Safety(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:150:21
    t.method("Safety", [](TGeoShape const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoShape const& a, const Double_t * arg0, Bool_t arg1)->Double_t { return a.Safety(arg0, arg1); });
    t.method("Safety", [](TGeoShape const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });
    t.method("Safety", [](TGeoShape const* a, const Double_t * arg0, Bool_t arg1)->Double_t { return a->Safety(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:151:17
    t.method("Safety_v", [](TGeoShape const& a, const Double_t * arg0, const Bool_t * arg1, Double_t * arg2, Int_t arg3)->void { a.Safety_v(arg0, arg1, arg2, arg3); });
    t.method("Safety_v", [](TGeoShape const* a, const Double_t * arg0, const Bool_t * arg1, Double_t * arg2, Int_t arg3)->void { a->Safety_v(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::SafetyPhi(const Double_t *, Bool_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::SafetyPhi(const Double_t *, Bool_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:152:20
    module_.method("TGeoShape!SafetyPhi", [](const Double_t * arg0, Bool_t arg1, Double_t arg2, Double_t arg3)->Double_t { return TGeoShape::SafetyPhi(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoShape::SafetySeg(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoShape::SafetySeg(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:153:20
    module_.method("TGeoShape!SafetySeg", [](Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Bool_t arg6)->Double_t { return TGeoShape::SafetySeg(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetDimensions(Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:154:17
    t.method("SetDimensions", [](TGeoShape& a, Double_t * arg0)->void { a.SetDimensions(arg0); });
    t.method("SetDimensions", [](TGeoShape* a, Double_t * arg0)->void { a->SetDimensions(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetId(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetId(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:155:9
    t.method("SetId", [](TGeoShape& a, Int_t arg0)->void { a.SetId(arg0); });
    t.method("SetId", [](TGeoShape* a, Int_t arg0)->void { a->SetId(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetPoints(Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:156:17
    t.method("SetPoints", [](TGeoShape const& a, Double_t * arg0)->void { a.SetPoints(arg0); });
    t.method("SetPoints", [](TGeoShape const* a, Double_t * arg0)->void { a->SetPoints(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetPoints(Float_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:157:17
    t.method("SetPoints", [](TGeoShape const& a, Float_t * arg0)->void { a.SetPoints(arg0); });
    t.method("SetPoints", [](TGeoShape const* a, Float_t * arg0)->void { a->SetPoints(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetRuntime(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetRuntime(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:159:9
    t.method("SetRuntime", [](TGeoShape& a)->void { a.SetRuntime(); });
    t.method("SetRuntime", [](TGeoShape& a, Bool_t arg0)->void { a.SetRuntime(arg0); });
    t.method("SetRuntime", [](TGeoShape* a)->void { a->SetRuntime(); });
    t.method("SetRuntime", [](TGeoShape* a, Bool_t arg0)->void { a->SetRuntime(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::ShapeDistancetoPrimitive(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::ShapeDistancetoPrimitive(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:160:10
    t.method("ShapeDistancetoPrimitive", [](TGeoShape const& a, Int_t arg0, Int_t arg1, Int_t arg2)->Int_t { return a.ShapeDistancetoPrimitive(arg0, arg1, arg2); });
    t.method("ShapeDistancetoPrimitive", [](TGeoShape const* a, Int_t arg0, Int_t arg1, Int_t arg2)->Int_t { return a->ShapeDistancetoPrimitive(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::Sizeof3D() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::Sizeof3D()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:161:17
    t.method("Sizeof3D", [](TGeoShape const& a)->void { a.Sizeof3D(); });
    t.method("Sizeof3D", [](TGeoShape const* a)->void { a->Sizeof3D(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetShapeBit(UInt_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetShapeBit(UInt_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:164:9
    t.method("SetShapeBit", [](TGeoShape& a, UInt_t arg0, Bool_t arg1)->void { a.SetShapeBit(arg0, arg1); });
    t.method("SetShapeBit", [](TGeoShape* a, UInt_t arg0, Bool_t arg1)->void { a->SetShapeBit(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::SetShapeBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::SetShapeBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:165:9
    t.method("SetShapeBit", [](TGeoShape& a, UInt_t arg0)->void { a.SetShapeBit(arg0); });
    t.method("SetShapeBit", [](TGeoShape* a, UInt_t arg0)->void { a->SetShapeBit(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::ResetShapeBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::ResetShapeBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:166:9
    t.method("ResetShapeBit", [](TGeoShape& a, UInt_t arg0)->void { a.ResetShapeBit(arg0); });
    t.method("ResetShapeBit", [](TGeoShape* a, UInt_t arg0)->void { a->ResetShapeBit(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoShape::TestShapeBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoShape::TestShapeBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:167:11
    t.method("TestShapeBit", [](TGeoShape const& a, UInt_t arg0)->Bool_t { return a.TestShapeBit(arg0); });
    t.method("TestShapeBit", [](TGeoShape const* a, UInt_t arg0)->Bool_t { return a->TestShapeBit(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoShape::TestShapeBits(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoShape::TestShapeBits(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:168:10
    t.method("TestShapeBits", [](TGeoShape const& a, UInt_t arg0)->Int_t { return a.TestShapeBits(arg0); });
    t.method("TestShapeBits", [](TGeoShape const* a, UInt_t arg0)->Int_t { return a->TestShapeBits(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::InvertShapeBit(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::InvertShapeBit(UInt_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:169:9
    t.method("InvertShapeBit", [](TGeoShape& a, UInt_t arg0)->void { a.InvertShapeBit(arg0); });
    t.method("InvertShapeBit", [](TGeoShape* a, UInt_t arg0)->void { a->InvertShapeBit(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TGeoShape::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoShape::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!Class_Version", []()->Version_t { return TGeoShape::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoShape::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoShape::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    t.method("IsA", [](TGeoShape const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TGeoShape const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    t.method("StreamerNVirtual", [](TGeoShape& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TGeoShape* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShape::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShape::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!DeclFileName", []() { return (std::string)TGeoShape::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoShape::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoShape::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!ImplFileLine", []()->int { return TGeoShape::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShape::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShape::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!ImplFileName", []() { return (std::string)TGeoShape::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoShape::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoShape::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!Class_Name", []() { return (std::string)TGeoShape::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoShape::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoShape::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!Dictionary", []()->TClass * { return TGeoShape::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoShape::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoShape::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!Class", []()->TClass * { return TGeoShape::Class(); });

    DEBUG_MSG("Adding wrapper for void TGeoShape::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoShape::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    t.method("Streamer", [](TGeoShape& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TGeoShape* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TGeoShape::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoShape::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TGeoShape.h:171:4
    module_.method("TGeoShape!DeclFileLine", []()->int { return TGeoShape::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoShape>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoShape(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoShape(module));
}
