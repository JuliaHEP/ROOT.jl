// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TBinIterator> : std::false_type { };
  template<> struct DefaultConstructible<TBinIterator> : std::false_type { };
}

// Class generating the wrapper for type TBinIterator
// signature to use in the veto file: TBinIterator
struct JlTBinIterator: public Wrapper {

  JlTBinIterator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TBinIterator (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:29:7
    jlcxx::TypeWrapper<TBinIterator>  t = jlModule.add_type<TBinIterator>("TBinIterator");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TBinIterator>>(new jlcxx::TypeWrapper<TBinIterator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TBinIterator::TBinIterator(const TH1 *, TBinIterator::ERangeType) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:77:4
    t.constructor<const TH1 *, TBinIterator::ERangeType>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TBinIterator TBinIterator::End() (" __HERE__ ")");
    // signature to use in the veto list: TBinIterator TBinIterator::End()
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:82:24
    module_.method("TBinIterator!End", static_cast<TBinIterator (*)() >(&TBinIterator::End));

    DEBUG_MSG("Adding wrapper for TBinIterator & TBinIterator::operator++() (" __HERE__ ")");
    // signature to use in the veto list: TBinIterator & TBinIterator::operator++()
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:90:18
    t.method("inc!", static_cast<TBinIterator & (TBinIterator::*)() >(&TBinIterator::operator++));

    DEBUG_MSG("Adding wrapper for TBinIterator TBinIterator::operator++(int) (" __HERE__ ")");
    // signature to use in the veto list: TBinIterator TBinIterator::operator++(int)
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:127:17
    t.method("inc!", static_cast<TBinIterator (TBinIterator::*)(int) >(&TBinIterator::operator++));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool TBinIterator::operator==(const TBinIterator &) (" __HERE__ ")");
    // signature to use in the veto list: bool TBinIterator::operator==(const TBinIterator &)
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:134:9
    t.method("==", static_cast<bool (TBinIterator::*)(const TBinIterator &)  const>(&TBinIterator::operator==));

    DEBUG_MSG("Adding wrapper for bool TBinIterator::operator!=(const TBinIterator &) (" __HERE__ ")");
    // signature to use in the veto list: bool TBinIterator::operator!=(const TBinIterator &)
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:135:9
    t.method("!=", static_cast<bool (TBinIterator::*)(const TBinIterator &)  const>(&TBinIterator::operator!=));

    DEBUG_MSG("Adding wrapper for int & TBinIterator::operator*() (" __HERE__ ")");
    // signature to use in the veto list: int & TBinIterator::operator*()
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:136:9
    t.method("getindex", static_cast<int & (TBinIterator::*)() >(&TBinIterator::operator*));

    module_.unset_override_module();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TBinIterator>> type_;
};
std::shared_ptr<Wrapper> newJlTBinIterator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTBinIterator(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THistRange> : std::false_type { };
  template<> struct DefaultConstructible<THistRange> : std::false_type { };
}

// Class generating the wrapper for type THistRange
// signature to use in the veto file: THistRange
struct JlTHistRange: public Wrapper {

  JlTHistRange(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THistRange (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:139:7
    jlcxx::TypeWrapper<THistRange>  t = jlModule.add_type<THistRange>("THistRange");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THistRange>>(new jlcxx::TypeWrapper<THistRange>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for THistRange::iterator THistRange::begin() (" __HERE__ ")");
    // signature to use in the veto list: THistRange::iterator THistRange::begin()
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:145:13
    t.method("begin", static_cast<THistRange::iterator (THistRange::*)() >(&THistRange::begin));

    DEBUG_MSG("Adding wrapper for THistRange::iterator THistRange::end() (" __HERE__ ")");
    // signature to use in the veto list: THistRange::iterator THistRange::end()
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:147:13
    t.method("end", static_cast<THistRange::iterator (THistRange::*)() >(&THistRange::end));


    DEBUG_MSG("Adding wrapper for void THistRange::THistRange(const TH1 *, TBinIterator::ERangeType) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THistRange.h:149:4
    t.constructor<const TH1 *>(/*finalize=*/true);
    t.constructor<const TH1 *, TBinIterator::ERangeType>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THistRange>> type_;
};
std::shared_ptr<Wrapper> newJlTHistRange(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHistRange(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THLimitsFinder> : std::false_type { };
  template<> struct DefaultConstructible<THLimitsFinder> : std::false_type { };
template<> struct SuperType<THLimitsFinder> { typedef TObject type; };
}

// Class generating the wrapper for type THLimitsFinder
// signature to use in the veto file: THLimitsFinder
struct JlTHLimitsFinder: public Wrapper {

  JlTHLimitsFinder(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THLimitsFinder (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:28:7
    jlcxx::TypeWrapper<THLimitsFinder>  t = jlModule.add_type<THLimitsFinder>("THLimitsFinder",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THLimitsFinder>>(new jlcxx::TypeWrapper<THLimitsFinder>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:36:23
    t.method("FindGoodLimits", static_cast<Int_t (THLimitsFinder::*)(TH1 *, Double_t, Double_t) >(&THLimitsFinder::FindGoodLimits));

    DEBUG_MSG("Adding wrapper for Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:37:23
    t.method("FindGoodLimits", static_cast<Int_t (THLimitsFinder::*)(TH1 *, Double_t, Double_t, Double_t, Double_t) >(&THLimitsFinder::FindGoodLimits));

    DEBUG_MSG("Adding wrapper for Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:38:23
    t.method("FindGoodLimits", static_cast<Int_t (THLimitsFinder::*)(TH1 *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&THLimitsFinder::FindGoodLimits));

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::Optimize(Double_t, Double_t, Int_t, Double_t &, Double_t &, Int_t &, Double_t &, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::Optimize(Double_t, Double_t, Int_t, Double_t &, Double_t &, Int_t &, Double_t &, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:40:23
    module_.method("THLimitsFinder!Optimize", static_cast<void (*)(Double_t, Double_t, Int_t, Double_t &, Double_t &, Int_t &, Double_t &, Option_t *) >(&THLimitsFinder::Optimize));
    module_.method("THLimitsFinder!Optimize", [](Double_t arg0, Double_t arg1, Int_t arg2, Double_t & arg3, Double_t & arg4, Int_t & arg5, Double_t & arg6)->void { THLimitsFinder::Optimize(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::OptimizeLimits(Int_t, Int_t &, Double_t &, Double_t &, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::OptimizeLimits(Int_t, Int_t &, Double_t &, Double_t &, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:42:23
    module_.method("THLimitsFinder!OptimizeLimits", static_cast<void (*)(Int_t, Int_t &, Double_t &, Double_t &, Bool_t) >(&THLimitsFinder::OptimizeLimits));

    DEBUG_MSG("Adding wrapper for THLimitsFinder * THLimitsFinder::GetLimitsFinder() (" __HERE__ ")");
    // signature to use in the veto list: THLimitsFinder * THLimitsFinder::GetLimitsFinder()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:43:27
    module_.method("THLimitsFinder!GetLimitsFinder", static_cast<THLimitsFinder * (*)() >(&THLimitsFinder::GetLimitsFinder));

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::SetLimitsFinder(THLimitsFinder *) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::SetLimitsFinder(THLimitsFinder *)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:44:23
    module_.method("THLimitsFinder!SetLimitsFinder", static_cast<void (*)(THLimitsFinder *) >(&THLimitsFinder::SetLimitsFinder));

    DEBUG_MSG("Adding wrapper for Version_t THLimitsFinder::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THLimitsFinder::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Class_Version", static_cast<Version_t (*)() >(&THLimitsFinder::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THLimitsFinder::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THLimitsFinder::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    t.method("IsA", static_cast<TClass * (THLimitsFinder::*)()  const>(&THLimitsFinder::IsA));

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    t.method("StreamerNVirtual", static_cast<void (THLimitsFinder::*)(TBuffer &) >(&THLimitsFinder::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THLimitsFinder::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THLimitsFinder::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!DeclFileName", []() { return (std::string)THLimitsFinder::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THLimitsFinder::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THLimitsFinder::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!ImplFileLine", static_cast<int (*)() >(&THLimitsFinder::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THLimitsFinder::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THLimitsFinder::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!ImplFileName", []() { return (std::string)THLimitsFinder::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THLimitsFinder::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THLimitsFinder::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Class_Name", []() { return (std::string)THLimitsFinder::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THLimitsFinder::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THLimitsFinder::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Dictionary", static_cast<TClass * (*)() >(&THLimitsFinder::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THLimitsFinder::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THLimitsFinder::Class()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Class", static_cast<TClass * (*)() >(&THLimitsFinder::Class));

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    t.method("Streamer", static_cast<void (THLimitsFinder::*)(TBuffer &) >(&THLimitsFinder::Streamer));

    DEBUG_MSG("Adding wrapper for int THLimitsFinder::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THLimitsFinder::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!DeclFileLine", static_cast<int (*)() >(&THLimitsFinder::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THLimitsFinder>> type_;
};
std::shared_ptr<Wrapper> newJlTHLimitsFinder(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHLimitsFinder(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THnIter> : std::false_type { };
  template<> struct DefaultConstructible<THnIter> : std::false_type { };
template<> struct SuperType<THnIter> { typedef TObject type; };
}

// Class generating the wrapper for type THnIter
// signature to use in the veto file: THnIter
struct JlTHnIter: public Wrapper {

  JlTHnIter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnIter (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:330:7
    jlcxx::TypeWrapper<THnIter>  t = jlModule.add_type<THnIter>("THnIter",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnIter>>(new jlcxx::TypeWrapper<THnIter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void THnIter::THnIter(const THnBase *, Bool_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:332:4
    t.constructor<const THnBase *>(/*finalize=*/true);
    t.constructor<const THnBase *, Bool_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Long64_t THnIter::Next(Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnIter::Next(Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:340:13
    t.method("Next", static_cast<Long64_t (THnIter::*)(Int_t *) >(&THnIter::Next));
    t.method("Next", [](THnIter& a)->Long64_t { return a.Next(); });
    t.method("Next", [](THnIter* a)->Long64_t { return a->Next(); });

    DEBUG_MSG("Adding wrapper for Int_t THnIter::GetCoord(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnIter::GetCoord(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:344:10
    t.method("GetCoord", static_cast<Int_t (THnIter::*)(Int_t)  const>(&THnIter::GetCoord));

    DEBUG_MSG("Adding wrapper for Bool_t THnIter::HaveSkippedBin() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t THnIter::HaveSkippedBin()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:345:11
    t.method("HaveSkippedBin", static_cast<Bool_t (THnIter::*)()  const>(&THnIter::HaveSkippedBin));

    DEBUG_MSG("Adding wrapper for Bool_t THnIter::RespectsAxisRange() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t THnIter::RespectsAxisRange()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:346:11
    t.method("RespectsAxisRange", static_cast<Bool_t (THnIter::*)()  const>(&THnIter::RespectsAxisRange));

    DEBUG_MSG("Adding wrapper for Version_t THnIter::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnIter::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!Class_Version", static_cast<Version_t (*)() >(&THnIter::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THnIter::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnIter::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    t.method("IsA", static_cast<TClass * (THnIter::*)()  const>(&THnIter::IsA));

    DEBUG_MSG("Adding wrapper for void THnIter::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnIter::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    t.method("StreamerNVirtual", static_cast<void (THnIter::*)(TBuffer &) >(&THnIter::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THnIter::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnIter::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!DeclFileName", []() { return (std::string)THnIter::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnIter::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnIter::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!ImplFileLine", static_cast<int (*)() >(&THnIter::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THnIter::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnIter::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!ImplFileName", []() { return (std::string)THnIter::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnIter::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnIter::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!Class_Name", []() { return (std::string)THnIter::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnIter::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnIter::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!Dictionary", static_cast<TClass * (*)() >(&THnIter::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THnIter::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnIter::Class()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!Class", static_cast<TClass * (*)() >(&THnIter::Class));

    DEBUG_MSG("Adding wrapper for void THnIter::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnIter::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    t.method("Streamer", static_cast<void (THnIter::*)(TBuffer &) >(&THnIter::Streamer));

    DEBUG_MSG("Adding wrapper for int THnIter::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnIter::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnBase.h:350:4
    module_.method("THnIter!DeclFileLine", static_cast<int (*)() >(&THnIter::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnIter>> type_;
};
std::shared_ptr<Wrapper> newJlTHnIter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnIter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THnChain> : std::false_type { };
  template<> struct DefaultConstructible<THnChain> : std::false_type { };
template<> struct SuperType<THnChain> { typedef TObject type; };
}

// Class generating the wrapper for type THnChain
// signature to use in the veto file: THnChain
struct JlTHnChain: public Wrapper {

  JlTHnChain(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnChain (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:49:7
    jlcxx::TypeWrapper<THnChain>  t = jlModule.add_type<THnChain>("THnChain",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnChain>>(new jlcxx::TypeWrapper<THnChain>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void THnChain::THnChain(const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:55:13
    t.constructor<const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void THnChain::AddFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void THnChain::AddFile(const char *)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:57:9
    t.method("AddFile", static_cast<void (THnChain::*)(const char *) >(&THnChain::AddFile));

    DEBUG_MSG("Adding wrapper for TAxis * THnChain::GetAxis(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THnChain::GetAxis(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:59:11
    t.method("GetAxis", static_cast<TAxis * (THnChain::*)(Int_t)  const>(&THnChain::GetAxis));

    DEBUG_MSG("Adding wrapper for TH1 * THnChain::Projection(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * THnChain::Projection(Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:61:9
    t.method("Projection", static_cast<TH1 * (THnChain::*)(Int_t, Option_t *)  const>(&THnChain::Projection));
    t.method("Projection", [](THnChain const& a, Int_t arg0)->TH1 * { return a.Projection(arg0); });
    t.method("Projection", [](THnChain const* a, Int_t arg0)->TH1 * { return a->Projection(arg0); });

    DEBUG_MSG("Adding wrapper for TH2 * THnChain::Projection(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2 * THnChain::Projection(Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:63:9
    t.method("Projection", static_cast<TH2 * (THnChain::*)(Int_t, Int_t, Option_t *)  const>(&THnChain::Projection));
    t.method("Projection", [](THnChain const& a, Int_t arg0, Int_t arg1)->TH2 * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Int_t arg1)->TH2 * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH3 * THnChain::Projection(Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH3 * THnChain::Projection(Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:65:9
    t.method("Projection", static_cast<TH3 * (THnChain::*)(Int_t, Int_t, Int_t, Option_t *)  const>(&THnChain::Projection));
    t.method("Projection", [](THnChain const& a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3 * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3 * { return a->Projection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THnBase * THnChain::ProjectionND(Int_t, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: THnBase * THnChain::ProjectionND(Int_t, const Int_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:67:13
    t.method("ProjectionND", static_cast<THnBase * (THnChain::*)(Int_t, const Int_t *, Option_t *)  const>(&THnChain::ProjectionND));
    t.method("ProjectionND", [](THnChain const& a, Int_t arg0, const Int_t * arg1)->THnBase * { return a.ProjectionND(arg0, arg1); });
    t.method("ProjectionND", [](THnChain const* a, Int_t arg0, const Int_t * arg1)->THnBase * { return a->ProjectionND(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Version_t THnChain::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnChain::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!Class_Version", static_cast<Version_t (*)() >(&THnChain::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THnChain::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnChain::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    t.method("IsA", static_cast<TClass * (THnChain::*)()  const>(&THnChain::IsA));

    DEBUG_MSG("Adding wrapper for void THnChain::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnChain::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    t.method("StreamerNVirtual", static_cast<void (THnChain::*)(TBuffer &) >(&THnChain::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THnChain::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnChain::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!DeclFileName", []() { return (std::string)THnChain::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnChain::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnChain::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!ImplFileLine", static_cast<int (*)() >(&THnChain::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THnChain::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnChain::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!ImplFileName", []() { return (std::string)THnChain::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnChain::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnChain::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!Class_Name", []() { return (std::string)THnChain::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnChain::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnChain::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!Dictionary", static_cast<TClass * (*)() >(&THnChain::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THnChain::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnChain::Class()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!Class", static_cast<TClass * (*)() >(&THnChain::Class));

    DEBUG_MSG("Adding wrapper for void THnChain::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnChain::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    t.method("Streamer", static_cast<void (THnChain::*)(TBuffer &) >(&THnChain::Streamer));

    DEBUG_MSG("Adding wrapper for int THnChain::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnChain::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnChain.h:83:4
    module_.method("THnChain!DeclFileLine", static_cast<int (*)() >(&THnChain::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnChain>> type_;
};
std::shared_ptr<Wrapper> newJlTHnChain(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnChain(module));
}
