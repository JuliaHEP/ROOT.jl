// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TApplication> : std::false_type { };
  template<> struct DefaultConstructible<TApplication> : std::false_type { };
template<> struct SuperType<TApplication> { typedef TObject type; };
}

// Class generating the wrapper for type TApplication
// signature to use in the veto file: TApplication
struct JlTApplication: public Wrapper {

  JlTApplication(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TApplication (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:39:7
    jlcxx::TypeWrapper<TApplication>  t = jlModule.add_type<TApplication>("TApplication",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TApplication>>(new jlcxx::TypeWrapper<TApplication>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TApplication::TApplication(const char *, Int_t *, char **, void *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:101:4
    t.constructor<const char *, Int_t *, char **>(/*finalize=*/true);
    t.constructor<const char *, Int_t *, char **, void *>(/*finalize=*/true);
    t.constructor<const char *, Int_t *, char **, void *, Int_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TApplication::InitializeGraphics(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::InitializeGraphics(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:105:20
    t.method("InitializeGraphics", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::InitializeGraphics));
    t.method("InitializeGraphics", [](TApplication& a)->void { a.InitializeGraphics(); });
    t.method("InitializeGraphics", [](TApplication* a)->void { a->InitializeGraphics(); });

    DEBUG_MSG("Adding wrapper for void TApplication::GetOptions(Int_t *, char **) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::GetOptions(Int_t *, char **)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:106:20
    t.method("GetOptions", static_cast<void (TApplication::*)(Int_t *, char **) >(&TApplication::GetOptions));

    DEBUG_MSG("Adding wrapper for TSignalHandler * TApplication::GetSignalHandler() (" __HERE__ ")");
    // signature to use in the veto list: TSignalHandler * TApplication::GetSignalHandler()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:107:20
    t.method("GetSignalHandler", static_cast<TSignalHandler * (TApplication::*)()  const>(&TApplication::GetSignalHandler));

    DEBUG_MSG("Adding wrapper for void TApplication::SetEchoMode(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::SetEchoMode(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:108:20
    t.method("SetEchoMode", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::SetEchoMode));

    DEBUG_MSG("Adding wrapper for TString TApplication::GetSetup() (" __HERE__ ")");
    // signature to use in the veto list: TString TApplication::GetSetup()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:109:12
    t.method("GetSetup", static_cast<TString (TApplication::*)() >(&TApplication::GetSetup));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenForumTopic(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenForumTopic(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:110:9
    t.method("OpenForumTopic", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenForumTopic));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenGitHubIssue(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenGitHubIssue(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:111:9
    t.method("OpenGitHubIssue", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenGitHubIssue));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenInBrowser(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenInBrowser(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:112:9
    t.method("OpenInBrowser", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenInBrowser));

    DEBUG_MSG("Adding wrapper for void TApplication::OpenReferenceGuideFor(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::OpenReferenceGuideFor(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:113:9
    t.method("OpenReferenceGuideFor", static_cast<void (TApplication::*)(const TString &) >(&TApplication::OpenReferenceGuideFor));

    DEBUG_MSG("Adding wrapper for void TApplication::HandleException(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::HandleException(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:114:20
    t.method("HandleException", static_cast<void (TApplication::*)(Int_t) >(&TApplication::HandleException));

    DEBUG_MSG("Adding wrapper for void TApplication::HandleIdleTimer() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::HandleIdleTimer()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:115:20
    t.method("HandleIdleTimer", static_cast<void (TApplication::*)() >(&TApplication::HandleIdleTimer));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::HandleTermInput() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::HandleTermInput()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:116:20
    t.method("HandleTermInput", static_cast<Bool_t (TApplication::*)() >(&TApplication::HandleTermInput));

    DEBUG_MSG("Adding wrapper for void TApplication::Init() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Init()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:117:20
    t.method("Init", static_cast<void (TApplication::*)() >(&TApplication::Init));

    DEBUG_MSG("Adding wrapper for Longptr_t TApplication::ProcessLine(const char *, Bool_t, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TApplication::ProcessLine(const char *, Bool_t, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:118:22
    t.method("ProcessLine", static_cast<Longptr_t (TApplication::*)(const char *, Bool_t, Int_t *) >(&TApplication::ProcessLine));
    t.method("ProcessLine", [](TApplication& a, const char * arg0)->Longptr_t { return a.ProcessLine(arg0); });
    t.method("ProcessLine", [](TApplication& a, const char * arg0, Bool_t arg1)->Longptr_t { return a.ProcessLine(arg0, arg1); });
    t.method("ProcessLine", [](TApplication* a, const char * arg0)->Longptr_t { return a->ProcessLine(arg0); });
    t.method("ProcessLine", [](TApplication* a, const char * arg0, Bool_t arg1)->Longptr_t { return a->ProcessLine(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Longptr_t TApplication::ProcessFile(const char *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TApplication::ProcessFile(const char *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:119:22
    t.method("ProcessFile", static_cast<Longptr_t (TApplication::*)(const char *, Int_t *, Bool_t) >(&TApplication::ProcessFile));
    t.method("ProcessFile", [](TApplication& a, const char * arg0)->Longptr_t { return a.ProcessFile(arg0); });
    t.method("ProcessFile", [](TApplication& a, const char * arg0, Int_t * arg1)->Longptr_t { return a.ProcessFile(arg0, arg1); });
    t.method("ProcessFile", [](TApplication* a, const char * arg0)->Longptr_t { return a->ProcessFile(arg0); });
    t.method("ProcessFile", [](TApplication* a, const char * arg0, Int_t * arg1)->Longptr_t { return a->ProcessFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TApplication::Run(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Run(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:120:20
    t.method("Run", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::Run));
    t.method("Run", [](TApplication& a)->void { a.Run(); });
    t.method("Run", [](TApplication* a)->void { a->Run(); });

    DEBUG_MSG("Adding wrapper for void TApplication::SetIdleTimer(UInt_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::SetIdleTimer(UInt_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:121:20
    t.method("SetIdleTimer", static_cast<void (TApplication::*)(UInt_t, const char *) >(&TApplication::SetIdleTimer));

    DEBUG_MSG("Adding wrapper for void TApplication::RemoveIdleTimer() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::RemoveIdleTimer()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:122:20
    t.method("RemoveIdleTimer", static_cast<void (TApplication::*)() >(&TApplication::RemoveIdleTimer));

    DEBUG_MSG("Adding wrapper for const char * TApplication::GetIdleCommand() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::GetIdleCommand()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:123:20
    t.method("GetIdleCommand", [](TApplication const& a) { return (std::string)a.GetIdleCommand(); });
    t.method("GetIdleCommand", [](TApplication const* a) { return (std::string)a->GetIdleCommand(); });

    DEBUG_MSG("Adding wrapper for void TApplication::StartIdleing() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::StartIdleing()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:124:20
    t.method("StartIdleing", static_cast<void (TApplication::*)() >(&TApplication::StartIdleing));

    DEBUG_MSG("Adding wrapper for void TApplication::StopIdleing() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::StopIdleing()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:125:20
    t.method("StopIdleing", static_cast<void (TApplication::*)() >(&TApplication::StopIdleing));

    DEBUG_MSG("Adding wrapper for TApplication::EExitOnException TApplication::ExitOnException(TApplication::EExitOnException) (" __HERE__ ")");
    // signature to use in the veto list: TApplication::EExitOnException TApplication::ExitOnException(TApplication::EExitOnException)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:126:21
    t.method("ExitOnException", static_cast<TApplication::EExitOnException (TApplication::*)(TApplication::EExitOnException) >(&TApplication::ExitOnException));
    t.method("ExitOnException", [](TApplication& a)->TApplication::EExitOnException { return a.ExitOnException(); });
    t.method("ExitOnException", [](TApplication* a)->TApplication::EExitOnException { return a->ExitOnException(); });

    DEBUG_MSG("Adding wrapper for const char * TApplication::ApplicationName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::ApplicationName()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:128:24
    t.method("ApplicationName", [](TApplication const& a) { return (std::string)a.ApplicationName(); });
    t.method("ApplicationName", [](TApplication const* a) { return (std::string)a->ApplicationName(); });

    DEBUG_MSG("Adding wrapper for void TApplication::Show() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Show()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:129:20
    t.method("Show", static_cast<void (TApplication::*)() >(&TApplication::Show));

    DEBUG_MSG("Adding wrapper for void TApplication::Hide() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Hide()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:130:20
    t.method("Hide", static_cast<void (TApplication::*)() >(&TApplication::Hide));

    DEBUG_MSG("Adding wrapper for void TApplication::Iconify() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Iconify()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:131:20
    t.method("Iconify", static_cast<void (TApplication::*)() >(&TApplication::Iconify));

    DEBUG_MSG("Adding wrapper for void TApplication::Open() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Open()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:132:20
    t.method("Open", static_cast<void (TApplication::*)() >(&TApplication::Open));

    DEBUG_MSG("Adding wrapper for void TApplication::Raise() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Raise()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:133:20
    t.method("Raise", static_cast<void (TApplication::*)() >(&TApplication::Raise));

    DEBUG_MSG("Adding wrapper for void TApplication::Lower() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Lower()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:134:20
    t.method("Lower", static_cast<void (TApplication::*)() >(&TApplication::Lower));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::IsCmdThread() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::IsCmdThread()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:135:20
    t.method("IsCmdThread", static_cast<Bool_t (TApplication::*)() >(&TApplication::IsCmdThread));

    DEBUG_MSG("Adding wrapper for TApplicationImp * TApplication::GetApplicationImp() (" __HERE__ ")");
    // signature to use in the veto list: TApplicationImp * TApplication::GetApplicationImp()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:136:29
    t.method("GetApplicationImp", static_cast<TApplicationImp * (TApplication::*)() >(&TApplication::GetApplicationImp));

    DEBUG_MSG("Adding wrapper for void TApplication::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::ls(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:138:20
    t.method("ls", static_cast<void (TApplication::*)(Option_t *)  const>(&TApplication::ls));
    t.method("ls", [](TApplication const& a)->void { a.ls(); });
    t.method("ls", [](TApplication const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for Int_t TApplication::Argc() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TApplication::Argc()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:140:20
    t.method("Argc", static_cast<Int_t (TApplication::*)()  const>(&TApplication::Argc));

    DEBUG_MSG("Adding wrapper for char ** TApplication::Argv() (" __HERE__ ")");
    // signature to use in the veto list: char ** TApplication::Argv()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:141:20
    t.method("Argv", static_cast<char ** (TApplication::*)()  const>(&TApplication::Argv));

    DEBUG_MSG("Adding wrapper for char * TApplication::Argv(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TApplication::Argv(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:142:20
    t.method("Argv", static_cast<char * (TApplication::*)(Int_t)  const>(&TApplication::Argv));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::NoLogOpt() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::NoLogOpt()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:143:20
    t.method("NoLogOpt", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::NoLogOpt));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::NoLogoOpt() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::NoLogoOpt()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:144:20
    t.method("NoLogoOpt", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::NoLogoOpt));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::QuitOpt() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::QuitOpt()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:145:20
    t.method("QuitOpt", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::QuitOpt));

    DEBUG_MSG("Adding wrapper for TObjArray * TApplication::InputFiles() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TApplication::InputFiles()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:146:20
    t.method("InputFiles", static_cast<TObjArray * (TApplication::*)()  const>(&TApplication::InputFiles));

    DEBUG_MSG("Adding wrapper for const char * TApplication::WorkingDirectory() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::WorkingDirectory()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:147:20
    t.method("WorkingDirectory", [](TApplication const& a) { return (std::string)a.WorkingDirectory(); });
    t.method("WorkingDirectory", [](TApplication const* a) { return (std::string)a->WorkingDirectory(); });

    DEBUG_MSG("Adding wrapper for void TApplication::ClearInputFiles() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::ClearInputFiles()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:148:20
    t.method("ClearInputFiles", static_cast<void (TApplication::*)() >(&TApplication::ClearInputFiles));

    DEBUG_MSG("Adding wrapper for TApplication * TApplication::GetAppRemote() (" __HERE__ ")");
    // signature to use in the veto list: TApplication * TApplication::GetAppRemote()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:150:20
    t.method("GetAppRemote", static_cast<TApplication * (TApplication::*)()  const>(&TApplication::GetAppRemote));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::IsRunning() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::IsRunning()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:152:20
    t.method("IsRunning", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::IsRunning));

    DEBUG_MSG("Adding wrapper for Bool_t TApplication::ReturnFromRun() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TApplication::ReturnFromRun()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:153:20
    t.method("ReturnFromRun", static_cast<Bool_t (TApplication::*)()  const>(&TApplication::ReturnFromRun));

    DEBUG_MSG("Adding wrapper for void TApplication::SetReturnFromRun(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::SetReturnFromRun(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:154:20
    t.method("SetReturnFromRun", static_cast<void (TApplication::*)(Bool_t) >(&TApplication::SetReturnFromRun));

    DEBUG_MSG("Adding wrapper for void TApplication::LineProcessed(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::LineProcessed(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:156:20
    t.method("LineProcessed", static_cast<void (TApplication::*)(const char *) >(&TApplication::LineProcessed));

    DEBUG_MSG("Adding wrapper for void TApplication::Terminate(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Terminate(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:157:20
    t.method("Terminate", static_cast<void (TApplication::*)(Int_t) >(&TApplication::Terminate));
    t.method("Terminate", [](TApplication& a)->void { a.Terminate(); });
    t.method("Terminate", [](TApplication* a)->void { a->Terminate(); });

    DEBUG_MSG("Adding wrapper for void TApplication::KeyPressed(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::KeyPressed(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:158:20
    t.method("KeyPressed", static_cast<void (TApplication::*)(Int_t) >(&TApplication::KeyPressed));

    DEBUG_MSG("Adding wrapper for void TApplication::ReturnPressed(char *) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::ReturnPressed(char *)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:159:20
    t.method("ReturnPressed", static_cast<void (TApplication::*)(char *) >(&TApplication::ReturnPressed));

    DEBUG_MSG("Adding wrapper for Longptr_t TApplication::ExecuteFile(const char *, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Longptr_t TApplication::ExecuteFile(const char *, Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:162:21
    module_.method("TApplication!ExecuteFile", static_cast<Longptr_t (*)(const char *, Int_t *, Bool_t) >(&TApplication::ExecuteFile));
    module_.method("TApplication!ExecuteFile", [](const char * arg0)->Longptr_t { return TApplication::ExecuteFile(arg0); });
    module_.method("TApplication!ExecuteFile", [](const char * arg0, Int_t * arg1)->Longptr_t { return TApplication::ExecuteFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TList * TApplication::GetApplications() (" __HERE__ ")");
    // signature to use in the veto list: TList * TApplication::GetApplications()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:163:20
    module_.method("TApplication!GetApplications", static_cast<TList * (*)() >(&TApplication::GetApplications));

    DEBUG_MSG("Adding wrapper for void TApplication::CreateApplication() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::CreateApplication()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:164:20
    module_.method("TApplication!CreateApplication", static_cast<void (*)() >(&TApplication::CreateApplication));

    DEBUG_MSG("Adding wrapper for void TApplication::NeedGraphicsLibs() (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::NeedGraphicsLibs()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:165:20
    module_.method("TApplication!NeedGraphicsLibs", static_cast<void (*)() >(&TApplication::NeedGraphicsLibs));

    DEBUG_MSG("Adding wrapper for Version_t TApplication::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TApplication::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Class_Version", static_cast<Version_t (*)() >(&TApplication::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TApplication::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TApplication::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    t.method("IsA", static_cast<TClass * (TApplication::*)()  const>(&TApplication::IsA));

    DEBUG_MSG("Adding wrapper for void TApplication::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    t.method("StreamerNVirtual", static_cast<void (TApplication::*)(TBuffer &) >(&TApplication::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TApplication::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!DeclFileName", []() { return (std::string)TApplication::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TApplication::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TApplication::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!ImplFileLine", static_cast<int (*)() >(&TApplication::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TApplication::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!ImplFileName", []() { return (std::string)TApplication::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TApplication::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TApplication::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Class_Name", []() { return (std::string)TApplication::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TApplication::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TApplication::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Dictionary", static_cast<TClass * (*)() >(&TApplication::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TApplication::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TApplication::Class()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!Class", static_cast<TClass * (*)() >(&TApplication::Class));

    DEBUG_MSG("Adding wrapper for void TApplication::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TApplication::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    t.method("Streamer", static_cast<void (TApplication::*)(TBuffer &) >(&TApplication::Streamer));

    DEBUG_MSG("Adding wrapper for int TApplication::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TApplication::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:167:4
    module_.method("TApplication!DeclFileLine", static_cast<int (*)() >(&TApplication::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TApplication>> type_;
};
std::shared_ptr<Wrapper> newJlTApplication(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTApplication(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TInterpreter> : std::false_type { };
  template<> struct DefaultConstructible<TInterpreter> : std::false_type { };
template<> struct SuperType<TInterpreter> { typedef TNamed type; };
}

// Class generating the wrapper for type TInterpreter
// signature to use in the veto file: TInterpreter
struct JlTInterpreter: public Wrapper {

  JlTInterpreter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TInterpreter (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TInterpreter.h:60:7
    jlcxx::TypeWrapper<TInterpreter>  t = jlModule.add_type<TInterpreter>("TInterpreter",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TInterpreter>>(new jlcxx::TypeWrapper<TInterpreter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TInterpreter>> type_;
};
std::shared_ptr<Wrapper> newJlTInterpreter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTInterpreter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TDataType> : std::false_type { };
  template<> struct DefaultConstructible<TDataType> : std::false_type { };
}

// Class generating the wrapper for type TDataType
// signature to use in the veto file: TDataType
struct JlTDataType: public Wrapper {

  JlTDataType(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TDataType (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TDataType.h:44:7
    jlcxx::TypeWrapper<TDataType>  t = jlModule.add_type<TDataType>("TDataType");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TDataType>>(new jlcxx::TypeWrapper<TDataType>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TDataType>> type_;
};
std::shared_ptr<Wrapper> newJlTDataType(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTDataType(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualPad> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualPad> : std::false_type { };
template<> struct SuperType<TVirtualPad> { typedef TObject type; };
}

// Class generating the wrapper for type TVirtualPad
// signature to use in the veto file: TVirtualPad
struct JlTVirtualPad: public Wrapper {

  JlTVirtualPad(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualPad (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVirtualPad.h:50:7
    jlcxx::TypeWrapper<TVirtualPad>  t = jlModule.add_type<TVirtualPad>("TVirtualPad",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualPad>>(new jlcxx::TypeWrapper<TVirtualPad>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualPad>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualPad(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualPad(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TPad> : std::false_type { };
  template<> struct DefaultConstructible<TPad> : std::false_type { };
template<> struct SuperType<TPad> { typedef TVirtualPad type; };
}

// Class generating the wrapper for type TPad
// signature to use in the veto file: TPad
struct JlTPad: public Wrapper {

  JlTPad(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TPad (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TPad.h:28:7
    jlcxx::TypeWrapper<TPad>  t = jlModule.add_type<TPad>("TPad",
      jlcxx::julia_base_type<TVirtualPad>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TPad>>(new jlcxx::TypeWrapper<TPad>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TPad>> type_;
};
std::shared_ptr<Wrapper> newJlTPad(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTPad(module));
}
