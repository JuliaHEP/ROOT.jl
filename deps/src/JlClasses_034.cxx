// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<THnSparse> : std::false_type { };
  template<> struct DefaultConstructible<THnSparse> : std::false_type { };
template<> struct SuperType<THnSparse> { typedef THnBase type; };
}

// Class generating the wrapper for type THnSparse
// signature to use in the veto file: THnSparse
struct JlTHnSparse: public Wrapper {

  JlTHnSparse(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnSparse (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:37:7
    jlcxx::TypeWrapper<THnSparse>  t = jlModule.add_type<THnSparse>("THnSparse",
      jlcxx::julia_base_type<THnBase>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnSparse>>(new jlcxx::TypeWrapper<THnSparse>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::CreateSparse(const char *, const char *, const TH1 *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::CreateSparse(const char *, const char *, const TH1 *, Int_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:77:22
    module_.method("THnSparse!CreateSparse", static_cast<THnSparse * (*)(const char *, const char *, const TH1 *, Int_t) >(&THnSparse::CreateSparse));
    module_.method("THnSparse!CreateSparse", [](const char * arg0, const char * arg1, const TH1 * arg2)->THnSparse * { return THnSparse::CreateSparse(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::CreateSparse(const char *, const char *, const THnBase *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::CreateSparse(const char *, const char *, const THnBase *, Int_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:82:22
    module_.method("THnSparse!CreateSparse", static_cast<THnSparse * (*)(const char *, const char *, const THnBase *, Int_t) >(&THnSparse::CreateSparse));
    module_.method("THnSparse!CreateSparse", [](const char * arg0, const char * arg1, const THnBase * arg2)->THnSparse * { return THnSparse::CreateSparse(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t THnSparse::GetChunkSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnSparse::GetChunkSize()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:88:10
    t.method("GetChunkSize", static_cast<Int_t (THnSparse::*)()  const>(&THnSparse::GetChunkSize));

    DEBUG_MSG("Adding wrapper for Int_t THnSparse::GetNChunks() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnSparse::GetNChunks()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:89:10
    t.method("GetNChunks", static_cast<Int_t (THnSparse::*)()  const>(&THnSparse::GetNChunks));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetNbins()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:93:13
    t.method("GetNbins", static_cast<Long64_t (THnSparse::*)()  const>(&THnSparse::GetNbins));

    DEBUG_MSG("Adding wrapper for void THnSparse::SetFilledBins(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetFilledBins(Long64_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:94:9
    t.method("SetFilledBins", static_cast<void (THnSparse::*)(Long64_t) >(&THnSparse::SetFilledBins));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Int_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:96:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Int_t *)  const>(&THnSparse::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:97:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Double_t *)  const>(&THnSparse::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const char *[]) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const char *[])
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:98:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const char *[])  const>(&THnSparse::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Int_t *, Bool_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:99:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Int_t *, Bool_t) >(&THnSparse::GetBin));
    t.method("GetBin", [](THnSparse& a, const Int_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THnSparse* a, const Int_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:100:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Double_t *, Bool_t) >(&THnSparse::GetBin));
    t.method("GetBin", [](THnSparse& a, const Double_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THnSparse* a, const Double_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const char *[], Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const char *[], Bool_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:101:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const char *[], Bool_t) >(&THnSparse::GetBin));
    t.method("GetBin", [](THnSparse& a, const char * arg0[])->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THnSparse* a, const char * arg0[])->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparse::SetBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetBinContent(const Int_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:105:9
    t.method("SetBinContent", static_cast<void (THnSparse::*)(const Int_t *, Double_t) >(&THnSparse::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THnSparse::SetBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetBinContent(Long64_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:108:9
    t.method("SetBinContent", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THnSparse::SetBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetBinError2(Long64_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:109:9
    t.method("SetBinError2", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::SetBinError2));

    DEBUG_MSG("Adding wrapper for void THnSparse::AddBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::AddBinContent(const Int_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:113:9
    t.method("AddBinContent", static_cast<void (THnSparse::*)(const Int_t *, Double_t) >(&THnSparse::AddBinContent));
    t.method("AddBinContent", [](THnSparse& a, const Int_t * arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THnSparse* a, const Int_t * arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparse::AddBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::AddBinContent(Long64_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:116:9
    t.method("AddBinContent", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::AddBinContent));
    t.method("AddBinContent", [](THnSparse& a, Long64_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THnSparse* a, Long64_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparse::AddBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::AddBinError2(Long64_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:117:9
    t.method("AddBinError2", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::AddBinError2));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetBinContent(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetBinContent(const Int_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:121:13
    t.method("GetBinContent", static_cast<Double_t (THnSparse::*)(const Int_t *)  const>(&THnSparse::GetBinContent));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetBinContent(Long64_t, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetBinContent(Long64_t, Int_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:125:13
    t.method("GetBinContent", static_cast<Double_t (THnSparse::*)(Long64_t, Int_t *)  const>(&THnSparse::GetBinContent));
    t.method("GetBinContent", [](THnSparse const& a, Long64_t arg0)->Double_t { return a.GetBinContent(arg0); });
    t.method("GetBinContent", [](THnSparse const* a, Long64_t arg0)->Double_t { return a->GetBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetBinError2(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetBinError2(Long64_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:126:13
    t.method("GetBinError2", static_cast<Double_t (THnSparse::*)(Long64_t)  const>(&THnSparse::GetBinError2));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetSparseFractionBins() (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetSparseFractionBins()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:128:13
    t.method("GetSparseFractionBins", static_cast<Double_t (THnSparse::*)()  const>(&THnSparse::GetSparseFractionBins));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetSparseFractionMem() (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetSparseFractionMem()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:129:13
    t.method("GetSparseFractionMem", static_cast<Double_t (THnSparse::*)()  const>(&THnSparse::GetSparseFractionMem));

    DEBUG_MSG("Adding wrapper for TH1D * THnSparse::Projection(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * THnSparse::Projection(Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:134:15
    t.method("Projection", static_cast<TH1D * (THnSparse::*)(Int_t, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0)->TH1D * { return a.Projection(arg0); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0)->TH1D * { return a->Projection(arg0); });

    DEBUG_MSG("Adding wrapper for TH2D * THnSparse::Projection(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2D * THnSparse::Projection(Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:141:15
    t.method("Projection", static_cast<TH2D * (THnSparse::*)(Int_t, Int_t, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0, Int_t arg1)->TH2D * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0, Int_t arg1)->TH2D * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH3D * THnSparse::Projection(Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH3D * THnSparse::Projection(Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:149:15
    t.method("Projection", static_cast<TH3D * (THnSparse::*)(Int_t, Int_t, Int_t, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a->Projection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::Projection(Int_t, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::Projection(Int_t, const Int_t *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:154:15
    t.method("Projection", static_cast<THnSparse * (THnSparse::*)(Int_t, const Int_t *, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0, const Int_t * arg1)->THnSparse * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0, const Int_t * arg1)->THnSparse * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::Rebin(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::Rebin(Int_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:159:15
    t.method("Rebin", static_cast<THnSparse * (THnSparse::*)(Int_t)  const>(&THnSparse::Rebin));

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::Rebin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::Rebin(const Int_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:162:15
    t.method("Rebin", static_cast<THnSparse * (THnSparse::*)(const Int_t *)  const>(&THnSparse::Rebin));

    DEBUG_MSG("Adding wrapper for void THnSparse::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::Reset(Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:166:9
    t.method("Reset", static_cast<void (THnSparse::*)(Option_t *) >(&THnSparse::Reset));
    t.method("Reset", [](THnSparse& a)->void { a.Reset(); });
    t.method("Reset", [](THnSparse* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void THnSparse::Sumw2() (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::Sumw2()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:167:9
    t.method("Sumw2", static_cast<void (THnSparse::*)() >(&THnSparse::Sumw2));

    DEBUG_MSG("Adding wrapper for Version_t THnSparse::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnSparse::Class_Version()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!Class_Version", static_cast<Version_t (*)() >(&THnSparse::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THnSparse::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparse::IsA()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    t.method("IsA", static_cast<TClass * (THnSparse::*)()  const>(&THnSparse::IsA));

    DEBUG_MSG("Adding wrapper for void THnSparse::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    t.method("StreamerNVirtual", static_cast<void (THnSparse::*)(TBuffer &) >(&THnSparse::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THnSparse::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparse::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!DeclFileName", []() { return (std::string)THnSparse::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnSparse::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparse::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!ImplFileLine", static_cast<int (*)() >(&THnSparse::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THnSparse::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparse::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!ImplFileName", []() { return (std::string)THnSparse::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnSparse::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparse::Class_Name()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!Class_Name", []() { return (std::string)THnSparse::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnSparse::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparse::Dictionary()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!Dictionary", static_cast<TClass * (*)() >(&THnSparse::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THnSparse::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparse::Class()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!Class", static_cast<TClass * (*)() >(&THnSparse::Class));

    DEBUG_MSG("Adding wrapper for void THnSparse::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    t.method("Streamer", static_cast<void (THnSparse::*)(TBuffer &) >(&THnSparse::Streamer));

    DEBUG_MSG("Adding wrapper for int THnSparse::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparse::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THnSparse.h:169:4
    module_.method("THnSparse!DeclFileLine", static_cast<int (*)() >(&THnSparse::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnSparse>> type_;
};
std::shared_ptr<Wrapper> newJlTHnSparse(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnSparse(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THStack> : std::false_type { };
  template<> struct DefaultConstructible<THStack> : std::false_type { };
template<> struct SuperType<THStack> { typedef TNamed type; };
}

// Class generating the wrapper for type THStack
// signature to use in the veto file: THStack
struct JlTHStack: public Wrapper {

  JlTHStack(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THStack (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:40:7
    jlcxx::TypeWrapper<THStack>  t = jlModule.add_type<THStack>("THStack",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THStack>>(new jlcxx::TypeWrapper<THStack>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THStack::THStack(const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:58:4
    t.constructor<const char *, const char *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THStack::THStack(TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t, Option_t *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:59:4
    t.constructor<TH1 *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t, Option_t *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t, Option_t *, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THStack::THStack(const THStack &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:64:4
    t.constructor<const THStack &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void THStack::Add(TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Add(TH1 *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:66:21
    t.method("Add", static_cast<void (THStack::*)(TH1 *, Option_t *) >(&THStack::Add));
    t.method("Add", [](THStack& a, TH1 * arg0)->void { a.Add(arg0); });
    t.method("Add", [](THStack* a, TH1 * arg0)->void { a->Add(arg0); });

    DEBUG_MSG("Adding wrapper for void THStack::BuildPrimitives(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::BuildPrimitives(Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:67:21
    t.method("BuildPrimitives", static_cast<void (THStack::*)(Option_t *) >(&THStack::BuildPrimitives));
    t.method("BuildPrimitives", [](THStack& a)->void { a.BuildPrimitives(); });
    t.method("BuildPrimitives", [](THStack* a)->void { a->BuildPrimitives(); });

    DEBUG_MSG("Adding wrapper for void THStack::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Browse(TBrowser *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:68:21
    t.method("Browse", static_cast<void (THStack::*)(TBrowser *) >(&THStack::Browse));

    DEBUG_MSG("Adding wrapper for Int_t THStack::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THStack::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:69:21
    t.method("DistancetoPrimitive", static_cast<Int_t (THStack::*)(Int_t, Int_t) >(&THStack::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void THStack::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:70:21
    t.method("Draw", static_cast<void (THStack::*)(Option_t *) >(&THStack::Draw));
    t.method("Draw", [](THStack& a)->void { a.Draw(); });
    t.method("Draw", [](THStack* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for TH1 * THStack::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * THStack::GetHistogram()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:71:21
    t.method("GetHistogram", static_cast<TH1 * (THStack::*)()  const>(&THStack::GetHistogram));

    DEBUG_MSG("Adding wrapper for TList * THStack::GetHists() (" __HERE__ ")");
    // signature to use in the veto list: TList * THStack::GetHists()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:72:21
    t.method("GetHists", static_cast<TList * (THStack::*)()  const>(&THStack::GetHists));

    DEBUG_MSG("Adding wrapper for TIter THStack::begin() (" __HERE__ ")");
    // signature to use in the veto list: TIter THStack::begin()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:73:21
    t.method("begin", static_cast<TIter (THStack::*)()  const>(&THStack::begin));

    DEBUG_MSG("Adding wrapper for TIter THStack::end() (" __HERE__ ")");
    // signature to use in the veto list: TIter THStack::end()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:74:21
    t.method("end", static_cast<TIter (THStack::*)()  const>(&THStack::end));

    DEBUG_MSG("Adding wrapper for Int_t THStack::GetNhists() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THStack::GetNhists()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:75:21
    t.method("GetNhists", static_cast<Int_t (THStack::*)()  const>(&THStack::GetNhists));

    DEBUG_MSG("Adding wrapper for TObjArray * THStack::GetStack() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * THStack::GetStack()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:76:21
    t.method("GetStack", static_cast<TObjArray * (THStack::*)() >(&THStack::GetStack));

    DEBUG_MSG("Adding wrapper for Double_t THStack::GetMaximum(Option_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THStack::GetMaximum(Option_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:77:21
    t.method("GetMaximum", static_cast<Double_t (THStack::*)(Option_t *, Double_t) >(&THStack::GetMaximum));
    t.method("GetMaximum", [](THStack& a)->Double_t { return a.GetMaximum(); });
    t.method("GetMaximum", [](THStack& a, Option_t * arg0)->Double_t { return a.GetMaximum(arg0); });
    t.method("GetMaximum", [](THStack* a)->Double_t { return a->GetMaximum(); });
    t.method("GetMaximum", [](THStack* a, Option_t * arg0)->Double_t { return a->GetMaximum(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t THStack::GetMinimum(Option_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THStack::GetMinimum(Option_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:78:21
    t.method("GetMinimum", static_cast<Double_t (THStack::*)(Option_t *, Double_t) >(&THStack::GetMinimum));
    t.method("GetMinimum", [](THStack& a)->Double_t { return a.GetMinimum(); });
    t.method("GetMinimum", [](THStack& a, Option_t * arg0)->Double_t { return a.GetMinimum(arg0); });
    t.method("GetMinimum", [](THStack* a)->Double_t { return a->GetMinimum(); });
    t.method("GetMinimum", [](THStack* a, Option_t * arg0)->Double_t { return a->GetMinimum(arg0); });

    DEBUG_MSG("Adding wrapper for TAxis * THStack::GetXaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THStack::GetXaxis()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:79:21
    t.method("GetXaxis", static_cast<TAxis * (THStack::*)()  const>(&THStack::GetXaxis));

    DEBUG_MSG("Adding wrapper for TAxis * THStack::GetYaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THStack::GetYaxis()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:80:21
    t.method("GetYaxis", static_cast<TAxis * (THStack::*)()  const>(&THStack::GetYaxis));

    DEBUG_MSG("Adding wrapper for TAxis * THStack::GetZaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THStack::GetZaxis()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:81:21
    t.method("GetZaxis", static_cast<TAxis * (THStack::*)()  const>(&THStack::GetZaxis));

    DEBUG_MSG("Adding wrapper for void THStack::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::ls(Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:82:21
    t.method("ls", static_cast<void (THStack::*)(Option_t *)  const>(&THStack::ls));
    t.method("ls", [](THStack const& a)->void { a.ls(); });
    t.method("ls", [](THStack const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for void THStack::Modified() (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Modified()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:84:21
    t.method("Modified", static_cast<void (THStack::*)() >(&THStack::Modified));

    DEBUG_MSG("Adding wrapper for void THStack::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:85:21
    t.method("Paint", static_cast<void (THStack::*)(Option_t *) >(&THStack::Paint));
    t.method("Paint", [](THStack& a)->void { a.Paint(); });
    t.method("Paint", [](THStack* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void THStack::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:86:21
    t.method("Print", static_cast<void (THStack::*)(Option_t *)  const>(&THStack::Print));
    t.method("Print", [](THStack const& a)->void { a.Print(); });
    t.method("Print", [](THStack const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void THStack::RecursiveRemove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::RecursiveRemove(TObject *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:87:21
    t.method("RecursiveRemove", static_cast<void (THStack::*)(TObject *) >(&THStack::RecursiveRemove));

    DEBUG_MSG("Adding wrapper for void THStack::SetHistogram(TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::SetHistogram(TH1 *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:89:21
    t.method("SetHistogram", static_cast<void (THStack::*)(TH1 *) >(&THStack::SetHistogram));

    DEBUG_MSG("Adding wrapper for void THStack::SetMaximum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::SetMaximum(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:90:21
    t.method("SetMaximum", static_cast<void (THStack::*)(Double_t) >(&THStack::SetMaximum));
    t.method("SetMaximum", [](THStack& a)->void { a.SetMaximum(); });
    t.method("SetMaximum", [](THStack* a)->void { a->SetMaximum(); });

    DEBUG_MSG("Adding wrapper for void THStack::SetMinimum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::SetMinimum(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:91:21
    t.method("SetMinimum", static_cast<void (THStack::*)(Double_t) >(&THStack::SetMinimum));
    t.method("SetMinimum", [](THStack& a)->void { a.SetMinimum(); });
    t.method("SetMinimum", [](THStack* a)->void { a->SetMinimum(); });

    DEBUG_MSG("Adding wrapper for Version_t THStack::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THStack::Class_Version()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!Class_Version", static_cast<Version_t (*)() >(&THStack::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THStack::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THStack::IsA()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    t.method("IsA", static_cast<TClass * (THStack::*)()  const>(&THStack::IsA));

    DEBUG_MSG("Adding wrapper for void THStack::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    t.method("StreamerNVirtual", static_cast<void (THStack::*)(TBuffer &) >(&THStack::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THStack::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THStack::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!DeclFileName", []() { return (std::string)THStack::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THStack::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THStack::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!ImplFileLine", static_cast<int (*)() >(&THStack::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THStack::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THStack::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!ImplFileName", []() { return (std::string)THStack::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THStack::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THStack::Class_Name()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!Class_Name", []() { return (std::string)THStack::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THStack::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THStack::Dictionary()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!Dictionary", static_cast<TClass * (*)() >(&THStack::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THStack::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THStack::Class()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!Class", static_cast<TClass * (*)() >(&THStack::Class));

    DEBUG_MSG("Adding wrapper for void THStack::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    t.method("Streamer", static_cast<void (THStack::*)(TBuffer &) >(&THStack::Streamer));

    DEBUG_MSG("Adding wrapper for int THStack::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THStack::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/THStack.h:93:4
    module_.method("THStack!DeclFileLine", static_cast<int (*)() >(&THStack::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THStack>> type_;
};
std::shared_ptr<Wrapper> newJlTHStack(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHStack(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TIter> : std::false_type { };
  template<> struct DefaultConstructible<TIter> : std::false_type { };
}

// Class generating the wrapper for type TIter
// signature to use in the veto file: TIter
struct JlTIter: public Wrapper {

  JlTIter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TIter (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TCollection.h:235:7
    jlcxx::TypeWrapper<TIter>  t = jlModule.add_type<TIter>("TIter");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TIter>>(new jlcxx::TypeWrapper<TIter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TIter>> type_;
};
std::shared_ptr<Wrapper> newJlTIter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTIter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TKDE> : std::false_type { };
  template<> struct DefaultConstructible<TKDE> : std::false_type { };
template<> struct SuperType<TKDE> { typedef TNamed type; };
}

// Class generating the wrapper for type TKDE
// signature to use in the veto file: TKDE
struct JlTKDE: public Wrapper {

  JlTKDE(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TKDE (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:37:7
    jlcxx::TypeWrapper<TKDE>  t = jlModule.add_type<TKDE>("TKDE",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TKDE>>(new jlcxx::TypeWrapper<TKDE>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TKDE::TKDE(UInt_t, const Double_t *, Double_t, Double_t, const Option_t *, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:91:4
    t.constructor<UInt_t, const Double_t *>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, Double_t>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, Double_t, Double_t, const Option_t *>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, Double_t, Double_t, const Option_t *, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TKDE::TKDE(UInt_t, const Double_t *, const Double_t *, Double_t, Double_t, const Option_t *, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:97:4
    t.constructor<UInt_t, const Double_t *, const Double_t *>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, const Double_t *, Double_t>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, const Double_t *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, const Double_t *, Double_t, Double_t, const Option_t *>(/*finalize=*/true);
    t.constructor<UInt_t, const Double_t *, const Double_t *, Double_t, Double_t, const Option_t *, Double_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TKDE::Fill(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::Fill(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:116:9
    t.method("Fill", static_cast<void (TKDE::*)(Double_t) >(&TKDE::Fill));

    DEBUG_MSG("Adding wrapper for void TKDE::Fill(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::Fill(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:117:9
    t.method("Fill", static_cast<void (TKDE::*)(Double_t, Double_t) >(&TKDE::Fill));

    DEBUG_MSG("Adding wrapper for void TKDE::SetKernelType(TKDE::EKernelType) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetKernelType(TKDE::EKernelType)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:118:9
    t.method("SetKernelType", static_cast<void (TKDE::*)(TKDE::EKernelType) >(&TKDE::SetKernelType));

    DEBUG_MSG("Adding wrapper for void TKDE::SetIteration(TKDE::EIteration) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetIteration(TKDE::EIteration)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:119:9
    t.method("SetIteration", static_cast<void (TKDE::*)(TKDE::EIteration) >(&TKDE::SetIteration));

    DEBUG_MSG("Adding wrapper for void TKDE::SetMirror(TKDE::EMirror) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetMirror(TKDE::EMirror)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:120:9
    t.method("SetMirror", static_cast<void (TKDE::*)(TKDE::EMirror) >(&TKDE::SetMirror));

    DEBUG_MSG("Adding wrapper for void TKDE::SetBinning(TKDE::EBinning) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetBinning(TKDE::EBinning)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:121:9
    t.method("SetBinning", static_cast<void (TKDE::*)(TKDE::EBinning) >(&TKDE::SetBinning));

    DEBUG_MSG("Adding wrapper for void TKDE::SetNBins(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetNBins(UInt_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:122:9
    t.method("SetNBins", static_cast<void (TKDE::*)(UInt_t) >(&TKDE::SetNBins));

    DEBUG_MSG("Adding wrapper for void TKDE::SetUseBinsNEvents(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetUseBinsNEvents(UInt_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:123:9
    t.method("SetUseBinsNEvents", static_cast<void (TKDE::*)(UInt_t) >(&TKDE::SetUseBinsNEvents));

    DEBUG_MSG("Adding wrapper for void TKDE::SetTuneFactor(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetTuneFactor(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:124:9
    t.method("SetTuneFactor", static_cast<void (TKDE::*)(Double_t) >(&TKDE::SetTuneFactor));

    DEBUG_MSG("Adding wrapper for void TKDE::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:125:9
    t.method("SetRange", static_cast<void (TKDE::*)(Double_t, Double_t) >(&TKDE::SetRange));

    DEBUG_MSG("Adding wrapper for void TKDE::Draw(const Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::Draw(const Option_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:127:9
    t.method("Draw", static_cast<void (TKDE::*)(const Option_t *) >(&TKDE::Draw));
    t.method("Draw", [](TKDE& a)->void { a.Draw(); });
    t.method("Draw", [](TKDE* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for Double_t TKDE::operator()(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::operator()(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:129:13
    t.method("paren", static_cast<Double_t (TKDE::*)(Double_t)  const>(&TKDE::operator()));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::operator()(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::operator()(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:130:13
    t.method("paren", static_cast<Double_t (TKDE::*)(const Double_t *, const Double_t *)  const>(&TKDE::operator()));
    t.method("paren", [](TKDE const& a, const Double_t * arg0)->Double_t { return a.operator()(arg0); });
    t.method("paren", [](TKDE const* a, const Double_t * arg0)->Double_t { return a->operator()(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetValue(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetValue(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:132:13
    t.method("GetValue", static_cast<Double_t (TKDE::*)(Double_t)  const>(&TKDE::GetValue));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetError(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetError(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:133:13
    t.method("GetError", static_cast<Double_t (TKDE::*)(Double_t)  const>(&TKDE::GetError));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetBias(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetBias(Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:135:13
    t.method("GetBias", static_cast<Double_t (TKDE::*)(Double_t)  const>(&TKDE::GetBias));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetMean() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetMean()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:136:13
    t.method("GetMean", static_cast<Double_t (TKDE::*)()  const>(&TKDE::GetMean));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetSigma() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetSigma()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:137:13
    t.method("GetSigma", static_cast<Double_t (TKDE::*)()  const>(&TKDE::GetSigma));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetRAMISE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetRAMISE()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:138:13
    t.method("GetRAMISE", static_cast<Double_t (TKDE::*)()  const>(&TKDE::GetRAMISE));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::GetFixedWeight() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::GetFixedWeight()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:140:13
    t.method("GetFixedWeight", static_cast<Double_t (TKDE::*)()  const>(&TKDE::GetFixedWeight));

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetFunction(UInt_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetFunction(UInt_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:142:9
    t.method("GetFunction", static_cast<TF1 * (TKDE::*)(UInt_t, Double_t, Double_t) >(&TKDE::GetFunction));
    t.method("GetFunction", [](TKDE& a)->TF1 * { return a.GetFunction(); });
    t.method("GetFunction", [](TKDE& a, UInt_t arg0)->TF1 * { return a.GetFunction(arg0); });
    t.method("GetFunction", [](TKDE& a, UInt_t arg0, Double_t arg1)->TF1 * { return a.GetFunction(arg0, arg1); });
    t.method("GetFunction", [](TKDE* a)->TF1 * { return a->GetFunction(); });
    t.method("GetFunction", [](TKDE* a, UInt_t arg0)->TF1 * { return a->GetFunction(arg0); });
    t.method("GetFunction", [](TKDE* a, UInt_t arg0, Double_t arg1)->TF1 * { return a->GetFunction(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetUpperFunction(Double_t, UInt_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetUpperFunction(Double_t, UInt_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:143:9
    t.method("GetUpperFunction", static_cast<TF1 * (TKDE::*)(Double_t, UInt_t, Double_t, Double_t) >(&TKDE::GetUpperFunction));
    t.method("GetUpperFunction", [](TKDE& a)->TF1 * { return a.GetUpperFunction(); });
    t.method("GetUpperFunction", [](TKDE& a, Double_t arg0)->TF1 * { return a.GetUpperFunction(arg0); });
    t.method("GetUpperFunction", [](TKDE& a, Double_t arg0, UInt_t arg1)->TF1 * { return a.GetUpperFunction(arg0, arg1); });
    t.method("GetUpperFunction", [](TKDE& a, Double_t arg0, UInt_t arg1, Double_t arg2)->TF1 * { return a.GetUpperFunction(arg0, arg1, arg2); });
    t.method("GetUpperFunction", [](TKDE* a)->TF1 * { return a->GetUpperFunction(); });
    t.method("GetUpperFunction", [](TKDE* a, Double_t arg0)->TF1 * { return a->GetUpperFunction(arg0); });
    t.method("GetUpperFunction", [](TKDE* a, Double_t arg0, UInt_t arg1)->TF1 * { return a->GetUpperFunction(arg0, arg1); });
    t.method("GetUpperFunction", [](TKDE* a, Double_t arg0, UInt_t arg1, Double_t arg2)->TF1 * { return a->GetUpperFunction(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetLowerFunction(Double_t, UInt_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetLowerFunction(Double_t, UInt_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:144:9
    t.method("GetLowerFunction", static_cast<TF1 * (TKDE::*)(Double_t, UInt_t, Double_t, Double_t) >(&TKDE::GetLowerFunction));
    t.method("GetLowerFunction", [](TKDE& a)->TF1 * { return a.GetLowerFunction(); });
    t.method("GetLowerFunction", [](TKDE& a, Double_t arg0)->TF1 * { return a.GetLowerFunction(arg0); });
    t.method("GetLowerFunction", [](TKDE& a, Double_t arg0, UInt_t arg1)->TF1 * { return a.GetLowerFunction(arg0, arg1); });
    t.method("GetLowerFunction", [](TKDE& a, Double_t arg0, UInt_t arg1, Double_t arg2)->TF1 * { return a.GetLowerFunction(arg0, arg1, arg2); });
    t.method("GetLowerFunction", [](TKDE* a)->TF1 * { return a->GetLowerFunction(); });
    t.method("GetLowerFunction", [](TKDE* a, Double_t arg0)->TF1 * { return a->GetLowerFunction(arg0); });
    t.method("GetLowerFunction", [](TKDE* a, Double_t arg0, UInt_t arg1)->TF1 * { return a->GetLowerFunction(arg0, arg1); });
    t.method("GetLowerFunction", [](TKDE* a, Double_t arg0, UInt_t arg1, Double_t arg2)->TF1 * { return a->GetLowerFunction(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetApproximateBias(UInt_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetApproximateBias(UInt_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:145:9
    t.method("GetApproximateBias", static_cast<TF1 * (TKDE::*)(UInt_t, Double_t, Double_t) >(&TKDE::GetApproximateBias));
    t.method("GetApproximateBias", [](TKDE& a)->TF1 * { return a.GetApproximateBias(); });
    t.method("GetApproximateBias", [](TKDE& a, UInt_t arg0)->TF1 * { return a.GetApproximateBias(arg0); });
    t.method("GetApproximateBias", [](TKDE& a, UInt_t arg0, Double_t arg1)->TF1 * { return a.GetApproximateBias(arg0, arg1); });
    t.method("GetApproximateBias", [](TKDE* a)->TF1 * { return a->GetApproximateBias(); });
    t.method("GetApproximateBias", [](TKDE* a, UInt_t arg0)->TF1 * { return a->GetApproximateBias(arg0); });
    t.method("GetApproximateBias", [](TKDE* a, UInt_t arg0, Double_t arg1)->TF1 * { return a->GetApproximateBias(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TGraphErrors * TKDE::GetGraphWithErrors(UInt_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGraphErrors * TKDE::GetGraphWithErrors(UInt_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:146:19
    t.method("GetGraphWithErrors", static_cast<TGraphErrors * (TKDE::*)(UInt_t, Double_t, Double_t) >(&TKDE::GetGraphWithErrors));
    t.method("GetGraphWithErrors", [](TKDE& a)->TGraphErrors * { return a.GetGraphWithErrors(); });
    t.method("GetGraphWithErrors", [](TKDE& a, UInt_t arg0)->TGraphErrors * { return a.GetGraphWithErrors(arg0); });
    t.method("GetGraphWithErrors", [](TKDE& a, UInt_t arg0, Double_t arg1)->TGraphErrors * { return a.GetGraphWithErrors(arg0, arg1); });
    t.method("GetGraphWithErrors", [](TKDE* a)->TGraphErrors * { return a->GetGraphWithErrors(); });
    t.method("GetGraphWithErrors", [](TKDE* a, UInt_t arg0)->TGraphErrors * { return a->GetGraphWithErrors(arg0); });
    t.method("GetGraphWithErrors", [](TKDE* a, UInt_t arg0, Double_t arg1)->TGraphErrors * { return a->GetGraphWithErrors(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetDrawnFunction() (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetDrawnFunction()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:152:10
    t.method("GetDrawnFunction", static_cast<TF1 * (TKDE::*)() >(&TKDE::GetDrawnFunction));

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetDrawnUpperFunction() (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetDrawnUpperFunction()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:153:10
    t.method("GetDrawnUpperFunction", static_cast<TF1 * (TKDE::*)() >(&TKDE::GetDrawnUpperFunction));

    DEBUG_MSG("Adding wrapper for TF1 * TKDE::GetDrawnLowerFunction() (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TKDE::GetDrawnLowerFunction()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:154:10
    t.method("GetDrawnLowerFunction", static_cast<TF1 * (TKDE::*)() >(&TKDE::GetDrawnLowerFunction));

    DEBUG_MSG("Adding wrapper for TGraphErrors * TKDE::GetDrawnGraph() (" __HERE__ ")");
    // signature to use in the veto list: TGraphErrors * TKDE::GetDrawnGraph()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:155:19
    t.method("GetDrawnGraph", static_cast<TGraphErrors * (TKDE::*)() >(&TKDE::GetDrawnGraph));

    DEBUG_MSG("Adding wrapper for const Double_t * TKDE::GetAdaptiveWeights() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TKDE::GetAdaptiveWeights()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:158:21
    t.method("GetAdaptiveWeights", static_cast<const Double_t * (TKDE::*)()  const>(&TKDE::GetAdaptiveWeights));

    DEBUG_MSG("Adding wrapper for Version_t TKDE::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TKDE::Class_Version()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!Class_Version", static_cast<Version_t (*)() >(&TKDE::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TKDE::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TKDE::IsA()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    t.method("IsA", static_cast<TClass * (TKDE::*)()  const>(&TKDE::IsA));

    DEBUG_MSG("Adding wrapper for void TKDE::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    t.method("StreamerNVirtual", static_cast<void (TKDE::*)(TBuffer &) >(&TKDE::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TKDE::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TKDE::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!DeclFileName", []() { return (std::string)TKDE::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TKDE::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TKDE::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!ImplFileLine", static_cast<int (*)() >(&TKDE::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TKDE::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TKDE::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!ImplFileName", []() { return (std::string)TKDE::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TKDE::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TKDE::Class_Name()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!Class_Name", []() { return (std::string)TKDE::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TKDE::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TKDE::Dictionary()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!Dictionary", static_cast<TClass * (*)() >(&TKDE::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TKDE::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TKDE::Class()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!Class", static_cast<TClass * (*)() >(&TKDE::Class));

    DEBUG_MSG("Adding wrapper for void TKDE::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    t.method("Streamer", static_cast<void (TKDE::*)(TBuffer &) >(&TKDE::Streamer));

    DEBUG_MSG("Adding wrapper for int TKDE::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TKDE::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/883dde52995ca9517b0284d7d7f324e945daf399/include/TKDE.h:301:4
    module_.method("TKDE!DeclFileLine", static_cast<int (*)() >(&TKDE::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TKDE>> type_;
};
std::shared_ptr<Wrapper> newJlTKDE(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTKDE(module));
}
