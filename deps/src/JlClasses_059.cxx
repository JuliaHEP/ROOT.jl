// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoXtru> : std::false_type { };
  template<> struct DefaultConstructible<TGeoXtru> : std::false_type { };
template<> struct SuperType<TGeoXtru> { typedef TGeoBBox type; };
}

// Class generating the wrapper for type TGeoXtru
// signature to use in the veto file: TGeoXtru
struct JlTGeoXtru: public Wrapper {

  JlTGeoXtru(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoXtru (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:22:7
    jlcxx::TypeWrapper<TGeoXtru>  t = jlModule.add_type<TGeoXtru>("TGeoXtru",
      jlcxx::julia_base_type<TGeoBBox>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoXtru>>(new jlcxx::TypeWrapper<TGeoXtru>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoXtru::ThreadData_t & TGeoXtru::GetThreadData() (" __HERE__ ")");
    // signature to use in the veto list: TGeoXtru::ThreadData_t & TGeoXtru::GetThreadData()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:34:18
    t.method("GetThreadData", static_cast<TGeoXtru::ThreadData_t & (TGeoXtru::*)()  const>(&TGeoXtru::GetThreadData));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::ClearThreadData() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::ClearThreadData()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:35:9
    t.method("ClearThreadData", static_cast<void (TGeoXtru::*)()  const>(&TGeoXtru::ClearThreadData));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::CreateThreadData(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::CreateThreadData(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:36:9
    t.method("CreateThreadData", static_cast<void (TGeoXtru::*)(Int_t) >(&TGeoXtru::CreateThreadData));


    DEBUG_MSG("Adding wrapper for void TGeoXtru::TGeoXtru(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:70:4
    t.constructor<Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoXtru::TGeoXtru(Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:71:4
    t.constructor<Double_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::Capacity()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:75:13
    t.method("Capacity", static_cast<Double_t (TGeoXtru::*)()  const>(&TGeoXtru::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::ComputeBBox()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:76:9
    t.method("ComputeBBox", static_cast<void (TGeoXtru::*)() >(&TGeoXtru::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:77:9
    t.method("ComputeNormal", static_cast<void (TGeoXtru::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoXtru::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:78:9
    t.method("ComputeNormal_v", static_cast<void (TGeoXtru::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoXtru::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoXtru::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoXtru::Contains(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:79:11
    t.method("Contains", static_cast<Bool_t (TGeoXtru::*)(const Double_t *)  const>(&TGeoXtru::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:80:9
    t.method("Contains_v", static_cast<void (TGeoXtru::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoXtru::Contains_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoXtru::DefinePolygon(Int_t, const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoXtru::DefinePolygon(Int_t, const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:81:11
    t.method("DefinePolygon", static_cast<Bool_t (TGeoXtru::*)(Int_t, const Double_t *, const Double_t *) >(&TGeoXtru::DefinePolygon));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::DefineSection(Int_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::DefineSection(Int_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:82:17
    t.method("DefineSection", static_cast<void (TGeoXtru::*)(Int_t, Double_t, Double_t, Double_t, Double_t) >(&TGeoXtru::DefineSection));
    t.method("DefineSection", [](TGeoXtru& a, Int_t arg0, Double_t arg1)->void { a.DefineSection(arg0, arg1); });
    t.method("DefineSection", [](TGeoXtru& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.DefineSection(arg0, arg1, arg2); });
    t.method("DefineSection", [](TGeoXtru& a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.DefineSection(arg0, arg1, arg2, arg3); });
    t.method("DefineSection", [](TGeoXtru* a, Int_t arg0, Double_t arg1)->void { a->DefineSection(arg0, arg1); });
    t.method("DefineSection", [](TGeoXtru* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->DefineSection(arg0, arg1, arg2); });
    t.method("DefineSection", [](TGeoXtru* a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->DefineSection(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:83:13
    t.method("DistFromInside", static_cast<Double_t (TGeoXtru::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoXtru::DistFromInside));
    t.method("DistFromInside", [](TGeoXtru const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoXtru const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoXtru const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoXtru const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoXtru const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoXtru const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoXtru::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:85:9
    t.method("DistFromInside_v", static_cast<void (TGeoXtru::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoXtru::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:87:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoXtru::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoXtru::DistFromOutside));
    t.method("DistFromOutside", [](TGeoXtru const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoXtru const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoXtru const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoXtru const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoXtru const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoXtru const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoXtru::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:89:9
    t.method("DistFromOutside_v", static_cast<void (TGeoXtru::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoXtru::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoXtru::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoXtru::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:91:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoXtru::*)(Int_t, Int_t) >(&TGeoXtru::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::DrawPolygon(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::DrawPolygon(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:92:9
    t.method("DrawPolygon", static_cast<void (TGeoXtru::*)(Option_t *) >(&TGeoXtru::DrawPolygon));
    t.method("DrawPolygon", [](TGeoXtru& a)->void { a.DrawPolygon(); });
    t.method("DrawPolygon", [](TGeoXtru* a)->void { a->DrawPolygon(); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoXtru::GetNz() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoXtru::GetNz()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:95:10
    t.method("GetNz", static_cast<Int_t (TGeoXtru::*)()  const>(&TGeoXtru::GetNz));

    DEBUG_MSG("Adding wrapper for Int_t TGeoXtru::GetNvert() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoXtru::GetNvert()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:96:10
    t.method("GetNvert", static_cast<Int_t (TGeoXtru::*)()  const>(&TGeoXtru::GetNvert));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::GetX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::GetX(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:97:13
    t.method("GetX", static_cast<Double_t (TGeoXtru::*)(Int_t)  const>(&TGeoXtru::GetX));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::GetY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::GetY(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:98:13
    t.method("GetY", static_cast<Double_t (TGeoXtru::*)(Int_t)  const>(&TGeoXtru::GetY));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::GetXOffset(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::GetXOffset(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:99:13
    t.method("GetXOffset", static_cast<Double_t (TGeoXtru::*)(Int_t)  const>(&TGeoXtru::GetXOffset));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::GetYOffset(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::GetYOffset(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:100:13
    t.method("GetYOffset", static_cast<Double_t (TGeoXtru::*)(Int_t)  const>(&TGeoXtru::GetYOffset));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::GetScale(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::GetScale(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:101:13
    t.method("GetScale", static_cast<Double_t (TGeoXtru::*)(Int_t)  const>(&TGeoXtru::GetScale));

    DEBUG_MSG("Adding wrapper for Double_t * TGeoXtru::GetZ() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGeoXtru::GetZ()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:102:14
    t.method("GetZ", static_cast<Double_t * (TGeoXtru::*)()  const>(&TGeoXtru::GetZ));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::GetZ(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::GetZ(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:103:13
    t.method("GetZ", static_cast<Double_t (TGeoXtru::*)(Int_t)  const>(&TGeoXtru::GetZ));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoXtru::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoXtru::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:104:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoXtru::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoXtru::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:105:9
    t.method("GetMeshNumbers", static_cast<void (TGeoXtru::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoXtru::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoXtru::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoXtru::GetNmeshVertices()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:106:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoXtru::*)()  const>(&TGeoXtru::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::InspectShape()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:107:9
    t.method("InspectShape", static_cast<void (TGeoXtru::*)()  const>(&TGeoXtru::InspectShape));

    DEBUG_MSG("Adding wrapper for Double_t & TGeoXtru::Z(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TGeoXtru::Z(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:109:14
    t.method("Z", static_cast<Double_t & (TGeoXtru::*)(Int_t) >(&TGeoXtru::Z));

    DEBUG_MSG("Adding wrapper for Double_t TGeoXtru::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoXtru::Safety(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:110:13
    t.method("Safety", static_cast<Double_t (TGeoXtru::*)(const Double_t *, Bool_t)  const>(&TGeoXtru::Safety));
    t.method("Safety", [](TGeoXtru const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoXtru const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoXtru::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:111:9
    t.method("Safety_v", static_cast<void (TGeoXtru::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoXtru::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::SetCurrentZ(Double_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::SetCurrentZ(Double_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:113:9
    t.method("SetCurrentZ", static_cast<void (TGeoXtru::*)(Double_t, Int_t) >(&TGeoXtru::SetCurrentZ));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::SetCurrentVertices(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::SetCurrentVertices(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:114:9
    t.method("SetCurrentVertices", static_cast<void (TGeoXtru::*)(Double_t, Double_t, Double_t) >(&TGeoXtru::SetCurrentVertices));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::SetDimensions(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:115:9
    t.method("SetDimensions", static_cast<void (TGeoXtru::*)(Double_t *) >(&TGeoXtru::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::SetPoints(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:116:9
    t.method("SetPoints", static_cast<void (TGeoXtru::*)(Double_t *)  const>(&TGeoXtru::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::SetPoints(Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:117:9
    t.method("SetPoints", static_cast<void (TGeoXtru::*)(Float_t *)  const>(&TGeoXtru::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::Sizeof3D() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::Sizeof3D()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:119:9
    t.method("Sizeof3D", static_cast<void (TGeoXtru::*)()  const>(&TGeoXtru::Sizeof3D));

    DEBUG_MSG("Adding wrapper for Version_t TGeoXtru::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoXtru::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!Class_Version", static_cast<Version_t (*)() >(&TGeoXtru::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoXtru::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoXtru::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    t.method("IsA", static_cast<TClass * (TGeoXtru::*)()  const>(&TGeoXtru::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    t.method("StreamerNVirtual", static_cast<void (TGeoXtru::*)(TBuffer &) >(&TGeoXtru::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoXtru::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoXtru::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!DeclFileName", []() { return (std::string)TGeoXtru::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoXtru::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoXtru::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!ImplFileLine", static_cast<int (*)() >(&TGeoXtru::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoXtru::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoXtru::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!ImplFileName", []() { return (std::string)TGeoXtru::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoXtru::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoXtru::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!Class_Name", []() { return (std::string)TGeoXtru::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoXtru::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoXtru::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!Dictionary", static_cast<TClass * (*)() >(&TGeoXtru::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoXtru::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoXtru::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!Class", static_cast<TClass * (*)() >(&TGeoXtru::Class));

    DEBUG_MSG("Adding wrapper for void TGeoXtru::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoXtru::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    t.method("Streamer", static_cast<void (TGeoXtru::*)(TBuffer &) >(&TGeoXtru::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoXtru::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoXtru::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:121:4
    module_.method("TGeoXtru!DeclFileLine", static_cast<int (*)() >(&TGeoXtru::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoXtru>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoXtru(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoXtru(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoXtru::ThreadData_t> : std::false_type { };
  template<> struct DefaultConstructible<TGeoXtru::ThreadData_t> : std::false_type { };
}

// Class generating the wrapper for type TGeoXtru::ThreadData_t
// signature to use in the veto file: TGeoXtru::ThreadData_t
struct JlTGeoXtru_ThreadData_t: public Wrapper {

  JlTGeoXtru_ThreadData_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoXtru::ThreadData_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:24:11
    jlcxx::TypeWrapper<TGeoXtru::ThreadData_t>  t = jlModule.add_type<TGeoXtru::ThreadData_t>("TGeoXtru!ThreadData_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoXtru::ThreadData_t>>(new jlcxx::TypeWrapper<TGeoXtru::ThreadData_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding fSeg methods  to provide read access to the field fSeg (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:25:13
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fSeg
    t.method("fSeg", [](const TGeoXtru::ThreadData_t& a) -> Int_t { return a.fSeg; });
    t.method("fSeg", [](TGeoXtru::ThreadData_t& a) -> Int_t { return a.fSeg; });
    t.method("fSeg", [](const TGeoXtru::ThreadData_t* a) -> Int_t { return a->fSeg; });
    t.method("fSeg", [](TGeoXtru::ThreadData_t* a) -> Int_t { return a->fSeg; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:25:13
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fSeg
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSeg! methods to provide write access to the field fSeg (" __HERE__ ")");
    t.method("fSeg!", [](TGeoXtru::ThreadData_t& a, Int_t val) -> Int_t { return a.fSeg = val; });

    DEBUG_MSG("Adding fSeg! methods to provide write access to the field fSeg (" __HERE__ ")");
    t.method("fSeg!", [](TGeoXtru::ThreadData_t* a, Int_t val) -> Int_t { return a->fSeg = val; });

    DEBUG_MSG("Adding fIz methods  to provide read access to the field fIz (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:26:13
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fIz
    t.method("fIz", [](const TGeoXtru::ThreadData_t& a) -> Int_t { return a.fIz; });
    t.method("fIz", [](TGeoXtru::ThreadData_t& a) -> Int_t { return a.fIz; });
    t.method("fIz", [](const TGeoXtru::ThreadData_t* a) -> Int_t { return a->fIz; });
    t.method("fIz", [](TGeoXtru::ThreadData_t* a) -> Int_t { return a->fIz; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:26:13
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fIz
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fIz! methods to provide write access to the field fIz (" __HERE__ ")");
    t.method("fIz!", [](TGeoXtru::ThreadData_t& a, Int_t val) -> Int_t { return a.fIz = val; });

    DEBUG_MSG("Adding fIz! methods to provide write access to the field fIz (" __HERE__ ")");
    t.method("fIz!", [](TGeoXtru::ThreadData_t* a, Int_t val) -> Int_t { return a->fIz = val; });

    DEBUG_MSG("Adding fXc methods  to provide read access to the field fXc (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:27:17
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fXc
    t.method("fXc", [](const TGeoXtru::ThreadData_t& a) -> Double_t * { return a.fXc; });
    t.method("fXc", [](TGeoXtru::ThreadData_t& a) -> Double_t * { return a.fXc; });
    t.method("fXc", [](const TGeoXtru::ThreadData_t* a) -> Double_t * { return a->fXc; });
    t.method("fXc", [](TGeoXtru::ThreadData_t* a) -> Double_t * { return a->fXc; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:27:17
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fXc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fXc! methods to provide write access to the field fXc (" __HERE__ ")");
    t.method("fXc!", [](TGeoXtru::ThreadData_t& a, Double_t * val) -> Double_t * { return a.fXc = val; });

    DEBUG_MSG("Adding fXc! methods to provide write access to the field fXc (" __HERE__ ")");
    t.method("fXc!", [](TGeoXtru::ThreadData_t* a, Double_t * val) -> Double_t * { return a->fXc = val; });

    DEBUG_MSG("Adding fYc methods  to provide read access to the field fYc (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:28:17
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fYc
    t.method("fYc", [](const TGeoXtru::ThreadData_t& a) -> Double_t * { return a.fYc; });
    t.method("fYc", [](TGeoXtru::ThreadData_t& a) -> Double_t * { return a.fYc; });
    t.method("fYc", [](const TGeoXtru::ThreadData_t* a) -> Double_t * { return a->fYc; });
    t.method("fYc", [](TGeoXtru::ThreadData_t* a) -> Double_t * { return a->fYc; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:28:17
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fYc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fYc! methods to provide write access to the field fYc (" __HERE__ ")");
    t.method("fYc!", [](TGeoXtru::ThreadData_t& a, Double_t * val) -> Double_t * { return a.fYc = val; });

    DEBUG_MSG("Adding fYc! methods to provide write access to the field fYc (" __HERE__ ")");
    t.method("fYc!", [](TGeoXtru::ThreadData_t* a, Double_t * val) -> Double_t * { return a->fYc = val; });

    DEBUG_MSG("Adding fPoly methods  to provide read access to the field fPoly (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:29:20
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fPoly
    t.method("fPoly", [](const TGeoXtru::ThreadData_t& a) -> TGeoPolygon * { return a.fPoly; });
    t.method("fPoly", [](TGeoXtru::ThreadData_t& a) -> TGeoPolygon * { return a.fPoly; });
    t.method("fPoly", [](const TGeoXtru::ThreadData_t* a) -> TGeoPolygon * { return a->fPoly; });
    t.method("fPoly", [](TGeoXtru::ThreadData_t* a) -> TGeoPolygon * { return a->fPoly; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoXtru.h:29:20
    // signature to use in the veto list: TGeoXtru::ThreadData_t::fPoly
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fPoly! methods to provide write access to the field fPoly (" __HERE__ ")");
    t.method("fPoly!", [](TGeoXtru::ThreadData_t& a, TGeoPolygon * val) -> TGeoPolygon * { return a.fPoly = val; });

    DEBUG_MSG("Adding fPoly! methods to provide write access to the field fPoly (" __HERE__ ")");
    t.method("fPoly!", [](TGeoXtru::ThreadData_t* a, TGeoPolygon * val) -> TGeoPolygon * { return a->fPoly = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoXtru::ThreadData_t>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoXtru_ThreadData_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoXtru_ThreadData_t(module));
}
