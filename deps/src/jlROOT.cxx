// this file was auto-generated by wrapit v1.3.3
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlROOT.h"

#include <regex>

#include "dbg_msg.h"
#include "Wrapper.h"

class JlTObject;
class JlTNamed;
class JlTBrowser;
class JlTCollection;
class JlTSeqCollection;
class JlTObjArray;
class JlTTimer;
class JlTClass;
class JlTBuffer;
class JlTVectorT;
class JlTString;
class JlTDirectory;
class JlTDirectory_TContext;
class JlTKey;
class JlTDirectoryFile;
class JlTFile;
class JlTList;
class JlTUUID;
class JlTVirtualMutex;
class JlTROOT;
class JlTApplication;
class JlTInterpreter;
class Jlstd_type_info;
class JlTDataType;
class JlTVirtualPad;
class JlTPad;
class JlTCanvas;
class JlTBrowserImp;
class JlROOT_Experimental_Internal_TBulkBranchRead;
class JlTBranch;
class JlTTree;
class JlTLeaf;
class JlTClonesArray;
class JlROOT_TIOFeatures;
class JlTTree_TClusterIterator;
class JlTStreamerInfo;
class JlTEntryList;
class JlTH1;
class JlTIterator;
class JlTVirtualTreePlayer;
class JlTTreeFriendLeafIter;
class JlTBranchPtr;
class JlFileStat_t;
class JlUserGroup_t;
class JlSysInfo_t;
class JlCpuInfo_t;
class JlMemInfo_t;
class JlProcInfo_t;
class JlRedirectHandle_t;
class JlTProcessEventTimer;
class JlTSystem;
class JlTFileHandler;
class JlTSignalHandler;
class JlTStdExceptionHandler;
class JlTTime;
class JlFILE;
class JlTInetAddress;
class JlTObjLink;
class JlTAxis;
class JlTArrayD;
class JlFoption_t;
class JlTF1;
class JlTRandom;
class JlTFitResultPtr;
class JlTH1C;
class JlTH1S;
class JlTH1I;
class JlTH1F;
class JlTH1D;
class JlTApplicationImp;
class JlTDatime;
class JlTArrayC;
class JlTUrl;
class JlTFileOpenHandle;
class JlTGraph;
class JlTF1Parameters;
class JlTF1_TF1FunctorPointer;
class JlTFormula;
class JlTMethodCall;
class JlTTreeReader;
class JlTTreeReaderValue;
class JlTTreeReader_Iterator_t;
class JlTTreeReaderArray;
class JlGlobal;

std::shared_ptr<Wrapper> newJlTObject(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTNamed(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTBrowser(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTCollection(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTSeqCollection(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTObjArray(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTimer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTClass(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTBuffer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTVectorT(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTString(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTDirectory(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTDirectory_TContext(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTKey(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTDirectoryFile(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTFile(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTList(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTUUID(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTVirtualMutex(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTROOT(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTApplication(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTInterpreter(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlstd_type_info(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTDataType(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTVirtualPad(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTPad(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTCanvas(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTBrowserImp(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_Experimental_Internal_TBulkBranchRead(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTBranch(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTree(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTLeaf(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTClonesArray(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlROOT_TIOFeatures(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTree_TClusterIterator(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTStreamerInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTEntryList(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTH1(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTIterator(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTVirtualTreePlayer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTreeFriendLeafIter(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTBranchPtr(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlFileStat_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlUserGroup_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlSysInfo_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlCpuInfo_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlMemInfo_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlProcInfo_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlRedirectHandle_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTProcessEventTimer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTSystem(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTFileHandler(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTSignalHandler(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTStdExceptionHandler(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTime(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlFILE(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTInetAddress(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTObjLink(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTAxis(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTArrayD(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlFoption_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTF1(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTRandom(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTFitResultPtr(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTH1C(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTH1S(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTH1I(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTH1F(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTH1D(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTApplicationImp(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTDatime(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTArrayC(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTUrl(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTFileOpenHandle(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTGraph(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTF1Parameters(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTF1_TF1FunctorPointer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTFormula(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTMethodCall(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTreeReader(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTreeReaderValue(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTreeReader_Iterator_t(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlTTreeReaderArray(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module&);
//method from libcxxwrap returning its version
extern "C" JLCXX_API const char* cxxwrap_version_string();

//Check the code is compiled with a compatible version of libcxxwrap:
static_assert(1000*1000*JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH >= 11000
  && 1000 * 1000 * JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH < 12000,
  "The code was generated with WrapIt! for "
  "a different CxxWrap version (controlled with the cxxwrap_version parameter).");

//Check the version of loaded libcxxwrap library:
void throw_if_version_incompatibility(){
  std::string version_str = cxxwrap_version_string();
  static std::regex r("([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})");
  std::smatch matches;
  if(!std::regex_match(version_str, matches, r)){
    std::cerr << "Warning: Failed to check libcxxwrap version.";
  } else{    long version_int =   1000*1000*strtol(matches[1].str().c_str(), 0, 10)
                       +      1000*strtol(matches[2].str().c_str(), 0, 10)
                       +           strtol(matches[3].str().c_str(), 0, 10);
    if(version_int < 11000 || version_int >= 12000){
      throw std::runtime_error(std::string("Found libcxxwrap_jll version ")
       + version_str + ", while module ROOT requires a version in "
      "[0.11.0, 0.12.0)."
      " Note: if the module was installed with the package manager, the Project.toml file "
      "of the package is probably missing a compat specification that would have prevented "
      "the inconsistency.");
    }
  }
}


JLCXX_MODULE define_julia_module(jlcxx::Module& jlModule){
  
throw_if_version_incompatibility();

  std::vector<std::shared_ptr<Wrapper>> wrappers = {
    std::shared_ptr<Wrapper>(newJlTObject(jlModule)),
    std::shared_ptr<Wrapper>(newJlTNamed(jlModule)),
    std::shared_ptr<Wrapper>(newJlTBrowser(jlModule)),
    std::shared_ptr<Wrapper>(newJlTCollection(jlModule)),
    std::shared_ptr<Wrapper>(newJlTSeqCollection(jlModule)),
    std::shared_ptr<Wrapper>(newJlTObjArray(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTimer(jlModule)),
    std::shared_ptr<Wrapper>(newJlTClass(jlModule)),
    std::shared_ptr<Wrapper>(newJlTBuffer(jlModule)),
    std::shared_ptr<Wrapper>(newJlTVectorT(jlModule)),
    std::shared_ptr<Wrapper>(newJlTString(jlModule)),
    std::shared_ptr<Wrapper>(newJlTDirectory(jlModule)),
    std::shared_ptr<Wrapper>(newJlTDirectory_TContext(jlModule)),
    std::shared_ptr<Wrapper>(newJlTKey(jlModule)),
    std::shared_ptr<Wrapper>(newJlTDirectoryFile(jlModule)),
    std::shared_ptr<Wrapper>(newJlTFile(jlModule)),
    std::shared_ptr<Wrapper>(newJlTList(jlModule)),
    std::shared_ptr<Wrapper>(newJlTUUID(jlModule)),
    std::shared_ptr<Wrapper>(newJlTVirtualMutex(jlModule)),
    std::shared_ptr<Wrapper>(newJlTROOT(jlModule)),
    std::shared_ptr<Wrapper>(newJlTApplication(jlModule)),
    std::shared_ptr<Wrapper>(newJlTInterpreter(jlModule)),
    std::shared_ptr<Wrapper>(newJlstd_type_info(jlModule)),
    std::shared_ptr<Wrapper>(newJlTDataType(jlModule)),
    std::shared_ptr<Wrapper>(newJlTVirtualPad(jlModule)),
    std::shared_ptr<Wrapper>(newJlTPad(jlModule)),
    std::shared_ptr<Wrapper>(newJlTCanvas(jlModule)),
    std::shared_ptr<Wrapper>(newJlTBrowserImp(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_Experimental_Internal_TBulkBranchRead(jlModule)),
    std::shared_ptr<Wrapper>(newJlTBranch(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTree(jlModule)),
    std::shared_ptr<Wrapper>(newJlTLeaf(jlModule)),
    std::shared_ptr<Wrapper>(newJlTClonesArray(jlModule)),
    std::shared_ptr<Wrapper>(newJlROOT_TIOFeatures(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTree_TClusterIterator(jlModule)),
    std::shared_ptr<Wrapper>(newJlTStreamerInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlTEntryList(jlModule)),
    std::shared_ptr<Wrapper>(newJlTH1(jlModule)),
    std::shared_ptr<Wrapper>(newJlTIterator(jlModule)),
    std::shared_ptr<Wrapper>(newJlTVirtualTreePlayer(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTreeFriendLeafIter(jlModule)),
    std::shared_ptr<Wrapper>(newJlTBranchPtr(jlModule)),
    std::shared_ptr<Wrapper>(newJlFileStat_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlUserGroup_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlSysInfo_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlCpuInfo_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlMemInfo_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlProcInfo_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlRedirectHandle_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlTProcessEventTimer(jlModule)),
    std::shared_ptr<Wrapper>(newJlTSystem(jlModule)),
    std::shared_ptr<Wrapper>(newJlTFileHandler(jlModule)),
    std::shared_ptr<Wrapper>(newJlTSignalHandler(jlModule)),
    std::shared_ptr<Wrapper>(newJlTStdExceptionHandler(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTime(jlModule)),
    std::shared_ptr<Wrapper>(newJlFILE(jlModule)),
    std::shared_ptr<Wrapper>(newJlTInetAddress(jlModule)),
    std::shared_ptr<Wrapper>(newJlTObjLink(jlModule)),
    std::shared_ptr<Wrapper>(newJlTAxis(jlModule)),
    std::shared_ptr<Wrapper>(newJlTArrayD(jlModule)),
    std::shared_ptr<Wrapper>(newJlFoption_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlTF1(jlModule)),
    std::shared_ptr<Wrapper>(newJlTRandom(jlModule)),
    std::shared_ptr<Wrapper>(newJlTFitResultPtr(jlModule)),
    std::shared_ptr<Wrapper>(newJlTH1C(jlModule)),
    std::shared_ptr<Wrapper>(newJlTH1S(jlModule)),
    std::shared_ptr<Wrapper>(newJlTH1I(jlModule)),
    std::shared_ptr<Wrapper>(newJlTH1F(jlModule)),
    std::shared_ptr<Wrapper>(newJlTH1D(jlModule)),
    std::shared_ptr<Wrapper>(newJlTApplicationImp(jlModule)),
    std::shared_ptr<Wrapper>(newJlTDatime(jlModule)),
    std::shared_ptr<Wrapper>(newJlTArrayC(jlModule)),
    std::shared_ptr<Wrapper>(newJlTUrl(jlModule)),
    std::shared_ptr<Wrapper>(newJlTFileOpenHandle(jlModule)),
    std::shared_ptr<Wrapper>(newJlTGraph(jlModule)),
    std::shared_ptr<Wrapper>(newJlTF1Parameters(jlModule)),
    std::shared_ptr<Wrapper>(newJlTF1_TF1FunctorPointer(jlModule)),
    std::shared_ptr<Wrapper>(newJlTFormula(jlModule)),
    std::shared_ptr<Wrapper>(newJlTMethodCall(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTreeReader(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTreeReaderValue(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTreeReader_Iterator_t(jlModule)),
    std::shared_ptr<Wrapper>(newJlTTreeReaderArray(jlModule)),
    std::shared_ptr<Wrapper>(newJlGlobal(jlModule))
  };

  DEBUG_MSG("Adding wrapper for enum TObject::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TObject.h:61:9
  jlModule.add_bits<TObject::EStatusBits>("TObject!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TObject!kCanDelete", TObject::kCanDelete);
  jlModule.set_const("TObject!kMustCleanup", TObject::kMustCleanup);
  jlModule.set_const("TObject!kIsReferenced", TObject::kIsReferenced);
  jlModule.set_const("TObject!kHasUUID", TObject::kHasUUID);
  jlModule.set_const("TObject!kCannotPick", TObject::kCannotPick);
  jlModule.set_const("TObject!kNoContextMenu", TObject::kNoContextMenu);
  jlModule.set_const("TObject!kInvalidObject", TObject::kInvalidObject);

  DEBUG_MSG("Adding wrapper for enum TObject::EDeprecatedStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TObject.h:75:9
  jlModule.add_bits<TObject::EDeprecatedStatusBits>("TObject!EDeprecatedStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TObject!kObjInCanvas", TObject::kObjInCanvas);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TObject.h:80:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TObject.h:80:4
  jlModule.set_const("TObject!kIsOnHeap", static_cast<int>(TObject::kIsOnHeap));
  jlModule.set_const("TObject!kNotDeleted", static_cast<int>(TObject::kNotDeleted));
  jlModule.set_const("TObject!kZombie", static_cast<int>(TObject::kZombie));
  jlModule.set_const("TObject!kInconsistent", static_cast<int>(TObject::kInconsistent));
  jlModule.set_const("TObject!kBitMask", static_cast<int>(TObject::kBitMask));

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TObject.h:90:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TObject.h:90:4
  jlModule.set_const("TObject!kSingleKey", static_cast<int>(TObject::kSingleKey));
  jlModule.set_const("TObject!kOverwrite", static_cast<int>(TObject::kOverwrite));
  jlModule.set_const("TObject!kWriteDelete", static_cast<int>(TObject::kWriteDelete));

  DEBUG_MSG("Adding wrapper for enum EObjBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TObject.h:368:6
  jlModule.add_bits<EObjBits>("EObjBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kCanDelete", kCanDelete);
  jlModule.set_const("kMustCleanup", kMustCleanup);
  jlModule.set_const("kObjInCanvas", kObjInCanvas);
  jlModule.set_const("kIsReferenced", kIsReferenced);
  jlModule.set_const("kHasUUID", kHasUUID);
  jlModule.set_const("kCannotPick", kCannotPick);
  jlModule.set_const("kNoContextMenu", kNoContextMenu);
  jlModule.set_const("kInvalidObject", kInvalidObject);

  DEBUG_MSG("Adding wrapper for enum TBrowser::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TBrowser.h:54:9
  jlModule.add_bits<TBrowser::EStatusBits>("TBrowser!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TBrowser!kNoHidden", TBrowser::kNoHidden);

  DEBUG_MSG("Adding wrapper for enum EDataType (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TDataType.h:28:6
  jlModule.add_bits<EDataType>("EDataType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kChar_t", kChar_t);
  jlModule.set_const("kUChar_t", kUChar_t);
  jlModule.set_const("kShort_t", kShort_t);
  jlModule.set_const("kUShort_t", kUShort_t);
  jlModule.set_const("kInt_t", kInt_t);
  jlModule.set_const("kUInt_t", kUInt_t);
  jlModule.set_const("kLong_t", kLong_t);
  jlModule.set_const("kULong_t", kULong_t);
  jlModule.set_const("kFloat_t", kFloat_t);
  jlModule.set_const("kDouble_t", kDouble_t);
  jlModule.set_const("kDouble32_t", kDouble32_t);
  jlModule.set_const("kchar", kchar);
  jlModule.set_const("kBool_t", kBool_t);
  jlModule.set_const("kLong64_t", kLong64_t);
  jlModule.set_const("kULong64_t", kULong64_t);
  jlModule.set_const("kOther_t", kOther_t);
  jlModule.set_const("kNoType_t", kNoType_t);
  jlModule.set_const("kFloat16_t", kFloat16_t);
  jlModule.set_const("kCounter", kCounter);
  jlModule.set_const("kCharStar", kCharStar);
  jlModule.set_const("kBits", kBits);
  jlModule.set_const("kVoid_t", kVoid_t);
  jlModule.set_const("kDataTypeAliasUnsigned_t", kDataTypeAliasUnsigned_t);
  jlModule.set_const("kDataTypeAliasSignedChar_t", kDataTypeAliasSignedChar_t);
  jlModule.set_const("kNumDataTypes", kNumDataTypes);

  DEBUG_MSG("Adding wrapper for enum TTree::ESetBranchAddressStatus (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTree.h:232:9
  jlModule.add_bits<TTree::ESetBranchAddressStatus>("TTree!ESetBranchAddressStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TTree!kMissingBranch", TTree::kMissingBranch);
  jlModule.set_const("TTree!kInternalError", TTree::kInternalError);
  jlModule.set_const("TTree!kMissingCompiledCollectionProxy", TTree::kMissingCompiledCollectionProxy);
  jlModule.set_const("TTree!kMismatch", TTree::kMismatch);
  jlModule.set_const("TTree!kClassMismatch", TTree::kClassMismatch);
  jlModule.set_const("TTree!kMatch", TTree::kMatch);
  jlModule.set_const("TTree!kMatchConversion", TTree::kMatchConversion);
  jlModule.set_const("TTree!kMatchConversionCollection", TTree::kMatchConversionCollection);
  jlModule.set_const("TTree!kMakeClass", TTree::kMakeClass);
  jlModule.set_const("TTree!kVoidPtr", TTree::kVoidPtr);
  jlModule.set_const("TTree!kNoCheck", TTree::kNoCheck);
  jlModule.set_const("TTree!kNeedEnableDecomposedObj", TTree::kNeedEnableDecomposedObj);
  jlModule.set_const("TTree!kNeedDisableDecomposedObj", TTree::kNeedDisableDecomposedObj);
  jlModule.set_const("TTree!kDecomposedObjMask", TTree::kDecomposedObjMask);

  DEBUG_MSG("Adding wrapper for enum TTree::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTree.h:250:9
  jlModule.add_bits<TTree::EStatusBits>("TTree!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TTree!kForceRead", TTree::kForceRead);
  jlModule.set_const("TTree!kCircular", TTree::kCircular);
  jlModule.set_const("TTree!kOnlyFlushAtCluster", TTree::kOnlyFlushAtCluster);
  jlModule.set_const("TTree!kEntriesReshuffled", TTree::kEntriesReshuffled);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TTree.h:265:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTree.h:265:4
  jlModule.set_const("TTree!kSplitCollectionOfPointers", static_cast<int>(TTree::kSplitCollectionOfPointers));

  DEBUG_MSG("Adding wrapper for enum TLeaf::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:94:9
  jlModule.add_bits<TLeaf::EStatusBits>("TLeaf!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TLeaf!kIndirectAddress", TLeaf::kIndirectAddress);
  jlModule.set_const("TLeaf!kNewValue", TLeaf::kNewValue);

  DEBUG_MSG("Adding wrapper for enum TLeaf::DeserializeType (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:99:15
  jlModule.add_bits<TLeaf::DeserializeType>("TLeaf!DeserializeType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TLeaf!DeserializeType!kInvalid", TLeaf::DeserializeType::kInvalid);
  jlModule.set_const("TLeaf!DeserializeType!kExternal", TLeaf::DeserializeType::kExternal);
  jlModule.set_const("TLeaf!DeserializeType!kDestructive", TLeaf::DeserializeType::kDestructive);
  jlModule.set_const("TLeaf!DeserializeType!kInPlace", TLeaf::DeserializeType::kInPlace);
  jlModule.set_const("TLeaf!DeserializeType!kZeroCopy", TLeaf::DeserializeType::kZeroCopy);

  DEBUG_MSG("Adding wrapper for enum EAccessMode (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:43:6
  jlModule.add_bits<EAccessMode>("EAccessMode", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kFileExists", kFileExists);
  jlModule.set_const("kExecutePermission", kExecutePermission);
  jlModule.set_const("kWritePermission", kWritePermission);
  jlModule.set_const("kReadPermission", kReadPermission);

  DEBUG_MSG("Adding wrapper for enum ELogOption (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:50:6
  jlModule.add_bits<ELogOption>("ELogOption", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kLogPid", kLogPid);
  jlModule.set_const("kLogCons", kLogCons);

  DEBUG_MSG("Adding wrapper for enum ELogLevel (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:55:6
  jlModule.add_bits<ELogLevel>("ELogLevel", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kLogEmerg", kLogEmerg);
  jlModule.set_const("kLogAlert", kLogAlert);
  jlModule.set_const("kLogCrit", kLogCrit);
  jlModule.set_const("kLogErr", kLogErr);
  jlModule.set_const("kLogWarning", kLogWarning);
  jlModule.set_const("kLogNotice", kLogNotice);
  jlModule.set_const("kLogInfo", kLogInfo);
  jlModule.set_const("kLogDebug", kLogDebug);

  DEBUG_MSG("Adding wrapper for enum ELogFacility (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:66:6
  jlModule.add_bits<ELogFacility>("ELogFacility", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kLogLocal0", kLogLocal0);
  jlModule.set_const("kLogLocal1", kLogLocal1);
  jlModule.set_const("kLogLocal2", kLogLocal2);
  jlModule.set_const("kLogLocal3", kLogLocal3);
  jlModule.set_const("kLogLocal4", kLogLocal4);
  jlModule.set_const("kLogLocal5", kLogLocal5);
  jlModule.set_const("kLogLocal6", kLogLocal6);
  jlModule.set_const("kLogLocal7", kLogLocal7);

  DEBUG_MSG("Adding wrapper for enum EFpeMask (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:77:6
  jlModule.add_bits<EFpeMask>("EFpeMask", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kNoneMask", kNoneMask);
  jlModule.set_const("kInvalid", kInvalid);
  jlModule.set_const("kDivByZero", kDivByZero);
  jlModule.set_const("kOverflow", kOverflow);
  jlModule.set_const("kUnderflow", kUnderflow);
  jlModule.set_const("kInexact", kInexact);
  jlModule.set_const("kDefaultMask", kDefaultMask);
  jlModule.set_const("kAllMask", kAllMask);

  DEBUG_MSG("Adding wrapper for enum EFileModeMask (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:88:6
  jlModule.add_bits<EFileModeMask>("EFileModeMask", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kS_IFMT", kS_IFMT);
  jlModule.set_const("kS_IFSOCK", kS_IFSOCK);
  jlModule.set_const("kS_IFLNK", kS_IFLNK);
  jlModule.set_const("kS_IFOFF", kS_IFOFF);
  jlModule.set_const("kS_IFREG", kS_IFREG);
  jlModule.set_const("kS_IFBLK", kS_IFBLK);
  jlModule.set_const("kS_IFDIR", kS_IFDIR);
  jlModule.set_const("kS_IFCHR", kS_IFCHR);
  jlModule.set_const("kS_IFIFO", kS_IFIFO);
  jlModule.set_const("kS_ISUID", kS_ISUID);
  jlModule.set_const("kS_ISGID", kS_ISGID);
  jlModule.set_const("kS_ISVTX", kS_ISVTX);
  jlModule.set_const("kS_IRWXU", kS_IRWXU);
  jlModule.set_const("kS_IRUSR", kS_IRUSR);
  jlModule.set_const("kS_IWUSR", kS_IWUSR);
  jlModule.set_const("kS_IXUSR", kS_IXUSR);
  jlModule.set_const("kS_IRWXG", kS_IRWXG);
  jlModule.set_const("kS_IRGRP", kS_IRGRP);
  jlModule.set_const("kS_IWGRP", kS_IWGRP);
  jlModule.set_const("kS_IXGRP", kS_IXGRP);
  jlModule.set_const("kS_IRWXO", kS_IRWXO);
  jlModule.set_const("kS_IROTH", kS_IROTH);
  jlModule.set_const("kS_IWOTH", kS_IWOTH);
  jlModule.set_const("kS_IXOTH", kS_IXOTH);

  DEBUG_MSG("Adding wrapper for enum ESockOptions (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:215:6
  jlModule.add_bits<ESockOptions>("ESockOptions", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kSendBuffer", kSendBuffer);
  jlModule.set_const("kRecvBuffer", kRecvBuffer);
  jlModule.set_const("kOobInline", kOobInline);
  jlModule.set_const("kKeepAlive", kKeepAlive);
  jlModule.set_const("kReuseAddr", kReuseAddr);
  jlModule.set_const("kNoDelay", kNoDelay);
  jlModule.set_const("kNoBlock", kNoBlock);
  jlModule.set_const("kProcessGroup", kProcessGroup);
  jlModule.set_const("kAtMark", kAtMark);
  jlModule.set_const("kBytesToRead", kBytesToRead);

  DEBUG_MSG("Adding wrapper for enum ESendRecvOptions (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:228:6
  jlModule.add_bits<ESendRecvOptions>("ESendRecvOptions", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kDefault", kDefault);
  jlModule.set_const("kOob", kOob);
  jlModule.set_const("kPeek", kPeek);
  jlModule.set_const("kDontBlock", kDontBlock);

  DEBUG_MSG("Adding wrapper for enum TSystem::EAclicMode (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:269:9
  jlModule.add_bits<TSystem::EAclicMode>("TSystem!EAclicMode", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TSystem!kDefault", TSystem::kDefault);
  jlModule.set_const("TSystem!kDebug", TSystem::kDebug);
  jlModule.set_const("TSystem!kOpt", TSystem::kOpt);

  DEBUG_MSG("Adding wrapper for enum TSystem::EAclicProperties (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSystem.h:270:9
  jlModule.add_bits<TSystem::EAclicProperties>("TSystem!EAclicProperties", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TSystem!kFlatBuildDir", TSystem::kFlatBuildDir);

  DEBUG_MSG("Adding wrapper for enum ESignals (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TSysEvtHandler.h:107:6
  jlModule.add_bits<ESignals>("ESignals", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kSigBus", kSigBus);
  jlModule.set_const("kSigSegmentationViolation", kSigSegmentationViolation);
  jlModule.set_const("kSigSystem", kSigSystem);
  jlModule.set_const("kSigPipe", kSigPipe);
  jlModule.set_const("kSigIllegalInstruction", kSigIllegalInstruction);
  jlModule.set_const("kSigAbort", kSigAbort);
  jlModule.set_const("kSigQuit", kSigQuit);
  jlModule.set_const("kSigInterrupt", kSigInterrupt);
  jlModule.set_const("kSigWindowChanged", kSigWindowChanged);
  jlModule.set_const("kSigAlarm", kSigAlarm);
  jlModule.set_const("kSigChild", kSigChild);
  jlModule.set_const("kSigUrgent", kSigUrgent);
  jlModule.set_const("kSigFloatingException", kSigFloatingException);
  jlModule.set_const("kSigTermination", kSigTermination);
  jlModule.set_const("kSigUser1", kSigUser1);
  jlModule.set_const("kSigUser2", kSigUser2);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TCanvas.h:88:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TCanvas.h:88:4
  jlModule.set_const("TCanvas!kShowEventStatus", static_cast<int>(TCanvas::kShowEventStatus));
  jlModule.set_const("TCanvas!kAutoExec", static_cast<int>(TCanvas::kAutoExec));
  jlModule.set_const("TCanvas!kMenuBar", static_cast<int>(TCanvas::kMenuBar));
  jlModule.set_const("TCanvas!kShowToolBar", static_cast<int>(TCanvas::kShowToolBar));
  jlModule.set_const("TCanvas!kShowEditor", static_cast<int>(TCanvas::kShowEditor));
  jlModule.set_const("TCanvas!kMoveOpaque", static_cast<int>(TCanvas::kMoveOpaque));
  jlModule.set_const("TCanvas!kResizeOpaque", static_cast<int>(TCanvas::kResizeOpaque));
  jlModule.set_const("TCanvas!kIsGrayscale", static_cast<int>(TCanvas::kIsGrayscale));
  jlModule.set_const("TCanvas!kShowToolTips", static_cast<int>(TCanvas::kShowToolTips));

  DEBUG_MSG("Adding wrapper for enum EEventType (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/Buttons.h:15:6
  jlModule.add_bits<EEventType>("EEventType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kNoEvent", kNoEvent);
  jlModule.set_const("kButton1Down", kButton1Down);
  jlModule.set_const("kButton2Down", kButton2Down);
  jlModule.set_const("kButton3Down", kButton3Down);
  jlModule.set_const("kKeyDown", kKeyDown);
  jlModule.set_const("kWheelUp", kWheelUp);
  jlModule.set_const("kWheelDown", kWheelDown);
  jlModule.set_const("kButton1Shift", kButton1Shift);
  jlModule.set_const("kButton1ShiftMotion", kButton1ShiftMotion);
  jlModule.set_const("kButton1Up", kButton1Up);
  jlModule.set_const("kButton2Up", kButton2Up);
  jlModule.set_const("kButton3Up", kButton3Up);
  jlModule.set_const("kKeyUp", kKeyUp);
  jlModule.set_const("kButton1Motion", kButton1Motion);
  jlModule.set_const("kButton2Motion", kButton2Motion);
  jlModule.set_const("kButton3Motion", kButton3Motion);
  jlModule.set_const("kKeyPress", kKeyPress);
  jlModule.set_const("kArrowKeyPress", kArrowKeyPress);
  jlModule.set_const("kArrowKeyRelease", kArrowKeyRelease);
  jlModule.set_const("kButton1Locate", kButton1Locate);
  jlModule.set_const("kButton2Locate", kButton2Locate);
  jlModule.set_const("kButton3Locate", kButton3Locate);
  jlModule.set_const("kESC", kESC);
  jlModule.set_const("kMouseMotion", kMouseMotion);
  jlModule.set_const("kMouseEnter", kMouseEnter);
  jlModule.set_const("kMouseLeave", kMouseLeave);
  jlModule.set_const("kButton1Double", kButton1Double);
  jlModule.set_const("kButton2Double", kButton2Double);
  jlModule.set_const("kButton3Double", kButton3Double);

  DEBUG_MSG("Adding wrapper for enum ECursor (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/GuiTypes.h:372:6
  jlModule.add_bits<ECursor>("ECursor", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("kBottomLeft", kBottomLeft);
  jlModule.set_const("kBottomRight", kBottomRight);
  jlModule.set_const("kTopLeft", kTopLeft);
  jlModule.set_const("kTopRight", kTopRight);
  jlModule.set_const("kBottomSide", kBottomSide);
  jlModule.set_const("kLeftSide", kLeftSide);
  jlModule.set_const("kTopSide", kTopSide);
  jlModule.set_const("kRightSide", kRightSide);
  jlModule.set_const("kMove", kMove);
  jlModule.set_const("kCross", kCross);
  jlModule.set_const("kArrowHor", kArrowHor);
  jlModule.set_const("kArrowVer", kArrowVer);
  jlModule.set_const("kHand", kHand);
  jlModule.set_const("kRotate", kRotate);
  jlModule.set_const("kPointer", kPointer);
  jlModule.set_const("kArrowRight", kArrowRight);
  jlModule.set_const("kCaret", kCaret);
  jlModule.set_const("kWatch", kWatch);
  jlModule.set_const("kNoDrop", kNoDrop);

  DEBUG_MSG("Adding wrapper for enum TAxis::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TAxis.h:61:9
  jlModule.add_bits<TAxis::EStatusBits>("TAxis!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TAxis!kDecimals", TAxis::kDecimals);
  jlModule.set_const("TAxis!kTickPlus", TAxis::kTickPlus);
  jlModule.set_const("TAxis!kTickMinus", TAxis::kTickMinus);
  jlModule.set_const("TAxis!kAxisRange", TAxis::kAxisRange);
  jlModule.set_const("TAxis!kCenterTitle", TAxis::kCenterTitle);
  jlModule.set_const("TAxis!kCenterLabels", TAxis::kCenterLabels);
  jlModule.set_const("TAxis!kRotateTitle", TAxis::kRotateTitle);
  jlModule.set_const("TAxis!kPalette", TAxis::kPalette);
  jlModule.set_const("TAxis!kNoExponent", TAxis::kNoExponent);
  jlModule.set_const("TAxis!kLabelsHori", TAxis::kLabelsHori);
  jlModule.set_const("TAxis!kLabelsVert", TAxis::kLabelsVert);
  jlModule.set_const("TAxis!kLabelsDown", TAxis::kLabelsDown);
  jlModule.set_const("TAxis!kLabelsUp", TAxis::kLabelsUp);
  jlModule.set_const("TAxis!kIsInteger", TAxis::kIsInteger);
  jlModule.set_const("TAxis!kMoreLogLabels", TAxis::kMoreLogLabels);

  DEBUG_MSG("Adding wrapper for enum TH1::EBinErrorOpt (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TH1.h:63:10
  jlModule.add_bits<TH1::EBinErrorOpt>("TH1!EBinErrorOpt", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TH1!kNormal", TH1::kNormal);
  jlModule.set_const("TH1!kPoisson", TH1::kPoisson);
  jlModule.set_const("TH1!kPoisson2", TH1::kPoisson2);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TH1.h:70:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TH1.h:70:4
  jlModule.set_const("TH1!kNoAxis", static_cast<int>(TH1::kNoAxis));
  jlModule.set_const("TH1!kXaxis", static_cast<int>(TH1::kXaxis));
  jlModule.set_const("TH1!kYaxis", static_cast<int>(TH1::kYaxis));
  jlModule.set_const("TH1!kZaxis", static_cast<int>(TH1::kZaxis));
  jlModule.set_const("TH1!kAllAxes", static_cast<int>(TH1::kAllAxes));

  DEBUG_MSG("Adding wrapper for enum TH1::EStatOverflows (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TH1.h:79:10
  jlModule.add_bits<TH1::EStatOverflows>("TH1!EStatOverflows", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TH1!kIgnore", TH1::kIgnore);
  jlModule.set_const("TH1!kConsider", TH1::kConsider);
  jlModule.set_const("TH1!kNeutral", TH1::kNeutral);

  DEBUG_MSG("Adding wrapper for enum TH1::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TH1.h:162:9
  jlModule.add_bits<TH1::EStatusBits>("TH1!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TH1!kNoStats", TH1::kNoStats);
  jlModule.set_const("TH1!kUserContour", TH1::kUserContour);
  jlModule.set_const("TH1!kLogX", TH1::kLogX);
  jlModule.set_const("TH1!kIsZoomed", TH1::kIsZoomed);
  jlModule.set_const("TH1!kNoTitle", TH1::kNoTitle);
  jlModule.set_const("TH1!kIsAverage", TH1::kIsAverage);
  jlModule.set_const("TH1!kIsNotW", TH1::kIsNotW);
  jlModule.set_const("TH1!kAutoBinPTwo", TH1::kAutoBinPTwo);
  jlModule.set_const("TH1!kIsHighlight", TH1::kIsHighlight);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TH1.h:181:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TH1.h:181:4
  jlModule.set_const("TH1!kNstat", static_cast<int>(TH1::kNstat));

  DEBUG_MSG("Adding wrapper for enum TApplication::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TApplication.h:43:9
  jlModule.add_bits<TApplication::EStatusBits>("TApplication!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TApplication!kProcessRemotely", TApplication::kProcessRemotely);
  jlModule.set_const("TApplication!kDefaultApplication", TApplication::kDefaultApplication);

  DEBUG_MSG("Adding wrapper for enum TApplication::EFileBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TApplication.h:48:9
  jlModule.add_bits<TApplication::EFileBits>("TApplication!EFileBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TApplication!kExpression", TApplication::kExpression);

  DEBUG_MSG("Adding wrapper for enum TApplication::EExitOnException (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TApplication.h:51:9
  jlModule.add_bits<TApplication::EExitOnException>("TApplication!EExitOnException", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TApplication!kDontExit", TApplication::kDontExit);
  jlModule.set_const("TApplication!kExit", TApplication::kExit);
  jlModule.set_const("TApplication!kAbort", TApplication::kAbort);

  DEBUG_MSG("Adding wrapper for enum TDirectoryFile::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TDirectoryFile.h:58:9
  jlModule.add_bits<TDirectoryFile::EStatusBits>("TDirectoryFile!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TDirectoryFile!kCloseDirectory", TDirectoryFile::kCloseDirectory);

  DEBUG_MSG("Adding wrapper for enum TFile::EAsyncOpenStatus (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:64:9
  jlModule.add_bits<TFile::EAsyncOpenStatus>("TFile!EAsyncOpenStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TFile!kAOSNotAsync", TFile::kAOSNotAsync);
  jlModule.set_const("TFile!kAOSFailure", TFile::kAOSFailure);
  jlModule.set_const("TFile!kAOSInProgress", TFile::kAOSInProgress);
  jlModule.set_const("TFile!kAOSSuccess", TFile::kAOSSuccess);

  DEBUG_MSG("Adding wrapper for enum TFile::EOpenTimeOut (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:67:9
  jlModule.add_bits<TFile::EOpenTimeOut>("TFile!EOpenTimeOut", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TFile!kInstantTimeout", TFile::kInstantTimeout);
  jlModule.set_const("TFile!kEternalTimeout", TFile::kEternalTimeout);

  DEBUG_MSG("Adding wrapper for enum TFile::ECacheAction (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:70:9
  jlModule.add_bits<TFile::ECacheAction>("TFile!ECacheAction", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TFile!kDisconnect", TFile::kDisconnect);
  jlModule.set_const("TFile!kDoNotDisconnect", TFile::kDoNotDisconnect);

  DEBUG_MSG("Adding wrapper for enum TFile::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:183:9
  jlModule.add_bits<TFile::EStatusBits>("TFile!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TFile!kRecovered", TFile::kRecovered);
  jlModule.set_const("TFile!kHasReferences", TFile::kHasReferences);
  jlModule.set_const("TFile!kDevNull", TFile::kDevNull);
  jlModule.set_const("TFile!kWriteError", TFile::kWriteError);
  jlModule.set_const("TFile!kBinaryFile", TFile::kBinaryFile);
  jlModule.set_const("TFile!kRedirected", TFile::kRedirected);
  jlModule.set_const("TFile!kReproducible", TFile::kReproducible);

  DEBUG_MSG("Adding wrapper for enum TFile::ERelativeTo (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:192:9
  jlModule.add_bits<TFile::ERelativeTo>("TFile!ERelativeTo", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TFile!kBeg", TFile::kBeg);
  jlModule.set_const("TFile!kCur", TFile::kCur);
  jlModule.set_const("TFile!kEnd", TFile::kEnd);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TFile.h:193:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:193:4
  jlModule.set_const("TFile!kStartBigFile", static_cast<int>(TFile::kStartBigFile));

  DEBUG_MSG("Adding wrapper for enum TFile::EFileType (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TFile.h:195:9
  jlModule.add_bits<TFile::EFileType>("TFile!EFileType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TFile!kDefault", TFile::kDefault);
  jlModule.set_const("TFile!kLocal", TFile::kLocal);
  jlModule.set_const("TFile!kNet", TFile::kNet);
  jlModule.set_const("TFile!kWeb", TFile::kWeb);
  jlModule.set_const("TFile!kFile", TFile::kFile);
  jlModule.set_const("TFile!kMerge", TFile::kMerge);

  DEBUG_MSG("Adding wrapper for enum TGraph::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TGraph.h:73:9
  jlModule.add_bits<TGraph::EStatusBits>("TGraph!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TGraph!kNoStats", TGraph::kNoStats);
  jlModule.set_const("TGraph!kClipFrame", TGraph::kClipFrame);
  jlModule.set_const("TGraph!kResetHisto", TGraph::kResetHisto);
  jlModule.set_const("TGraph!kNotEditable", TGraph::kNotEditable);
  jlModule.set_const("TGraph!kIsSortedX", TGraph::kIsSortedX);
  jlModule.set_const("TGraph!kIsHighlight", TGraph::kIsHighlight);

  DEBUG_MSG("Adding wrapper for enum TF1::EAddToList (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TF1.h:221:15
  jlModule.add_bits<TF1::EAddToList>("TF1!EAddToList", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TF1!EAddToList!kDefault", TF1::EAddToList::kDefault);
  jlModule.set_const("TF1!EAddToList!kAdd", TF1::EAddToList::kAdd);
  jlModule.set_const("TF1!EAddToList!kNo", TF1::EAddToList::kNo);

  DEBUG_MSG("Adding wrapper for enum TF1::EStatusBits (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TF1.h:325:9
  jlModule.add_bits<TF1::EStatusBits>("TF1!EStatusBits", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TF1!kNotGlobal", TF1::kNotGlobal);
  jlModule.set_const("TF1!kNotDraw", TF1::kNotDraw);

  DEBUG_MSG("Adding wrapper for enum ROOT::Internal::TTreeReaderValueBase::ESetupStatus (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTreeReaderValue.h:48:12
  jlModule.add_bits<ROOT::Internal::TTreeReaderValueBase::ESetupStatus>("ROOT!Internal!TTreeReaderValueBase!ESetupStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupNotSetup", ROOT::Internal::TTreeReaderValueBase::kSetupNotSetup);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupTreeDestructed", ROOT::Internal::TTreeReaderValueBase::kSetupTreeDestructed);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMakeClassModeMismatch", ROOT::Internal::TTreeReaderValueBase::kSetupMakeClassModeMismatch);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMissingCounterBranch", ROOT::Internal::TTreeReaderValueBase::kSetupMissingCounterBranch);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMissingBranch", ROOT::Internal::TTreeReaderValueBase::kSetupMissingBranch);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupInternalError", ROOT::Internal::TTreeReaderValueBase::kSetupInternalError);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMissingDictionary", ROOT::Internal::TTreeReaderValueBase::kSetupMissingDictionary);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMismatch", ROOT::Internal::TTreeReaderValueBase::kSetupMismatch);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupNotACollection", ROOT::Internal::TTreeReaderValueBase::kSetupNotACollection);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMatch", ROOT::Internal::TTreeReaderValueBase::kSetupMatch);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMatchBranch", ROOT::Internal::TTreeReaderValueBase::kSetupMatchBranch);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupNoCheck", ROOT::Internal::TTreeReaderValueBase::kSetupNoCheck);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kSetupMatchLeaf", ROOT::Internal::TTreeReaderValueBase::kSetupMatchLeaf);

  DEBUG_MSG("Adding wrapper for enum ROOT::Internal::TTreeReaderValueBase::EReadStatus (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTreeReaderValue.h:67:12
  jlModule.add_bits<ROOT::Internal::TTreeReaderValueBase::EReadStatus>("ROOT!Internal!TTreeReaderValueBase!EReadStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kReadSuccess", ROOT::Internal::TTreeReaderValueBase::kReadSuccess);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kReadNothingYet", ROOT::Internal::TTreeReaderValueBase::kReadNothingYet);
  jlModule.set_const("ROOT!Internal!TTreeReaderValueBase!kReadError", ROOT::Internal::TTreeReaderValueBase::kReadError);

  DEBUG_MSG("Adding wrapper for enum TTreeReader::EEntryStatus (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTreeReader.h:131:9
  jlModule.add_bits<TTreeReader::EEntryStatus>("TTreeReader!EEntryStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TTreeReader!kEntryValid", TTreeReader::kEntryValid);
  jlModule.set_const("TTreeReader!kEntryNotLoaded", TTreeReader::kEntryNotLoaded);
  jlModule.set_const("TTreeReader!kEntryNoTree", TTreeReader::kEntryNoTree);
  jlModule.set_const("TTreeReader!kEntryNotFound", TTreeReader::kEntryNotFound);
  jlModule.set_const("TTreeReader!kEntryChainSetupError", TTreeReader::kEntryChainSetupError);
  jlModule.set_const("TTreeReader!kEntryChainFileError", TTreeReader::kEntryChainFileError);
  jlModule.set_const("TTreeReader!kEntryDictionaryError", TTreeReader::kEntryDictionaryError);
  jlModule.set_const("TTreeReader!kEntryBeyondEnd", TTreeReader::kEntryBeyondEnd);
  jlModule.set_const("TTreeReader!kEntryBadReader", TTreeReader::kEntryBadReader);
  jlModule.set_const("TTreeReader!kEntryUnknownError", TTreeReader::kEntryUnknownError);

  DEBUG_MSG("Adding wrapper for enum TTreeReader::ELoadTreeStatus (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TTreeReader.h:144:9
  jlModule.add_bits<TTreeReader::ELoadTreeStatus>("TTreeReader!ELoadTreeStatus", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("TTreeReader!kNoTree", TTreeReader::kNoTree);
  jlModule.set_const("TTreeReader!kLoadTreeNone", TTreeReader::kLoadTreeNone);
  jlModule.set_const("TTreeReader!kInternalLoadTree", TTreeReader::kInternalLoadTree);
  jlModule.set_const("TTreeReader!kExternalLoadTree", TTreeReader::kExternalLoadTree);

  DEBUG_MSG("Adding anonymous enum defined in /home/pgras/.julia/conda/3/include/TEntryList.h:54:4 (" __HERE__ ")");
  // defined in /home/pgras/.julia/conda/3/include/TEntryList.h:54:4
  jlModule.set_const("TEntryList!kBlockSize", static_cast<int>(TEntryList::kBlockSize));
  for(const auto& w: wrappers) w->add_methods();

}
