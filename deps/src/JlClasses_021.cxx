// this file was auto-generated by wrapit v1.5.0-4-gda13302
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGraphAsymmErrors> : std::false_type { };
  template<> struct DefaultConstructible<TGraphAsymmErrors> : std::false_type { };
template<> struct SuperType<TGraphAsymmErrors> { typedef TGraph type; };
}

// Class generating the wrapper for type TGraphAsymmErrors
// signature to use in the veto file: TGraphAsymmErrors
struct JlTGraphAsymmErrors: public Wrapper {

  JlTGraphAsymmErrors(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraphAsymmErrors (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:26:7
    jlcxx::TypeWrapper<TGraphAsymmErrors>  t = jlModule.add_type<TGraphAsymmErrors>("TGraphAsymmErrors",
      jlcxx::julia_base_type<TGraph>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraphAsymmErrors>>(new jlcxx::TypeWrapper<TGraphAsymmErrors>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:49:4
    t.constructor<Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:50:4
    t.constructor<Int_t, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:51:4
    t.constructor<Int_t, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:53:4
    t.constructor<const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(const TGraphAsymmErrors &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:54:4
    t.constructor<const TGraphAsymmErrors &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TGraphAsymmErrors & TGraphAsymmErrors::operator=(const TGraphAsymmErrors &) (" __HERE__ ")");
    // signature to use in the veto list: TGraphAsymmErrors & TGraphAsymmErrors::operator=(const TGraphAsymmErrors &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:55:23
    t.method("assign", [](TGraphAsymmErrors& a, const TGraphAsymmErrors & arg0)->TGraphAsymmErrors & { return a.operator=(arg0); });
    t.method("assign", [](TGraphAsymmErrors* a, const TGraphAsymmErrors & arg0)->TGraphAsymmErrors & { return a->operator=(arg0); });


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(const TH1 *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:56:4
    t.constructor<const TH1 *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(const TH1 *, const TH1 *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:57:4
    t.constructor<const TH1 *, const TH1 *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const TH1 *, const TH1 *, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::TGraphAsymmErrors(const char *, const char *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:58:4
    t.constructor<const char *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::Apply(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::Apply(TF1 *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:62:12
    t.method("Apply", [](TGraphAsymmErrors& a, TF1 * arg0)->void { a.Apply(arg0); });
    t.method("Apply", [](TGraphAsymmErrors* a, TF1 * arg0)->void { a->Apply(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::BayesDivide(const TH1 *, const TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::BayesDivide(const TH1 *, const TH1 *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:63:20
    t.method("BayesDivide", [](TGraphAsymmErrors& a, const TH1 * arg0, const TH1 * arg1)->void { a.BayesDivide(arg0, arg1); });
    t.method("BayesDivide", [](TGraphAsymmErrors& a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a.BayesDivide(arg0, arg1, arg2); });
    t.method("BayesDivide", [](TGraphAsymmErrors* a, const TH1 * arg0, const TH1 * arg1)->void { a->BayesDivide(arg0, arg1); });
    t.method("BayesDivide", [](TGraphAsymmErrors* a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a->BayesDivide(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::Divide(const TH1 *, const TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::Divide(const TH1 *, const TH1 *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:64:20
    t.method("Divide", [](TGraphAsymmErrors& a, const TH1 * arg0, const TH1 * arg1)->void { a.Divide(arg0, arg1); });
    t.method("Divide", [](TGraphAsymmErrors& a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a.Divide(arg0, arg1, arg2); });
    t.method("Divide", [](TGraphAsymmErrors* a, const TH1 * arg0, const TH1 * arg1)->void { a->Divide(arg0, arg1); });
    t.method("Divide", [](TGraphAsymmErrors* a, const TH1 * arg0, const TH1 * arg1, Option_t * arg2)->void { a->Divide(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:65:12
    t.method("ComputeRange", [](TGraphAsymmErrors const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a.ComputeRange(arg0, arg1, arg2, arg3); });
    t.method("ComputeRange", [](TGraphAsymmErrors const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a->ComputeRange(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TGraphAsymmErrors::GetErrorX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphAsymmErrors::GetErrorX(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:66:20
    t.method("GetErrorX", [](TGraphAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorX(arg0); });
    t.method("GetErrorX", [](TGraphAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorX(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraphAsymmErrors::GetErrorY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphAsymmErrors::GetErrorY(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:67:20
    t.method("GetErrorY", [](TGraphAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorY(arg0); });
    t.method("GetErrorY", [](TGraphAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorY(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraphAsymmErrors::GetErrorXlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphAsymmErrors::GetErrorXlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:68:20
    t.method("GetErrorXlow", [](TGraphAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorXlow(arg0); });
    t.method("GetErrorXlow", [](TGraphAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorXlow(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraphAsymmErrors::GetErrorXhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphAsymmErrors::GetErrorXhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:69:20
    t.method("GetErrorXhigh", [](TGraphAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorXhigh(arg0); });
    t.method("GetErrorXhigh", [](TGraphAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorXhigh(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraphAsymmErrors::GetErrorYlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphAsymmErrors::GetErrorYlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:70:20
    t.method("GetErrorYlow", [](TGraphAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorYlow(arg0); });
    t.method("GetErrorYlow", [](TGraphAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorYlow(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraphAsymmErrors::GetErrorYhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphAsymmErrors::GetErrorYhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:71:20
    t.method("GetErrorYhigh", [](TGraphAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorYhigh(arg0); });
    t.method("GetErrorYhigh", [](TGraphAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorYhigh(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraphAsymmErrors::GetEXlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphAsymmErrors::GetEXlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:72:20
    t.method("GetEXlow", [](TGraphAsymmErrors const& a)->Double_t * { return a.GetEXlow(); });
    t.method("GetEXlow", [](TGraphAsymmErrors const* a)->Double_t * { return a->GetEXlow(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraphAsymmErrors::GetEXhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphAsymmErrors::GetEXhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:73:20
    t.method("GetEXhigh", [](TGraphAsymmErrors const& a)->Double_t * { return a.GetEXhigh(); });
    t.method("GetEXhigh", [](TGraphAsymmErrors const* a)->Double_t * { return a->GetEXhigh(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraphAsymmErrors::GetEYlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphAsymmErrors::GetEYlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:74:20
    t.method("GetEYlow", [](TGraphAsymmErrors const& a)->Double_t * { return a.GetEYlow(); });
    t.method("GetEYlow", [](TGraphAsymmErrors const* a)->Double_t * { return a->GetEYlow(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraphAsymmErrors::GetEYhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphAsymmErrors::GetEYhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:75:20
    t.method("GetEYhigh", [](TGraphAsymmErrors const& a)->Double_t * { return a.GetEYhigh(); });
    t.method("GetEYhigh", [](TGraphAsymmErrors const* a)->Double_t * { return a->GetEYhigh(); });

    DEBUG_MSG("Adding wrapper for Int_t TGraphAsymmErrors::Merge(TCollection *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphAsymmErrors::Merge(TCollection *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:76:12
    t.method("Merge", [](TGraphAsymmErrors& a, TCollection * arg0)->Int_t { return a.Merge(arg0); });
    t.method("Merge", [](TGraphAsymmErrors* a, TCollection * arg0)->Int_t { return a->Merge(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:77:12
    t.method("Print", [](TGraphAsymmErrors const& a)->void { a.Print(); });
    t.method("Print", [](TGraphAsymmErrors const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TGraphAsymmErrors const* a)->void { a->Print(); });
    t.method("Print", [](TGraphAsymmErrors const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::Scale(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::Scale(Double_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:79:12
    t.method("Scale", [](TGraphAsymmErrors& a)->void { a.Scale(); });
    t.method("Scale", [](TGraphAsymmErrors& a, Double_t arg0)->void { a.Scale(arg0); });
    t.method("Scale", [](TGraphAsymmErrors& a, Double_t arg0, Option_t * arg1)->void { a.Scale(arg0, arg1); });
    t.method("Scale", [](TGraphAsymmErrors* a)->void { a->Scale(); });
    t.method("Scale", [](TGraphAsymmErrors* a, Double_t arg0)->void { a->Scale(arg0); });
    t.method("Scale", [](TGraphAsymmErrors* a, Double_t arg0, Option_t * arg1)->void { a->Scale(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::SetPointError(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::SetPointError(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:80:20
    t.method("SetPointError", [](TGraphAsymmErrors& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetPointError(arg0, arg1, arg2, arg3); });
    t.method("SetPointError", [](TGraphAsymmErrors* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetPointError(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::SetPointError(Int_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::SetPointError(Int_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:81:20
    t.method("SetPointError", [](TGraphAsymmErrors& a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetPointError", [](TGraphAsymmErrors* a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::SetPointEXlow(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::SetPointEXlow(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:82:20
    t.method("SetPointEXlow", [](TGraphAsymmErrors& a, Int_t arg0, Double_t arg1)->void { a.SetPointEXlow(arg0, arg1); });
    t.method("SetPointEXlow", [](TGraphAsymmErrors* a, Int_t arg0, Double_t arg1)->void { a->SetPointEXlow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::SetPointEXhigh(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::SetPointEXhigh(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:83:20
    t.method("SetPointEXhigh", [](TGraphAsymmErrors& a, Int_t arg0, Double_t arg1)->void { a.SetPointEXhigh(arg0, arg1); });
    t.method("SetPointEXhigh", [](TGraphAsymmErrors* a, Int_t arg0, Double_t arg1)->void { a->SetPointEXhigh(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::SetPointEYlow(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::SetPointEYlow(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:84:20
    t.method("SetPointEYlow", [](TGraphAsymmErrors& a, Int_t arg0, Double_t arg1)->void { a.SetPointEYlow(arg0, arg1); });
    t.method("SetPointEYlow", [](TGraphAsymmErrors* a, Int_t arg0, Double_t arg1)->void { a->SetPointEYlow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::SetPointEYhigh(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::SetPointEYhigh(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraphAsymmErrors.h:85:20
    t.method("SetPointEYhigh", [](TGraphAsymmErrors& a, Int_t arg0, Double_t arg1)->void { a.SetPointEYhigh(arg0, arg1); });
    t.method("SetPointEYhigh", [](TGraphAsymmErrors* a, Int_t arg0, Double_t arg1)->void { a->SetPointEYhigh(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Version_t TGraphAsymmErrors::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraphAsymmErrors::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TGraphAsymmErrors!Class_Version", []()->Version_t { return TGraphAsymmErrors::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphAsymmErrors::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphAsymmErrors::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TGraphAsymmErrors const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TGraphAsymmErrors const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TGraphAsymmErrors& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TGraphAsymmErrors* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TGraphAsymmErrors::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphAsymmErrors::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TGraphAsymmErrors!DeclFileName", []() { return (std::string)TGraphAsymmErrors::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraphAsymmErrors::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphAsymmErrors::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TGraphAsymmErrors!ImplFileLine", []()->int { return TGraphAsymmErrors::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphAsymmErrors::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphAsymmErrors::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TGraphAsymmErrors!ImplFileName", []() { return (std::string)TGraphAsymmErrors::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphAsymmErrors::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphAsymmErrors::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TGraphAsymmErrors!Class_Name", []() { return (std::string)TGraphAsymmErrors::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphAsymmErrors::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphAsymmErrors::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TGraphAsymmErrors!Dictionary", []()->TClass * { return TGraphAsymmErrors::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphAsymmErrors::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphAsymmErrors::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TGraphAsymmErrors!Class", []()->TClass * { return TGraphAsymmErrors::Class(); });

    DEBUG_MSG("Adding wrapper for void TGraphAsymmErrors::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphAsymmErrors::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TGraphAsymmErrors& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TGraphAsymmErrors* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TGraphAsymmErrors::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphAsymmErrors::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TGraphAsymmErrors!DeclFileLine", []()->int { return TGraphAsymmErrors::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraphAsymmErrors>> type_;
};
std::shared_ptr<Wrapper> newJlTGraphAsymmErrors(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraphAsymmErrors(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGraph2DAsymmErrors> : std::false_type { };
  template<> struct DefaultConstructible<TGraph2DAsymmErrors> : std::false_type { };
template<> struct SuperType<TGraph2DAsymmErrors> { typedef TGraph2D type; };
}

// Class generating the wrapper for type TGraph2DAsymmErrors
// signature to use in the veto file: TGraph2DAsymmErrors
struct JlTGraph2DAsymmErrors: public Wrapper {

  JlTGraph2DAsymmErrors(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraph2DAsymmErrors (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:26:7
    jlcxx::TypeWrapper<TGraph2DAsymmErrors>  t = jlModule.add_type<TGraph2DAsymmErrors>("TGraph2DAsymmErrors",
      jlcxx::julia_base_type<TGraph2D>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraph2DAsymmErrors>>(new jlcxx::TypeWrapper<TGraph2DAsymmErrors>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::TGraph2DAsymmErrors(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:41:4
    t.constructor<Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::TGraph2DAsymmErrors(Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:42:4
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<Int_t, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Double_t *, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::TGraph2DAsymmErrors(const TGraph2DAsymmErrors &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:47:4
    t.constructor<const TGraph2DAsymmErrors &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator=(const TGraph2DAsymmErrors &) (" __HERE__ ")");
    // signature to use in the veto list: TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator=(const TGraph2DAsymmErrors &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:48:25
    t.method("assign", [](TGraph2DAsymmErrors& a, const TGraph2DAsymmErrors & arg0)->TGraph2DAsymmErrors & { return a.operator=(arg0); });
    t.method("assign", [](TGraph2DAsymmErrors* a, const TGraph2DAsymmErrors & arg0)->TGraph2DAsymmErrors & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorX(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:50:20
    t.method("GetErrorX", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorX(arg0); });
    t.method("GetErrorX", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorX(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorY(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:51:20
    t.method("GetErrorY", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorY(arg0); });
    t.method("GetErrorY", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorY(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorZ(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorZ(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:52:20
    t.method("GetErrorZ", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorZ(arg0); });
    t.method("GetErrorZ", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorZ(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorXlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorXlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:53:20
    t.method("GetErrorXlow", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorXlow(arg0); });
    t.method("GetErrorXlow", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorXlow(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorXhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorXhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:54:20
    t.method("GetErrorXhigh", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorXhigh(arg0); });
    t.method("GetErrorXhigh", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorXhigh(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorYlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorYlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:55:20
    t.method("GetErrorYlow", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorYlow(arg0); });
    t.method("GetErrorYlow", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorYlow(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorYhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorYhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:56:20
    t.method("GetErrorYhigh", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorYhigh(arg0); });
    t.method("GetErrorYhigh", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorYhigh(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorZlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorZlow(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:57:20
    t.method("GetErrorZlow", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorZlow(arg0); });
    t.method("GetErrorZlow", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorZlow(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetErrorZhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetErrorZhigh(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:58:20
    t.method("GetErrorZhigh", [](TGraph2DAsymmErrors const& a, Int_t arg0)->Double_t { return a.GetErrorZhigh(arg0); });
    t.method("GetErrorZhigh", [](TGraph2DAsymmErrors const* a, Int_t arg0)->Double_t { return a->GetErrorZhigh(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraph2DAsymmErrors::GetEXlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph2DAsymmErrors::GetEXlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:59:20
    t.method("GetEXlow", [](TGraph2DAsymmErrors const& a)->Double_t * { return a.GetEXlow(); });
    t.method("GetEXlow", [](TGraph2DAsymmErrors const* a)->Double_t * { return a->GetEXlow(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraph2DAsymmErrors::GetEXhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph2DAsymmErrors::GetEXhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:60:20
    t.method("GetEXhigh", [](TGraph2DAsymmErrors const& a)->Double_t * { return a.GetEXhigh(); });
    t.method("GetEXhigh", [](TGraph2DAsymmErrors const* a)->Double_t * { return a->GetEXhigh(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraph2DAsymmErrors::GetEYlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph2DAsymmErrors::GetEYlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:61:20
    t.method("GetEYlow", [](TGraph2DAsymmErrors const& a)->Double_t * { return a.GetEYlow(); });
    t.method("GetEYlow", [](TGraph2DAsymmErrors const* a)->Double_t * { return a->GetEYlow(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraph2DAsymmErrors::GetEYhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph2DAsymmErrors::GetEYhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:62:20
    t.method("GetEYhigh", [](TGraph2DAsymmErrors const& a)->Double_t * { return a.GetEYhigh(); });
    t.method("GetEYhigh", [](TGraph2DAsymmErrors const* a)->Double_t * { return a->GetEYhigh(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraph2DAsymmErrors::GetEZlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph2DAsymmErrors::GetEZlow()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:63:20
    t.method("GetEZlow", [](TGraph2DAsymmErrors const& a)->Double_t * { return a.GetEZlow(); });
    t.method("GetEZlow", [](TGraph2DAsymmErrors const* a)->Double_t * { return a->GetEZlow(); });

    DEBUG_MSG("Adding wrapper for Double_t * TGraph2DAsymmErrors::GetEZhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph2DAsymmErrors::GetEZhigh()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:64:20
    t.method("GetEZhigh", [](TGraph2DAsymmErrors const& a)->Double_t * { return a.GetEZhigh(); });
    t.method("GetEZhigh", [](TGraph2DAsymmErrors const* a)->Double_t * { return a->GetEZhigh(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetXmaxE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetXmaxE()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:65:20
    t.method("GetXmaxE", [](TGraph2DAsymmErrors const& a)->Double_t { return a.GetXmaxE(); });
    t.method("GetXmaxE", [](TGraph2DAsymmErrors const* a)->Double_t { return a->GetXmaxE(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetXminE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetXminE()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:66:20
    t.method("GetXminE", [](TGraph2DAsymmErrors const& a)->Double_t { return a.GetXminE(); });
    t.method("GetXminE", [](TGraph2DAsymmErrors const* a)->Double_t { return a->GetXminE(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetYmaxE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetYmaxE()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:67:20
    t.method("GetYmaxE", [](TGraph2DAsymmErrors const& a)->Double_t { return a.GetYmaxE(); });
    t.method("GetYmaxE", [](TGraph2DAsymmErrors const* a)->Double_t { return a->GetYmaxE(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetYminE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetYminE()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:68:20
    t.method("GetYminE", [](TGraph2DAsymmErrors const& a)->Double_t { return a.GetYminE(); });
    t.method("GetYminE", [](TGraph2DAsymmErrors const* a)->Double_t { return a->GetYminE(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetZmaxE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetZmaxE()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:69:20
    t.method("GetZmaxE", [](TGraph2DAsymmErrors const& a)->Double_t { return a.GetZmaxE(); });
    t.method("GetZmaxE", [](TGraph2DAsymmErrors const* a)->Double_t { return a->GetZmaxE(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph2DAsymmErrors::GetZminE() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph2DAsymmErrors::GetZminE()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:70:20
    t.method("GetZminE", [](TGraph2DAsymmErrors const& a)->Double_t { return a.GetZminE(); });
    t.method("GetZminE", [](TGraph2DAsymmErrors const* a)->Double_t { return a->GetZminE(); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:71:12
    t.method("Print", [](TGraph2DAsymmErrors const& a)->void { a.Print(); });
    t.method("Print", [](TGraph2DAsymmErrors const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TGraph2DAsymmErrors const* a)->void { a->Print(); });
    t.method("Print", [](TGraph2DAsymmErrors const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGraph2DAsymmErrors::RemovePoint(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph2DAsymmErrors::RemovePoint(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:72:20
    t.method("RemovePoint", [](TGraph2DAsymmErrors& a, Int_t arg0)->Int_t { return a.RemovePoint(arg0); });
    t.method("RemovePoint", [](TGraph2DAsymmErrors* a, Int_t arg0)->Int_t { return a->RemovePoint(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::Scale(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::Scale(Double_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:73:12
    t.method("Scale", [](TGraph2DAsymmErrors& a)->void { a.Scale(); });
    t.method("Scale", [](TGraph2DAsymmErrors& a, Double_t arg0)->void { a.Scale(arg0); });
    t.method("Scale", [](TGraph2DAsymmErrors& a, Double_t arg0, Option_t * arg1)->void { a.Scale(arg0, arg1); });
    t.method("Scale", [](TGraph2DAsymmErrors* a)->void { a->Scale(); });
    t.method("Scale", [](TGraph2DAsymmErrors* a, Double_t arg0)->void { a->Scale(arg0); });
    t.method("Scale", [](TGraph2DAsymmErrors* a, Double_t arg0, Option_t * arg1)->void { a->Scale(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::Set(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::Set(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:74:12
    t.method("Set", [](TGraph2DAsymmErrors& a, Int_t arg0)->void { a.Set(arg0); });
    t.method("Set", [](TGraph2DAsymmErrors* a, Int_t arg0)->void { a->Set(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::SetPoint(Int_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::SetPoint(Int_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:75:12
    t.method("SetPoint", [](TGraph2DAsymmErrors& a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetPoint(arg0, arg1, arg2, arg3); });
    t.method("SetPoint", [](TGraph2DAsymmErrors* a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetPoint(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::SetPointError(Int_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::SetPointError(Int_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TGraph2DAsymmErrors.h:76:20
    t.method("SetPointError", [](TGraph2DAsymmErrors& a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetPointError(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetPointError", [](TGraph2DAsymmErrors* a, Int_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetPointError(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Version_t TGraph2DAsymmErrors::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraph2DAsymmErrors::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TGraph2DAsymmErrors!Class_Version", []()->Version_t { return TGraph2DAsymmErrors::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraph2DAsymmErrors::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraph2DAsymmErrors::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TGraph2DAsymmErrors const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TGraph2DAsymmErrors const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TGraph2DAsymmErrors& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TGraph2DAsymmErrors* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TGraph2DAsymmErrors::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraph2DAsymmErrors::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TGraph2DAsymmErrors!DeclFileName", []() { return (std::string)TGraph2DAsymmErrors::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraph2DAsymmErrors::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraph2DAsymmErrors::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TGraph2DAsymmErrors!ImplFileLine", []()->int { return TGraph2DAsymmErrors::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TGraph2DAsymmErrors::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraph2DAsymmErrors::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TGraph2DAsymmErrors!ImplFileName", []() { return (std::string)TGraph2DAsymmErrors::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraph2DAsymmErrors::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraph2DAsymmErrors::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TGraph2DAsymmErrors!Class_Name", []() { return (std::string)TGraph2DAsymmErrors::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraph2DAsymmErrors::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraph2DAsymmErrors::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TGraph2DAsymmErrors!Dictionary", []()->TClass * { return TGraph2DAsymmErrors::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraph2DAsymmErrors::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraph2DAsymmErrors::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TGraph2DAsymmErrors!Class", []()->TClass * { return TGraph2DAsymmErrors::Class(); });

    DEBUG_MSG("Adding wrapper for void TGraph2DAsymmErrors::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph2DAsymmErrors::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TGraph2DAsymmErrors& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TGraph2DAsymmErrors* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TGraph2DAsymmErrors::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraph2DAsymmErrors::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TGraph2DAsymmErrors!DeclFileLine", []()->int { return TGraph2DAsymmErrors::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraph2DAsymmErrors>> type_;
};
std::shared_ptr<Wrapper> newJlTGraph2DAsymmErrors(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraph2DAsymmErrors(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH2> : std::false_type { };
  template<> struct DefaultConstructible<TH2> : std::false_type { };
template<> struct SuperType<TH2> { typedef TH1 type; };
}

// Class generating the wrapper for type TH2
// signature to use in the veto file: TH2
struct JlTH2: public Wrapper {

  JlTH2(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH2 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:30:7
    jlcxx::TypeWrapper<TH2>  t = jlModule.add_type<TH2>("TH2",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH2>>(new jlcxx::TypeWrapper<TH2>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void TH2::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::AddBinContent(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:73:21
    t.method("AddBinContent", [](TH2& a, Int_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](TH2* a, Int_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void TH2::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:74:21
    t.method("AddBinContent", [](TH2& a, Int_t arg0, Double_t arg1)->void { a.AddBinContent(arg0, arg1); });
    t.method("AddBinContent", [](TH2* a, Int_t arg0, Double_t arg1)->void { a->AddBinContent(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TH2::AddBinContent(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::AddBinContent(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:75:21
    t.method("AddBinContent", [](TH2& a, Int_t arg0, Int_t arg1)->void { a.AddBinContent(arg0, arg1); });
    t.method("AddBinContent", [](TH2* a, Int_t arg0, Int_t arg1)->void { a->AddBinContent(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TH2::AddBinContent(Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::AddBinContent(Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:76:21
    t.method("AddBinContent", [](TH2& a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a.AddBinContent(arg0, arg1, arg2); });
    t.method("AddBinContent", [](TH2* a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a->AddBinContent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::BufferEmpty(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::BufferEmpty(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:77:21
    t.method("BufferEmpty", [](TH2& a)->Int_t { return a.BufferEmpty(); });
    t.method("BufferEmpty", [](TH2& a, Int_t arg0)->Int_t { return a.BufferEmpty(arg0); });
    t.method("BufferEmpty", [](TH2* a)->Int_t { return a->BufferEmpty(); });
    t.method("BufferEmpty", [](TH2* a, Int_t arg0)->Int_t { return a->BufferEmpty(arg0); });

    DEBUG_MSG("Adding wrapper for void TH2::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:78:21
    t.method("Copy", [](TH2 const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TH2 const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::Fill(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::Fill(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:79:21
    t.method("Fill", [](TH2& a, Double_t arg0, Double_t arg1)->Int_t { return a.Fill(arg0, arg1); });
    t.method("Fill", [](TH2* a, Double_t arg0, Double_t arg1)->Int_t { return a->Fill(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::Fill(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::Fill(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:80:21
    t.method("Fill", [](TH2& a, Double_t arg0, Double_t arg1, Double_t arg2)->Int_t { return a.Fill(arg0, arg1, arg2); });
    t.method("Fill", [](TH2* a, Double_t arg0, Double_t arg1, Double_t arg2)->Int_t { return a->Fill(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::Fill(Double_t, const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::Fill(Double_t, const char *, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:81:21
    t.method("Fill", [](TH2& a, Double_t arg0, const char * arg1, Double_t arg2)->Int_t { return a.Fill(arg0, arg1, arg2); });
    t.method("Fill", [](TH2* a, Double_t arg0, const char * arg1, Double_t arg2)->Int_t { return a->Fill(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::Fill(const char *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::Fill(const char *, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:82:21
    t.method("Fill", [](TH2& a, const char * arg0, Double_t arg1, Double_t arg2)->Int_t { return a.Fill(arg0, arg1, arg2); });
    t.method("Fill", [](TH2* a, const char * arg0, Double_t arg1, Double_t arg2)->Int_t { return a->Fill(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::Fill(const char *, const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::Fill(const char *, const char *, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:83:21
    t.method("Fill", [](TH2& a, const char * arg0, const char * arg1, Double_t arg2)->Int_t { return a.Fill(arg0, arg1, arg2); });
    t.method("Fill", [](TH2* a, const char * arg0, const char * arg1, Double_t arg2)->Int_t { return a->Fill(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TH2::FillN(Int_t, const Double_t *, const Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::FillN(Int_t, const Double_t *, const Double_t *, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:84:21
    t.method("FillN", [](TH2& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Int_t arg3)->void { a.FillN(arg0, arg1, arg2, arg3); });
    t.method("FillN", [](TH2* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Int_t arg3)->void { a->FillN(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TH2::FillN(Int_t, const Double_t *, const Double_t *, const Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::FillN(Int_t, const Double_t *, const Double_t *, const Double_t *, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:85:21
    t.method("FillN", [](TH2& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->void { a.FillN(arg0, arg1, arg2, arg3); });
    t.method("FillN", [](TH2& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, Int_t arg4)->void { a.FillN(arg0, arg1, arg2, arg3, arg4); });
    t.method("FillN", [](TH2* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->void { a->FillN(arg0, arg1, arg2, arg3); });
    t.method("FillN", [](TH2* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, Int_t arg4)->void { a->FillN(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void TH2::FillRandom(const char *, Int_t, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::FillRandom(const char *, Int_t, TRandom *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:86:21
    t.method("FillRandom", [](TH2& a, const char * arg0)->void { a.FillRandom(arg0); });
    t.method("FillRandom", [](TH2& a, const char * arg0, Int_t arg1)->void { a.FillRandom(arg0, arg1); });
    t.method("FillRandom", [](TH2& a, const char * arg0, Int_t arg1, TRandom * arg2)->void { a.FillRandom(arg0, arg1, arg2); });
    t.method("FillRandom", [](TH2* a, const char * arg0)->void { a->FillRandom(arg0); });
    t.method("FillRandom", [](TH2* a, const char * arg0, Int_t arg1)->void { a->FillRandom(arg0, arg1); });
    t.method("FillRandom", [](TH2* a, const char * arg0, Int_t arg1, TRandom * arg2)->void { a->FillRandom(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TH2::FillRandom(TH1 *, Int_t, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::FillRandom(TH1 *, Int_t, TRandom *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:87:21
    t.method("FillRandom", [](TH2& a, TH1 * arg0)->void { a.FillRandom(arg0); });
    t.method("FillRandom", [](TH2& a, TH1 * arg0, Int_t arg1)->void { a.FillRandom(arg0, arg1); });
    t.method("FillRandom", [](TH2& a, TH1 * arg0, Int_t arg1, TRandom * arg2)->void { a.FillRandom(arg0, arg1, arg2); });
    t.method("FillRandom", [](TH2* a, TH1 * arg0)->void { a->FillRandom(arg0); });
    t.method("FillRandom", [](TH2* a, TH1 * arg0, Int_t arg1)->void { a->FillRandom(arg0, arg1); });
    t.method("FillRandom", [](TH2* a, TH1 * arg0, Int_t arg1, TRandom * arg2)->void { a->FillRandom(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TH2::FitSlicesX(TF1 *, Int_t, Int_t, Int_t, Option_t *, TObjArray *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::FitSlicesX(TF1 *, Int_t, Int_t, Int_t, Option_t *, TObjArray *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:88:21
    t.method("FitSlicesX", [](TH2& a)->void { a.FitSlicesX(); });
    t.method("FitSlicesX", [](TH2& a, TF1 * arg0)->void { a.FitSlicesX(arg0); });
    t.method("FitSlicesX", [](TH2& a, TF1 * arg0, Int_t arg1)->void { a.FitSlicesX(arg0, arg1); });
    t.method("FitSlicesX", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2)->void { a.FitSlicesX(arg0, arg1, arg2); });
    t.method("FitSlicesX", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3)->void { a.FitSlicesX(arg0, arg1, arg2, arg3); });
    t.method("FitSlicesX", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4)->void { a.FitSlicesX(arg0, arg1, arg2, arg3, arg4); });
    t.method("FitSlicesX", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4, TObjArray * arg5)->void { a.FitSlicesX(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("FitSlicesX", [](TH2* a)->void { a->FitSlicesX(); });
    t.method("FitSlicesX", [](TH2* a, TF1 * arg0)->void { a->FitSlicesX(arg0); });
    t.method("FitSlicesX", [](TH2* a, TF1 * arg0, Int_t arg1)->void { a->FitSlicesX(arg0, arg1); });
    t.method("FitSlicesX", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2)->void { a->FitSlicesX(arg0, arg1, arg2); });
    t.method("FitSlicesX", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3)->void { a->FitSlicesX(arg0, arg1, arg2, arg3); });
    t.method("FitSlicesX", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4)->void { a->FitSlicesX(arg0, arg1, arg2, arg3, arg4); });
    t.method("FitSlicesX", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4, TObjArray * arg5)->void { a->FitSlicesX(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TH2::FitSlicesY(TF1 *, Int_t, Int_t, Int_t, Option_t *, TObjArray *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::FitSlicesY(TF1 *, Int_t, Int_t, Int_t, Option_t *, TObjArray *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:89:21
    t.method("FitSlicesY", [](TH2& a)->void { a.FitSlicesY(); });
    t.method("FitSlicesY", [](TH2& a, TF1 * arg0)->void { a.FitSlicesY(arg0); });
    t.method("FitSlicesY", [](TH2& a, TF1 * arg0, Int_t arg1)->void { a.FitSlicesY(arg0, arg1); });
    t.method("FitSlicesY", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2)->void { a.FitSlicesY(arg0, arg1, arg2); });
    t.method("FitSlicesY", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3)->void { a.FitSlicesY(arg0, arg1, arg2, arg3); });
    t.method("FitSlicesY", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4)->void { a.FitSlicesY(arg0, arg1, arg2, arg3, arg4); });
    t.method("FitSlicesY", [](TH2& a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4, TObjArray * arg5)->void { a.FitSlicesY(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("FitSlicesY", [](TH2* a)->void { a->FitSlicesY(); });
    t.method("FitSlicesY", [](TH2* a, TF1 * arg0)->void { a->FitSlicesY(arg0); });
    t.method("FitSlicesY", [](TH2* a, TF1 * arg0, Int_t arg1)->void { a->FitSlicesY(arg0, arg1); });
    t.method("FitSlicesY", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2)->void { a->FitSlicesY(arg0, arg1, arg2); });
    t.method("FitSlicesY", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3)->void { a->FitSlicesY(arg0, arg1, arg2, arg3); });
    t.method("FitSlicesY", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4)->void { a->FitSlicesY(arg0, arg1, arg2, arg3, arg4); });
    t.method("FitSlicesY", [](TH2* a, TF1 * arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4, TObjArray * arg5)->void { a->FitSlicesY(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::GetBin(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::GetBin(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:90:21
    t.method("GetBin", [](TH2 const& a, Int_t arg0, Int_t arg1)->Int_t { return a.GetBin(arg0, arg1); });
    t.method("GetBin", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2)->Int_t { return a.GetBin(arg0, arg1, arg2); });
    t.method("GetBin", [](TH2 const* a, Int_t arg0, Int_t arg1)->Int_t { return a->GetBin(arg0, arg1); });
    t.method("GetBin", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2)->Int_t { return a->GetBin(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetBinWithContent2(Double_t, Int_t &, Int_t &, Int_t, Int_t, Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetBinWithContent2(Double_t, Int_t &, Int_t &, Int_t, Int_t, Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:91:21
    t.method("GetBinWithContent2", [](TH2 const& a, Double_t arg0, Int_t & arg1, Int_t & arg2)->Double_t { return a.GetBinWithContent2(arg0, arg1, arg2); });
    t.method("GetBinWithContent2", [](TH2 const& a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3)->Double_t { return a.GetBinWithContent2(arg0, arg1, arg2, arg3); });
    t.method("GetBinWithContent2", [](TH2 const& a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4)->Double_t { return a.GetBinWithContent2(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetBinWithContent2", [](TH2 const& a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4, Int_t arg5)->Double_t { return a.GetBinWithContent2(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetBinWithContent2", [](TH2 const& a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4, Int_t arg5, Int_t arg6)->Double_t { return a.GetBinWithContent2(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("GetBinWithContent2", [](TH2 const& a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4, Int_t arg5, Int_t arg6, Double_t arg7)->Double_t { return a.GetBinWithContent2(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("GetBinWithContent2", [](TH2 const* a, Double_t arg0, Int_t & arg1, Int_t & arg2)->Double_t { return a->GetBinWithContent2(arg0, arg1, arg2); });
    t.method("GetBinWithContent2", [](TH2 const* a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3)->Double_t { return a->GetBinWithContent2(arg0, arg1, arg2, arg3); });
    t.method("GetBinWithContent2", [](TH2 const* a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4)->Double_t { return a->GetBinWithContent2(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetBinWithContent2", [](TH2 const* a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4, Int_t arg5)->Double_t { return a->GetBinWithContent2(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetBinWithContent2", [](TH2 const* a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4, Int_t arg5, Int_t arg6)->Double_t { return a->GetBinWithContent2(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("GetBinWithContent2", [](TH2 const* a, Double_t arg0, Int_t & arg1, Int_t & arg2, Int_t arg3, Int_t arg4, Int_t arg5, Int_t arg6, Double_t arg7)->Double_t { return a->GetBinWithContent2(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetBinContent(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetBinContent(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:93:21
    t.method("GetBinContent", [](TH2 const& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetBinContent(arg0, arg1); });
    t.method("GetBinContent", [](TH2 const* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetBinContent(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetBinContent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetBinContent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:94:21
    t.method("GetBinContent", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2)->Double_t { return a.GetBinContent(arg0, arg1, arg2); });
    t.method("GetBinContent", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2)->Double_t { return a->GetBinContent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetBinErrorLow(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetBinErrorLow(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:97:21
    t.method("GetBinErrorLow", [](TH2& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetBinErrorLow(arg0, arg1); });
    t.method("GetBinErrorLow", [](TH2* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetBinErrorLow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetBinErrorUp(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetBinErrorUp(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:98:21
    t.method("GetBinErrorUp", [](TH2& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetBinErrorUp(arg0, arg1); });
    t.method("GetBinErrorUp", [](TH2* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetBinErrorUp(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetCorrelationFactor(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetCorrelationFactor(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:99:21
    t.method("GetCorrelationFactor", [](TH2 const& a)->Double_t { return a.GetCorrelationFactor(); });
    t.method("GetCorrelationFactor", [](TH2 const& a, Int_t arg0)->Double_t { return a.GetCorrelationFactor(arg0); });
    t.method("GetCorrelationFactor", [](TH2 const& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetCorrelationFactor(arg0, arg1); });
    t.method("GetCorrelationFactor", [](TH2 const* a)->Double_t { return a->GetCorrelationFactor(); });
    t.method("GetCorrelationFactor", [](TH2 const* a, Int_t arg0)->Double_t { return a->GetCorrelationFactor(arg0); });
    t.method("GetCorrelationFactor", [](TH2 const* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetCorrelationFactor(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::GetCovariance(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::GetCovariance(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:100:21
    t.method("GetCovariance", [](TH2 const& a)->Double_t { return a.GetCovariance(); });
    t.method("GetCovariance", [](TH2 const& a, Int_t arg0)->Double_t { return a.GetCovariance(arg0); });
    t.method("GetCovariance", [](TH2 const& a, Int_t arg0, Int_t arg1)->Double_t { return a.GetCovariance(arg0, arg1); });
    t.method("GetCovariance", [](TH2 const* a)->Double_t { return a->GetCovariance(); });
    t.method("GetCovariance", [](TH2 const* a, Int_t arg0)->Double_t { return a->GetCovariance(arg0); });
    t.method("GetCovariance", [](TH2 const* a, Int_t arg0, Int_t arg1)->Double_t { return a->GetCovariance(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TH2::GetRandom2(Double_t &, Double_t &, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::GetRandom2(Double_t &, Double_t &, TRandom *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:101:21
    t.method("GetRandom2", [](TH2& a, Double_t & arg0, Double_t & arg1)->void { a.GetRandom2(arg0, arg1); });
    t.method("GetRandom2", [](TH2& a, Double_t & arg0, Double_t & arg1, TRandom * arg2)->void { a.GetRandom2(arg0, arg1, arg2); });
    t.method("GetRandom2", [](TH2* a, Double_t & arg0, Double_t & arg1)->void { a->GetRandom2(arg0, arg1); });
    t.method("GetRandom2", [](TH2* a, Double_t & arg0, Double_t & arg1, TRandom * arg2)->void { a->GetRandom2(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TH2::GetStats(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::GetStats(Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:102:21
    t.method("GetStats", [](TH2 const& a, Double_t * arg0)->void { a.GetStats(arg0); });
    t.method("GetStats", [](TH2 const* a, Double_t * arg0)->void { a->GetStats(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::Integral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::Integral(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:103:21
    t.method("Integral", [](TH2 const& a)->Double_t { return a.Integral(); });
    t.method("Integral", [](TH2 const& a, Option_t * arg0)->Double_t { return a.Integral(arg0); });
    t.method("Integral", [](TH2 const* a)->Double_t { return a->Integral(); });
    t.method("Integral", [](TH2 const* a, Option_t * arg0)->Double_t { return a->Integral(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::Integral(Int_t, Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::Integral(Int_t, Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:105:21
    t.method("Integral", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3)->Double_t { return a.Integral(arg0, arg1, arg2, arg3); });
    t.method("Integral", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4)->Double_t { return a.Integral(arg0, arg1, arg2, arg3, arg4); });
    t.method("Integral", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3)->Double_t { return a->Integral(arg0, arg1, arg2, arg3); });
    t.method("Integral", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Option_t * arg4)->Double_t { return a->Integral(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::Integral(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::Integral(Int_t, Int_t, Int_t, Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:106:21
    t.method("Integral", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->Double_t { return a.Integral(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Integral", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Int_t arg4, Int_t arg5, Option_t * arg6)->Double_t { return a.Integral(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("Integral", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->Double_t { return a->Integral(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Integral", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Int_t arg4, Int_t arg5, Option_t * arg6)->Double_t { return a->Integral(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::IntegralAndError(Int_t, Int_t, Int_t, Int_t, Double_t &, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::IntegralAndError(Int_t, Int_t, Int_t, Int_t, Double_t &, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:107:21
    t.method("IntegralAndError", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Double_t & arg4)->Double_t { return a.IntegralAndError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralAndError", [](TH2 const& a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Double_t & arg4, Option_t * arg5)->Double_t { return a.IntegralAndError(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("IntegralAndError", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Double_t & arg4)->Double_t { return a->IntegralAndError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralAndError", [](TH2 const* a, Int_t arg0, Int_t arg1, Int_t arg2, Int_t arg3, Double_t & arg4, Option_t * arg5)->Double_t { return a->IntegralAndError(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::Interpolate(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::Interpolate(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:108:21
    t.method("Interpolate", [](TH2 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.Interpolate(arg0, arg1); });
    t.method("Interpolate", [](TH2 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->Interpolate(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::Interpolate(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::Interpolate(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:109:21
    t.method("Interpolate", [](TH2 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Interpolate(arg0, arg1, arg2); });
    t.method("Interpolate", [](TH2 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Interpolate(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TH2::KolmogorovTest(const TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TH2::KolmogorovTest(const TH1 *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:110:21
    t.method("KolmogorovTest", [](TH2 const& a, const TH1 * arg0)->Double_t { return a.KolmogorovTest(arg0); });
    t.method("KolmogorovTest", [](TH2 const& a, const TH1 * arg0, Option_t * arg1)->Double_t { return a.KolmogorovTest(arg0, arg1); });
    t.method("KolmogorovTest", [](TH2 const* a, const TH1 * arg0)->Double_t { return a->KolmogorovTest(arg0); });
    t.method("KolmogorovTest", [](TH2 const* a, const TH1 * arg0, Option_t * arg1)->Double_t { return a->KolmogorovTest(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH2 * TH2::RebinX(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH2 * TH2::RebinX(Int_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:111:21
    t.method("RebinX", [](TH2& a)->TH2 * { return a.RebinX(); });
    t.method("RebinX", [](TH2& a, Int_t arg0)->TH2 * { return a.RebinX(arg0); });
    t.method("RebinX", [](TH2& a, Int_t arg0, const char * arg1)->TH2 * { return a.RebinX(arg0, arg1); });
    t.method("RebinX", [](TH2* a)->TH2 * { return a->RebinX(); });
    t.method("RebinX", [](TH2* a, Int_t arg0)->TH2 * { return a->RebinX(arg0); });
    t.method("RebinX", [](TH2* a, Int_t arg0, const char * arg1)->TH2 * { return a->RebinX(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH2 * TH2::RebinY(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH2 * TH2::RebinY(Int_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:112:21
    t.method("RebinY", [](TH2& a)->TH2 * { return a.RebinY(); });
    t.method("RebinY", [](TH2& a, Int_t arg0)->TH2 * { return a.RebinY(arg0); });
    t.method("RebinY", [](TH2& a, Int_t arg0, const char * arg1)->TH2 * { return a.RebinY(arg0, arg1); });
    t.method("RebinY", [](TH2* a)->TH2 * { return a->RebinY(); });
    t.method("RebinY", [](TH2* a, Int_t arg0)->TH2 * { return a->RebinY(arg0); });
    t.method("RebinY", [](TH2* a, Int_t arg0, const char * arg1)->TH2 * { return a->RebinY(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH2 * TH2::Rebin(Int_t, const char *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2 * TH2::Rebin(Int_t, const char *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:113:21
    t.method("Rebin", [](TH2& a)->TH2 * { return a.Rebin(); });
    t.method("Rebin", [](TH2& a, Int_t arg0)->TH2 * { return a.Rebin(arg0); });
    t.method("Rebin", [](TH2& a, Int_t arg0, const char * arg1)->TH2 * { return a.Rebin(arg0, arg1); });
    t.method("Rebin", [](TH2& a, Int_t arg0, const char * arg1, const Double_t * arg2)->TH2 * { return a.Rebin(arg0, arg1, arg2); });
    t.method("Rebin", [](TH2* a)->TH2 * { return a->Rebin(); });
    t.method("Rebin", [](TH2* a, Int_t arg0)->TH2 * { return a->Rebin(arg0); });
    t.method("Rebin", [](TH2* a, Int_t arg0, const char * arg1)->TH2 * { return a->Rebin(arg0, arg1); });
    t.method("Rebin", [](TH2* a, Int_t arg0, const char * arg1, const Double_t * arg2)->TH2 * { return a->Rebin(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TH2 * TH2::Rebin2D(Int_t, Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH2 * TH2::Rebin2D(Int_t, Int_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:114:21
    t.method("Rebin2D", [](TH2& a)->TH2 * { return a.Rebin2D(); });
    t.method("Rebin2D", [](TH2& a, Int_t arg0)->TH2 * { return a.Rebin2D(arg0); });
    t.method("Rebin2D", [](TH2& a, Int_t arg0, Int_t arg1)->TH2 * { return a.Rebin2D(arg0, arg1); });
    t.method("Rebin2D", [](TH2& a, Int_t arg0, Int_t arg1, const char * arg2)->TH2 * { return a.Rebin2D(arg0, arg1, arg2); });
    t.method("Rebin2D", [](TH2* a)->TH2 * { return a->Rebin2D(); });
    t.method("Rebin2D", [](TH2* a, Int_t arg0)->TH2 * { return a->Rebin2D(arg0); });
    t.method("Rebin2D", [](TH2* a, Int_t arg0, Int_t arg1)->TH2 * { return a->Rebin2D(arg0, arg1); });
    t.method("Rebin2D", [](TH2* a, Int_t arg0, Int_t arg1, const char * arg2)->TH2 * { return a->Rebin2D(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TProfile * TH2::ProfileX(const char *, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TProfile * TH2::ProfileX(const char *, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:115:21
    t.method("ProfileX", [](TH2 const& a)->TProfile * { return a.ProfileX(); });
    t.method("ProfileX", [](TH2 const& a, const char * arg0)->TProfile * { return a.ProfileX(arg0); });
    t.method("ProfileX", [](TH2 const& a, const char * arg0, Int_t arg1)->TProfile * { return a.ProfileX(arg0, arg1); });
    t.method("ProfileX", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2)->TProfile * { return a.ProfileX(arg0, arg1, arg2); });
    t.method("ProfileX", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TProfile * { return a.ProfileX(arg0, arg1, arg2, arg3); });
    t.method("ProfileX", [](TH2 const* a)->TProfile * { return a->ProfileX(); });
    t.method("ProfileX", [](TH2 const* a, const char * arg0)->TProfile * { return a->ProfileX(arg0); });
    t.method("ProfileX", [](TH2 const* a, const char * arg0, Int_t arg1)->TProfile * { return a->ProfileX(arg0, arg1); });
    t.method("ProfileX", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2)->TProfile * { return a->ProfileX(arg0, arg1, arg2); });
    t.method("ProfileX", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TProfile * { return a->ProfileX(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TProfile * TH2::ProfileY(const char *, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TProfile * TH2::ProfileY(const char *, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:116:21
    t.method("ProfileY", [](TH2 const& a)->TProfile * { return a.ProfileY(); });
    t.method("ProfileY", [](TH2 const& a, const char * arg0)->TProfile * { return a.ProfileY(arg0); });
    t.method("ProfileY", [](TH2 const& a, const char * arg0, Int_t arg1)->TProfile * { return a.ProfileY(arg0, arg1); });
    t.method("ProfileY", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2)->TProfile * { return a.ProfileY(arg0, arg1, arg2); });
    t.method("ProfileY", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TProfile * { return a.ProfileY(arg0, arg1, arg2, arg3); });
    t.method("ProfileY", [](TH2 const* a)->TProfile * { return a->ProfileY(); });
    t.method("ProfileY", [](TH2 const* a, const char * arg0)->TProfile * { return a->ProfileY(arg0); });
    t.method("ProfileY", [](TH2 const* a, const char * arg0, Int_t arg1)->TProfile * { return a->ProfileY(arg0, arg1); });
    t.method("ProfileY", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2)->TProfile * { return a->ProfileY(arg0, arg1, arg2); });
    t.method("ProfileY", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TProfile * { return a->ProfileY(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TH1D * TH2::ProjectionX(const char *, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TH2::ProjectionX(const char *, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:117:21
    t.method("ProjectionX", [](TH2 const& a)->TH1D * { return a.ProjectionX(); });
    t.method("ProjectionX", [](TH2 const& a, const char * arg0)->TH1D * { return a.ProjectionX(arg0); });
    t.method("ProjectionX", [](TH2 const& a, const char * arg0, Int_t arg1)->TH1D * { return a.ProjectionX(arg0, arg1); });
    t.method("ProjectionX", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2)->TH1D * { return a.ProjectionX(arg0, arg1, arg2); });
    t.method("ProjectionX", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TH1D * { return a.ProjectionX(arg0, arg1, arg2, arg3); });
    t.method("ProjectionX", [](TH2 const* a)->TH1D * { return a->ProjectionX(); });
    t.method("ProjectionX", [](TH2 const* a, const char * arg0)->TH1D * { return a->ProjectionX(arg0); });
    t.method("ProjectionX", [](TH2 const* a, const char * arg0, Int_t arg1)->TH1D * { return a->ProjectionX(arg0, arg1); });
    t.method("ProjectionX", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2)->TH1D * { return a->ProjectionX(arg0, arg1, arg2); });
    t.method("ProjectionX", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TH1D * { return a->ProjectionX(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TH1D * TH2::ProjectionY(const char *, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TH2::ProjectionY(const char *, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:118:21
    t.method("ProjectionY", [](TH2 const& a)->TH1D * { return a.ProjectionY(); });
    t.method("ProjectionY", [](TH2 const& a, const char * arg0)->TH1D * { return a.ProjectionY(arg0); });
    t.method("ProjectionY", [](TH2 const& a, const char * arg0, Int_t arg1)->TH1D * { return a.ProjectionY(arg0, arg1); });
    t.method("ProjectionY", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2)->TH1D * { return a.ProjectionY(arg0, arg1, arg2); });
    t.method("ProjectionY", [](TH2 const& a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TH1D * { return a.ProjectionY(arg0, arg1, arg2, arg3); });
    t.method("ProjectionY", [](TH2 const* a)->TH1D * { return a->ProjectionY(); });
    t.method("ProjectionY", [](TH2 const* a, const char * arg0)->TH1D * { return a->ProjectionY(arg0); });
    t.method("ProjectionY", [](TH2 const* a, const char * arg0, Int_t arg1)->TH1D * { return a->ProjectionY(arg0, arg1); });
    t.method("ProjectionY", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2)->TH1D * { return a->ProjectionY(arg0, arg1, arg2); });
    t.method("ProjectionY", [](TH2 const* a, const char * arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TH1D * { return a->ProjectionY(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TH2::PutStats(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::PutStats(Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:119:21
    t.method("PutStats", [](TH2& a, Double_t * arg0)->void { a.PutStats(arg0); });
    t.method("PutStats", [](TH2* a, Double_t * arg0)->void { a->PutStats(arg0); });

    DEBUG_MSG("Adding wrapper for TH1D * TH2::QuantilesX(Double_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TH2::QuantilesX(Double_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:120:21
    t.method("QuantilesX", [](TH2 const& a)->TH1D * { return a.QuantilesX(); });
    t.method("QuantilesX", [](TH2 const& a, Double_t arg0)->TH1D * { return a.QuantilesX(arg0); });
    t.method("QuantilesX", [](TH2 const& a, Double_t arg0, const char * arg1)->TH1D * { return a.QuantilesX(arg0, arg1); });
    t.method("QuantilesX", [](TH2 const* a)->TH1D * { return a->QuantilesX(); });
    t.method("QuantilesX", [](TH2 const* a, Double_t arg0)->TH1D * { return a->QuantilesX(arg0); });
    t.method("QuantilesX", [](TH2 const* a, Double_t arg0, const char * arg1)->TH1D * { return a->QuantilesX(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH1D * TH2::QuantilesY(Double_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * TH2::QuantilesY(Double_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:121:21
    t.method("QuantilesY", [](TH2 const& a)->TH1D * { return a.QuantilesY(); });
    t.method("QuantilesY", [](TH2 const& a, Double_t arg0)->TH1D * { return a.QuantilesY(arg0); });
    t.method("QuantilesY", [](TH2 const& a, Double_t arg0, const char * arg1)->TH1D * { return a.QuantilesY(arg0, arg1); });
    t.method("QuantilesY", [](TH2 const* a)->TH1D * { return a->QuantilesY(); });
    t.method("QuantilesY", [](TH2 const* a, Double_t arg0)->TH1D * { return a->QuantilesY(arg0); });
    t.method("QuantilesY", [](TH2 const* a, Double_t arg0, const char * arg1)->TH1D * { return a->QuantilesY(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TH2::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::Reset(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:122:21
    t.method("Reset", [](TH2& a)->void { a.Reset(); });
    t.method("Reset", [](TH2& a, Option_t * arg0)->void { a.Reset(arg0); });
    t.method("Reset", [](TH2* a)->void { a->Reset(); });
    t.method("Reset", [](TH2* a, Option_t * arg0)->void { a->Reset(arg0); });

    DEBUG_MSG("Adding wrapper for void TH2::SetBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::SetBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:123:21
    t.method("SetBinContent", [](TH2& a, Int_t arg0, Double_t arg1)->void { a.SetBinContent(arg0, arg1); });
    t.method("SetBinContent", [](TH2* a, Int_t arg0, Double_t arg1)->void { a->SetBinContent(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TH2::SetBinContent(Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::SetBinContent(Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:124:21
    t.method("SetBinContent", [](TH2& a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a.SetBinContent(arg0, arg1, arg2); });
    t.method("SetBinContent", [](TH2* a, Int_t arg0, Int_t arg1, Double_t arg2)->void { a->SetBinContent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TH2::SetBinContent(Int_t, Int_t, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::SetBinContent(Int_t, Int_t, Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:125:21
    t.method("SetBinContent", [](TH2& a, Int_t arg0, Int_t arg1, Int_t arg2, Double_t arg3)->void { a.SetBinContent(arg0, arg1, arg2, arg3); });
    t.method("SetBinContent", [](TH2* a, Int_t arg0, Int_t arg1, Int_t arg2, Double_t arg3)->void { a->SetBinContent(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TH2::SetShowProjectionX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::SetShowProjectionX(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:126:21
    t.method("SetShowProjectionX", [](TH2& a)->void { a.SetShowProjectionX(); });
    t.method("SetShowProjectionX", [](TH2& a, Int_t arg0)->void { a.SetShowProjectionX(arg0); });
    t.method("SetShowProjectionX", [](TH2* a)->void { a->SetShowProjectionX(); });
    t.method("SetShowProjectionX", [](TH2* a, Int_t arg0)->void { a->SetShowProjectionX(arg0); });

    DEBUG_MSG("Adding wrapper for void TH2::SetShowProjectionY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::SetShowProjectionY(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:127:21
    t.method("SetShowProjectionY", [](TH2& a)->void { a.SetShowProjectionY(); });
    t.method("SetShowProjectionY", [](TH2& a, Int_t arg0)->void { a.SetShowProjectionY(arg0); });
    t.method("SetShowProjectionY", [](TH2* a)->void { a->SetShowProjectionY(); });
    t.method("SetShowProjectionY", [](TH2* a, Int_t arg0)->void { a->SetShowProjectionY(arg0); });

    DEBUG_MSG("Adding wrapper for void TH2::SetShowProjectionXY(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::SetShowProjectionXY(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:128:21
    t.method("SetShowProjectionXY", [](TH2& a)->void { a.SetShowProjectionXY(); });
    t.method("SetShowProjectionXY", [](TH2& a, Int_t arg0)->void { a.SetShowProjectionXY(arg0); });
    t.method("SetShowProjectionXY", [](TH2& a, Int_t arg0, Int_t arg1)->void { a.SetShowProjectionXY(arg0, arg1); });
    t.method("SetShowProjectionXY", [](TH2* a)->void { a->SetShowProjectionXY(); });
    t.method("SetShowProjectionXY", [](TH2* a, Int_t arg0)->void { a->SetShowProjectionXY(arg0); });
    t.method("SetShowProjectionXY", [](TH2* a, Int_t arg0, Int_t arg1)->void { a->SetShowProjectionXY(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH1 * TH2::ShowBackground(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TH2::ShowBackground(Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:129:21
    t.method("ShowBackground", [](TH2& a)->TH1 * { return a.ShowBackground(); });
    t.method("ShowBackground", [](TH2& a, Int_t arg0)->TH1 * { return a.ShowBackground(arg0); });
    t.method("ShowBackground", [](TH2& a, Int_t arg0, Option_t * arg1)->TH1 * { return a.ShowBackground(arg0, arg1); });
    t.method("ShowBackground", [](TH2* a)->TH1 * { return a->ShowBackground(); });
    t.method("ShowBackground", [](TH2* a, Int_t arg0)->TH1 * { return a->ShowBackground(arg0); });
    t.method("ShowBackground", [](TH2* a, Int_t arg0, Option_t * arg1)->TH1 * { return a->ShowBackground(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TH2::ShowPeaks(Double_t, Option_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TH2::ShowPeaks(Double_t, Option_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:130:21
    t.method("ShowPeaks", [](TH2& a)->Int_t { return a.ShowPeaks(); });
    t.method("ShowPeaks", [](TH2& a, Double_t arg0)->Int_t { return a.ShowPeaks(arg0); });
    t.method("ShowPeaks", [](TH2& a, Double_t arg0, Option_t * arg1)->Int_t { return a.ShowPeaks(arg0, arg1); });
    t.method("ShowPeaks", [](TH2& a, Double_t arg0, Option_t * arg1, Double_t arg2)->Int_t { return a.ShowPeaks(arg0, arg1, arg2); });
    t.method("ShowPeaks", [](TH2* a)->Int_t { return a->ShowPeaks(); });
    t.method("ShowPeaks", [](TH2* a, Double_t arg0)->Int_t { return a->ShowPeaks(arg0); });
    t.method("ShowPeaks", [](TH2* a, Double_t arg0, Option_t * arg1)->Int_t { return a->ShowPeaks(arg0, arg1); });
    t.method("ShowPeaks", [](TH2* a, Double_t arg0, Option_t * arg1, Double_t arg2)->Int_t { return a->ShowPeaks(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TH2::Smooth(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::Smooth(Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH2.h:131:21
    t.method("Smooth", [](TH2& a)->void { a.Smooth(); });
    t.method("Smooth", [](TH2& a, Int_t arg0)->void { a.Smooth(arg0); });
    t.method("Smooth", [](TH2& a, Int_t arg0, Option_t * arg1)->void { a.Smooth(arg0, arg1); });
    t.method("Smooth", [](TH2* a)->void { a->Smooth(); });
    t.method("Smooth", [](TH2* a, Int_t arg0)->void { a->Smooth(arg0); });
    t.method("Smooth", [](TH2* a, Int_t arg0, Option_t * arg1)->void { a->Smooth(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Version_t TH2::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH2::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TH2!Class_Version", []()->Version_t { return TH2::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TH2::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH2::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TH2 const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TH2 const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TH2::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TH2& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TH2* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TH2::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH2::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TH2!DeclFileName", []() { return (std::string)TH2::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH2::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH2::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TH2!ImplFileLine", []()->int { return TH2::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TH2::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH2::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TH2!ImplFileName", []() { return (std::string)TH2::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH2::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH2::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TH2!Class_Name", []() { return (std::string)TH2::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH2::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH2::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TH2!Dictionary", []()->TClass * { return TH2::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TH2::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH2::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TH2!Class", []()->TClass * { return TH2::Class(); });

    DEBUG_MSG("Adding wrapper for void TH2::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH2::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TH2& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TH2* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TH2::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH2::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TH2!DeclFileLine", []()->int { return TH2::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH2>> type_;
};
std::shared_ptr<Wrapper> newJlTH2(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH2(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFormulaFunction> : std::false_type { };
  template<> struct DefaultConstructible<TFormulaFunction> : std::false_type { };
}

// Class generating the wrapper for type TFormulaFunction
// signature to use in the veto file: TFormulaFunction
struct JlTFormulaFunction: public Wrapper {

  JlTFormulaFunction(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFormulaFunction (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:31:7
    jlcxx::TypeWrapper<TFormulaFunction>  t = jlModule.add_type<TFormulaFunction>("TFormulaFunction");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFormulaFunction>>(new jlcxx::TypeWrapper<TFormulaFunction>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for const char * TFormulaFunction::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormulaFunction::GetName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:39:18
    t.method("GetName", [](TFormulaFunction const& a) { return (std::string)a.GetName(); });
    t.method("GetName", [](TFormulaFunction const* a) { return (std::string)a->GetName(); });

    DEBUG_MSG("Adding wrapper for const char * TFormulaFunction::GetBody() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormulaFunction::GetBody()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:40:18
    t.method("GetBody", [](TFormulaFunction const& a) { return (std::string)a.GetBody(); });
    t.method("GetBody", [](TFormulaFunction const* a) { return (std::string)a->GetBody(); });

    DEBUG_MSG("Adding wrapper for Int_t TFormulaFunction::GetNargs() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormulaFunction::GetNargs()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:41:13
    t.method("GetNargs", [](TFormulaFunction const& a)->Int_t { return a.GetNargs(); });
    t.method("GetNargs", [](TFormulaFunction const* a)->Int_t { return a->GetNargs(); });

    DEBUG_MSG("Adding wrapper for Bool_t TFormulaFunction::IsFuncCall() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormulaFunction::IsFuncCall()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:42:13
    t.method("IsFuncCall", [](TFormulaFunction const& a)->Bool_t { return a.IsFuncCall(); });
    t.method("IsFuncCall", [](TFormulaFunction const* a)->Bool_t { return a->IsFuncCall(); });


    DEBUG_MSG("Adding wrapper for void TFormulaFunction::TFormulaFunction(const TString &, const TString &, int) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:44:4
    t.constructor<const TString &, const TString &, int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFormulaFunction::TFormulaFunction(const TString &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:46:4
    t.constructor<const TString &>(/*finalize=*/jlcxx::finalize_policy::yes);
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for Bool_t TFormulaFunction::operator<(const TFormulaFunction &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormulaFunction::operator<(const TFormulaFunction &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:48:11
    t.method("<", [](TFormulaFunction const& a, const TFormulaFunction & arg0)->Bool_t { return a.operator<(arg0); });
    t.method("<", [](TFormulaFunction const* a, const TFormulaFunction & arg0)->Bool_t { return a->operator<(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TFormulaFunction::operator==(const TFormulaFunction &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormulaFunction::operator==(const TFormulaFunction &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:58:11
    t.method("==", [](TFormulaFunction const& a, const TFormulaFunction & arg0)->Bool_t { return a.operator==(arg0); });
    t.method("==", [](TFormulaFunction const* a, const TFormulaFunction & arg0)->Bool_t { return a->operator==(arg0); });

    module_.unset_override_module();

    DEBUG_MSG("Adding fName methods  to provide read access to the field fName (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:34:13
    // signature to use in the veto list: TFormulaFunction::fName
    t.method("fName", [](const TFormulaFunction& a) -> const TString& { return a.fName; });
    t.method("fName", [](TFormulaFunction& a) -> TString& { return a.fName; });
    t.method("fName", [](const TFormulaFunction* a) -> const TString& { return a->fName; });
    t.method("fName", [](TFormulaFunction* a) -> TString& { return a->fName; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:34:13
    // signature to use in the veto list: TFormulaFunction::fName
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fName! methods to provide write access to the field fName (" __HERE__ ")");
    t.method("fName!", [](TFormulaFunction& a, const TString& val) -> TString& { return a.fName = val; });

    DEBUG_MSG("Adding fName! methods to provide write access to the field fName (" __HERE__ ")");
    t.method("fName!", [](TFormulaFunction* a, const TString& val) -> TString& { return a->fName = val; });

    DEBUG_MSG("Adding fBody methods  to provide read access to the field fBody (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:35:13
    // signature to use in the veto list: TFormulaFunction::fBody
    t.method("fBody", [](const TFormulaFunction& a) -> const TString& { return a.fBody; });
    t.method("fBody", [](TFormulaFunction& a) -> TString& { return a.fBody; });
    t.method("fBody", [](const TFormulaFunction* a) -> const TString& { return a->fBody; });
    t.method("fBody", [](TFormulaFunction* a) -> TString& { return a->fBody; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:35:13
    // signature to use in the veto list: TFormulaFunction::fBody
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fBody! methods to provide write access to the field fBody (" __HERE__ ")");
    t.method("fBody!", [](TFormulaFunction& a, const TString& val) -> TString& { return a.fBody = val; });

    DEBUG_MSG("Adding fBody! methods to provide write access to the field fBody (" __HERE__ ")");
    t.method("fBody!", [](TFormulaFunction* a, const TString& val) -> TString& { return a->fBody = val; });

    DEBUG_MSG("Adding fNargs methods  to provide read access to the field fNargs (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:36:13
    // signature to use in the veto list: TFormulaFunction::fNargs
    t.method("fNargs", [](const TFormulaFunction& a) -> Int_t { return a.fNargs; });
    t.method("fNargs", [](TFormulaFunction& a) -> Int_t { return a.fNargs; });
    t.method("fNargs", [](const TFormulaFunction* a) -> Int_t { return a->fNargs; });
    t.method("fNargs", [](TFormulaFunction* a) -> Int_t { return a->fNargs; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:36:13
    // signature to use in the veto list: TFormulaFunction::fNargs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fNargs! methods to provide write access to the field fNargs (" __HERE__ ")");
    t.method("fNargs!", [](TFormulaFunction& a, Int_t val) -> Int_t { return a.fNargs = val; });

    DEBUG_MSG("Adding fNargs! methods to provide write access to the field fNargs (" __HERE__ ")");
    t.method("fNargs!", [](TFormulaFunction* a, Int_t val) -> Int_t { return a->fNargs = val; });

    DEBUG_MSG("Adding fFound methods  to provide read access to the field fFound (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:37:13
    // signature to use in the veto list: TFormulaFunction::fFound
    t.method("fFound", [](const TFormulaFunction& a) -> Bool_t { return a.fFound; });
    t.method("fFound", [](TFormulaFunction& a) -> Bool_t { return a.fFound; });
    t.method("fFound", [](const TFormulaFunction* a) -> Bool_t { return a->fFound; });
    t.method("fFound", [](TFormulaFunction* a) -> Bool_t { return a->fFound; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:37:13
    // signature to use in the veto list: TFormulaFunction::fFound
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fFound! methods to provide write access to the field fFound (" __HERE__ ")");
    t.method("fFound!", [](TFormulaFunction& a, Bool_t val) -> Bool_t { return a.fFound = val; });

    DEBUG_MSG("Adding fFound! methods to provide write access to the field fFound (" __HERE__ ")");
    t.method("fFound!", [](TFormulaFunction* a, Bool_t val) -> Bool_t { return a->fFound = val; });

    DEBUG_MSG("Adding fFuncCall methods  to provide read access to the field fFuncCall (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:38:13
    // signature to use in the veto list: TFormulaFunction::fFuncCall
    t.method("fFuncCall", [](const TFormulaFunction& a) -> Bool_t { return a.fFuncCall; });
    t.method("fFuncCall", [](TFormulaFunction& a) -> Bool_t { return a.fFuncCall; });
    t.method("fFuncCall", [](const TFormulaFunction* a) -> Bool_t { return a->fFuncCall; });
    t.method("fFuncCall", [](TFormulaFunction* a) -> Bool_t { return a->fFuncCall; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:38:13
    // signature to use in the veto list: TFormulaFunction::fFuncCall
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fFuncCall! methods to provide write access to the field fFuncCall (" __HERE__ ")");
    t.method("fFuncCall!", [](TFormulaFunction& a, Bool_t val) -> Bool_t { return a.fFuncCall = val; });

    DEBUG_MSG("Adding fFuncCall! methods to provide write access to the field fFuncCall (" __HERE__ ")");
    t.method("fFuncCall!", [](TFormulaFunction* a, Bool_t val) -> Bool_t { return a->fFuncCall = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFormulaFunction>> type_;
};
std::shared_ptr<Wrapper> newJlTFormulaFunction(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFormulaFunction(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFormulaVariable> : std::false_type { };
  template<> struct DefaultConstructible<TFormulaVariable> : std::false_type { };
}

// Class generating the wrapper for type TFormulaVariable
// signature to use in the veto file: TFormulaVariable
struct JlTFormulaVariable: public Wrapper {

  JlTFormulaVariable(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFormulaVariable (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:64:7
    jlcxx::TypeWrapper<TFormulaVariable>  t = jlModule.add_type<TFormulaVariable>("TFormulaVariable");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFormulaVariable>>(new jlcxx::TypeWrapper<TFormulaVariable>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for const char * TFormulaVariable::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormulaVariable::GetName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:71:17
    t.method("GetName", [](TFormulaVariable const& a) { return (std::string)a.GetName(); });
    t.method("GetName", [](TFormulaVariable const* a) { return (std::string)a->GetName(); });

    DEBUG_MSG("Adding wrapper for Double_t TFormulaVariable::GetInitialValue() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormulaVariable::GetInitialValue()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:72:13
    t.method("GetInitialValue", [](TFormulaVariable const& a)->Double_t { return a.GetInitialValue(); });
    t.method("GetInitialValue", [](TFormulaVariable const* a)->Double_t { return a->GetInitialValue(); });

    DEBUG_MSG("Adding wrapper for Int_t TFormulaVariable::GetArrayPos() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormulaVariable::GetArrayPos()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:73:13
    t.method("GetArrayPos", [](TFormulaVariable const& a)->Int_t { return a.GetArrayPos(); });
    t.method("GetArrayPos", [](TFormulaVariable const* a)->Int_t { return a->GetArrayPos(); });


    DEBUG_MSG("Adding wrapper for void TFormulaVariable::TFormulaVariable(const TString &, Double_t, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:75:4
    t.constructor<const TString &, Double_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for Bool_t TFormulaVariable::operator<(const TFormulaVariable &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormulaVariable::operator<(const TFormulaVariable &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:77:11
    t.method("<", [](TFormulaVariable const& a, const TFormulaVariable & arg0)->Bool_t { return a.operator<(arg0); });
    t.method("<", [](TFormulaVariable const* a, const TFormulaVariable & arg0)->Bool_t { return a->operator<(arg0); });

    module_.unset_override_module();

    DEBUG_MSG("Adding fName methods  to provide read access to the field fName (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:67:12
    // signature to use in the veto list: TFormulaVariable::fName
    t.method("fName", [](const TFormulaVariable& a) -> const TString& { return a.fName; });
    t.method("fName", [](TFormulaVariable& a) -> TString& { return a.fName; });
    t.method("fName", [](const TFormulaVariable* a) -> const TString& { return a->fName; });
    t.method("fName", [](TFormulaVariable* a) -> TString& { return a->fName; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:67:12
    // signature to use in the veto list: TFormulaVariable::fName
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fName! methods to provide write access to the field fName (" __HERE__ ")");
    t.method("fName!", [](TFormulaVariable& a, const TString& val) -> TString& { return a.fName = val; });

    DEBUG_MSG("Adding fName! methods to provide write access to the field fName (" __HERE__ ")");
    t.method("fName!", [](TFormulaVariable* a, const TString& val) -> TString& { return a->fName = val; });

    DEBUG_MSG("Adding fValue methods  to provide read access to the field fValue (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:68:13
    // signature to use in the veto list: TFormulaVariable::fValue
    t.method("fValue", [](const TFormulaVariable& a) -> Double_t { return a.fValue; });
    t.method("fValue", [](TFormulaVariable& a) -> Double_t { return a.fValue; });
    t.method("fValue", [](const TFormulaVariable* a) -> Double_t { return a->fValue; });
    t.method("fValue", [](TFormulaVariable* a) -> Double_t { return a->fValue; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:68:13
    // signature to use in the veto list: TFormulaVariable::fValue
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fValue! methods to provide write access to the field fValue (" __HERE__ ")");
    t.method("fValue!", [](TFormulaVariable& a, Double_t val) -> Double_t { return a.fValue = val; });

    DEBUG_MSG("Adding fValue! methods to provide write access to the field fValue (" __HERE__ ")");
    t.method("fValue!", [](TFormulaVariable* a, Double_t val) -> Double_t { return a->fValue = val; });

    DEBUG_MSG("Adding fArrayPos methods  to provide read access to the field fArrayPos (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:69:10
    // signature to use in the veto list: TFormulaVariable::fArrayPos
    t.method("fArrayPos", [](const TFormulaVariable& a) -> Int_t { return a.fArrayPos; });
    t.method("fArrayPos", [](TFormulaVariable& a) -> Int_t { return a.fArrayPos; });
    t.method("fArrayPos", [](const TFormulaVariable* a) -> Int_t { return a->fArrayPos; });
    t.method("fArrayPos", [](TFormulaVariable* a) -> Int_t { return a->fArrayPos; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:69:10
    // signature to use in the veto list: TFormulaVariable::fArrayPos
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fArrayPos! methods to provide write access to the field fArrayPos (" __HERE__ ")");
    t.method("fArrayPos!", [](TFormulaVariable& a, Int_t val) -> Int_t { return a.fArrayPos = val; });

    DEBUG_MSG("Adding fArrayPos! methods to provide write access to the field fArrayPos (" __HERE__ ")");
    t.method("fArrayPos!", [](TFormulaVariable* a, Int_t val) -> Int_t { return a->fArrayPos = val; });

    DEBUG_MSG("Adding fFound methods  to provide read access to the field fFound (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:70:11
    // signature to use in the veto list: TFormulaVariable::fFound
    t.method("fFound", [](const TFormulaVariable& a) -> Bool_t { return a.fFound; });
    t.method("fFound", [](TFormulaVariable& a) -> Bool_t { return a.fFound; });
    t.method("fFound", [](const TFormulaVariable* a) -> Bool_t { return a->fFound; });
    t.method("fFound", [](TFormulaVariable* a) -> Bool_t { return a->fFound; });
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:70:11
    // signature to use in the veto list: TFormulaVariable::fFound
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fFound! methods to provide write access to the field fFound (" __HERE__ ")");
    t.method("fFound!", [](TFormulaVariable& a, Bool_t val) -> Bool_t { return a.fFound = val; });

    DEBUG_MSG("Adding fFound! methods to provide write access to the field fFound (" __HERE__ ")");
    t.method("fFound!", [](TFormulaVariable* a, Bool_t val) -> Bool_t { return a->fFound = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFormulaVariable>> type_;
};
std::shared_ptr<Wrapper> newJlTFormulaVariable(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFormulaVariable(module));
}
