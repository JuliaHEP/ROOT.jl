// this file was auto-generated by wrapit v1.3.2
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TRandom> : std::false_type { };
  template<> struct DefaultConstructible<TRandom> : std::false_type { };
template<> struct SuperType<TRandom> { typedef TNamed type; };
}

// Class generating the wrapper for type TRandom
// signature to use in the veto file: TRandom
struct JlTRandom: public Wrapper {

  JlTRandom(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TRandom (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:27:7
    jlcxx::TypeWrapper<TRandom>  t = jlModule.add_type<TRandom>("TRandom",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TRandom>>(new jlcxx::TypeWrapper<TRandom>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TRandom::TRandom(UInt_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:33:4
    t.constructor<UInt_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Int_t TRandom::Binomial(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TRandom::Binomial(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:35:22
    t.method("Binomial", static_cast<Int_t (TRandom::*)(Int_t, Double_t) >(&TRandom::Binomial));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::BreitWigner(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::BreitWigner(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:36:22
    t.method("BreitWigner", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::BreitWigner));
    t.method("BreitWigner", [](TRandom& a)->Double_t { return a.BreitWigner(); });
    t.method("BreitWigner", [](TRandom& a, Double_t arg0)->Double_t { return a.BreitWigner(arg0); });
    t.method("BreitWigner", [](TRandom* a)->Double_t { return a->BreitWigner(); });
    t.method("BreitWigner", [](TRandom* a, Double_t arg0)->Double_t { return a->BreitWigner(arg0); });

    DEBUG_MSG("Adding wrapper for void TRandom::Circle(Double_t &, Double_t &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Circle(Double_t &, Double_t &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:37:22
    t.method("Circle", static_cast<void (TRandom::*)(Double_t &, Double_t &, Double_t) >(&TRandom::Circle));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Exp(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Exp(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:38:22
    t.method("Exp", static_cast<Double_t (TRandom::*)(Double_t) >(&TRandom::Exp));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Gaus(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Gaus(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:39:22
    t.method("Gaus", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::Gaus));
    t.method("Gaus", [](TRandom& a)->Double_t { return a.Gaus(); });
    t.method("Gaus", [](TRandom& a, Double_t arg0)->Double_t { return a.Gaus(arg0); });
    t.method("Gaus", [](TRandom* a)->Double_t { return a->Gaus(); });
    t.method("Gaus", [](TRandom* a, Double_t arg0)->Double_t { return a->Gaus(arg0); });

    DEBUG_MSG("Adding wrapper for UInt_t TRandom::GetSeed() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TRandom::GetSeed()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:40:22
    t.method("GetSeed", static_cast<UInt_t (TRandom::*)()  const>(&TRandom::GetSeed));

    DEBUG_MSG("Adding wrapper for UInt_t TRandom::Integer(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TRandom::Integer(UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:41:22
    t.method("Integer", static_cast<UInt_t (TRandom::*)(UInt_t) >(&TRandom::Integer));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Landau(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Landau(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:42:22
    t.method("Landau", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::Landau));
    t.method("Landau", [](TRandom& a)->Double_t { return a.Landau(); });
    t.method("Landau", [](TRandom& a, Double_t arg0)->Double_t { return a.Landau(arg0); });
    t.method("Landau", [](TRandom* a)->Double_t { return a->Landau(); });
    t.method("Landau", [](TRandom* a, Double_t arg0)->Double_t { return a->Landau(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TRandom::Poisson(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TRandom::Poisson(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:43:22
    t.method("Poisson", static_cast<Int_t (TRandom::*)(Double_t) >(&TRandom::Poisson));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::PoissonD(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::PoissonD(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:44:22
    t.method("PoissonD", static_cast<Double_t (TRandom::*)(Double_t) >(&TRandom::PoissonD));

    DEBUG_MSG("Adding wrapper for void TRandom::Rannor(Float_t &, Float_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Rannor(Float_t &, Float_t &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:45:22
    t.method("Rannor", static_cast<void (TRandom::*)(Float_t &, Float_t &) >(&TRandom::Rannor));

    DEBUG_MSG("Adding wrapper for void TRandom::Rannor(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Rannor(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:46:22
    t.method("Rannor", static_cast<void (TRandom::*)(Double_t &, Double_t &) >(&TRandom::Rannor));

    DEBUG_MSG("Adding wrapper for void TRandom::ReadRandom(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::ReadRandom(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:47:22
    t.method("ReadRandom", static_cast<void (TRandom::*)(const char *) >(&TRandom::ReadRandom));

    DEBUG_MSG("Adding wrapper for void TRandom::SetSeed(ULong_t) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::SetSeed(ULong_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:48:22
    t.method("SetSeed", static_cast<void (TRandom::*)(ULong_t) >(&TRandom::SetSeed));
    t.method("SetSeed", [](TRandom& a)->void { a.SetSeed(); });
    t.method("SetSeed", [](TRandom* a)->void { a->SetSeed(); });

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Rndm() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Rndm()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:49:14
    t.method("Rndm", static_cast<Double_t (TRandom::*)() >(&TRandom::Rndm));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Rndm(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Rndm(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:51:22
    t.method("Rndm", static_cast<Double_t (TRandom::*)(Int_t) >(&TRandom::Rndm));

    DEBUG_MSG("Adding wrapper for void TRandom::RndmArray(Int_t, Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::RndmArray(Int_t, Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:52:22
    t.method("RndmArray", static_cast<void (TRandom::*)(Int_t, Float_t *) >(&TRandom::RndmArray));

    DEBUG_MSG("Adding wrapper for void TRandom::RndmArray(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::RndmArray(Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:53:22
    t.method("RndmArray", static_cast<void (TRandom::*)(Int_t, Double_t *) >(&TRandom::RndmArray));

    DEBUG_MSG("Adding wrapper for void TRandom::Sphere(Double_t &, Double_t &, Double_t &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Sphere(Double_t &, Double_t &, Double_t &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:54:22
    t.method("Sphere", static_cast<void (TRandom::*)(Double_t &, Double_t &, Double_t &, Double_t) >(&TRandom::Sphere));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Uniform(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Uniform(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:55:22
    t.method("Uniform", static_cast<Double_t (TRandom::*)(Double_t) >(&TRandom::Uniform));
    t.method("Uniform", [](TRandom& a)->Double_t { return a.Uniform(); });
    t.method("Uniform", [](TRandom* a)->Double_t { return a->Uniform(); });

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Uniform(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Uniform(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:56:22
    t.method("Uniform", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::Uniform));

    DEBUG_MSG("Adding wrapper for void TRandom::WriteRandom(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::WriteRandom(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:57:22
    t.method("WriteRandom", static_cast<void (TRandom::*)(const char *)  const>(&TRandom::WriteRandom));

    DEBUG_MSG("Adding wrapper for Version_t TRandom::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TRandom::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Class_Version", static_cast<Version_t (*)() >(&TRandom::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TRandom::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TRandom::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    t.method("IsA", static_cast<TClass * (TRandom::*)()  const>(&TRandom::IsA));

    DEBUG_MSG("Adding wrapper for void TRandom::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    t.method("StreamerNVirtual", static_cast<void (TRandom::*)(TBuffer &) >(&TRandom::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TRandom::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TRandom::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!DeclFileName", []() { return (std::string)TRandom::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TRandom::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TRandom::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!ImplFileLine", static_cast<int (*)() >(&TRandom::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TRandom::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TRandom::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!ImplFileName", []() { return (std::string)TRandom::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TRandom::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TRandom::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Class_Name", []() { return (std::string)TRandom::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TRandom::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TRandom::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Dictionary", static_cast<TClass * (*)() >(&TRandom::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TRandom::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TRandom::Class()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Class", static_cast<TClass * (*)() >(&TRandom::Class));

    DEBUG_MSG("Adding wrapper for void TRandom::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    t.method("Streamer", static_cast<void (TRandom::*)(TBuffer &) >(&TRandom::Streamer));

    DEBUG_MSG("Adding wrapper for int TRandom::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TRandom::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!DeclFileLine", static_cast<int (*)() >(&TRandom::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TRandom>> type_;
};
std::shared_ptr<Wrapper> newJlTRandom(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTRandom(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFitResultPtr> : std::false_type { };
  template<> struct DefaultConstructible<TFitResultPtr> : std::false_type { };
}

// Class generating the wrapper for type TFitResultPtr
// signature to use in the veto file: TFitResultPtr
struct JlTFitResultPtr: public Wrapper {

  JlTFitResultPtr(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFitResultPtr (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFitResultPtr.h:32:7
    jlcxx::TypeWrapper<TFitResultPtr>  t = jlModule.add_type<TFitResultPtr>("TFitResultPtr");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFitResultPtr>>(new jlcxx::TypeWrapper<TFitResultPtr>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFitResultPtr>> type_;
};
std::shared_ptr<Wrapper> newJlTFitResultPtr(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFitResultPtr(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH1C> : std::false_type { };
  template<> struct DefaultConstructible<TH1C> : std::false_type { };
template<> struct SuperType<TH1C> { typedef TH1 type; };
}

// Class generating the wrapper for type TH1C
// signature to use in the veto file: TH1C
struct JlTH1C: public Wrapper {

  JlTH1C(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH1C (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:454:7
    jlcxx::TypeWrapper<TH1C>  t = jlModule.add_type<TH1C>("TH1C",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH1C>>(new jlcxx::TypeWrapper<TH1C>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const char *, const char *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:458:4
    t.constructor<const char *, const char *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const char *, const char *, Int_t, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:459:4
    t.constructor<const char *, const char *, Int_t, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const char *, const char *, Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:460:4
    t.constructor<const char *, const char *, Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const TH1C &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:461:4
    t.constructor<const TH1C &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TH1C & TH1C::operator=(const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C & TH1C::operator=(const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:462:10
    t.method("assign", static_cast<TH1C & (TH1C::*)(const TH1C &) >(&TH1C::operator=));

    DEBUG_MSG("Adding wrapper for void TH1C::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::AddBinContent(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:465:13
    t.method("AddBinContent", static_cast<void (TH1C::*)(Int_t) >(&TH1C::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1C::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:466:13
    t.method("AddBinContent", static_cast<void (TH1C::*)(Int_t, Double_t) >(&TH1C::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1C::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:467:13
    t.method("Copy", static_cast<void (TH1C::*)(TObject &)  const>(&TH1C::Copy));

    DEBUG_MSG("Adding wrapper for void TH1C::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:468:13
    t.method("Reset", static_cast<void (TH1C::*)(Option_t *) >(&TH1C::Reset));
    t.method("Reset", [](TH1C& a)->void { a.Reset(); });
    t.method("Reset", [](TH1C* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TH1C::SetBinsLength(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::SetBinsLength(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:469:13
    t.method("SetBinsLength", static_cast<void (TH1C::*)(Int_t) >(&TH1C::SetBinsLength));
    t.method("SetBinsLength", [](TH1C& a)->void { a.SetBinsLength(); });
    t.method("SetBinsLength", [](TH1C* a)->void { a->SetBinsLength(); });

    DEBUG_MSG("Adding wrapper for Version_t TH1C::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH1C::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!Class_Version", static_cast<Version_t (*)() >(&TH1C::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TH1C::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1C::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    t.method("IsA", static_cast<TClass * (TH1C::*)()  const>(&TH1C::IsA));

    DEBUG_MSG("Adding wrapper for void TH1C::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    t.method("StreamerNVirtual", static_cast<void (TH1C::*)(TBuffer &) >(&TH1C::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TH1C::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1C::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!DeclFileName", []() { return (std::string)TH1C::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH1C::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1C::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!ImplFileLine", static_cast<int (*)() >(&TH1C::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TH1C::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1C::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!ImplFileName", []() { return (std::string)TH1C::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH1C::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1C::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!Class_Name", []() { return (std::string)TH1C::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1C::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1C::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!Dictionary", static_cast<TClass * (*)() >(&TH1C::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TH1C::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1C::Class()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!Class", static_cast<TClass * (*)() >(&TH1C::Class));

    DEBUG_MSG("Adding wrapper for void TH1C::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    t.method("Streamer", static_cast<void (TH1C::*)(TBuffer &) >(&TH1C::Streamer));

    DEBUG_MSG("Adding wrapper for int TH1C::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1C::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:4
    module_.method("TH1C!DeclFileLine", static_cast<int (*)() >(&TH1C::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH1C>> type_;
};
std::shared_ptr<Wrapper> newJlTH1C(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH1C(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH1S> : std::false_type { };
  template<> struct DefaultConstructible<TH1S> : std::false_type { };
template<> struct SuperType<TH1S> { typedef TH1 type; };
}

// Class generating the wrapper for type TH1S
// signature to use in the veto file: TH1S
struct JlTH1S: public Wrapper {

  JlTH1S(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH1S (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:495:7
    jlcxx::TypeWrapper<TH1S>  t = jlModule.add_type<TH1S>("TH1S",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH1S>>(new jlcxx::TypeWrapper<TH1S>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1S::TH1S(const char *, const char *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:499:4
    t.constructor<const char *, const char *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1S::TH1S(const char *, const char *, Int_t, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:500:4
    t.constructor<const char *, const char *, Int_t, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1S::TH1S(const char *, const char *, Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:501:4
    t.constructor<const char *, const char *, Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1S::TH1S(const TH1S &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:502:4
    t.constructor<const TH1S &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TH1S & TH1S::operator=(const TH1S &) (" __HERE__ ")");
    // signature to use in the veto list: TH1S & TH1S::operator=(const TH1S &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:503:10
    t.method("assign", static_cast<TH1S & (TH1S::*)(const TH1S &) >(&TH1S::operator=));

    DEBUG_MSG("Adding wrapper for void TH1S::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::AddBinContent(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:506:13
    t.method("AddBinContent", static_cast<void (TH1S::*)(Int_t) >(&TH1S::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1S::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:507:13
    t.method("AddBinContent", static_cast<void (TH1S::*)(Int_t, Double_t) >(&TH1S::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1S::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:508:13
    t.method("Copy", static_cast<void (TH1S::*)(TObject &)  const>(&TH1S::Copy));

    DEBUG_MSG("Adding wrapper for void TH1S::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:509:13
    t.method("Reset", static_cast<void (TH1S::*)(Option_t *) >(&TH1S::Reset));
    t.method("Reset", [](TH1S& a)->void { a.Reset(); });
    t.method("Reset", [](TH1S* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TH1S::SetBinsLength(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::SetBinsLength(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:510:13
    t.method("SetBinsLength", static_cast<void (TH1S::*)(Int_t) >(&TH1S::SetBinsLength));
    t.method("SetBinsLength", [](TH1S& a)->void { a.SetBinsLength(); });
    t.method("SetBinsLength", [](TH1S* a)->void { a->SetBinsLength(); });

    DEBUG_MSG("Adding wrapper for Version_t TH1S::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH1S::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!Class_Version", static_cast<Version_t (*)() >(&TH1S::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TH1S::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1S::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    t.method("IsA", static_cast<TClass * (TH1S::*)()  const>(&TH1S::IsA));

    DEBUG_MSG("Adding wrapper for void TH1S::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    t.method("StreamerNVirtual", static_cast<void (TH1S::*)(TBuffer &) >(&TH1S::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TH1S::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1S::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!DeclFileName", []() { return (std::string)TH1S::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH1S::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1S::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!ImplFileLine", static_cast<int (*)() >(&TH1S::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TH1S::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1S::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!ImplFileName", []() { return (std::string)TH1S::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH1S::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1S::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!Class_Name", []() { return (std::string)TH1S::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1S::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1S::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!Dictionary", static_cast<TClass * (*)() >(&TH1S::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TH1S::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1S::Class()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!Class", static_cast<TClass * (*)() >(&TH1S::Class));

    DEBUG_MSG("Adding wrapper for void TH1S::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1S::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    t.method("Streamer", static_cast<void (TH1S::*)(TBuffer &) >(&TH1S::Streamer));

    DEBUG_MSG("Adding wrapper for int TH1S::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1S::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:512:4
    module_.method("TH1S!DeclFileLine", static_cast<int (*)() >(&TH1S::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH1S>> type_;
};
std::shared_ptr<Wrapper> newJlTH1S(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH1S(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH1I> : std::false_type { };
  template<> struct DefaultConstructible<TH1I> : std::false_type { };
template<> struct SuperType<TH1I> { typedef TH1 type; };
}

// Class generating the wrapper for type TH1I
// signature to use in the veto file: TH1I
struct JlTH1I: public Wrapper {

  JlTH1I(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH1I (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:536:7
    jlcxx::TypeWrapper<TH1I>  t = jlModule.add_type<TH1I>("TH1I",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH1I>>(new jlcxx::TypeWrapper<TH1I>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1I::TH1I(const char *, const char *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:540:4
    t.constructor<const char *, const char *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1I::TH1I(const char *, const char *, Int_t, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:541:4
    t.constructor<const char *, const char *, Int_t, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1I::TH1I(const char *, const char *, Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:542:4
    t.constructor<const char *, const char *, Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1I::TH1I(const TH1I &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:543:4
    t.constructor<const TH1I &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TH1I & TH1I::operator=(const TH1I &) (" __HERE__ ")");
    // signature to use in the veto list: TH1I & TH1I::operator=(const TH1I &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:544:10
    t.method("assign", static_cast<TH1I & (TH1I::*)(const TH1I &) >(&TH1I::operator=));

    DEBUG_MSG("Adding wrapper for void TH1I::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::AddBinContent(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:547:13
    t.method("AddBinContent", static_cast<void (TH1I::*)(Int_t) >(&TH1I::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1I::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:548:13
    t.method("AddBinContent", static_cast<void (TH1I::*)(Int_t, Double_t) >(&TH1I::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1I::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:549:13
    t.method("Copy", static_cast<void (TH1I::*)(TObject &)  const>(&TH1I::Copy));

    DEBUG_MSG("Adding wrapper for void TH1I::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:550:13
    t.method("Reset", static_cast<void (TH1I::*)(Option_t *) >(&TH1I::Reset));
    t.method("Reset", [](TH1I& a)->void { a.Reset(); });
    t.method("Reset", [](TH1I* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TH1I::SetBinsLength(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::SetBinsLength(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:551:13
    t.method("SetBinsLength", static_cast<void (TH1I::*)(Int_t) >(&TH1I::SetBinsLength));
    t.method("SetBinsLength", [](TH1I& a)->void { a.SetBinsLength(); });
    t.method("SetBinsLength", [](TH1I* a)->void { a->SetBinsLength(); });

    DEBUG_MSG("Adding wrapper for Version_t TH1I::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH1I::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!Class_Version", static_cast<Version_t (*)() >(&TH1I::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TH1I::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1I::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    t.method("IsA", static_cast<TClass * (TH1I::*)()  const>(&TH1I::IsA));

    DEBUG_MSG("Adding wrapper for void TH1I::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    t.method("StreamerNVirtual", static_cast<void (TH1I::*)(TBuffer &) >(&TH1I::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TH1I::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1I::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!DeclFileName", []() { return (std::string)TH1I::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH1I::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1I::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!ImplFileLine", static_cast<int (*)() >(&TH1I::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TH1I::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1I::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!ImplFileName", []() { return (std::string)TH1I::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH1I::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1I::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!Class_Name", []() { return (std::string)TH1I::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1I::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1I::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!Dictionary", static_cast<TClass * (*)() >(&TH1I::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TH1I::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1I::Class()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!Class", static_cast<TClass * (*)() >(&TH1I::Class));

    DEBUG_MSG("Adding wrapper for void TH1I::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1I::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    t.method("Streamer", static_cast<void (TH1I::*)(TBuffer &) >(&TH1I::Streamer));

    DEBUG_MSG("Adding wrapper for int TH1I::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1I::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:553:4
    module_.method("TH1I!DeclFileLine", static_cast<int (*)() >(&TH1I::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH1I>> type_;
};
std::shared_ptr<Wrapper> newJlTH1I(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH1I(module));
}
