// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternCylR> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternCylR> : std::false_type { };
template<> struct SuperType<TGeoPatternCylR> { typedef TGeoPatternFinder type; };
}

// Class generating the wrapper for type TGeoPatternCylR
// signature to use in the veto file: TGeoPatternCylR
struct JlTGeoPatternCylR: public Wrapper {

  JlTGeoPatternCylR(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternCylR (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:350:7
    jlcxx::TypeWrapper<TGeoPatternCylR>  t = jlModule.add_type<TGeoPatternCylR>("TGeoPatternCylR",
      jlcxx::julia_base_type<TGeoPatternFinder>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternCylR>>(new jlcxx::TypeWrapper<TGeoPatternCylR>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::TGeoPatternCylR(TGeoVolume *, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:354:4
    t.constructor<TGeoVolume *, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::TGeoPatternCylR(TGeoVolume *, Int_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:355:4
    t.constructor<TGeoVolume *, Int_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::TGeoPatternCylR(TGeoVolume *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:356:4
    t.constructor<TGeoVolume *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::TGeoPatternCylR(const TGeoPatternCylR &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:357:4
    t.constructor<const TGeoPatternCylR &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoPatternCylR & TGeoPatternCylR::operator=(const TGeoPatternCylR &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternCylR & TGeoPatternCylR::operator=(const TGeoPatternCylR &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:358:21
    t.method("assign", static_cast<TGeoPatternCylR & (TGeoPatternCylR::*)(const TGeoPatternCylR &) >(&TGeoPatternCylR::operator=));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternCylR::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternCylR::CreateMatrix()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:362:16
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternCylR::*)()  const>(&TGeoPatternCylR::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylR::cd(Int_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:363:9
    t.method("cd", static_cast<void (TGeoPatternCylR::*)(Int_t) >(&TGeoPatternCylR::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternCylR::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternCylR::FindNode(Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:364:14
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternCylR::*)(Double_t *, const Double_t *) >(&TGeoPatternCylR::FindNode));
    t.method("FindNode", [](TGeoPatternCylR& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternCylR* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternCylR::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternCylR::GetDivAxis()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:365:10
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternCylR::*)() >(&TGeoPatternCylR::GetDivAxis));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternCylR::IsOnBoundary(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternCylR::IsOnBoundary(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:366:11
    t.method("IsOnBoundary", static_cast<Bool_t (TGeoPatternCylR::*)(const Double_t *)  const>(&TGeoPatternCylR::IsOnBoundary));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternCylR::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternCylR::MakeCopy(Bool_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:368:23
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternCylR::*)(Bool_t) >(&TGeoPatternCylR::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternCylR& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternCylR* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylR::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:370:9
    t.method("UpdateMatrix", static_cast<void (TGeoPatternCylR::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternCylR::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternCylR::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternCylR::Class_Version()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternCylR::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternCylR::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternCylR::IsA()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    t.method("IsA", static_cast<TClass * (TGeoPatternCylR::*)()  const>(&TGeoPatternCylR::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylR::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternCylR::*)(TBuffer &) >(&TGeoPatternCylR::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternCylR::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternCylR::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!DeclFileName", []() { return (std::string)TGeoPatternCylR::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternCylR::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternCylR::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!ImplFileLine", static_cast<int (*)() >(&TGeoPatternCylR::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternCylR::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternCylR::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!ImplFileName", []() { return (std::string)TGeoPatternCylR::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternCylR::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternCylR::Class_Name()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!Class_Name", []() { return (std::string)TGeoPatternCylR::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternCylR::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternCylR::Dictionary()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternCylR::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternCylR::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternCylR::Class()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!Class", static_cast<TClass * (*)() >(&TGeoPatternCylR::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylR::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylR::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    t.method("Streamer", static_cast<void (TGeoPatternCylR::*)(TBuffer &) >(&TGeoPatternCylR::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternCylR::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternCylR::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:372:4
    module_.method("TGeoPatternCylR!DeclFileLine", static_cast<int (*)() >(&TGeoPatternCylR::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternCylR>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternCylR(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternCylR(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternCylPhi> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternCylPhi> : std::false_type { };
template<> struct SuperType<TGeoPatternCylPhi> { typedef TGeoPatternFinder type; };
}

// Class generating the wrapper for type TGeoPatternCylPhi
// signature to use in the veto file: TGeoPatternCylPhi
struct JlTGeoPatternCylPhi: public Wrapper {

  JlTGeoPatternCylPhi(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternCylPhi (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:381:7
    jlcxx::TypeWrapper<TGeoPatternCylPhi>  t = jlModule.add_type<TGeoPatternCylPhi>("TGeoPatternCylPhi",
      jlcxx::julia_base_type<TGeoPatternFinder>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternCylPhi>>(new jlcxx::TypeWrapper<TGeoPatternCylPhi>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::TGeoPatternCylPhi(TGeoVolume *, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:404:4
    t.constructor<TGeoVolume *, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::TGeoPatternCylPhi(TGeoVolume *, Int_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:405:4
    t.constructor<TGeoVolume *, Int_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::TGeoPatternCylPhi(TGeoVolume *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:406:4
    t.constructor<TGeoVolume *, Int_t, Double_t, Double_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternCylPhi::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternCylPhi::CreateMatrix()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:410:16
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternCylPhi::*)()  const>(&TGeoPatternCylPhi::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylPhi::cd(Int_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:411:9
    t.method("cd", static_cast<void (TGeoPatternCylPhi::*)(Int_t) >(&TGeoPatternCylPhi::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternCylPhi::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternCylPhi::FindNode(Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:412:14
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternCylPhi::*)(Double_t *, const Double_t *) >(&TGeoPatternCylPhi::FindNode));
    t.method("FindNode", [](TGeoPatternCylPhi& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternCylPhi* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternCylPhi::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternCylPhi::GetDivAxis()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:413:10
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternCylPhi::*)() >(&TGeoPatternCylPhi::GetDivAxis));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternCylPhi::IsOnBoundary(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternCylPhi::IsOnBoundary(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:414:11
    t.method("IsOnBoundary", static_cast<Bool_t (TGeoPatternCylPhi::*)(const Double_t *)  const>(&TGeoPatternCylPhi::IsOnBoundary));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternCylPhi::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternCylPhi::MakeCopy(Bool_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:416:23
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternCylPhi::*)(Bool_t) >(&TGeoPatternCylPhi::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternCylPhi& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternCylPhi* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylPhi::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:418:9
    t.method("UpdateMatrix", static_cast<void (TGeoPatternCylPhi::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternCylPhi::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternCylPhi::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternCylPhi::Class_Version()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternCylPhi::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternCylPhi::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternCylPhi::IsA()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    t.method("IsA", static_cast<TClass * (TGeoPatternCylPhi::*)()  const>(&TGeoPatternCylPhi::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylPhi::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternCylPhi::*)(TBuffer &) >(&TGeoPatternCylPhi::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternCylPhi::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternCylPhi::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!DeclFileName", []() { return (std::string)TGeoPatternCylPhi::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternCylPhi::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternCylPhi::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!ImplFileLine", static_cast<int (*)() >(&TGeoPatternCylPhi::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternCylPhi::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternCylPhi::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!ImplFileName", []() { return (std::string)TGeoPatternCylPhi::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternCylPhi::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternCylPhi::Class_Name()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!Class_Name", []() { return (std::string)TGeoPatternCylPhi::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternCylPhi::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternCylPhi::Dictionary()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternCylPhi::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternCylPhi::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternCylPhi::Class()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!Class", static_cast<TClass * (*)() >(&TGeoPatternCylPhi::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternCylPhi::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternCylPhi::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    t.method("Streamer", static_cast<void (TGeoPatternCylPhi::*)(TBuffer &) >(&TGeoPatternCylPhi::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternCylPhi::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternCylPhi::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:420:4
    module_.method("TGeoPatternCylPhi!DeclFileLine", static_cast<int (*)() >(&TGeoPatternCylPhi::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternCylPhi>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternCylPhi(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternCylPhi(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternSphR> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternSphR> : std::false_type { };
template<> struct SuperType<TGeoPatternSphR> { typedef TGeoPatternFinder type; };
}

// Class generating the wrapper for type TGeoPatternSphR
// signature to use in the veto file: TGeoPatternSphR
struct JlTGeoPatternSphR: public Wrapper {

  JlTGeoPatternSphR(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternSphR (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:429:7
    jlcxx::TypeWrapper<TGeoPatternSphR>  t = jlModule.add_type<TGeoPatternSphR>("TGeoPatternSphR",
      jlcxx::julia_base_type<TGeoPatternFinder>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternSphR>>(new jlcxx::TypeWrapper<TGeoPatternSphR>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::TGeoPatternSphR(TGeoVolume *, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:433:4
    t.constructor<TGeoVolume *, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::TGeoPatternSphR(TGeoVolume *, Int_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:434:4
    t.constructor<TGeoVolume *, Int_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::TGeoPatternSphR(TGeoVolume *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:435:4
    t.constructor<TGeoVolume *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::TGeoPatternSphR(const TGeoPatternSphR &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:436:4
    t.constructor<const TGeoPatternSphR &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoPatternSphR & TGeoPatternSphR::operator=(const TGeoPatternSphR &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternSphR & TGeoPatternSphR::operator=(const TGeoPatternSphR &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:437:21
    t.method("assign", static_cast<TGeoPatternSphR & (TGeoPatternSphR::*)(const TGeoPatternSphR &) >(&TGeoPatternSphR::operator=));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternSphR::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternSphR::CreateMatrix()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:441:16
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternSphR::*)()  const>(&TGeoPatternSphR::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphR::cd(Int_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:442:9
    t.method("cd", static_cast<void (TGeoPatternSphR::*)(Int_t) >(&TGeoPatternSphR::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternSphR::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternSphR::FindNode(Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:443:14
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternSphR::*)(Double_t *, const Double_t *) >(&TGeoPatternSphR::FindNode));
    t.method("FindNode", [](TGeoPatternSphR& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternSphR* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternSphR::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternSphR::GetDivAxis()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:444:10
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternSphR::*)() >(&TGeoPatternSphR::GetDivAxis));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternSphR::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternSphR::MakeCopy(Bool_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:446:23
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternSphR::*)(Bool_t) >(&TGeoPatternSphR::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternSphR& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternSphR* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphR::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:448:9
    t.method("UpdateMatrix", static_cast<void (TGeoPatternSphR::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternSphR::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternSphR::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternSphR::Class_Version()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternSphR::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphR::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphR::IsA()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    t.method("IsA", static_cast<TClass * (TGeoPatternSphR::*)()  const>(&TGeoPatternSphR::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphR::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternSphR::*)(TBuffer &) >(&TGeoPatternSphR::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphR::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphR::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!DeclFileName", []() { return (std::string)TGeoPatternSphR::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternSphR::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternSphR::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!ImplFileLine", static_cast<int (*)() >(&TGeoPatternSphR::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphR::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphR::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!ImplFileName", []() { return (std::string)TGeoPatternSphR::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphR::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphR::Class_Name()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!Class_Name", []() { return (std::string)TGeoPatternSphR::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphR::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphR::Dictionary()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternSphR::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphR::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphR::Class()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!Class", static_cast<TClass * (*)() >(&TGeoPatternSphR::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphR::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphR::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    t.method("Streamer", static_cast<void (TGeoPatternSphR::*)(TBuffer &) >(&TGeoPatternSphR::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternSphR::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternSphR::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:450:4
    module_.method("TGeoPatternSphR!DeclFileLine", static_cast<int (*)() >(&TGeoPatternSphR::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternSphR>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternSphR(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternSphR(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternSphTheta> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternSphTheta> : std::false_type { };
template<> struct SuperType<TGeoPatternSphTheta> { typedef TGeoPatternFinder type; };
}

// Class generating the wrapper for type TGeoPatternSphTheta
// signature to use in the veto file: TGeoPatternSphTheta
struct JlTGeoPatternSphTheta: public Wrapper {

  JlTGeoPatternSphTheta(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternSphTheta (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:459:7
    jlcxx::TypeWrapper<TGeoPatternSphTheta>  t = jlModule.add_type<TGeoPatternSphTheta>("TGeoPatternSphTheta",
      jlcxx::julia_base_type<TGeoPatternFinder>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternSphTheta>>(new jlcxx::TypeWrapper<TGeoPatternSphTheta>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::TGeoPatternSphTheta(TGeoVolume *, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:463:4
    t.constructor<TGeoVolume *, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::TGeoPatternSphTheta(TGeoVolume *, Int_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:464:4
    t.constructor<TGeoVolume *, Int_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::TGeoPatternSphTheta(TGeoVolume *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:465:4
    t.constructor<TGeoVolume *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::TGeoPatternSphTheta(const TGeoPatternSphTheta &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:466:4
    t.constructor<const TGeoPatternSphTheta &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoPatternSphTheta & TGeoPatternSphTheta::operator=(const TGeoPatternSphTheta &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternSphTheta & TGeoPatternSphTheta::operator=(const TGeoPatternSphTheta &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:467:25
    t.method("assign", static_cast<TGeoPatternSphTheta & (TGeoPatternSphTheta::*)(const TGeoPatternSphTheta &) >(&TGeoPatternSphTheta::operator=));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternSphTheta::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternSphTheta::CreateMatrix()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:471:16
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternSphTheta::*)()  const>(&TGeoPatternSphTheta::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphTheta::cd(Int_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:472:9
    t.method("cd", static_cast<void (TGeoPatternSphTheta::*)(Int_t) >(&TGeoPatternSphTheta::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternSphTheta::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternSphTheta::FindNode(Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:473:14
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternSphTheta::*)(Double_t *, const Double_t *) >(&TGeoPatternSphTheta::FindNode));
    t.method("FindNode", [](TGeoPatternSphTheta& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternSphTheta* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternSphTheta::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternSphTheta::GetDivAxis()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:474:10
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternSphTheta::*)() >(&TGeoPatternSphTheta::GetDivAxis));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternSphTheta::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternSphTheta::MakeCopy(Bool_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:476:23
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternSphTheta::*)(Bool_t) >(&TGeoPatternSphTheta::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternSphTheta& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternSphTheta* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphTheta::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:478:9
    t.method("UpdateMatrix", static_cast<void (TGeoPatternSphTheta::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternSphTheta::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternSphTheta::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternSphTheta::Class_Version()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternSphTheta::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphTheta::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphTheta::IsA()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    t.method("IsA", static_cast<TClass * (TGeoPatternSphTheta::*)()  const>(&TGeoPatternSphTheta::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphTheta::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternSphTheta::*)(TBuffer &) >(&TGeoPatternSphTheta::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphTheta::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphTheta::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!DeclFileName", []() { return (std::string)TGeoPatternSphTheta::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternSphTheta::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternSphTheta::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!ImplFileLine", static_cast<int (*)() >(&TGeoPatternSphTheta::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphTheta::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphTheta::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!ImplFileName", []() { return (std::string)TGeoPatternSphTheta::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphTheta::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphTheta::Class_Name()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!Class_Name", []() { return (std::string)TGeoPatternSphTheta::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphTheta::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphTheta::Dictionary()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternSphTheta::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphTheta::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphTheta::Class()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!Class", static_cast<TClass * (*)() >(&TGeoPatternSphTheta::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphTheta::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphTheta::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    t.method("Streamer", static_cast<void (TGeoPatternSphTheta::*)(TBuffer &) >(&TGeoPatternSphTheta::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternSphTheta::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternSphTheta::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:480:4
    module_.method("TGeoPatternSphTheta!DeclFileLine", static_cast<int (*)() >(&TGeoPatternSphTheta::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternSphTheta>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternSphTheta(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternSphTheta(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternSphPhi> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternSphPhi> : std::false_type { };
template<> struct SuperType<TGeoPatternSphPhi> { typedef TGeoPatternFinder type; };
}

// Class generating the wrapper for type TGeoPatternSphPhi
// signature to use in the veto file: TGeoPatternSphPhi
struct JlTGeoPatternSphPhi: public Wrapper {

  JlTGeoPatternSphPhi(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternSphPhi (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:489:7
    jlcxx::TypeWrapper<TGeoPatternSphPhi>  t = jlModule.add_type<TGeoPatternSphPhi>("TGeoPatternSphPhi",
      jlcxx::julia_base_type<TGeoPatternFinder>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternSphPhi>>(new jlcxx::TypeWrapper<TGeoPatternSphPhi>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::TGeoPatternSphPhi(TGeoVolume *, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:501:4
    t.constructor<TGeoVolume *, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::TGeoPatternSphPhi(TGeoVolume *, Int_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:502:4
    t.constructor<TGeoVolume *, Int_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::TGeoPatternSphPhi(TGeoVolume *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:503:4
    t.constructor<TGeoVolume *, Int_t, Double_t, Double_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternSphPhi::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternSphPhi::CreateMatrix()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:507:16
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternSphPhi::*)()  const>(&TGeoPatternSphPhi::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphPhi::cd(Int_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:508:9
    t.method("cd", static_cast<void (TGeoPatternSphPhi::*)(Int_t) >(&TGeoPatternSphPhi::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternSphPhi::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternSphPhi::FindNode(Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:509:14
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternSphPhi::*)(Double_t *, const Double_t *) >(&TGeoPatternSphPhi::FindNode));
    t.method("FindNode", [](TGeoPatternSphPhi& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternSphPhi* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternSphPhi::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternSphPhi::GetDivAxis()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:510:10
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternSphPhi::*)() >(&TGeoPatternSphPhi::GetDivAxis));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternSphPhi::IsOnBoundary(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternSphPhi::IsOnBoundary(const Double_t *)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:511:11
    t.method("IsOnBoundary", static_cast<Bool_t (TGeoPatternSphPhi::*)(const Double_t *)  const>(&TGeoPatternSphPhi::IsOnBoundary));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternSphPhi::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternSphPhi::MakeCopy(Bool_t)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:513:23
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternSphPhi::*)(Bool_t) >(&TGeoPatternSphPhi::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternSphPhi& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternSphPhi* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphPhi::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:515:9
    t.method("UpdateMatrix", static_cast<void (TGeoPatternSphPhi::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternSphPhi::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternSphPhi::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternSphPhi::Class_Version()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternSphPhi::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphPhi::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphPhi::IsA()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    t.method("IsA", static_cast<TClass * (TGeoPatternSphPhi::*)()  const>(&TGeoPatternSphPhi::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphPhi::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternSphPhi::*)(TBuffer &) >(&TGeoPatternSphPhi::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphPhi::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphPhi::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!DeclFileName", []() { return (std::string)TGeoPatternSphPhi::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternSphPhi::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternSphPhi::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!ImplFileLine", static_cast<int (*)() >(&TGeoPatternSphPhi::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphPhi::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphPhi::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!ImplFileName", []() { return (std::string)TGeoPatternSphPhi::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternSphPhi::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternSphPhi::Class_Name()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!Class_Name", []() { return (std::string)TGeoPatternSphPhi::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphPhi::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphPhi::Dictionary()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternSphPhi::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternSphPhi::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternSphPhi::Class()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!Class", static_cast<TClass * (*)() >(&TGeoPatternSphPhi::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternSphPhi::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternSphPhi::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    t.method("Streamer", static_cast<void (TGeoPatternSphPhi::*)(TBuffer &) >(&TGeoPatternSphPhi::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternSphPhi::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternSphPhi::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoPatternFinder.h:517:4
    module_.method("TGeoPatternSphPhi!DeclFileLine", static_cast<int (*)() >(&TGeoPatternSphPhi::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternSphPhi>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternSphPhi(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternSphPhi(module));
}
