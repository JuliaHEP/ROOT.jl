// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoGlobalMagField> : std::false_type { };
  template<> struct DefaultConstructible<TGeoGlobalMagField> : std::false_type { };
template<> struct SuperType<TGeoGlobalMagField> { typedef TObject type; };
}

// Class generating the wrapper for type TGeoGlobalMagField
// signature to use in the veto file: TGeoGlobalMagField
struct JlTGeoGlobalMagField: public Wrapper {

  JlTGeoGlobalMagField(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoGlobalMagField (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:18:7
    jlcxx::TypeWrapper<TGeoGlobalMagField>  t = jlModule.add_type<TGeoGlobalMagField>("TGeoGlobalMagField",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoGlobalMagField>>(new jlcxx::TypeWrapper<TGeoGlobalMagField>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TVirtualMagField * TGeoGlobalMagField::GetField() (" __HERE__ ")");
    // signature to use in the veto list: TVirtualMagField * TGeoGlobalMagField::GetField()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:34:22
    t.method("GetField", static_cast<TVirtualMagField * (TGeoGlobalMagField::*)()  const>(&TGeoGlobalMagField::GetField));

    DEBUG_MSG("Adding wrapper for void TGeoGlobalMagField::SetField(TVirtualMagField *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGlobalMagField::SetField(TVirtualMagField *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:35:9
    t.method("SetField", static_cast<void (TGeoGlobalMagField::*)(TVirtualMagField *) >(&TGeoGlobalMagField::SetField));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoGlobalMagField::IsLocked() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoGlobalMagField::IsLocked()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:36:11
    t.method("IsLocked", static_cast<Bool_t (TGeoGlobalMagField::*)() >(&TGeoGlobalMagField::IsLocked));

    DEBUG_MSG("Adding wrapper for void TGeoGlobalMagField::Lock() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGlobalMagField::Lock()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:37:9
    t.method("Lock", static_cast<void (TGeoGlobalMagField::*)() >(&TGeoGlobalMagField::Lock));

    DEBUG_MSG("Adding wrapper for TGeoGlobalMagField * TGeoGlobalMagField::Instance() (" __HERE__ ")");
    // signature to use in the veto list: TGeoGlobalMagField * TGeoGlobalMagField::Instance()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:40:31
    module_.method("TGeoGlobalMagField!Instance", static_cast<TGeoGlobalMagField * (*)() >(&TGeoGlobalMagField::Instance));

    DEBUG_MSG("Adding wrapper for TGeoGlobalMagField * TGeoGlobalMagField::GetInstance() (" __HERE__ ")");
    // signature to use in the veto list: TGeoGlobalMagField * TGeoGlobalMagField::GetInstance()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:41:31
    module_.method("TGeoGlobalMagField!GetInstance", static_cast<TGeoGlobalMagField * (*)() >(&TGeoGlobalMagField::GetInstance));

    DEBUG_MSG("Adding wrapper for void TGeoGlobalMagField::Field(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGlobalMagField::Field(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:44:9
    t.method("Field", static_cast<void (TGeoGlobalMagField::*)(const Double_t *, Double_t *) >(&TGeoGlobalMagField::Field));

    DEBUG_MSG("Adding wrapper for Version_t TGeoGlobalMagField::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoGlobalMagField::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!Class_Version", static_cast<Version_t (*)() >(&TGeoGlobalMagField::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoGlobalMagField::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoGlobalMagField::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    t.method("IsA", static_cast<TClass * (TGeoGlobalMagField::*)()  const>(&TGeoGlobalMagField::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoGlobalMagField::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGlobalMagField::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    t.method("StreamerNVirtual", static_cast<void (TGeoGlobalMagField::*)(TBuffer &) >(&TGeoGlobalMagField::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoGlobalMagField::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoGlobalMagField::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!DeclFileName", []() { return (std::string)TGeoGlobalMagField::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoGlobalMagField::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoGlobalMagField::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!ImplFileLine", static_cast<int (*)() >(&TGeoGlobalMagField::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoGlobalMagField::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoGlobalMagField::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!ImplFileName", []() { return (std::string)TGeoGlobalMagField::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoGlobalMagField::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoGlobalMagField::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!Class_Name", []() { return (std::string)TGeoGlobalMagField::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoGlobalMagField::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoGlobalMagField::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!Dictionary", static_cast<TClass * (*)() >(&TGeoGlobalMagField::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoGlobalMagField::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoGlobalMagField::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!Class", static_cast<TClass * (*)() >(&TGeoGlobalMagField::Class));

    DEBUG_MSG("Adding wrapper for void TGeoGlobalMagField::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGlobalMagField::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    t.method("Streamer", static_cast<void (TGeoGlobalMagField::*)(TBuffer &) >(&TGeoGlobalMagField::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoGlobalMagField::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoGlobalMagField::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoGlobalMagField.h:50:4
    module_.method("TGeoGlobalMagField!DeclFileLine", static_cast<int (*)() >(&TGeoGlobalMagField::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoGlobalMagField>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoGlobalMagField(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoGlobalMagField(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoHalfSpace> : std::false_type { };
  template<> struct DefaultConstructible<TGeoHalfSpace> : std::false_type { };
template<> struct SuperType<TGeoHalfSpace> { typedef TGeoBBox type; };
}

// Class generating the wrapper for type TGeoHalfSpace
// signature to use in the veto file: TGeoHalfSpace
struct JlTGeoHalfSpace: public Wrapper {

  JlTGeoHalfSpace(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoHalfSpace (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:17:7
    jlcxx::TypeWrapper<TGeoHalfSpace>  t = jlModule.add_type<TGeoHalfSpace>("TGeoHalfSpace",
      jlcxx::julia_base_type<TGeoBBox>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoHalfSpace>>(new jlcxx::TypeWrapper<TGeoHalfSpace>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::TGeoHalfSpace(const char *, Double_t *, Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:28:4
    t.constructor<const char *, Double_t *, Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::TGeoHalfSpace(Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:29:4
    t.constructor<Double_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoHalfSpace::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHalfSpace::Capacity()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:33:13
    t.method("Capacity", static_cast<Double_t (TGeoHalfSpace::*)()  const>(&TGeoHalfSpace::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::ComputeBBox()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:34:9
    t.method("ComputeBBox", static_cast<void (TGeoHalfSpace::*)() >(&TGeoHalfSpace::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:35:9
    t.method("ComputeNormal", static_cast<void (TGeoHalfSpace::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoHalfSpace::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:36:9
    t.method("ComputeNormal_v", static_cast<void (TGeoHalfSpace::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoHalfSpace::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHalfSpace::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHalfSpace::Contains(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:37:11
    t.method("Contains", static_cast<Bool_t (TGeoHalfSpace::*)(const Double_t *)  const>(&TGeoHalfSpace::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:38:9
    t.method("Contains_v", static_cast<void (TGeoHalfSpace::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoHalfSpace::Contains_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoHalfSpace::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoHalfSpace::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:39:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoHalfSpace::*)(Int_t, Int_t) >(&TGeoHalfSpace::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHalfSpace::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHalfSpace::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:40:13
    t.method("DistFromInside", static_cast<Double_t (TGeoHalfSpace::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoHalfSpace::DistFromInside));
    t.method("DistFromInside", [](TGeoHalfSpace const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoHalfSpace const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoHalfSpace const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoHalfSpace const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoHalfSpace const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoHalfSpace const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:42:9
    t.method("DistFromInside_v", static_cast<void (TGeoHalfSpace::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoHalfSpace::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHalfSpace::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHalfSpace::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:44:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoHalfSpace::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoHalfSpace::DistFromOutside));
    t.method("DistFromOutside", [](TGeoHalfSpace const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoHalfSpace const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoHalfSpace const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoHalfSpace const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoHalfSpace const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoHalfSpace const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:46:9
    t.method("DistFromOutside_v", static_cast<void (TGeoHalfSpace::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoHalfSpace::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoHalfSpace::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoHalfSpace::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:49:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoHalfSpace::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoHalfSpace::Divide));

    DEBUG_MSG("Adding wrapper for Double_t * TGeoHalfSpace::GetPoint() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGeoHalfSpace::GetPoint()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:50:22
    t.method("GetPoint", static_cast<Double_t * (TGeoHalfSpace::*)() >(&TGeoHalfSpace::GetPoint));

    DEBUG_MSG("Adding wrapper for Double_t * TGeoHalfSpace::GetNorm() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGeoHalfSpace::GetNorm()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:51:22
    t.method("GetNorm", static_cast<Double_t * (TGeoHalfSpace::*)() >(&TGeoHalfSpace::GetNorm));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::GetBoundingCylinder(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::GetBoundingCylinder(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:52:9
    t.method("GetBoundingCylinder", static_cast<void (TGeoHalfSpace::*)(Double_t *)  const>(&TGeoHalfSpace::GetBoundingCylinder));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoHalfSpace::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoHalfSpace::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:53:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoHalfSpace::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoHalfSpace::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:54:9
    t.method("GetMeshNumbers", static_cast<void (TGeoHalfSpace::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoHalfSpace::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoHalfSpace::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoHalfSpace::GetNmeshVertices()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:55:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoHalfSpace::*)()  const>(&TGeoHalfSpace::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::InspectShape()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:56:9
    t.method("InspectShape", static_cast<void (TGeoHalfSpace::*)()  const>(&TGeoHalfSpace::InspectShape));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHalfSpace::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHalfSpace::IsCylType()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:57:11
    t.method("IsCylType", static_cast<Bool_t (TGeoHalfSpace::*)()  const>(&TGeoHalfSpace::IsCylType));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHalfSpace::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHalfSpace::Safety(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:58:13
    t.method("Safety", static_cast<Double_t (TGeoHalfSpace::*)(const Double_t *, Bool_t)  const>(&TGeoHalfSpace::Safety));
    t.method("Safety", [](TGeoHalfSpace const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoHalfSpace const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:59:9
    t.method("Safety_v", static_cast<void (TGeoHalfSpace::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoHalfSpace::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::SetDimensions(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:61:9
    t.method("SetDimensions", static_cast<void (TGeoHalfSpace::*)(Double_t *) >(&TGeoHalfSpace::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::SetPoints(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:62:9
    t.method("SetPoints", static_cast<void (TGeoHalfSpace::*)(Double_t *)  const>(&TGeoHalfSpace::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::SetPoints(Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:63:9
    t.method("SetPoints", static_cast<void (TGeoHalfSpace::*)(Float_t *)  const>(&TGeoHalfSpace::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::Sizeof3D() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::Sizeof3D()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:64:9
    t.method("Sizeof3D", static_cast<void (TGeoHalfSpace::*)()  const>(&TGeoHalfSpace::Sizeof3D));

    DEBUG_MSG("Adding wrapper for Version_t TGeoHalfSpace::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoHalfSpace::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!Class_Version", static_cast<Version_t (*)() >(&TGeoHalfSpace::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoHalfSpace::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHalfSpace::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    t.method("IsA", static_cast<TClass * (TGeoHalfSpace::*)()  const>(&TGeoHalfSpace::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    t.method("StreamerNVirtual", static_cast<void (TGeoHalfSpace::*)(TBuffer &) >(&TGeoHalfSpace::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoHalfSpace::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHalfSpace::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!DeclFileName", []() { return (std::string)TGeoHalfSpace::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoHalfSpace::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoHalfSpace::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!ImplFileLine", static_cast<int (*)() >(&TGeoHalfSpace::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoHalfSpace::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHalfSpace::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!ImplFileName", []() { return (std::string)TGeoHalfSpace::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoHalfSpace::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHalfSpace::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!Class_Name", []() { return (std::string)TGeoHalfSpace::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoHalfSpace::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHalfSpace::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!Dictionary", static_cast<TClass * (*)() >(&TGeoHalfSpace::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoHalfSpace::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHalfSpace::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!Class", static_cast<TClass * (*)() >(&TGeoHalfSpace::Class));

    DEBUG_MSG("Adding wrapper for void TGeoHalfSpace::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHalfSpace::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    t.method("Streamer", static_cast<void (TGeoHalfSpace::*)(TBuffer &) >(&TGeoHalfSpace::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoHalfSpace::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoHalfSpace::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHalfSpace.h:66:4
    module_.method("TGeoHalfSpace!DeclFileLine", static_cast<int (*)() >(&TGeoHalfSpace::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoHalfSpace>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoHalfSpace(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoHalfSpace(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoHelix> : std::false_type { };
  template<> struct DefaultConstructible<TGeoHelix> : std::false_type { };
template<> struct SuperType<TGeoHelix> { typedef TObject type; };
}

// Class generating the wrapper for type TGeoHelix
// signature to use in the veto file: TGeoHelix
struct JlTGeoHelix: public Wrapper {

  JlTGeoHelix(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoHelix (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:19:7
    jlcxx::TypeWrapper<TGeoHelix>  t = jlModule.add_type<TGeoHelix>("TGeoHelix",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoHelix>>(new jlcxx::TypeWrapper<TGeoHelix>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoHelix::TGeoHelix(Double_t, Double_t, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:40:4
    t.constructor<Double_t, Double_t>(/*finalize=*/true);
    t.constructor<Double_t, Double_t, Int_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGeoHelix::InitPoint(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::InitPoint(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:44:9
    t.method("InitPoint", static_cast<void (TGeoHelix::*)(Double_t, Double_t, Double_t) >(&TGeoHelix::InitPoint));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::InitPoint(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::InitPoint(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:45:9
    t.method("InitPoint", static_cast<void (TGeoHelix::*)(Double_t *) >(&TGeoHelix::InitPoint));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::InitDirection(Double_t, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::InitDirection(Double_t, Double_t, Double_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:46:9
    t.method("InitDirection", static_cast<void (TGeoHelix::*)(Double_t, Double_t, Double_t, Bool_t) >(&TGeoHelix::InitDirection));
    t.method("InitDirection", [](TGeoHelix& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.InitDirection(arg0, arg1, arg2); });
    t.method("InitDirection", [](TGeoHelix* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->InitDirection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoHelix::InitDirection(Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::InitDirection(Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:47:9
    t.method("InitDirection", static_cast<void (TGeoHelix::*)(Double_t *, Bool_t) >(&TGeoHelix::InitDirection));
    t.method("InitDirection", [](TGeoHelix& a, Double_t * arg0)->void { a.InitDirection(arg0); });
    t.method("InitDirection", [](TGeoHelix* a, Double_t * arg0)->void { a->InitDirection(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoHelix::ComputeSafeStep(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHelix::ComputeSafeStep(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:49:13
    t.method("ComputeSafeStep", static_cast<Double_t (TGeoHelix::*)(Double_t)  const>(&TGeoHelix::ComputeSafeStep));
    t.method("ComputeSafeStep", [](TGeoHelix const& a)->Double_t { return a.ComputeSafeStep(); });
    t.method("ComputeSafeStep", [](TGeoHelix const* a)->Double_t { return a->ComputeSafeStep(); });

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoHelix::GetCurrentPoint() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoHelix::GetCurrentPoint()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:50:20
    t.method("GetCurrentPoint", static_cast<const Double_t * (TGeoHelix::*)()  const>(&TGeoHelix::GetCurrentPoint));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoHelix::GetCurrentDirection() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoHelix::GetCurrentDirection()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:51:20
    t.method("GetCurrentDirection", static_cast<const Double_t * (TGeoHelix::*)()  const>(&TGeoHelix::GetCurrentDirection));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHelix::GetXYcurvature() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHelix::GetXYcurvature()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:52:13
    t.method("GetXYcurvature", static_cast<Double_t (TGeoHelix::*)()  const>(&TGeoHelix::GetXYcurvature));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHelix::GetStep() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHelix::GetStep()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:53:13
    t.method("GetStep", static_cast<Double_t (TGeoHelix::*)()  const>(&TGeoHelix::GetStep));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHelix::GetTotalCurvature() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHelix::GetTotalCurvature()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:54:13
    t.method("GetTotalCurvature", static_cast<Double_t (TGeoHelix::*)()  const>(&TGeoHelix::GetTotalCurvature));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHelix::IsRightHanded() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHelix::IsRightHanded()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:55:11
    t.method("IsRightHanded", static_cast<Bool_t (TGeoHelix::*)()  const>(&TGeoHelix::IsRightHanded));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::ResetStep() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::ResetStep()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:60:9
    t.method("ResetStep", static_cast<void (TGeoHelix::*)() >(&TGeoHelix::ResetStep));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHelix::StepToPlane(Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHelix::StepToPlane(Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:61:13
    t.method("StepToPlane", static_cast<Double_t (TGeoHelix::*)(Double_t *, Double_t *) >(&TGeoHelix::StepToPlane));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::SetCharge(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::SetCharge(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:64:9
    t.method("SetCharge", static_cast<void (TGeoHelix::*)(Int_t) >(&TGeoHelix::SetCharge));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::SetXYcurvature(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::SetXYcurvature(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:65:9
    t.method("SetXYcurvature", static_cast<void (TGeoHelix::*)(Double_t) >(&TGeoHelix::SetXYcurvature));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::SetField(Double_t, Double_t, Double_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::SetField(Double_t, Double_t, Double_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:66:9
    t.method("SetField", static_cast<void (TGeoHelix::*)(Double_t, Double_t, Double_t, Bool_t) >(&TGeoHelix::SetField));
    t.method("SetField", [](TGeoHelix& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetField(arg0, arg1, arg2); });
    t.method("SetField", [](TGeoHelix* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetField(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoHelix::SetHelixStep(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::SetHelixStep(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:67:9
    t.method("SetHelixStep", static_cast<void (TGeoHelix::*)(Double_t) >(&TGeoHelix::SetHelixStep));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::Step(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::Step(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:69:9
    t.method("Step", static_cast<void (TGeoHelix::*)(Double_t) >(&TGeoHelix::Step));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::UpdateHelix() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::UpdateHelix()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:71:9
    t.method("UpdateHelix", static_cast<void (TGeoHelix::*)() >(&TGeoHelix::UpdateHelix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoHelix::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoHelix::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!Class_Version", static_cast<Version_t (*)() >(&TGeoHelix::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoHelix::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHelix::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    t.method("IsA", static_cast<TClass * (TGeoHelix::*)()  const>(&TGeoHelix::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    t.method("StreamerNVirtual", static_cast<void (TGeoHelix::*)(TBuffer &) >(&TGeoHelix::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoHelix::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHelix::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!DeclFileName", []() { return (std::string)TGeoHelix::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoHelix::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoHelix::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!ImplFileLine", static_cast<int (*)() >(&TGeoHelix::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoHelix::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHelix::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!ImplFileName", []() { return (std::string)TGeoHelix::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoHelix::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHelix::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!Class_Name", []() { return (std::string)TGeoHelix::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoHelix::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHelix::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!Dictionary", static_cast<TClass * (*)() >(&TGeoHelix::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoHelix::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHelix::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!Class", static_cast<TClass * (*)() >(&TGeoHelix::Class));

    DEBUG_MSG("Adding wrapper for void TGeoHelix::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHelix::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    t.method("Streamer", static_cast<void (TGeoHelix::*)(TBuffer &) >(&TGeoHelix::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoHelix::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoHelix::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHelix.h:73:4
    module_.method("TGeoHelix!DeclFileLine", static_cast<int (*)() >(&TGeoHelix::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoHelix>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoHelix(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoHelix(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoHype> : std::false_type { };
  template<> struct DefaultConstructible<TGeoHype> : std::false_type { };
template<> struct SuperType<TGeoHype> { typedef TGeoTube type; };
}

// Class generating the wrapper for type TGeoHype
// signature to use in the veto file: TGeoHype
struct JlTGeoHype: public Wrapper {

  JlTGeoHype(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoHype (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:17:7
    jlcxx::TypeWrapper<TGeoHype>  t = jlModule.add_type<TGeoHype>("TGeoHype",
      jlcxx::julia_base_type<TGeoTube>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoHype>>(new jlcxx::TypeWrapper<TGeoHype>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoHype::TGeoHype(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:39:4
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoHype::TGeoHype(const char *, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:40:4
    t.constructor<const char *, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoHype::TGeoHype(Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:41:4
    t.constructor<Double_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::Capacity()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:46:13
    t.method("Capacity", static_cast<Double_t (TGeoHype::*)()  const>(&TGeoHype::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoHype::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::ComputeBBox()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:47:9
    t.method("ComputeBBox", static_cast<void (TGeoHype::*)() >(&TGeoHype::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoHype::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:48:9
    t.method("ComputeNormal", static_cast<void (TGeoHype::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoHype::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoHype::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:49:9
    t.method("ComputeNormal_v", static_cast<void (TGeoHype::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoHype::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHype::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHype::Contains(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:50:11
    t.method("Contains", static_cast<Bool_t (TGeoHype::*)(const Double_t *)  const>(&TGeoHype::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoHype::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:51:9
    t.method("Contains_v", static_cast<void (TGeoHype::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoHype::Contains_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:52:13
    t.method("DistFromInside", static_cast<Double_t (TGeoHype::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoHype::DistFromInside));
    t.method("DistFromInside", [](TGeoHype const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoHype const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoHype const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoHype const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoHype const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoHype const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoHype::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:54:9
    t.method("DistFromInside_v", static_cast<void (TGeoHype::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoHype::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:56:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoHype::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoHype::DistFromOutside));
    t.method("DistFromOutside", [](TGeoHype const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoHype const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoHype const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoHype const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoHype const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoHype const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoHype::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:58:9
    t.method("DistFromOutside_v", static_cast<void (TGeoHype::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoHype::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoHype::DistToHype(const Double_t *, const Double_t *, Double_t *, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoHype::DistToHype(const Double_t *, const Double_t *, Double_t *, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:60:10
    t.method("DistToHype", static_cast<Int_t (TGeoHype::*)(const Double_t *, const Double_t *, Double_t *, Bool_t, Bool_t)  const>(&TGeoHype::DistToHype));

    DEBUG_MSG("Adding wrapper for Int_t TGeoHype::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoHype::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:61:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoHype::*)(Int_t, Int_t) >(&TGeoHype::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoHype::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoHype::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:63:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoHype::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoHype::Divide));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::GetAxisRange(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::GetAxisRange(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:64:13
    t.method("GetAxisRange", static_cast<Double_t (TGeoHype::*)(Int_t, Double_t &, Double_t &)  const>(&TGeoHype::GetAxisRange));

    DEBUG_MSG("Adding wrapper for void TGeoHype::GetBoundingCylinder(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::GetBoundingCylinder(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:65:9
    t.method("GetBoundingCylinder", static_cast<void (TGeoHype::*)(Double_t *)  const>(&TGeoHype::GetBoundingCylinder));

    DEBUG_MSG("Adding wrapper for Int_t TGeoHype::GetByteCount() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoHype::GetByteCount()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:67:10
    t.method("GetByteCount", static_cast<Int_t (TGeoHype::*)()  const>(&TGeoHype::GetByteCount));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHype::GetPointsOnSegments(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHype::GetPointsOnSegments(Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:68:11
    t.method("GetPointsOnSegments", static_cast<Bool_t (TGeoHype::*)(Int_t, Double_t *)  const>(&TGeoHype::GetPointsOnSegments));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoHype::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoHype::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:69:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoHype::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoHype::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoHype::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:70:9
    t.method("GetMeshNumbers", static_cast<void (TGeoHype::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoHype::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoHype::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoHype::GetNmeshVertices()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:71:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoHype::*)()  const>(&TGeoHype::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::GetStIn() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::GetStIn()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:72:13
    t.method("GetStIn", static_cast<Double_t (TGeoHype::*)()  const>(&TGeoHype::GetStIn));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::GetStOut() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::GetStOut()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:73:13
    t.method("GetStOut", static_cast<Double_t (TGeoHype::*)()  const>(&TGeoHype::GetStOut));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHype::HasInner() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHype::HasInner()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:74:11
    t.method("HasInner", static_cast<Bool_t (TGeoHype::*)()  const>(&TGeoHype::HasInner));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::RadiusHypeSq(Double_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::RadiusHypeSq(Double_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:75:13
    t.method("RadiusHypeSq", static_cast<Double_t (TGeoHype::*)(Double_t, Bool_t)  const>(&TGeoHype::RadiusHypeSq));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::ZHypeSq(Double_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::ZHypeSq(Double_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:76:13
    t.method("ZHypeSq", static_cast<Double_t (TGeoHype::*)(Double_t, Bool_t)  const>(&TGeoHype::ZHypeSq));

    DEBUG_MSG("Adding wrapper for void TGeoHype::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::InspectShape()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:77:9
    t.method("InspectShape", static_cast<void (TGeoHype::*)()  const>(&TGeoHype::InspectShape));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoHype::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoHype::IsCylType()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:78:11
    t.method("IsCylType", static_cast<Bool_t (TGeoHype::*)()  const>(&TGeoHype::IsCylType));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::Safety(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:81:13
    t.method("Safety", static_cast<Double_t (TGeoHype::*)(const Double_t *, Bool_t)  const>(&TGeoHype::Safety));
    t.method("Safety", [](TGeoHype const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoHype const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoHype::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:82:9
    t.method("Safety_v", static_cast<void (TGeoHype::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoHype::Safety_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoHype::SafetyToHype(const Double_t *, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoHype::SafetyToHype(const Double_t *, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:83:13
    t.method("SafetyToHype", static_cast<Double_t (TGeoHype::*)(const Double_t *, Bool_t, Bool_t)  const>(&TGeoHype::SafetyToHype));

    DEBUG_MSG("Adding wrapper for void TGeoHype::SetHypeDimensions(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::SetHypeDimensions(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:85:9
    t.method("SetHypeDimensions", static_cast<void (TGeoHype::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TGeoHype::SetHypeDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoHype::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::SetDimensions(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:86:9
    t.method("SetDimensions", static_cast<void (TGeoHype::*)(Double_t *) >(&TGeoHype::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoHype::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::SetPoints(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:87:9
    t.method("SetPoints", static_cast<void (TGeoHype::*)(Double_t *)  const>(&TGeoHype::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoHype::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::SetPoints(Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:88:9
    t.method("SetPoints", static_cast<void (TGeoHype::*)(Float_t *)  const>(&TGeoHype::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoHype::Sizeof3D() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::Sizeof3D()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:90:9
    t.method("Sizeof3D", static_cast<void (TGeoHype::*)()  const>(&TGeoHype::Sizeof3D));

    DEBUG_MSG("Adding wrapper for Version_t TGeoHype::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoHype::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!Class_Version", static_cast<Version_t (*)() >(&TGeoHype::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoHype::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHype::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    t.method("IsA", static_cast<TClass * (TGeoHype::*)()  const>(&TGeoHype::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoHype::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    t.method("StreamerNVirtual", static_cast<void (TGeoHype::*)(TBuffer &) >(&TGeoHype::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoHype::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHype::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!DeclFileName", []() { return (std::string)TGeoHype::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoHype::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoHype::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!ImplFileLine", static_cast<int (*)() >(&TGeoHype::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoHype::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHype::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!ImplFileName", []() { return (std::string)TGeoHype::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoHype::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoHype::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!Class_Name", []() { return (std::string)TGeoHype::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoHype::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHype::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!Dictionary", static_cast<TClass * (*)() >(&TGeoHype::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoHype::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoHype::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!Class", static_cast<TClass * (*)() >(&TGeoHype::Class));

    DEBUG_MSG("Adding wrapper for void TGeoHype::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoHype::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    t.method("Streamer", static_cast<void (TGeoHype::*)(TBuffer &) >(&TGeoHype::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoHype::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoHype::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoHype.h:92:4
    module_.method("TGeoHype!DeclFileLine", static_cast<int (*)() >(&TGeoHype::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoHype>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoHype(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoHype(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoNavigatorArray> : std::false_type { };
  template<> struct DefaultConstructible<TGeoNavigatorArray> : std::false_type { };
template<> struct SuperType<TGeoNavigatorArray> { typedef TObjArray type; };
}

// Class generating the wrapper for type TGeoNavigatorArray
// signature to use in the veto file: TGeoNavigatorArray
struct JlTGeoNavigatorArray: public Wrapper {

  JlTGeoNavigatorArray(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoNavigatorArray (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:262:7
    jlcxx::TypeWrapper<TGeoNavigatorArray>  t = jlModule.add_type<TGeoNavigatorArray>("TGeoNavigatorArray",
      jlcxx::julia_base_type<TObjArray>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoNavigatorArray>>(new jlcxx::TypeWrapper<TGeoNavigatorArray>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoNavigatorArray::TGeoNavigatorArray(TGeoManager *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:272:4
    t.constructor<TGeoManager *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoNavigator * TGeoNavigatorArray::AddNavigator() (" __HERE__ ")");
    // signature to use in the veto list: TGeoNavigator * TGeoNavigatorArray::AddNavigator()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:275:19
    t.method("AddNavigator", static_cast<TGeoNavigator * (TGeoNavigatorArray::*)() >(&TGeoNavigatorArray::AddNavigator));

    DEBUG_MSG("Adding wrapper for TGeoNavigator * TGeoNavigatorArray::GetCurrentNavigator() (" __HERE__ ")");
    // signature to use in the veto list: TGeoNavigator * TGeoNavigatorArray::GetCurrentNavigator()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:276:26
    t.method("GetCurrentNavigator", static_cast<TGeoNavigator * (TGeoNavigatorArray::*)()  const>(&TGeoNavigatorArray::GetCurrentNavigator));

    DEBUG_MSG("Adding wrapper for TGeoNavigator * TGeoNavigatorArray::SetCurrentNavigator(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNavigator * TGeoNavigatorArray::SetCurrentNavigator(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:277:19
    t.method("SetCurrentNavigator", static_cast<TGeoNavigator * (TGeoNavigatorArray::*)(Int_t) >(&TGeoNavigatorArray::SetCurrentNavigator));

    DEBUG_MSG("Adding wrapper for Version_t TGeoNavigatorArray::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoNavigatorArray::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!Class_Version", static_cast<Version_t (*)() >(&TGeoNavigatorArray::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoNavigatorArray::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoNavigatorArray::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    t.method("IsA", static_cast<TClass * (TGeoNavigatorArray::*)()  const>(&TGeoNavigatorArray::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoNavigatorArray::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoNavigatorArray::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    t.method("StreamerNVirtual", static_cast<void (TGeoNavigatorArray::*)(TBuffer &) >(&TGeoNavigatorArray::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoNavigatorArray::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoNavigatorArray::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!DeclFileName", []() { return (std::string)TGeoNavigatorArray::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoNavigatorArray::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoNavigatorArray::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!ImplFileLine", static_cast<int (*)() >(&TGeoNavigatorArray::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoNavigatorArray::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoNavigatorArray::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!ImplFileName", []() { return (std::string)TGeoNavigatorArray::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoNavigatorArray::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoNavigatorArray::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!Class_Name", []() { return (std::string)TGeoNavigatorArray::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoNavigatorArray::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoNavigatorArray::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!Dictionary", static_cast<TClass * (*)() >(&TGeoNavigatorArray::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoNavigatorArray::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoNavigatorArray::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!Class", static_cast<TClass * (*)() >(&TGeoNavigatorArray::Class));

    DEBUG_MSG("Adding wrapper for void TGeoNavigatorArray::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoNavigatorArray::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    t.method("Streamer", static_cast<void (TGeoNavigatorArray::*)(TBuffer &) >(&TGeoNavigatorArray::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoNavigatorArray::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoNavigatorArray::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoNavigator.h:279:4
    module_.method("TGeoNavigatorArray!DeclFileLine", static_cast<int (*)() >(&TGeoNavigatorArray::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoNavigatorArray>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoNavigatorArray(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoNavigatorArray(module));
}
