// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TSplinePoly> : std::false_type { };
  template<> struct DefaultConstructible<TSplinePoly> : std::false_type { };
template<> struct SuperType<TSplinePoly> { typedef TObject type; };
}

// Class generating the wrapper for type TSplinePoly
// signature to use in the veto file: TSplinePoly
struct JlTSplinePoly: public Wrapper {

  JlTSplinePoly(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSplinePoly (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:74:7
    jlcxx::TypeWrapper<TSplinePoly>  t = jlModule.add_type<TSplinePoly>("TSplinePoly",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSplinePoly>>(new jlcxx::TypeWrapper<TSplinePoly>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSplinePoly::TSplinePoly(Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:82:4
    t.constructor<Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSplinePoly::TSplinePoly(const TSplinePoly &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:83:4
    t.constructor<const TSplinePoly &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TSplinePoly & TSplinePoly::operator=(const TSplinePoly &) (" __HERE__ ")");
    // signature to use in the veto list: TSplinePoly & TSplinePoly::operator=(const TSplinePoly &)
    // defined in /opt/root63206jll/include/TSpline.h:85:17
    t.method("assign", static_cast<TSplinePoly & (TSplinePoly::*)(const TSplinePoly &) >(&TSplinePoly::operator=));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly::X() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly::X()
    // defined in /opt/root63206jll/include/TSpline.h:87:14
    t.method("X", static_cast<Double_t & (TSplinePoly::*)() >(&TSplinePoly::X));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly::Y() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly::Y()
    // defined in /opt/root63206jll/include/TSpline.h:88:14
    t.method("Y", static_cast<Double_t & (TSplinePoly::*)() >(&TSplinePoly::Y));

    DEBUG_MSG("Adding wrapper for void TSplinePoly::GetKnot(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly::GetKnot(Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TSpline.h:89:9
    t.method("GetKnot", static_cast<void (TSplinePoly::*)(Double_t &, Double_t &)  const>(&TSplinePoly::GetKnot));

    DEBUG_MSG("Adding wrapper for Double_t TSplinePoly::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSplinePoly::Eval(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:95:21
    t.method("Eval", static_cast<Double_t (TSplinePoly::*)(Double_t)  const>(&TSplinePoly::Eval));

    DEBUG_MSG("Adding wrapper for Version_t TSplinePoly::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSplinePoly::Class_Version()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!Class_Version", static_cast<Version_t (*)() >(&TSplinePoly::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly::IsA()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    t.method("IsA", static_cast<TClass * (TSplinePoly::*)()  const>(&TSplinePoly::IsA));

    DEBUG_MSG("Adding wrapper for void TSplinePoly::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    t.method("StreamerNVirtual", static_cast<void (TSplinePoly::*)(TBuffer &) >(&TSplinePoly::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly::DeclFileName()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!DeclFileName", []() { return (std::string)TSplinePoly::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSplinePoly::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSplinePoly::ImplFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!ImplFileLine", static_cast<int (*)() >(&TSplinePoly::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly::ImplFileName()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!ImplFileName", []() { return (std::string)TSplinePoly::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly::Class_Name()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!Class_Name", []() { return (std::string)TSplinePoly::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly::Dictionary()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!Dictionary", static_cast<TClass * (*)() >(&TSplinePoly::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly::Class()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!Class", static_cast<TClass * (*)() >(&TSplinePoly::Class));

    DEBUG_MSG("Adding wrapper for void TSplinePoly::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    t.method("Streamer", static_cast<void (TSplinePoly::*)(TBuffer &) >(&TSplinePoly::Streamer));

    DEBUG_MSG("Adding wrapper for int TSplinePoly::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSplinePoly::DeclFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:100:4
    module_.method("TSplinePoly!DeclFileLine", static_cast<int (*)() >(&TSplinePoly::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSplinePoly>> type_;
};
std::shared_ptr<Wrapper> newJlTSplinePoly(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSplinePoly(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TSplinePoly3> : std::false_type { };
  template<> struct DefaultConstructible<TSplinePoly3> : std::false_type { };
template<> struct SuperType<TSplinePoly3> { typedef TSplinePoly type; };
}

// Class generating the wrapper for type TSplinePoly3
// signature to use in the veto file: TSplinePoly3
struct JlTSplinePoly3: public Wrapper {

  JlTSplinePoly3(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSplinePoly3 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:104:7
    jlcxx::TypeWrapper<TSplinePoly3>  t = jlModule.add_type<TSplinePoly3>("TSplinePoly3",
      jlcxx::julia_base_type<TSplinePoly>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSplinePoly3>>(new jlcxx::TypeWrapper<TSplinePoly3>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSplinePoly3::TSplinePoly3(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:113:4
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSplinePoly3::TSplinePoly3(const TSplinePoly3 &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:114:4
    t.constructor<const TSplinePoly3 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TSplinePoly3 & TSplinePoly3::operator=(const TSplinePoly3 &) (" __HERE__ ")");
    // signature to use in the veto list: TSplinePoly3 & TSplinePoly3::operator=(const TSplinePoly3 &)
    // defined in /opt/root63206jll/include/TSpline.h:116:18
    t.method("assign", static_cast<TSplinePoly3 & (TSplinePoly3::*)(const TSplinePoly3 &) >(&TSplinePoly3::operator=));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly3::B() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly3::B()
    // defined in /opt/root63206jll/include/TSpline.h:118:14
    t.method("B", static_cast<Double_t & (TSplinePoly3::*)() >(&TSplinePoly3::B));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly3::C() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly3::C()
    // defined in /opt/root63206jll/include/TSpline.h:119:14
    t.method("C", static_cast<Double_t & (TSplinePoly3::*)() >(&TSplinePoly3::C));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly3::D() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly3::D()
    // defined in /opt/root63206jll/include/TSpline.h:120:14
    t.method("D", static_cast<Double_t & (TSplinePoly3::*)() >(&TSplinePoly3::D));

    DEBUG_MSG("Adding wrapper for Double_t TSplinePoly3::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSplinePoly3::Eval(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:121:13
    t.method("Eval", static_cast<Double_t (TSplinePoly3::*)(Double_t)  const>(&TSplinePoly3::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TSplinePoly3::Derivative(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSplinePoly3::Derivative(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:126:13
    t.method("Derivative", static_cast<Double_t (TSplinePoly3::*)(Double_t)  const>(&TSplinePoly3::Derivative));

    DEBUG_MSG("Adding wrapper for Version_t TSplinePoly3::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSplinePoly3::Class_Version()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!Class_Version", static_cast<Version_t (*)() >(&TSplinePoly3::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly3::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly3::IsA()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    t.method("IsA", static_cast<TClass * (TSplinePoly3::*)()  const>(&TSplinePoly3::IsA));

    DEBUG_MSG("Adding wrapper for void TSplinePoly3::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly3::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    t.method("StreamerNVirtual", static_cast<void (TSplinePoly3::*)(TBuffer &) >(&TSplinePoly3::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly3::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly3::DeclFileName()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!DeclFileName", []() { return (std::string)TSplinePoly3::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSplinePoly3::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSplinePoly3::ImplFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!ImplFileLine", static_cast<int (*)() >(&TSplinePoly3::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly3::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly3::ImplFileName()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!ImplFileName", []() { return (std::string)TSplinePoly3::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly3::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly3::Class_Name()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!Class_Name", []() { return (std::string)TSplinePoly3::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly3::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly3::Dictionary()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!Dictionary", static_cast<TClass * (*)() >(&TSplinePoly3::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly3::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly3::Class()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!Class", static_cast<TClass * (*)() >(&TSplinePoly3::Class));

    DEBUG_MSG("Adding wrapper for void TSplinePoly3::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly3::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    t.method("Streamer", static_cast<void (TSplinePoly3::*)(TBuffer &) >(&TSplinePoly3::Streamer));

    DEBUG_MSG("Adding wrapper for int TSplinePoly3::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSplinePoly3::DeclFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:135:4
    module_.method("TSplinePoly3!DeclFileLine", static_cast<int (*)() >(&TSplinePoly3::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSplinePoly3>> type_;
};
std::shared_ptr<Wrapper> newJlTSplinePoly3(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSplinePoly3(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TSplinePoly5> : std::false_type { };
  template<> struct DefaultConstructible<TSplinePoly5> : std::false_type { };
template<> struct SuperType<TSplinePoly5> { typedef TSplinePoly type; };
}

// Class generating the wrapper for type TSplinePoly5
// signature to use in the veto file: TSplinePoly5
struct JlTSplinePoly5: public Wrapper {

  JlTSplinePoly5(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSplinePoly5 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:139:7
    jlcxx::TypeWrapper<TSplinePoly5>  t = jlModule.add_type<TSplinePoly5>("TSplinePoly5",
      jlcxx::julia_base_type<TSplinePoly>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSplinePoly5>>(new jlcxx::TypeWrapper<TSplinePoly5>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSplinePoly5::TSplinePoly5(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:150:4
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSplinePoly5::TSplinePoly5(const TSplinePoly5 &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:154:4
    t.constructor<const TSplinePoly5 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TSplinePoly5 & TSplinePoly5::operator=(const TSplinePoly5 &) (" __HERE__ ")");
    // signature to use in the veto list: TSplinePoly5 & TSplinePoly5::operator=(const TSplinePoly5 &)
    // defined in /opt/root63206jll/include/TSpline.h:156:18
    t.method("assign", static_cast<TSplinePoly5 & (TSplinePoly5::*)(const TSplinePoly5 &) >(&TSplinePoly5::operator=));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly5::B() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly5::B()
    // defined in /opt/root63206jll/include/TSpline.h:158:14
    t.method("B", static_cast<Double_t & (TSplinePoly5::*)() >(&TSplinePoly5::B));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly5::C() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly5::C()
    // defined in /opt/root63206jll/include/TSpline.h:159:14
    t.method("C", static_cast<Double_t & (TSplinePoly5::*)() >(&TSplinePoly5::C));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly5::D() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly5::D()
    // defined in /opt/root63206jll/include/TSpline.h:160:14
    t.method("D", static_cast<Double_t & (TSplinePoly5::*)() >(&TSplinePoly5::D));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly5::E() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly5::E()
    // defined in /opt/root63206jll/include/TSpline.h:161:14
    t.method("E", static_cast<Double_t & (TSplinePoly5::*)() >(&TSplinePoly5::E));

    DEBUG_MSG("Adding wrapper for Double_t & TSplinePoly5::F() (" __HERE__ ")");
    // signature to use in the veto list: Double_t & TSplinePoly5::F()
    // defined in /opt/root63206jll/include/TSpline.h:162:14
    t.method("F", static_cast<Double_t & (TSplinePoly5::*)() >(&TSplinePoly5::F));

    DEBUG_MSG("Adding wrapper for Double_t TSplinePoly5::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSplinePoly5::Eval(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:163:13
    t.method("Eval", static_cast<Double_t (TSplinePoly5::*)(Double_t)  const>(&TSplinePoly5::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TSplinePoly5::Derivative(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSplinePoly5::Derivative(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:168:13
    t.method("Derivative", static_cast<Double_t (TSplinePoly5::*)(Double_t)  const>(&TSplinePoly5::Derivative));

    DEBUG_MSG("Adding wrapper for Version_t TSplinePoly5::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSplinePoly5::Class_Version()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!Class_Version", static_cast<Version_t (*)() >(&TSplinePoly5::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly5::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly5::IsA()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    t.method("IsA", static_cast<TClass * (TSplinePoly5::*)()  const>(&TSplinePoly5::IsA));

    DEBUG_MSG("Adding wrapper for void TSplinePoly5::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly5::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    t.method("StreamerNVirtual", static_cast<void (TSplinePoly5::*)(TBuffer &) >(&TSplinePoly5::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly5::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly5::DeclFileName()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!DeclFileName", []() { return (std::string)TSplinePoly5::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSplinePoly5::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSplinePoly5::ImplFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!ImplFileLine", static_cast<int (*)() >(&TSplinePoly5::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly5::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly5::ImplFileName()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!ImplFileName", []() { return (std::string)TSplinePoly5::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSplinePoly5::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSplinePoly5::Class_Name()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!Class_Name", []() { return (std::string)TSplinePoly5::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly5::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly5::Dictionary()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!Dictionary", static_cast<TClass * (*)() >(&TSplinePoly5::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TSplinePoly5::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSplinePoly5::Class()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!Class", static_cast<TClass * (*)() >(&TSplinePoly5::Class));

    DEBUG_MSG("Adding wrapper for void TSplinePoly5::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSplinePoly5::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    t.method("Streamer", static_cast<void (TSplinePoly5::*)(TBuffer &) >(&TSplinePoly5::Streamer));

    DEBUG_MSG("Adding wrapper for int TSplinePoly5::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSplinePoly5::DeclFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:176:4
    module_.method("TSplinePoly5!DeclFileLine", static_cast<int (*)() >(&TSplinePoly5::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSplinePoly5>> type_;
};
std::shared_ptr<Wrapper> newJlTSplinePoly5(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSplinePoly5(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TSpline3> : std::false_type { };
  template<> struct DefaultConstructible<TSpline3> : std::false_type { };
template<> struct SuperType<TSpline3> { typedef TSpline type; };
}

// Class generating the wrapper for type TSpline3
// signature to use in the veto file: TSpline3
struct JlTSpline3: public Wrapper {

  JlTSpline3(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSpline3 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:181:7
    jlcxx::TypeWrapper<TSpline3>  t = jlModule.add_type<TSpline3>("TSpline3",
      jlcxx::julia_base_type<TSpline>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSpline3>>(new jlcxx::TypeWrapper<TSpline3>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const char *, Double_t [], Double_t [], Int_t, const char *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:195:4
    t.constructor<const char *, Double_t [], Double_t [], Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:198:4
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:202:4
    t.constructor<const char *, Double_t [], const TF1 *, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:205:4
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const char *, const TGraph *, const char *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:209:4
    t.constructor<const char *, const TGraph *>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const TH1 *, const char *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:212:4
    t.constructor<const TH1 *>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline3::TSpline3(const TSpline3 &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:214:4
    t.constructor<const TSpline3 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TSpline3 & TSpline3::operator=(const TSpline3 &) (" __HERE__ ")");
    // signature to use in the veto list: TSpline3 & TSpline3::operator=(const TSpline3 &)
    // defined in /opt/root63206jll/include/TSpline.h:215:14
    t.method("assign", static_cast<TSpline3 & (TSpline3::*)(const TSpline3 &) >(&TSpline3::operator=));

    DEBUG_MSG("Adding wrapper for Int_t TSpline3::FindX(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline3::FindX(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:216:13
    t.method("FindX", static_cast<Int_t (TSpline3::*)(Double_t)  const>(&TSpline3::FindX));

    DEBUG_MSG("Adding wrapper for Double_t TSpline3::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline3::Eval(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:217:13
    t.method("Eval", static_cast<Double_t (TSpline3::*)(Double_t)  const>(&TSpline3::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TSpline3::Derivative(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline3::Derivative(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:218:13
    t.method("Derivative", static_cast<Double_t (TSpline3::*)(Double_t)  const>(&TSpline3::Derivative));

    DEBUG_MSG("Adding wrapper for void TSpline3::GetCoeff(Int_t, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::GetCoeff(Int_t, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TSpline.h:220:9
    t.method("GetCoeff", static_cast<void (TSpline3::*)(Int_t, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TSpline3::GetCoeff));

    DEBUG_MSG("Adding wrapper for void TSpline3::GetKnot(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::GetKnot(Int_t, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TSpline.h:224:9
    t.method("GetKnot", static_cast<void (TSpline3::*)(Int_t, Double_t &, Double_t &)  const>(&TSpline3::GetKnot));

    DEBUG_MSG("Adding wrapper for void TSpline3::SaveAs(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::SaveAs(const char *, Option_t *)
    // defined in /opt/root63206jll/include/TSpline.h:226:14
    t.method("SaveAs", static_cast<void (TSpline3::*)(const char *, Option_t *)  const>(&TSpline3::SaveAs));
    t.method("SaveAs", [](TSpline3 const& a)->void { a.SaveAs(); });
    t.method("SaveAs", [](TSpline3 const& a, const char * arg0)->void { a.SaveAs(arg0); });
    t.method("SaveAs", [](TSpline3 const* a)->void { a->SaveAs(); });
    t.method("SaveAs", [](TSpline3 const* a, const char * arg0)->void { a->SaveAs(arg0); });

    DEBUG_MSG("Adding wrapper for void TSpline3::SetPoint(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::SetPoint(Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:228:22
    t.method("SetPoint", static_cast<void (TSpline3::*)(Int_t, Double_t, Double_t) >(&TSpline3::SetPoint));

    DEBUG_MSG("Adding wrapper for void TSpline3::SetPointCoeff(Int_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::SetPointCoeff(Int_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:229:22
    t.method("SetPointCoeff", static_cast<void (TSpline3::*)(Int_t, Double_t, Double_t, Double_t) >(&TSpline3::SetPointCoeff));

    DEBUG_MSG("Adding wrapper for void TSpline3::Test() (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::Test()
    // defined in /opt/root63206jll/include/TSpline.h:230:16
    module_.method("TSpline3!Test", static_cast<void (*)() >(&TSpline3::Test));

    DEBUG_MSG("Adding wrapper for Version_t TSpline3::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSpline3::Class_Version()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!Class_Version", static_cast<Version_t (*)() >(&TSpline3::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TSpline3::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline3::IsA()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    t.method("IsA", static_cast<TClass * (TSpline3::*)()  const>(&TSpline3::IsA));

    DEBUG_MSG("Adding wrapper for void TSpline3::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    t.method("StreamerNVirtual", static_cast<void (TSpline3::*)(TBuffer &) >(&TSpline3::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TSpline3::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline3::DeclFileName()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!DeclFileName", []() { return (std::string)TSpline3::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSpline3::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline3::ImplFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!ImplFileLine", static_cast<int (*)() >(&TSpline3::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TSpline3::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline3::ImplFileName()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!ImplFileName", []() { return (std::string)TSpline3::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSpline3::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline3::Class_Name()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!Class_Name", []() { return (std::string)TSpline3::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSpline3::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline3::Dictionary()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!Dictionary", static_cast<TClass * (*)() >(&TSpline3::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TSpline3::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline3::Class()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!Class", static_cast<TClass * (*)() >(&TSpline3::Class));

    DEBUG_MSG("Adding wrapper for void TSpline3::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline3::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    t.method("Streamer", static_cast<void (TSpline3::*)(TBuffer &) >(&TSpline3::Streamer));

    DEBUG_MSG("Adding wrapper for int TSpline3::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline3::DeclFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:232:4
    module_.method("TSpline3!DeclFileLine", static_cast<int (*)() >(&TSpline3::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSpline3>> type_;
};
std::shared_ptr<Wrapper> newJlTSpline3(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSpline3(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TSpline5> : std::false_type { };
  template<> struct DefaultConstructible<TSpline5> : std::false_type { };
template<> struct SuperType<TSpline5> { typedef TSpline type; };
}

// Class generating the wrapper for type TSpline5
// signature to use in the veto file: TSpline5
struct JlTSpline5: public Wrapper {

  JlTSpline5(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSpline5 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:237:7
    jlcxx::TypeWrapper<TSpline5>  t = jlModule.add_type<TSpline5>("TSpline5",
      jlcxx::julia_base_type<TSpline>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSpline5>>(new jlcxx::TypeWrapper<TSpline5>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const char *, Double_t [], Double_t [], Int_t, const char *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:251:4
    t.constructor<const char *, Double_t [], Double_t [], Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], Double_t [], Int_t, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:255:4
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Double_t [], Int_t, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:260:4
    t.constructor<const char *, Double_t [], const TF1 *, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t [], const TF1 *, Int_t, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:264:4
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, const TF1 *, Int_t, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const char *, const TGraph *, const char *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:269:4
    t.constructor<const char *, const TGraph *>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const TGraph *, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const TH1 *, const char *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:273:4
    t.constructor<const TH1 *>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const TH1 *, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TSpline5::TSpline5(const TSpline5 &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:276:4
    t.constructor<const TSpline5 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TSpline5 & TSpline5::operator=(const TSpline5 &) (" __HERE__ ")");
    // signature to use in the veto list: TSpline5 & TSpline5::operator=(const TSpline5 &)
    // defined in /opt/root63206jll/include/TSpline.h:277:14
    t.method("assign", static_cast<TSpline5 & (TSpline5::*)(const TSpline5 &) >(&TSpline5::operator=));

    DEBUG_MSG("Adding wrapper for Int_t TSpline5::FindX(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline5::FindX(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:278:13
    t.method("FindX", static_cast<Int_t (TSpline5::*)(Double_t)  const>(&TSpline5::FindX));

    DEBUG_MSG("Adding wrapper for Double_t TSpline5::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline5::Eval(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:279:13
    t.method("Eval", static_cast<Double_t (TSpline5::*)(Double_t)  const>(&TSpline5::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TSpline5::Derivative(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline5::Derivative(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:280:13
    t.method("Derivative", static_cast<Double_t (TSpline5::*)(Double_t)  const>(&TSpline5::Derivative));

    DEBUG_MSG("Adding wrapper for void TSpline5::GetCoeff(Int_t, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::GetCoeff(Int_t, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TSpline.h:282:9
    t.method("GetCoeff", static_cast<void (TSpline5::*)(Int_t, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TSpline5::GetCoeff));

    DEBUG_MSG("Adding wrapper for void TSpline5::GetKnot(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::GetKnot(Int_t, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TSpline.h:287:9
    t.method("GetKnot", static_cast<void (TSpline5::*)(Int_t, Double_t &, Double_t &)  const>(&TSpline5::GetKnot));

    DEBUG_MSG("Adding wrapper for void TSpline5::SaveAs(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::SaveAs(const char *, Option_t *)
    // defined in /opt/root63206jll/include/TSpline.h:289:14
    t.method("SaveAs", static_cast<void (TSpline5::*)(const char *, Option_t *)  const>(&TSpline5::SaveAs));
    t.method("SaveAs", [](TSpline5 const& a)->void { a.SaveAs(); });
    t.method("SaveAs", [](TSpline5 const& a, const char * arg0)->void { a.SaveAs(arg0); });
    t.method("SaveAs", [](TSpline5 const* a)->void { a->SaveAs(); });
    t.method("SaveAs", [](TSpline5 const* a, const char * arg0)->void { a->SaveAs(arg0); });

    DEBUG_MSG("Adding wrapper for void TSpline5::SetPoint(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::SetPoint(Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:291:22
    t.method("SetPoint", static_cast<void (TSpline5::*)(Int_t, Double_t, Double_t) >(&TSpline5::SetPoint));

    DEBUG_MSG("Adding wrapper for void TSpline5::SetPointCoeff(Int_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::SetPointCoeff(Int_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:292:22
    t.method("SetPointCoeff", static_cast<void (TSpline5::*)(Int_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TSpline5::SetPointCoeff));

    DEBUG_MSG("Adding wrapper for void TSpline5::Test() (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::Test()
    // defined in /opt/root63206jll/include/TSpline.h:294:16
    module_.method("TSpline5!Test", static_cast<void (*)() >(&TSpline5::Test));

    DEBUG_MSG("Adding wrapper for Version_t TSpline5::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSpline5::Class_Version()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!Class_Version", static_cast<Version_t (*)() >(&TSpline5::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TSpline5::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline5::IsA()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    t.method("IsA", static_cast<TClass * (TSpline5::*)()  const>(&TSpline5::IsA));

    DEBUG_MSG("Adding wrapper for void TSpline5::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    t.method("StreamerNVirtual", static_cast<void (TSpline5::*)(TBuffer &) >(&TSpline5::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TSpline5::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline5::DeclFileName()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!DeclFileName", []() { return (std::string)TSpline5::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSpline5::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline5::ImplFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!ImplFileLine", static_cast<int (*)() >(&TSpline5::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TSpline5::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline5::ImplFileName()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!ImplFileName", []() { return (std::string)TSpline5::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSpline5::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline5::Class_Name()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!Class_Name", []() { return (std::string)TSpline5::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSpline5::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline5::Dictionary()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!Dictionary", static_cast<TClass * (*)() >(&TSpline5::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TSpline5::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline5::Class()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!Class", static_cast<TClass * (*)() >(&TSpline5::Class));

    DEBUG_MSG("Adding wrapper for void TSpline5::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline5::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    t.method("Streamer", static_cast<void (TSpline5::*)(TBuffer &) >(&TSpline5::Streamer));

    DEBUG_MSG("Adding wrapper for int TSpline5::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline5::DeclFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:296:4
    module_.method("TSpline5!DeclFileLine", static_cast<int (*)() >(&TSpline5::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSpline5>> type_;
};
std::shared_ptr<Wrapper> newJlTSpline5(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSpline5(module));
}
