// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<THn> : std::false_type { };
  template<> struct DefaultConstructible<THn> : std::false_type { };
template<> struct SuperType<THn> { typedef THnBase type; };
}

// Class generating the wrapper for type THn
// signature to use in the veto file: THn
struct JlTHn: public Wrapper {

  JlTHn(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THn (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THn.h:30:7
    jlcxx::TypeWrapper<THn>  t = jlModule.add_type<THn>("THn",
      jlcxx::julia_base_type<THnBase>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THn>>(new jlcxx::TypeWrapper<THn>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for THn * THn::CreateHn(const char *, const char *, const TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::CreateHn(const char *, const char *, const TH1 *)
    // defined in /opt/root63206jll/include/THn.h:46:16
    module_.method("THn!CreateHn", static_cast<THn * (*)(const char *, const char *, const TH1 *) >(&THn::CreateHn));

    DEBUG_MSG("Adding wrapper for THn * THn::CreateHn(const char *, const char *, const THnBase *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::CreateHn(const char *, const char *, const THnBase *)
    // defined in /opt/root63206jll/include/THn.h:49:16
    module_.method("THn!CreateHn", static_cast<THn * (*)(const char *, const char *, const THnBase *) >(&THn::CreateHn));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetNbins()
    // defined in /opt/root63206jll/include/THn.h:54:13
    t.method("GetNbins", static_cast<Long64_t (THn::*)()  const>(&THn::GetNbins));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Int_t *)
    // defined in /opt/root63206jll/include/THn.h:56:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Int_t *)  const>(&THn::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Double_t *)
    // defined in /opt/root63206jll/include/THn.h:59:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Double_t *)  const>(&THn::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const char *[]) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const char *[])
    // defined in /opt/root63206jll/include/THn.h:67:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const char *[])  const>(&THn::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Int_t *, Bool_t)
    // defined in /opt/root63206jll/include/THn.h:76:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Int_t *, Bool_t) >(&THn::GetBin));
    t.method("GetBin", [](THn& a, const Int_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THn* a, const Int_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Double_t *, Bool_t)
    // defined in /opt/root63206jll/include/THn.h:79:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Double_t *, Bool_t) >(&THn::GetBin));
    t.method("GetBin", [](THn& a, const Double_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THn* a, const Double_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const char *[], Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const char *[], Bool_t)
    // defined in /opt/root63206jll/include/THn.h:82:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const char *[], Bool_t) >(&THn::GetBin));
    t.method("GetBin", [](THn& a, const char * arg0[])->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THn* a, const char * arg0[])->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for void THn::FillBin(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::FillBin(Long64_t, Double_t)
    // defined in /opt/root63206jll/include/THn.h:87:9
    t.method("FillBin", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::FillBin));

    DEBUG_MSG("Adding wrapper for void THn::SetBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::SetBinContent(const Int_t *, Double_t)
    // defined in /opt/root63206jll/include/THn.h:97:9
    t.method("SetBinContent", static_cast<void (THn::*)(const Int_t *, Double_t) >(&THn::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THn::SetBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::SetBinContent(Long64_t, Double_t)
    // defined in /opt/root63206jll/include/THn.h:100:9
    t.method("SetBinContent", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THn::SetBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::SetBinError2(Long64_t, Double_t)
    // defined in /opt/root63206jll/include/THn.h:103:9
    t.method("SetBinError2", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::SetBinError2));

    DEBUG_MSG("Adding wrapper for void THn::AddBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::AddBinContent(const Int_t *, Double_t)
    // defined in /opt/root63206jll/include/THn.h:109:9
    t.method("AddBinContent", static_cast<void (THn::*)(const Int_t *, Double_t) >(&THn::AddBinContent));
    t.method("AddBinContent", [](THn& a, const Int_t * arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THn* a, const Int_t * arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THn::AddBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::AddBinContent(Long64_t, Double_t)
    // defined in /opt/root63206jll/include/THn.h:112:9
    t.method("AddBinContent", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::AddBinContent));
    t.method("AddBinContent", [](THn& a, Long64_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THn* a, Long64_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THn::AddBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::AddBinError2(Long64_t, Double_t)
    // defined in /opt/root63206jll/include/THn.h:115:9
    t.method("AddBinError2", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::AddBinError2));

    DEBUG_MSG("Adding wrapper for Double_t THn::GetBinContent(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THn::GetBinContent(const Int_t *)
    // defined in /opt/root63206jll/include/THn.h:120:13
    t.method("GetBinContent", static_cast<Double_t (THn::*)(const Int_t *)  const>(&THn::GetBinContent));

    DEBUG_MSG("Adding wrapper for Double_t THn::GetBinContent(Long64_t, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THn::GetBinContent(Long64_t, Int_t *)
    // defined in /opt/root63206jll/include/THn.h:124:13
    t.method("GetBinContent", static_cast<Double_t (THn::*)(Long64_t, Int_t *)  const>(&THn::GetBinContent));
    t.method("GetBinContent", [](THn const& a, Long64_t arg0)->Double_t { return a.GetBinContent(arg0); });
    t.method("GetBinContent", [](THn const* a, Long64_t arg0)->Double_t { return a->GetBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t THn::GetBinError2(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THn::GetBinError2(Long64_t)
    // defined in /opt/root63206jll/include/THn.h:136:13
    t.method("GetBinError2", static_cast<Double_t (THn::*)(Long64_t)  const>(&THn::GetBinError2));

    DEBUG_MSG("Adding wrapper for const TNDArray & THn::GetArray() (" __HERE__ ")");
    // signature to use in the veto list: const TNDArray & THn::GetArray()
    // defined in /opt/root63206jll/include/THn.h:140:28
    t.method("GetArray", static_cast<const TNDArray & (THn::*)()  const>(&THn::GetArray));

    DEBUG_MSG("Adding wrapper for TNDArray & THn::GetArray() (" __HERE__ ")");
    // signature to use in the veto list: TNDArray & THn::GetArray()
    // defined in /opt/root63206jll/include/THn.h:141:22
    t.method("GetArray", static_cast<TNDArray & (THn::*)() >(&THn::GetArray));

    DEBUG_MSG("Adding wrapper for void THn::Sumw2() (" __HERE__ ")");
    // signature to use in the veto list: void THn::Sumw2()
    // defined in /opt/root63206jll/include/THn.h:143:9
    t.method("Sumw2", static_cast<void (THn::*)() >(&THn::Sumw2));

    DEBUG_MSG("Adding wrapper for TH1D * THn::Projection(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * THn::Projection(Int_t, Option_t *)
    // defined in /opt/root63206jll/include/THn.h:147:15
    t.method("Projection", static_cast<TH1D * (THn::*)(Int_t, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0)->TH1D * { return a.Projection(arg0); });
    t.method("Projection", [](THn const* a, Int_t arg0)->TH1D * { return a->Projection(arg0); });

    DEBUG_MSG("Adding wrapper for TH2D * THn::Projection(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2D * THn::Projection(Int_t, Int_t, Option_t *)
    // defined in /opt/root63206jll/include/THn.h:153:15
    t.method("Projection", static_cast<TH2D * (THn::*)(Int_t, Int_t, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0, Int_t arg1)->TH2D * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THn const* a, Int_t arg0, Int_t arg1)->TH2D * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH3D * THn::Projection(Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH3D * THn::Projection(Int_t, Int_t, Int_t, Option_t *)
    // defined in /opt/root63206jll/include/THn.h:160:15
    t.method("Projection", static_cast<TH3D * (THn::*)(Int_t, Int_t, Int_t, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THn const* a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a->Projection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THn * THn::Projection(Int_t, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::Projection(Int_t, const Int_t *, Option_t *)
    // defined in /opt/root63206jll/include/THn.h:165:15
    t.method("Projection", static_cast<THn * (THn::*)(Int_t, const Int_t *, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0, const Int_t * arg1)->THn * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THn const* a, Int_t arg0, const Int_t * arg1)->THn * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for THn * THn::Rebin(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::Rebin(Int_t)
    // defined in /opt/root63206jll/include/THn.h:170:15
    t.method("Rebin", static_cast<THn * (THn::*)(Int_t)  const>(&THn::Rebin));

    DEBUG_MSG("Adding wrapper for THn * THn::Rebin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::Rebin(const Int_t *)
    // defined in /opt/root63206jll/include/THn.h:173:15
    t.method("Rebin", static_cast<THn * (THn::*)(const Int_t *)  const>(&THn::Rebin));

    DEBUG_MSG("Adding wrapper for void THn::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THn::Reset(Option_t *)
    // defined in /opt/root63206jll/include/THn.h:177:9
    t.method("Reset", static_cast<void (THn::*)(Option_t *) >(&THn::Reset));
    t.method("Reset", [](THn& a)->void { a.Reset(); });
    t.method("Reset", [](THn* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for Version_t THn::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THn::Class_Version()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!Class_Version", static_cast<Version_t (*)() >(&THn::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THn::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THn::IsA()
    // defined in /opt/root63206jll/include/THn.h:183:4
    t.method("IsA", static_cast<TClass * (THn::*)()  const>(&THn::IsA));

    DEBUG_MSG("Adding wrapper for void THn::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THn::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/THn.h:183:4
    t.method("StreamerNVirtual", static_cast<void (THn::*)(TBuffer &) >(&THn::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THn::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THn::DeclFileName()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!DeclFileName", []() { return (std::string)THn::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THn::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THn::ImplFileLine()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!ImplFileLine", static_cast<int (*)() >(&THn::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THn::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THn::ImplFileName()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!ImplFileName", []() { return (std::string)THn::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THn::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THn::Class_Name()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!Class_Name", []() { return (std::string)THn::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THn::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THn::Dictionary()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!Dictionary", static_cast<TClass * (*)() >(&THn::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THn::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THn::Class()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!Class", static_cast<TClass * (*)() >(&THn::Class));

    DEBUG_MSG("Adding wrapper for void THn::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THn::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/THn.h:183:4
    t.method("Streamer", static_cast<void (THn::*)(TBuffer &) >(&THn::Streamer));

    DEBUG_MSG("Adding wrapper for int THn::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THn::DeclFileLine()
    // defined in /opt/root63206jll/include/THn.h:183:4
    module_.method("THn!DeclFileLine", static_cast<int (*)() >(&THn::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THn>> type_;
};
std::shared_ptr<Wrapper> newJlTHn(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHn(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THnSparseArrayChunk> : std::false_type { };
  template<> struct DefaultConstructible<THnSparseArrayChunk> : std::false_type { };
template<> struct SuperType<THnSparseArrayChunk> { typedef TObject type; };
}

// Class generating the wrapper for type THnSparseArrayChunk
// signature to use in the veto file: THnSparseArrayChunk
struct JlTHnSparseArrayChunk: public Wrapper {

  JlTHnSparseArrayChunk(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnSparseArrayChunk (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:30:7
    jlcxx::TypeWrapper<THnSparseArrayChunk>  t = jlModule.add_type<THnSparseArrayChunk>("THnSparseArrayChunk",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnSparseArrayChunk>>(new jlcxx::TypeWrapper<THnSparseArrayChunk>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::THnSparseArrayChunk(Int_t, bool, TArray *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:41:4
    t.constructor<Int_t, bool, TArray *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::AddBin(Int_t, const Char_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::AddBin(Int_t, const Char_t *)
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:51:9
    t.method("AddBin", static_cast<void (THnSparseArrayChunk::*)(Int_t, const Char_t *) >(&THnSparseArrayChunk::AddBin));

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::AddBinContent(Int_t, Double_t)
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:52:9
    t.method("AddBinContent", static_cast<void (THnSparseArrayChunk::*)(Int_t, Double_t) >(&THnSparseArrayChunk::AddBinContent));
    t.method("AddBinContent", [](THnSparseArrayChunk& a, Int_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THnSparseArrayChunk* a, Int_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::Sumw2() (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::Sumw2()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:57:9
    t.method("Sumw2", static_cast<void (THnSparseArrayChunk::*)() >(&THnSparseArrayChunk::Sumw2));

    DEBUG_MSG("Adding wrapper for Int_t THnSparseArrayChunk::GetEntries() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnSparseArrayChunk::GetEntries()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:58:10
    t.method("GetEntries", static_cast<Int_t (THnSparseArrayChunk::*)()  const>(&THnSparseArrayChunk::GetEntries));

    DEBUG_MSG("Adding wrapper for Bool_t THnSparseArrayChunk::Matches(Int_t, const Char_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t THnSparseArrayChunk::Matches(Int_t, const Char_t *)
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:63:11
    t.method("Matches", static_cast<Bool_t (THnSparseArrayChunk::*)(Int_t, const Char_t *)  const>(&THnSparseArrayChunk::Matches));

    DEBUG_MSG("Adding wrapper for Version_t THnSparseArrayChunk::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnSparseArrayChunk::Class_Version()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Class_Version", static_cast<Version_t (*)() >(&THnSparseArrayChunk::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THnSparseArrayChunk::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparseArrayChunk::IsA()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    t.method("IsA", static_cast<TClass * (THnSparseArrayChunk::*)()  const>(&THnSparseArrayChunk::IsA));

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    t.method("StreamerNVirtual", static_cast<void (THnSparseArrayChunk::*)(TBuffer &) >(&THnSparseArrayChunk::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THnSparseArrayChunk::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparseArrayChunk::DeclFileName()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!DeclFileName", []() { return (std::string)THnSparseArrayChunk::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnSparseArrayChunk::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparseArrayChunk::ImplFileLine()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!ImplFileLine", static_cast<int (*)() >(&THnSparseArrayChunk::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THnSparseArrayChunk::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparseArrayChunk::ImplFileName()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!ImplFileName", []() { return (std::string)THnSparseArrayChunk::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnSparseArrayChunk::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparseArrayChunk::Class_Name()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Class_Name", []() { return (std::string)THnSparseArrayChunk::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnSparseArrayChunk::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparseArrayChunk::Dictionary()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Dictionary", static_cast<TClass * (*)() >(&THnSparseArrayChunk::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THnSparseArrayChunk::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparseArrayChunk::Class()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Class", static_cast<TClass * (*)() >(&THnSparseArrayChunk::Class));

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    t.method("Streamer", static_cast<void (THnSparseArrayChunk::*)(TBuffer &) >(&THnSparseArrayChunk::Streamer));

    DEBUG_MSG("Adding wrapper for int THnSparseArrayChunk::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparseArrayChunk::DeclFileLine()
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!DeclFileLine", static_cast<int (*)() >(&THnSparseArrayChunk::DeclFileLine));

    DEBUG_MSG("Adding fCoordinateAllocationSize methods  to provide read access to the field fCoordinateAllocationSize (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:44:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinateAllocationSize
    t.method("fCoordinateAllocationSize", [](const THnSparseArrayChunk& a) -> Int_t { return a.fCoordinateAllocationSize; });
    t.method("fCoordinateAllocationSize", [](THnSparseArrayChunk& a) -> Int_t { return a.fCoordinateAllocationSize; });
    t.method("fCoordinateAllocationSize", [](const THnSparseArrayChunk* a) -> Int_t { return a->fCoordinateAllocationSize; });
    t.method("fCoordinateAllocationSize", [](THnSparseArrayChunk* a) -> Int_t { return a->fCoordinateAllocationSize; });
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:44:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinateAllocationSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCoordinateAllocationSize! methods to provide write access to the field fCoordinateAllocationSize (" __HERE__ ")");
    t.method("fCoordinateAllocationSize!", [](THnSparseArrayChunk& a, Int_t val) -> Int_t { return a.fCoordinateAllocationSize = val; });

    DEBUG_MSG("Adding fCoordinateAllocationSize! methods to provide write access to the field fCoordinateAllocationSize (" __HERE__ ")");
    t.method("fCoordinateAllocationSize!", [](THnSparseArrayChunk* a, Int_t val) -> Int_t { return a->fCoordinateAllocationSize = val; });

    DEBUG_MSG("Adding fSingleCoordinateSize methods  to provide read access to the field fSingleCoordinateSize (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:45:13
    // signature to use in the veto list: THnSparseArrayChunk::fSingleCoordinateSize
    t.method("fSingleCoordinateSize", [](const THnSparseArrayChunk& a) -> Int_t { return a.fSingleCoordinateSize; });
    t.method("fSingleCoordinateSize", [](THnSparseArrayChunk& a) -> Int_t { return a.fSingleCoordinateSize; });
    t.method("fSingleCoordinateSize", [](const THnSparseArrayChunk* a) -> Int_t { return a->fSingleCoordinateSize; });
    t.method("fSingleCoordinateSize", [](THnSparseArrayChunk* a) -> Int_t { return a->fSingleCoordinateSize; });
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:45:13
    // signature to use in the veto list: THnSparseArrayChunk::fSingleCoordinateSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSingleCoordinateSize! methods to provide write access to the field fSingleCoordinateSize (" __HERE__ ")");
    t.method("fSingleCoordinateSize!", [](THnSparseArrayChunk& a, Int_t val) -> Int_t { return a.fSingleCoordinateSize = val; });

    DEBUG_MSG("Adding fSingleCoordinateSize! methods to provide write access to the field fSingleCoordinateSize (" __HERE__ ")");
    t.method("fSingleCoordinateSize!", [](THnSparseArrayChunk* a, Int_t val) -> Int_t { return a->fSingleCoordinateSize = val; });

    DEBUG_MSG("Adding fCoordinatesSize methods  to provide read access to the field fCoordinatesSize (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:46:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinatesSize
    t.method("fCoordinatesSize", [](const THnSparseArrayChunk& a) -> Int_t { return a.fCoordinatesSize; });
    t.method("fCoordinatesSize", [](THnSparseArrayChunk& a) -> Int_t { return a.fCoordinatesSize; });
    t.method("fCoordinatesSize", [](const THnSparseArrayChunk* a) -> Int_t { return a->fCoordinatesSize; });
    t.method("fCoordinatesSize", [](THnSparseArrayChunk* a) -> Int_t { return a->fCoordinatesSize; });
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:46:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinatesSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCoordinatesSize! methods to provide write access to the field fCoordinatesSize (" __HERE__ ")");
    t.method("fCoordinatesSize!", [](THnSparseArrayChunk& a, Int_t val) -> Int_t { return a.fCoordinatesSize = val; });

    DEBUG_MSG("Adding fCoordinatesSize! methods to provide write access to the field fCoordinatesSize (" __HERE__ ")");
    t.method("fCoordinatesSize!", [](THnSparseArrayChunk* a, Int_t val) -> Int_t { return a->fCoordinatesSize = val; });

    DEBUG_MSG("Adding fCoordinates methods  to provide read access to the field fCoordinates (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:47:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinates
    t.method("fCoordinates", [](const THnSparseArrayChunk& a) -> Char_t * { return a.fCoordinates; });
    t.method("fCoordinates", [](THnSparseArrayChunk& a) -> Char_t * { return a.fCoordinates; });
    t.method("fCoordinates", [](const THnSparseArrayChunk* a) -> Char_t * { return a->fCoordinates; });
    t.method("fCoordinates", [](THnSparseArrayChunk* a) -> Char_t * { return a->fCoordinates; });
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:47:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinates
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCoordinates! methods to provide write access to the field fCoordinates (" __HERE__ ")");
    t.method("fCoordinates!", [](THnSparseArrayChunk& a, Char_t * val) -> Char_t * { return a.fCoordinates = val; });

    DEBUG_MSG("Adding fCoordinates! methods to provide write access to the field fCoordinates (" __HERE__ ")");
    t.method("fCoordinates!", [](THnSparseArrayChunk* a, Char_t * val) -> Char_t * { return a->fCoordinates = val; });

    DEBUG_MSG("Adding fContent methods  to provide read access to the field fContent (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:48:13
    // signature to use in the veto list: THnSparseArrayChunk::fContent
    t.method("fContent", [](const THnSparseArrayChunk& a) -> TArray * { return a.fContent; });
    t.method("fContent", [](THnSparseArrayChunk& a) -> TArray * { return a.fContent; });
    t.method("fContent", [](const THnSparseArrayChunk* a) -> TArray * { return a->fContent; });
    t.method("fContent", [](THnSparseArrayChunk* a) -> TArray * { return a->fContent; });
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:48:13
    // signature to use in the veto list: THnSparseArrayChunk::fContent
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fContent! methods to provide write access to the field fContent (" __HERE__ ")");
    t.method("fContent!", [](THnSparseArrayChunk& a, TArray * val) -> TArray * { return a.fContent = val; });

    DEBUG_MSG("Adding fContent! methods to provide write access to the field fContent (" __HERE__ ")");
    t.method("fContent!", [](THnSparseArrayChunk* a, TArray * val) -> TArray * { return a->fContent = val; });

    DEBUG_MSG("Adding fSumw2 methods  to provide read access to the field fSumw2 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:49:13
    // signature to use in the veto list: THnSparseArrayChunk::fSumw2
    t.method("fSumw2", [](const THnSparseArrayChunk& a) -> TArrayD * { return a.fSumw2; });
    t.method("fSumw2", [](THnSparseArrayChunk& a) -> TArrayD * { return a.fSumw2; });
    t.method("fSumw2", [](const THnSparseArrayChunk* a) -> TArrayD * { return a->fSumw2; });
    t.method("fSumw2", [](THnSparseArrayChunk* a) -> TArrayD * { return a->fSumw2; });
    // defined in /opt/root63206jll/include/THnSparse_Internal.h:49:13
    // signature to use in the veto list: THnSparseArrayChunk::fSumw2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSumw2! methods to provide write access to the field fSumw2 (" __HERE__ ")");
    t.method("fSumw2!", [](THnSparseArrayChunk& a, TArrayD * val) -> TArrayD * { return a.fSumw2 = val; });

    DEBUG_MSG("Adding fSumw2! methods to provide write access to the field fSumw2 (" __HERE__ ")");
    t.method("fSumw2!", [](THnSparseArrayChunk* a, TArrayD * val) -> TArrayD * { return a->fSumw2 = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnSparseArrayChunk>> type_;
};
std::shared_ptr<Wrapper> newJlTHnSparseArrayChunk(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnSparseArrayChunk(module));
}
