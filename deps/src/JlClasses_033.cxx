// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<THnSparseArrayChunk> : std::false_type { };
  template<> struct DefaultConstructible<THnSparseArrayChunk> : std::false_type { };
template<> struct SuperType<THnSparseArrayChunk> { typedef TObject type; };
}

// Class generating the wrapper for type THnSparseArrayChunk
// signature to use in the veto file: THnSparseArrayChunk
struct JlTHnSparseArrayChunk: public Wrapper {

  JlTHnSparseArrayChunk(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnSparseArrayChunk (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:30:7
    jlcxx::TypeWrapper<THnSparseArrayChunk>  t = jlModule.add_type<THnSparseArrayChunk>("THnSparseArrayChunk",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnSparseArrayChunk>>(new jlcxx::TypeWrapper<THnSparseArrayChunk>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::THnSparseArrayChunk(Int_t, bool, TArray *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:41:4
    t.constructor<Int_t, bool, TArray *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::AddBin(Int_t, const Char_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::AddBin(Int_t, const Char_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:51:9
    t.method("AddBin", static_cast<void (THnSparseArrayChunk::*)(Int_t, const Char_t *) >(&THnSparseArrayChunk::AddBin));

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:52:9
    t.method("AddBinContent", static_cast<void (THnSparseArrayChunk::*)(Int_t, Double_t) >(&THnSparseArrayChunk::AddBinContent));
    t.method("AddBinContent", [](THnSparseArrayChunk& a, Int_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THnSparseArrayChunk* a, Int_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::Sumw2() (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::Sumw2()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:57:9
    t.method("Sumw2", static_cast<void (THnSparseArrayChunk::*)() >(&THnSparseArrayChunk::Sumw2));

    DEBUG_MSG("Adding wrapper for Int_t THnSparseArrayChunk::GetEntries() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnSparseArrayChunk::GetEntries()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:58:10
    t.method("GetEntries", static_cast<Int_t (THnSparseArrayChunk::*)()  const>(&THnSparseArrayChunk::GetEntries));

    DEBUG_MSG("Adding wrapper for Bool_t THnSparseArrayChunk::Matches(Int_t, const Char_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t THnSparseArrayChunk::Matches(Int_t, const Char_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:63:11
    t.method("Matches", static_cast<Bool_t (THnSparseArrayChunk::*)(Int_t, const Char_t *)  const>(&THnSparseArrayChunk::Matches));

    DEBUG_MSG("Adding wrapper for Version_t THnSparseArrayChunk::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnSparseArrayChunk::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Class_Version", static_cast<Version_t (*)() >(&THnSparseArrayChunk::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THnSparseArrayChunk::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparseArrayChunk::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    t.method("IsA", static_cast<TClass * (THnSparseArrayChunk::*)()  const>(&THnSparseArrayChunk::IsA));

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    t.method("StreamerNVirtual", static_cast<void (THnSparseArrayChunk::*)(TBuffer &) >(&THnSparseArrayChunk::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THnSparseArrayChunk::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparseArrayChunk::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!DeclFileName", []() { return (std::string)THnSparseArrayChunk::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnSparseArrayChunk::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparseArrayChunk::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!ImplFileLine", static_cast<int (*)() >(&THnSparseArrayChunk::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THnSparseArrayChunk::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparseArrayChunk::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!ImplFileName", []() { return (std::string)THnSparseArrayChunk::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnSparseArrayChunk::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparseArrayChunk::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Class_Name", []() { return (std::string)THnSparseArrayChunk::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnSparseArrayChunk::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparseArrayChunk::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Dictionary", static_cast<TClass * (*)() >(&THnSparseArrayChunk::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THnSparseArrayChunk::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparseArrayChunk::Class()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!Class", static_cast<TClass * (*)() >(&THnSparseArrayChunk::Class));

    DEBUG_MSG("Adding wrapper for void THnSparseArrayChunk::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparseArrayChunk::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    t.method("Streamer", static_cast<void (THnSparseArrayChunk::*)(TBuffer &) >(&THnSparseArrayChunk::Streamer));

    DEBUG_MSG("Adding wrapper for int THnSparseArrayChunk::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparseArrayChunk::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:67:4
    module_.method("THnSparseArrayChunk!DeclFileLine", static_cast<int (*)() >(&THnSparseArrayChunk::DeclFileLine));

    DEBUG_MSG("Adding fCoordinateAllocationSize methods  to provide read access to the field fCoordinateAllocationSize (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:44:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinateAllocationSize
    t.method("fCoordinateAllocationSize", [](const THnSparseArrayChunk& a) -> Int_t { return a.fCoordinateAllocationSize; });
    t.method("fCoordinateAllocationSize", [](THnSparseArrayChunk& a) -> Int_t { return a.fCoordinateAllocationSize; });
    t.method("fCoordinateAllocationSize", [](const THnSparseArrayChunk* a) -> Int_t { return a->fCoordinateAllocationSize; });
    t.method("fCoordinateAllocationSize", [](THnSparseArrayChunk* a) -> Int_t { return a->fCoordinateAllocationSize; });
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:44:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinateAllocationSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCoordinateAllocationSize! methods to provide write access to the field fCoordinateAllocationSize (" __HERE__ ")");
    t.method("fCoordinateAllocationSize!", [](THnSparseArrayChunk& a, Int_t val) -> Int_t { return a.fCoordinateAllocationSize = val; });

    DEBUG_MSG("Adding fCoordinateAllocationSize! methods to provide write access to the field fCoordinateAllocationSize (" __HERE__ ")");
    t.method("fCoordinateAllocationSize!", [](THnSparseArrayChunk* a, Int_t val) -> Int_t { return a->fCoordinateAllocationSize = val; });

    DEBUG_MSG("Adding fSingleCoordinateSize methods  to provide read access to the field fSingleCoordinateSize (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:45:13
    // signature to use in the veto list: THnSparseArrayChunk::fSingleCoordinateSize
    t.method("fSingleCoordinateSize", [](const THnSparseArrayChunk& a) -> Int_t { return a.fSingleCoordinateSize; });
    t.method("fSingleCoordinateSize", [](THnSparseArrayChunk& a) -> Int_t { return a.fSingleCoordinateSize; });
    t.method("fSingleCoordinateSize", [](const THnSparseArrayChunk* a) -> Int_t { return a->fSingleCoordinateSize; });
    t.method("fSingleCoordinateSize", [](THnSparseArrayChunk* a) -> Int_t { return a->fSingleCoordinateSize; });
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:45:13
    // signature to use in the veto list: THnSparseArrayChunk::fSingleCoordinateSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSingleCoordinateSize! methods to provide write access to the field fSingleCoordinateSize (" __HERE__ ")");
    t.method("fSingleCoordinateSize!", [](THnSparseArrayChunk& a, Int_t val) -> Int_t { return a.fSingleCoordinateSize = val; });

    DEBUG_MSG("Adding fSingleCoordinateSize! methods to provide write access to the field fSingleCoordinateSize (" __HERE__ ")");
    t.method("fSingleCoordinateSize!", [](THnSparseArrayChunk* a, Int_t val) -> Int_t { return a->fSingleCoordinateSize = val; });

    DEBUG_MSG("Adding fCoordinatesSize methods  to provide read access to the field fCoordinatesSize (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:46:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinatesSize
    t.method("fCoordinatesSize", [](const THnSparseArrayChunk& a) -> Int_t { return a.fCoordinatesSize; });
    t.method("fCoordinatesSize", [](THnSparseArrayChunk& a) -> Int_t { return a.fCoordinatesSize; });
    t.method("fCoordinatesSize", [](const THnSparseArrayChunk* a) -> Int_t { return a->fCoordinatesSize; });
    t.method("fCoordinatesSize", [](THnSparseArrayChunk* a) -> Int_t { return a->fCoordinatesSize; });
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:46:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinatesSize
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCoordinatesSize! methods to provide write access to the field fCoordinatesSize (" __HERE__ ")");
    t.method("fCoordinatesSize!", [](THnSparseArrayChunk& a, Int_t val) -> Int_t { return a.fCoordinatesSize = val; });

    DEBUG_MSG("Adding fCoordinatesSize! methods to provide write access to the field fCoordinatesSize (" __HERE__ ")");
    t.method("fCoordinatesSize!", [](THnSparseArrayChunk* a, Int_t val) -> Int_t { return a->fCoordinatesSize = val; });

    DEBUG_MSG("Adding fCoordinates methods  to provide read access to the field fCoordinates (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:47:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinates
    t.method("fCoordinates", [](const THnSparseArrayChunk& a) -> Char_t * { return a.fCoordinates; });
    t.method("fCoordinates", [](THnSparseArrayChunk& a) -> Char_t * { return a.fCoordinates; });
    t.method("fCoordinates", [](const THnSparseArrayChunk* a) -> Char_t * { return a->fCoordinates; });
    t.method("fCoordinates", [](THnSparseArrayChunk* a) -> Char_t * { return a->fCoordinates; });
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:47:13
    // signature to use in the veto list: THnSparseArrayChunk::fCoordinates
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCoordinates! methods to provide write access to the field fCoordinates (" __HERE__ ")");
    t.method("fCoordinates!", [](THnSparseArrayChunk& a, Char_t * val) -> Char_t * { return a.fCoordinates = val; });

    DEBUG_MSG("Adding fCoordinates! methods to provide write access to the field fCoordinates (" __HERE__ ")");
    t.method("fCoordinates!", [](THnSparseArrayChunk* a, Char_t * val) -> Char_t * { return a->fCoordinates = val; });

    DEBUG_MSG("Adding fContent methods  to provide read access to the field fContent (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:48:13
    // signature to use in the veto list: THnSparseArrayChunk::fContent
    t.method("fContent", [](const THnSparseArrayChunk& a) -> TArray * { return a.fContent; });
    t.method("fContent", [](THnSparseArrayChunk& a) -> TArray * { return a.fContent; });
    t.method("fContent", [](const THnSparseArrayChunk* a) -> TArray * { return a->fContent; });
    t.method("fContent", [](THnSparseArrayChunk* a) -> TArray * { return a->fContent; });
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:48:13
    // signature to use in the veto list: THnSparseArrayChunk::fContent
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fContent! methods to provide write access to the field fContent (" __HERE__ ")");
    t.method("fContent!", [](THnSparseArrayChunk& a, TArray * val) -> TArray * { return a.fContent = val; });

    DEBUG_MSG("Adding fContent! methods to provide write access to the field fContent (" __HERE__ ")");
    t.method("fContent!", [](THnSparseArrayChunk* a, TArray * val) -> TArray * { return a->fContent = val; });

    DEBUG_MSG("Adding fSumw2 methods  to provide read access to the field fSumw2 (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:49:13
    // signature to use in the veto list: THnSparseArrayChunk::fSumw2
    t.method("fSumw2", [](const THnSparseArrayChunk& a) -> TArrayD * { return a.fSumw2; });
    t.method("fSumw2", [](THnSparseArrayChunk& a) -> TArrayD * { return a.fSumw2; });
    t.method("fSumw2", [](const THnSparseArrayChunk* a) -> TArrayD * { return a->fSumw2; });
    t.method("fSumw2", [](THnSparseArrayChunk* a) -> TArrayD * { return a->fSumw2; });
    // defined in /home/pgras/.julia/conda/3/include/THnSparse_Internal.h:49:13
    // signature to use in the veto list: THnSparseArrayChunk::fSumw2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSumw2! methods to provide write access to the field fSumw2 (" __HERE__ ")");
    t.method("fSumw2!", [](THnSparseArrayChunk& a, TArrayD * val) -> TArrayD * { return a.fSumw2 = val; });

    DEBUG_MSG("Adding fSumw2! methods to provide write access to the field fSumw2 (" __HERE__ ")");
    t.method("fSumw2!", [](THnSparseArrayChunk* a, TArrayD * val) -> TArrayD * { return a->fSumw2 = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnSparseArrayChunk>> type_;
};
std::shared_ptr<Wrapper> newJlTHnSparseArrayChunk(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnSparseArrayChunk(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THnSparse> : std::false_type { };
  template<> struct DefaultConstructible<THnSparse> : std::false_type { };
template<> struct SuperType<THnSparse> { typedef THnBase type; };
}

// Class generating the wrapper for type THnSparse
// signature to use in the veto file: THnSparse
struct JlTHnSparse: public Wrapper {

  JlTHnSparse(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnSparse (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:36:7
    jlcxx::TypeWrapper<THnSparse>  t = jlModule.add_type<THnSparse>("THnSparse",
      jlcxx::julia_base_type<THnBase>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnSparse>>(new jlcxx::TypeWrapper<THnSparse>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::CreateSparse(const char *, const char *, const TH1 *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::CreateSparse(const char *, const char *, const TH1 *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:76:22
    module_.method("THnSparse!CreateSparse", static_cast<THnSparse * (*)(const char *, const char *, const TH1 *, Int_t) >(&THnSparse::CreateSparse));
    module_.method("THnSparse!CreateSparse", [](const char * arg0, const char * arg1, const TH1 * arg2)->THnSparse * { return THnSparse::CreateSparse(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::CreateSparse(const char *, const char *, const THnBase *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::CreateSparse(const char *, const char *, const THnBase *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:81:22
    module_.method("THnSparse!CreateSparse", static_cast<THnSparse * (*)(const char *, const char *, const THnBase *, Int_t) >(&THnSparse::CreateSparse));
    module_.method("THnSparse!CreateSparse", [](const char * arg0, const char * arg1, const THnBase * arg2)->THnSparse * { return THnSparse::CreateSparse(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t THnSparse::GetChunkSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnSparse::GetChunkSize()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:87:10
    t.method("GetChunkSize", static_cast<Int_t (THnSparse::*)()  const>(&THnSparse::GetChunkSize));

    DEBUG_MSG("Adding wrapper for Int_t THnSparse::GetNChunks() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnSparse::GetNChunks()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:88:10
    t.method("GetNChunks", static_cast<Int_t (THnSparse::*)()  const>(&THnSparse::GetNChunks));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetNbins()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:92:13
    t.method("GetNbins", static_cast<Long64_t (THnSparse::*)()  const>(&THnSparse::GetNbins));

    DEBUG_MSG("Adding wrapper for void THnSparse::SetFilledBins(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetFilledBins(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:93:9
    t.method("SetFilledBins", static_cast<void (THnSparse::*)(Long64_t) >(&THnSparse::SetFilledBins));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:95:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Int_t *)  const>(&THnSparse::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:96:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Double_t *)  const>(&THnSparse::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const char *[]) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const char *[])
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:97:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const char *[])  const>(&THnSparse::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:98:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Int_t *, Bool_t) >(&THnSparse::GetBin));
    t.method("GetBin", [](THnSparse& a, const Int_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THnSparse* a, const Int_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:99:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const Double_t *, Bool_t) >(&THnSparse::GetBin));
    t.method("GetBin", [](THnSparse& a, const Double_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THnSparse* a, const Double_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THnSparse::GetBin(const char *[], Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnSparse::GetBin(const char *[], Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:100:13
    t.method("GetBin", static_cast<Long64_t (THnSparse::*)(const char *[], Bool_t) >(&THnSparse::GetBin));
    t.method("GetBin", [](THnSparse& a, const char * arg0[])->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THnSparse* a, const char * arg0[])->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparse::SetBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetBinContent(const Int_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:104:9
    t.method("SetBinContent", static_cast<void (THnSparse::*)(const Int_t *, Double_t) >(&THnSparse::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THnSparse::SetBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetBinContent(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:107:9
    t.method("SetBinContent", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THnSparse::SetBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::SetBinError2(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:108:9
    t.method("SetBinError2", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::SetBinError2));

    DEBUG_MSG("Adding wrapper for void THnSparse::AddBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::AddBinContent(const Int_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:112:9
    t.method("AddBinContent", static_cast<void (THnSparse::*)(const Int_t *, Double_t) >(&THnSparse::AddBinContent));
    t.method("AddBinContent", [](THnSparse& a, const Int_t * arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THnSparse* a, const Int_t * arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparse::AddBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::AddBinContent(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:115:9
    t.method("AddBinContent", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::AddBinContent));
    t.method("AddBinContent", [](THnSparse& a, Long64_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THnSparse* a, Long64_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THnSparse::AddBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::AddBinError2(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:116:9
    t.method("AddBinError2", static_cast<void (THnSparse::*)(Long64_t, Double_t) >(&THnSparse::AddBinError2));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetBinContent(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetBinContent(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:120:13
    t.method("GetBinContent", static_cast<Double_t (THnSparse::*)(const Int_t *)  const>(&THnSparse::GetBinContent));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetBinContent(Long64_t, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetBinContent(Long64_t, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:124:13
    t.method("GetBinContent", static_cast<Double_t (THnSparse::*)(Long64_t, Int_t *)  const>(&THnSparse::GetBinContent));
    t.method("GetBinContent", [](THnSparse const& a, Long64_t arg0)->Double_t { return a.GetBinContent(arg0); });
    t.method("GetBinContent", [](THnSparse const* a, Long64_t arg0)->Double_t { return a->GetBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetBinError2(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetBinError2(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:125:13
    t.method("GetBinError2", static_cast<Double_t (THnSparse::*)(Long64_t)  const>(&THnSparse::GetBinError2));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetSparseFractionBins() (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetSparseFractionBins()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:127:13
    t.method("GetSparseFractionBins", static_cast<Double_t (THnSparse::*)()  const>(&THnSparse::GetSparseFractionBins));

    DEBUG_MSG("Adding wrapper for Double_t THnSparse::GetSparseFractionMem() (" __HERE__ ")");
    // signature to use in the veto list: Double_t THnSparse::GetSparseFractionMem()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:128:13
    t.method("GetSparseFractionMem", static_cast<Double_t (THnSparse::*)()  const>(&THnSparse::GetSparseFractionMem));

    DEBUG_MSG("Adding wrapper for TH1D * THnSparse::Projection(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * THnSparse::Projection(Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:133:15
    t.method("Projection", static_cast<TH1D * (THnSparse::*)(Int_t, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0)->TH1D * { return a.Projection(arg0); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0)->TH1D * { return a->Projection(arg0); });

    DEBUG_MSG("Adding wrapper for TH2D * THnSparse::Projection(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2D * THnSparse::Projection(Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:140:15
    t.method("Projection", static_cast<TH2D * (THnSparse::*)(Int_t, Int_t, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0, Int_t arg1)->TH2D * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0, Int_t arg1)->TH2D * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH3D * THnSparse::Projection(Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH3D * THnSparse::Projection(Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:148:15
    t.method("Projection", static_cast<TH3D * (THnSparse::*)(Int_t, Int_t, Int_t, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a->Projection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::Projection(Int_t, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::Projection(Int_t, const Int_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:153:15
    t.method("Projection", static_cast<THnSparse * (THnSparse::*)(Int_t, const Int_t *, Option_t *)  const>(&THnSparse::Projection));
    t.method("Projection", [](THnSparse const& a, Int_t arg0, const Int_t * arg1)->THnSparse * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnSparse const* a, Int_t arg0, const Int_t * arg1)->THnSparse * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::Rebin(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::Rebin(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:158:15
    t.method("Rebin", static_cast<THnSparse * (THnSparse::*)(Int_t)  const>(&THnSparse::Rebin));

    DEBUG_MSG("Adding wrapper for THnSparse * THnSparse::Rebin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: THnSparse * THnSparse::Rebin(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:161:15
    t.method("Rebin", static_cast<THnSparse * (THnSparse::*)(const Int_t *)  const>(&THnSparse::Rebin));

    DEBUG_MSG("Adding wrapper for void THnSparse::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:165:9
    t.method("Reset", static_cast<void (THnSparse::*)(Option_t *) >(&THnSparse::Reset));
    t.method("Reset", [](THnSparse& a)->void { a.Reset(); });
    t.method("Reset", [](THnSparse* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void THnSparse::Sumw2() (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::Sumw2()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:166:9
    t.method("Sumw2", static_cast<void (THnSparse::*)() >(&THnSparse::Sumw2));

    DEBUG_MSG("Adding wrapper for Version_t THnSparse::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnSparse::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!Class_Version", static_cast<Version_t (*)() >(&THnSparse::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THnSparse::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparse::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    t.method("IsA", static_cast<TClass * (THnSparse::*)()  const>(&THnSparse::IsA));

    DEBUG_MSG("Adding wrapper for void THnSparse::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    t.method("StreamerNVirtual", static_cast<void (THnSparse::*)(TBuffer &) >(&THnSparse::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THnSparse::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparse::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!DeclFileName", []() { return (std::string)THnSparse::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnSparse::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparse::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!ImplFileLine", static_cast<int (*)() >(&THnSparse::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THnSparse::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparse::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!ImplFileName", []() { return (std::string)THnSparse::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnSparse::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnSparse::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!Class_Name", []() { return (std::string)THnSparse::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnSparse::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparse::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!Dictionary", static_cast<TClass * (*)() >(&THnSparse::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THnSparse::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnSparse::Class()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!Class", static_cast<TClass * (*)() >(&THnSparse::Class));

    DEBUG_MSG("Adding wrapper for void THnSparse::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnSparse::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    t.method("Streamer", static_cast<void (THnSparse::*)(TBuffer &) >(&THnSparse::Streamer));

    DEBUG_MSG("Adding wrapper for int THnSparse::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnSparse::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THnSparse.h:168:4
    module_.method("THnSparse!DeclFileLine", static_cast<int (*)() >(&THnSparse::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnSparse>> type_;
};
std::shared_ptr<Wrapper> newJlTHnSparse(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnSparse(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THStack> : std::false_type { };
  template<> struct DefaultConstructible<THStack> : std::false_type { };
template<> struct SuperType<THStack> { typedef TNamed type; };
}

// Class generating the wrapper for type THStack
// signature to use in the veto file: THStack
struct JlTHStack: public Wrapper {

  JlTHStack(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THStack (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:38:7
    jlcxx::TypeWrapper<THStack>  t = jlModule.add_type<THStack>("THStack",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THStack>>(new jlcxx::TypeWrapper<THStack>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THStack::THStack(const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:56:4
    t.constructor<const char *, const char *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THStack::THStack(TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t, Option_t *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:57:4
    t.constructor<TH1 *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t, Option_t *>(/*finalize=*/true);
    t.constructor<TH1 *, Option_t *, const char *, const char *, Int_t, Int_t, Int_t, Int_t, Option_t *, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void THStack::THStack(const THStack &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:62:4
    t.constructor<const THStack &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void THStack::Add(TH1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Add(TH1 *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:64:21
    t.method("Add", static_cast<void (THStack::*)(TH1 *, Option_t *) >(&THStack::Add));
    t.method("Add", [](THStack& a, TH1 * arg0)->void { a.Add(arg0); });
    t.method("Add", [](THStack* a, TH1 * arg0)->void { a->Add(arg0); });

    DEBUG_MSG("Adding wrapper for void THStack::BuildPrimitives(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::BuildPrimitives(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:65:21
    t.method("BuildPrimitives", static_cast<void (THStack::*)(Option_t *) >(&THStack::BuildPrimitives));
    t.method("BuildPrimitives", [](THStack& a)->void { a.BuildPrimitives(); });
    t.method("BuildPrimitives", [](THStack* a)->void { a->BuildPrimitives(); });

    DEBUG_MSG("Adding wrapper for void THStack::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Browse(TBrowser *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:66:21
    t.method("Browse", static_cast<void (THStack::*)(TBrowser *) >(&THStack::Browse));

    DEBUG_MSG("Adding wrapper for Int_t THStack::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THStack::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:67:21
    t.method("DistancetoPrimitive", static_cast<Int_t (THStack::*)(Int_t, Int_t) >(&THStack::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void THStack::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:68:21
    t.method("Draw", static_cast<void (THStack::*)(Option_t *) >(&THStack::Draw));
    t.method("Draw", [](THStack& a)->void { a.Draw(); });
    t.method("Draw", [](THStack* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for TH1 * THStack::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * THStack::GetHistogram()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:69:21
    t.method("GetHistogram", static_cast<TH1 * (THStack::*)()  const>(&THStack::GetHistogram));

    DEBUG_MSG("Adding wrapper for TList * THStack::GetHists() (" __HERE__ ")");
    // signature to use in the veto list: TList * THStack::GetHists()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:70:21
    t.method("GetHists", static_cast<TList * (THStack::*)()  const>(&THStack::GetHists));

    DEBUG_MSG("Adding wrapper for TIter THStack::begin() (" __HERE__ ")");
    // signature to use in the veto list: TIter THStack::begin()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:71:21
    t.method("begin", static_cast<TIter (THStack::*)()  const>(&THStack::begin));

    DEBUG_MSG("Adding wrapper for TIter THStack::end() (" __HERE__ ")");
    // signature to use in the veto list: TIter THStack::end()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:72:21
    t.method("end", static_cast<TIter (THStack::*)()  const>(&THStack::end));

    DEBUG_MSG("Adding wrapper for Int_t THStack::GetNhists() (" __HERE__ ")");
    // signature to use in the veto list: Int_t THStack::GetNhists()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:73:21
    t.method("GetNhists", static_cast<Int_t (THStack::*)()  const>(&THStack::GetNhists));

    DEBUG_MSG("Adding wrapper for TObjArray * THStack::GetStack() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * THStack::GetStack()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:74:21
    t.method("GetStack", static_cast<TObjArray * (THStack::*)() >(&THStack::GetStack));

    DEBUG_MSG("Adding wrapper for Double_t THStack::GetMaximum(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THStack::GetMaximum(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:75:21
    t.method("GetMaximum", static_cast<Double_t (THStack::*)(Option_t *) >(&THStack::GetMaximum));
    t.method("GetMaximum", [](THStack& a)->Double_t { return a.GetMaximum(); });
    t.method("GetMaximum", [](THStack* a)->Double_t { return a->GetMaximum(); });

    DEBUG_MSG("Adding wrapper for Double_t THStack::GetMinimum(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THStack::GetMinimum(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:76:21
    t.method("GetMinimum", static_cast<Double_t (THStack::*)(Option_t *) >(&THStack::GetMinimum));
    t.method("GetMinimum", [](THStack& a)->Double_t { return a.GetMinimum(); });
    t.method("GetMinimum", [](THStack* a)->Double_t { return a->GetMinimum(); });

    DEBUG_MSG("Adding wrapper for TAxis * THStack::GetXaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THStack::GetXaxis()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:77:21
    t.method("GetXaxis", static_cast<TAxis * (THStack::*)()  const>(&THStack::GetXaxis));

    DEBUG_MSG("Adding wrapper for TAxis * THStack::GetYaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THStack::GetYaxis()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:78:21
    t.method("GetYaxis", static_cast<TAxis * (THStack::*)()  const>(&THStack::GetYaxis));

    DEBUG_MSG("Adding wrapper for TAxis * THStack::GetZaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THStack::GetZaxis()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:79:21
    t.method("GetZaxis", static_cast<TAxis * (THStack::*)()  const>(&THStack::GetZaxis));

    DEBUG_MSG("Adding wrapper for void THStack::ls(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::ls(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:80:21
    t.method("ls", static_cast<void (THStack::*)(Option_t *)  const>(&THStack::ls));
    t.method("ls", [](THStack const& a)->void { a.ls(); });
    t.method("ls", [](THStack const* a)->void { a->ls(); });

    DEBUG_MSG("Adding wrapper for void THStack::Modified() (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Modified()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:82:21
    t.method("Modified", static_cast<void (THStack::*)() >(&THStack::Modified));

    DEBUG_MSG("Adding wrapper for void THStack::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:83:21
    t.method("Paint", static_cast<void (THStack::*)(Option_t *) >(&THStack::Paint));
    t.method("Paint", [](THStack& a)->void { a.Paint(); });
    t.method("Paint", [](THStack* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void THStack::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:84:21
    t.method("Print", static_cast<void (THStack::*)(Option_t *)  const>(&THStack::Print));
    t.method("Print", [](THStack const& a)->void { a.Print(); });
    t.method("Print", [](THStack const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void THStack::RecursiveRemove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::RecursiveRemove(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:85:21
    t.method("RecursiveRemove", static_cast<void (THStack::*)(TObject *) >(&THStack::RecursiveRemove));

    DEBUG_MSG("Adding wrapper for void THStack::SetHistogram(TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::SetHistogram(TH1 *)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:87:21
    t.method("SetHistogram", static_cast<void (THStack::*)(TH1 *) >(&THStack::SetHistogram));

    DEBUG_MSG("Adding wrapper for void THStack::SetMaximum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::SetMaximum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:88:21
    t.method("SetMaximum", static_cast<void (THStack::*)(Double_t) >(&THStack::SetMaximum));
    t.method("SetMaximum", [](THStack& a)->void { a.SetMaximum(); });
    t.method("SetMaximum", [](THStack* a)->void { a->SetMaximum(); });

    DEBUG_MSG("Adding wrapper for void THStack::SetMinimum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::SetMinimum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:89:21
    t.method("SetMinimum", static_cast<void (THStack::*)(Double_t) >(&THStack::SetMinimum));
    t.method("SetMinimum", [](THStack& a)->void { a.SetMinimum(); });
    t.method("SetMinimum", [](THStack* a)->void { a->SetMinimum(); });

    DEBUG_MSG("Adding wrapper for Version_t THStack::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THStack::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!Class_Version", static_cast<Version_t (*)() >(&THStack::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THStack::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THStack::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    t.method("IsA", static_cast<TClass * (THStack::*)()  const>(&THStack::IsA));

    DEBUG_MSG("Adding wrapper for void THStack::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    t.method("StreamerNVirtual", static_cast<void (THStack::*)(TBuffer &) >(&THStack::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THStack::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THStack::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!DeclFileName", []() { return (std::string)THStack::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THStack::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THStack::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!ImplFileLine", static_cast<int (*)() >(&THStack::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THStack::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THStack::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!ImplFileName", []() { return (std::string)THStack::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THStack::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THStack::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!Class_Name", []() { return (std::string)THStack::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THStack::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THStack::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!Dictionary", static_cast<TClass * (*)() >(&THStack::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THStack::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THStack::Class()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!Class", static_cast<TClass * (*)() >(&THStack::Class));

    DEBUG_MSG("Adding wrapper for void THStack::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THStack::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    t.method("Streamer", static_cast<void (THStack::*)(TBuffer &) >(&THStack::Streamer));

    DEBUG_MSG("Adding wrapper for int THStack::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THStack::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THStack.h:91:4
    module_.method("THStack!DeclFileLine", static_cast<int (*)() >(&THStack::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THStack>> type_;
};
std::shared_ptr<Wrapper> newJlTHStack(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHStack(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TIter> : std::false_type { };
  template<> struct DefaultConstructible<TIter> : std::false_type { };
}

// Class generating the wrapper for type TIter
// signature to use in the veto file: TIter
struct JlTIter: public Wrapper {

  JlTIter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TIter (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TCollection.h:235:7
    jlcxx::TypeWrapper<TIter>  t = jlModule.add_type<TIter>("TIter");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TIter>>(new jlcxx::TypeWrapper<TIter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TIter>> type_;
};
std::shared_ptr<Wrapper> newJlTIter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTIter(module));
}
