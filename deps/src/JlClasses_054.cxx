// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoRegion> : std::false_type { };
  template<> struct DefaultConstructible<TGeoRegion> : std::false_type { };
template<> struct SuperType<TGeoRegion> { typedef TNamed type; };
}

// Class generating the wrapper for type TGeoRegion
// signature to use in the veto file: TGeoRegion
struct JlTGeoRegion: public Wrapper {

  JlTGeoRegion(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoRegion (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:36:7
    jlcxx::TypeWrapper<TGeoRegion>  t = jlModule.add_type<TGeoRegion>("TGeoRegion",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoRegion>>(new jlcxx::TypeWrapper<TGeoRegion>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoRegion::TGeoRegion(const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:43:4
    t.constructor<const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoRegion::TGeoRegion(const TGeoRegion &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:44:4
    t.constructor<const TGeoRegion &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoRegion & TGeoRegion::operator=(const TGeoRegion &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoRegion & TGeoRegion::operator=(const TGeoRegion &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:45:16
    t.method("assign", static_cast<TGeoRegion & (TGeoRegion::*)(const TGeoRegion &) >(&TGeoRegion::operator=));

    DEBUG_MSG("Adding wrapper for void TGeoRegion::AddVolume(TGeoVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRegion::AddVolume(TGeoVolume *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:49:9
    t.method("AddVolume", static_cast<void (TGeoRegion::*)(TGeoVolume *) >(&TGeoRegion::AddVolume));

    DEBUG_MSG("Adding wrapper for bool TGeoRegion::AddVolume(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool TGeoRegion::AddVolume(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:50:9
    t.method("AddVolume", static_cast<bool (TGeoRegion::*)(const char *) >(&TGeoRegion::AddVolume));

    DEBUG_MSG("Adding wrapper for int TGeoRegion::GetNvolumes() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoRegion::GetNvolumes()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:51:8
    t.method("GetNvolumes", static_cast<int (TGeoRegion::*)()  const>(&TGeoRegion::GetNvolumes));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoRegion::GetVolume(int) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoRegion::GetVolume(int)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:52:16
    t.method("GetVolume", static_cast<TGeoVolume * (TGeoRegion::*)(int)  const>(&TGeoRegion::GetVolume));

    DEBUG_MSG("Adding wrapper for void TGeoRegion::AddCut(const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRegion::AddCut(const char *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:55:9
    t.method("AddCut", static_cast<void (TGeoRegion::*)(const char *, Double_t) >(&TGeoRegion::AddCut));

    DEBUG_MSG("Adding wrapper for void TGeoRegion::AddCut(const TGeoRegionCut &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRegion::AddCut(const TGeoRegionCut &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:56:9
    t.method("AddCut", static_cast<void (TGeoRegion::*)(const TGeoRegionCut &) >(&TGeoRegion::AddCut));

    DEBUG_MSG("Adding wrapper for int TGeoRegion::GetNcuts() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoRegion::GetNcuts()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:57:8
    t.method("GetNcuts", static_cast<int (TGeoRegion::*)()  const>(&TGeoRegion::GetNcuts));

    DEBUG_MSG("Adding wrapper for TGeoRegionCut * TGeoRegion::GetCut(int) (" __HERE__ ")");
    // signature to use in the veto list: TGeoRegionCut * TGeoRegion::GetCut(int)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:58:19
    t.method("GetCut", static_cast<TGeoRegionCut * (TGeoRegion::*)(int)  const>(&TGeoRegion::GetCut));

    DEBUG_MSG("Adding wrapper for void TGeoRegion::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRegion::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:60:9
    t.method("Print", static_cast<void (TGeoRegion::*)(Option_t *)  const>(&TGeoRegion::Print));
    t.method("Print", [](TGeoRegion const& a)->void { a.Print(); });
    t.method("Print", [](TGeoRegion const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for Version_t TGeoRegion::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoRegion::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!Class_Version", static_cast<Version_t (*)() >(&TGeoRegion::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoRegion::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoRegion::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    t.method("IsA", static_cast<TClass * (TGeoRegion::*)()  const>(&TGeoRegion::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoRegion::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRegion::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    t.method("StreamerNVirtual", static_cast<void (TGeoRegion::*)(TBuffer &) >(&TGeoRegion::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoRegion::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoRegion::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!DeclFileName", []() { return (std::string)TGeoRegion::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoRegion::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoRegion::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!ImplFileLine", static_cast<int (*)() >(&TGeoRegion::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoRegion::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoRegion::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!ImplFileName", []() { return (std::string)TGeoRegion::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoRegion::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoRegion::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!Class_Name", []() { return (std::string)TGeoRegion::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoRegion::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoRegion::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!Dictionary", static_cast<TClass * (*)() >(&TGeoRegion::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoRegion::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoRegion::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!Class", static_cast<TClass * (*)() >(&TGeoRegion::Class));

    DEBUG_MSG("Adding wrapper for void TGeoRegion::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRegion::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    t.method("Streamer", static_cast<void (TGeoRegion::*)(TBuffer &) >(&TGeoRegion::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoRegion::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoRegion::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoRegion.h:62:4
    module_.method("TGeoRegion!DeclFileLine", static_cast<int (*)() >(&TGeoRegion::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoRegion>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoRegion(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoRegion(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualGeoTrack> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualGeoTrack> : std::false_type { };
template<> struct SuperType<TVirtualGeoTrack> { typedef TObject type; };
}

// Class generating the wrapper for type TVirtualGeoTrack
// signature to use in the veto file: TVirtualGeoTrack
struct JlTVirtualGeoTrack: public Wrapper {

  JlTVirtualGeoTrack(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualGeoTrack (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:23:7
    jlcxx::TypeWrapper<TVirtualGeoTrack>  t = jlModule.add_type<TVirtualGeoTrack>("TVirtualGeoTrack",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualGeoTrack>>(new jlcxx::TypeWrapper<TVirtualGeoTrack>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for TVirtualGeoTrack * TVirtualGeoTrack::AddDaughter(Int_t, Int_t, TObject *) (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGeoTrack * TVirtualGeoTrack::AddDaughter(Int_t, Int_t, TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:39:30
    t.method("AddDaughter", static_cast<TVirtualGeoTrack * (TVirtualGeoTrack::*)(Int_t, Int_t, TObject *) >(&TVirtualGeoTrack::AddDaughter));
    t.method("AddDaughter", [](TVirtualGeoTrack& a, Int_t arg0, Int_t arg1)->TVirtualGeoTrack * { return a.AddDaughter(arg0, arg1); });
    t.method("AddDaughter", [](TVirtualGeoTrack* a, Int_t arg0, Int_t arg1)->TVirtualGeoTrack * { return a->AddDaughter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::AddDaughter(TVirtualGeoTrack *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::AddDaughter(TVirtualGeoTrack *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:40:18
    t.method("AddDaughter", static_cast<Int_t (TVirtualGeoTrack::*)(TVirtualGeoTrack *) >(&TVirtualGeoTrack::AddDaughter));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::AddPoint(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::AddPoint(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:41:17
    t.method("AddPoint", static_cast<void (TVirtualGeoTrack::*)(Double_t, Double_t, Double_t, Double_t) >(&TVirtualGeoTrack::AddPoint));

    DEBUG_MSG("Adding wrapper for TVirtualGeoTrack * TVirtualGeoTrack::FindTrackWithId(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGeoTrack * TVirtualGeoTrack::FindTrackWithId(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:42:30
    t.method("FindTrackWithId", static_cast<TVirtualGeoTrack * (TVirtualGeoTrack::*)(Int_t)  const>(&TVirtualGeoTrack::FindTrackWithId));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetId() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetId()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:43:10
    t.method("GetId", static_cast<Int_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetId));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetDaughterId(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetDaughterId(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:44:18
    t.method("GetDaughterId", static_cast<Int_t (TVirtualGeoTrack::*)(Int_t)  const>(&TVirtualGeoTrack::GetDaughterId));

    DEBUG_MSG("Adding wrapper for TVirtualGeoTrack * TVirtualGeoTrack::GetDaughter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGeoTrack * TVirtualGeoTrack::GetDaughter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:45:22
    t.method("GetDaughter", static_cast<TVirtualGeoTrack * (TVirtualGeoTrack::*)(Int_t)  const>(&TVirtualGeoTrack::GetDaughter));

    DEBUG_MSG("Adding wrapper for TVirtualGeoTrack * TVirtualGeoTrack::GetMother() (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGeoTrack * TVirtualGeoTrack::GetMother()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:46:22
    t.method("GetMother", static_cast<TVirtualGeoTrack * (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetMother));

    DEBUG_MSG("Adding wrapper for TObject * TVirtualGeoTrack::GetMotherParticle() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TVirtualGeoTrack::GetMotherParticle()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:47:13
    t.method("GetMotherParticle", static_cast<TObject * (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetMotherParticle));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoTrack::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoTrack::GetName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:48:16
    t.method("GetName", [](TVirtualGeoTrack const& a) { return (std::string)a.GetName(); });
    t.method("GetName", [](TVirtualGeoTrack const* a) { return (std::string)a->GetName(); });

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetNdaughters() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetNdaughters()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:49:10
    t.method("GetNdaughters", static_cast<Int_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetNdaughters));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetNpoints() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetNpoints()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:50:18
    t.method("GetNpoints", static_cast<Int_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetNpoints));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetParentId() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetParentId()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:51:10
    t.method("GetParentId", static_cast<Int_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetParentId));

    DEBUG_MSG("Adding wrapper for TObject * TVirtualGeoTrack::GetParticle() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TVirtualGeoTrack::GetParticle()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:52:13
    t.method("GetParticle", static_cast<TObject * (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetParticle));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetPDG() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetPDG()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:53:10
    t.method("GetPDG", static_cast<Int_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetPDG));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetLastPoint(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetLastPoint(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:54:10
    t.method("GetLastPoint", static_cast<Int_t (TVirtualGeoTrack::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TVirtualGeoTrack::GetLastPoint));

    DEBUG_MSG("Adding wrapper for const Double_t * TVirtualGeoTrack::GetFirstPoint() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TVirtualGeoTrack::GetFirstPoint()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:58:20
    t.method("GetFirstPoint", static_cast<const Double_t * (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetFirstPoint));

    DEBUG_MSG("Adding wrapper for const Double_t * TVirtualGeoTrack::GetLastPoint() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TVirtualGeoTrack::GetLastPoint()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:59:20
    t.method("GetLastPoint", static_cast<const Double_t * (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::GetLastPoint));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoTrack::GetPoint(Int_t, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoTrack::GetPoint(Int_t, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:60:18
    t.method("GetPoint", static_cast<Int_t (TVirtualGeoTrack::*)(Int_t, Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TVirtualGeoTrack::GetPoint));

    DEBUG_MSG("Adding wrapper for const Double_t * TVirtualGeoTrack::GetPoint(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TVirtualGeoTrack::GetPoint(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:61:28
    t.method("GetPoint", static_cast<const Double_t * (TVirtualGeoTrack::*)(Int_t)  const>(&TVirtualGeoTrack::GetPoint));

    DEBUG_MSG("Adding wrapper for Bool_t TVirtualGeoTrack::HasPoints() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TVirtualGeoTrack::HasPoints()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:62:11
    t.method("HasPoints", static_cast<Bool_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::HasPoints));

    DEBUG_MSG("Adding wrapper for Bool_t TVirtualGeoTrack::IsInTimeRange() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TVirtualGeoTrack::IsInTimeRange()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:63:11
    t.method("IsInTimeRange", static_cast<Bool_t (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::IsInTimeRange));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:64:9
    t.method("Paint", static_cast<void (TVirtualGeoTrack::*)(Option_t *) >(&TVirtualGeoTrack::Paint));
    t.method("Paint", [](TVirtualGeoTrack& a)->void { a.Paint(); });
    t.method("Paint", [](TVirtualGeoTrack* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::PaintCollect(Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::PaintCollect(Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:65:17
    t.method("PaintCollect", static_cast<void (TVirtualGeoTrack::*)(Double_t, Double_t *) >(&TVirtualGeoTrack::PaintCollect));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::PaintCollectTrack(Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::PaintCollectTrack(Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:66:17
    t.method("PaintCollectTrack", static_cast<void (TVirtualGeoTrack::*)(Double_t, Double_t *) >(&TVirtualGeoTrack::PaintCollectTrack));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::PaintTrack(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::PaintTrack(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:67:17
    t.method("PaintTrack", static_cast<void (TVirtualGeoTrack::*)(Option_t *) >(&TVirtualGeoTrack::PaintTrack));
    t.method("PaintTrack", [](TVirtualGeoTrack& a)->void { a.PaintTrack(); });
    t.method("PaintTrack", [](TVirtualGeoTrack* a)->void { a->PaintTrack(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::ResetTrack() (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::ResetTrack()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:68:17
    t.method("ResetTrack", static_cast<void (TVirtualGeoTrack::*)() >(&TVirtualGeoTrack::ResetTrack));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::SetName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::SetName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:69:9
    t.method("SetName", static_cast<void (TVirtualGeoTrack::*)(const char *) >(&TVirtualGeoTrack::SetName));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::SetParticle(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::SetParticle(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:70:17
    t.method("SetParticle", static_cast<void (TVirtualGeoTrack::*)(TObject *) >(&TVirtualGeoTrack::SetParticle));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::SetParent(TVirtualGeoTrack *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::SetParent(TVirtualGeoTrack *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:71:9
    t.method("SetParent", static_cast<void (TVirtualGeoTrack::*)(TVirtualGeoTrack *) >(&TVirtualGeoTrack::SetParent));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::SetId(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::SetId(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:72:9
    t.method("SetId", static_cast<void (TVirtualGeoTrack::*)(Int_t) >(&TVirtualGeoTrack::SetId));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::SetPDG(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::SetPDG(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:73:17
    t.method("SetPDG", static_cast<void (TVirtualGeoTrack::*)(Int_t) >(&TVirtualGeoTrack::SetPDG));

    DEBUG_MSG("Adding wrapper for Version_t TVirtualGeoTrack::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TVirtualGeoTrack::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!Class_Version", static_cast<Version_t (*)() >(&TVirtualGeoTrack::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGeoTrack::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGeoTrack::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    t.method("IsA", static_cast<TClass * (TVirtualGeoTrack::*)()  const>(&TVirtualGeoTrack::IsA));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    t.method("StreamerNVirtual", static_cast<void (TVirtualGeoTrack::*)(TBuffer &) >(&TVirtualGeoTrack::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoTrack::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoTrack::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!DeclFileName", []() { return (std::string)TVirtualGeoTrack::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TVirtualGeoTrack::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualGeoTrack::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!ImplFileLine", static_cast<int (*)() >(&TVirtualGeoTrack::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoTrack::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoTrack::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!ImplFileName", []() { return (std::string)TVirtualGeoTrack::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoTrack::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoTrack::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!Class_Name", []() { return (std::string)TVirtualGeoTrack::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGeoTrack::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGeoTrack::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!Dictionary", static_cast<TClass * (*)() >(&TVirtualGeoTrack::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGeoTrack::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGeoTrack::Class()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!Class", static_cast<TClass * (*)() >(&TVirtualGeoTrack::Class));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoTrack::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoTrack::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    t.method("Streamer", static_cast<void (TVirtualGeoTrack::*)(TBuffer &) >(&TVirtualGeoTrack::Streamer));

    DEBUG_MSG("Adding wrapper for int TVirtualGeoTrack::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualGeoTrack::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoTrack.h:75:4
    module_.method("TVirtualGeoTrack!DeclFileLine", static_cast<int (*)() >(&TVirtualGeoTrack::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualGeoTrack>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualGeoTrack(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualGeoTrack(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualGeoPainter> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualGeoPainter> : std::false_type { };
template<> struct SuperType<TVirtualGeoPainter> { typedef TObject type; };
}

// Class generating the wrapper for type TVirtualGeoPainter
// signature to use in the veto file: TVirtualGeoPainter
struct JlTVirtualGeoPainter: public Wrapper {

  JlTVirtualGeoPainter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualGeoPainter (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:32:7
    jlcxx::TypeWrapper<TVirtualGeoPainter>  t = jlModule.add_type<TVirtualGeoPainter>("TVirtualGeoPainter",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualGeoPainter>>(new jlcxx::TypeWrapper<TVirtualGeoPainter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::AddSize3D(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::AddSize3D(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:57:17
    t.method("AddSize3D", static_cast<void (TVirtualGeoPainter::*)(Int_t, Int_t, Int_t) >(&TVirtualGeoPainter::AddSize3D));

    DEBUG_MSG("Adding wrapper for TVirtualGeoTrack * TVirtualGeoPainter::AddTrack(Int_t, Int_t, TObject *) (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGeoTrack * TVirtualGeoPainter::AddTrack(Int_t, Int_t, TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:58:30
    t.method("AddTrack", static_cast<TVirtualGeoTrack * (TVirtualGeoPainter::*)(Int_t, Int_t, TObject *) >(&TVirtualGeoPainter::AddTrack));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::AddTrackPoint(Double_t *, Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::AddTrackPoint(Double_t *, Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:59:17
    t.method("AddTrackPoint", static_cast<void (TVirtualGeoPainter::*)(Double_t *, Double_t *, Bool_t) >(&TVirtualGeoPainter::AddTrackPoint));
    t.method("AddTrackPoint", [](TVirtualGeoPainter& a, Double_t * arg0, Double_t * arg1)->void { a.AddTrackPoint(arg0, arg1); });
    t.method("AddTrackPoint", [](TVirtualGeoPainter* a, Double_t * arg0, Double_t * arg1)->void { a->AddTrackPoint(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::BombTranslation(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::BombTranslation(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:60:17
    t.method("BombTranslation", static_cast<void (TVirtualGeoPainter::*)(const Double_t *, Double_t *) >(&TVirtualGeoPainter::BombTranslation));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckPoint(Double_t, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckPoint(Double_t, Double_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:61:17
    t.method("CheckPoint", static_cast<void (TVirtualGeoPainter::*)(Double_t, Double_t, Double_t, Option_t *) >(&TVirtualGeoPainter::CheckPoint));
    t.method("CheckPoint", [](TVirtualGeoPainter& a)->void { a.CheckPoint(); });
    t.method("CheckPoint", [](TVirtualGeoPainter& a, Double_t arg0)->void { a.CheckPoint(arg0); });
    t.method("CheckPoint", [](TVirtualGeoPainter& a, Double_t arg0, Double_t arg1)->void { a.CheckPoint(arg0, arg1); });
    t.method("CheckPoint", [](TVirtualGeoPainter& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.CheckPoint(arg0, arg1, arg2); });
    t.method("CheckPoint", [](TVirtualGeoPainter* a)->void { a->CheckPoint(); });
    t.method("CheckPoint", [](TVirtualGeoPainter* a, Double_t arg0)->void { a->CheckPoint(arg0); });
    t.method("CheckPoint", [](TVirtualGeoPainter* a, Double_t arg0, Double_t arg1)->void { a->CheckPoint(arg0, arg1); });
    t.method("CheckPoint", [](TVirtualGeoPainter* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->CheckPoint(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckShape(TGeoShape *, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckShape(TGeoShape *, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:62:17
    t.method("CheckShape", static_cast<void (TVirtualGeoPainter::*)(TGeoShape *, Int_t, Int_t, Option_t *) >(&TVirtualGeoPainter::CheckShape));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckBoundaryErrors(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckBoundaryErrors(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:63:17
    t.method("CheckBoundaryErrors", static_cast<void (TVirtualGeoPainter::*)(Int_t, Double_t) >(&TVirtualGeoPainter::CheckBoundaryErrors));
    t.method("CheckBoundaryErrors", [](TVirtualGeoPainter& a)->void { a.CheckBoundaryErrors(); });
    t.method("CheckBoundaryErrors", [](TVirtualGeoPainter& a, Int_t arg0)->void { a.CheckBoundaryErrors(arg0); });
    t.method("CheckBoundaryErrors", [](TVirtualGeoPainter* a)->void { a->CheckBoundaryErrors(); });
    t.method("CheckBoundaryErrors", [](TVirtualGeoPainter* a, Int_t arg0)->void { a->CheckBoundaryErrors(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckBoundaryReference(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckBoundaryReference(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:64:17
    t.method("CheckBoundaryReference", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::CheckBoundaryReference));
    t.method("CheckBoundaryReference", [](TVirtualGeoPainter& a)->void { a.CheckBoundaryReference(); });
    t.method("CheckBoundaryReference", [](TVirtualGeoPainter* a)->void { a->CheckBoundaryReference(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckGeometryFull(Bool_t, Bool_t, Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckGeometryFull(Bool_t, Bool_t, Int_t, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:65:17
    t.method("CheckGeometryFull", static_cast<void (TVirtualGeoPainter::*)(Bool_t, Bool_t, Int_t, const Double_t *) >(&TVirtualGeoPainter::CheckGeometryFull));
    t.method("CheckGeometryFull", [](TVirtualGeoPainter& a)->void { a.CheckGeometryFull(); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter& a, Bool_t arg0)->void { a.CheckGeometryFull(arg0); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter& a, Bool_t arg0, Bool_t arg1)->void { a.CheckGeometryFull(arg0, arg1); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter& a, Bool_t arg0, Bool_t arg1, Int_t arg2)->void { a.CheckGeometryFull(arg0, arg1, arg2); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter* a)->void { a->CheckGeometryFull(); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter* a, Bool_t arg0)->void { a->CheckGeometryFull(arg0); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter* a, Bool_t arg0, Bool_t arg1)->void { a->CheckGeometryFull(arg0, arg1); });
    t.method("CheckGeometryFull", [](TVirtualGeoPainter* a, Bool_t arg0, Bool_t arg1, Int_t arg2)->void { a->CheckGeometryFull(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckGeometry(Int_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckGeometry(Int_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:67:17
    t.method("CheckGeometry", static_cast<void (TVirtualGeoPainter::*)(Int_t, Double_t, Double_t, Double_t)  const>(&TVirtualGeoPainter::CheckGeometry));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::CheckOverlaps(const TGeoVolume *, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::CheckOverlaps(const TGeoVolume *, Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:68:17
    t.method("CheckOverlaps", static_cast<void (TVirtualGeoPainter::*)(const TGeoVolume *, Double_t, Option_t *)  const>(&TVirtualGeoPainter::CheckOverlaps));
    t.method("CheckOverlaps", [](TVirtualGeoPainter const& a, const TGeoVolume * arg0)->void { a.CheckOverlaps(arg0); });
    t.method("CheckOverlaps", [](TVirtualGeoPainter const& a, const TGeoVolume * arg0, Double_t arg1)->void { a.CheckOverlaps(arg0, arg1); });
    t.method("CheckOverlaps", [](TVirtualGeoPainter const* a, const TGeoVolume * arg0)->void { a->CheckOverlaps(arg0); });
    t.method("CheckOverlaps", [](TVirtualGeoPainter const* a, const TGeoVolume * arg0, Double_t arg1)->void { a->CheckOverlaps(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::CountVisibleNodes() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::CountVisibleNodes()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:69:18
    t.method("CountVisibleNodes", static_cast<Int_t (TVirtualGeoPainter::*)() >(&TVirtualGeoPainter::CountVisibleNodes));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DefaultAngles() (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DefaultAngles()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:70:17
    t.method("DefaultAngles", static_cast<void (TVirtualGeoPainter::*)() >(&TVirtualGeoPainter::DefaultAngles));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DefaultColors() (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DefaultColors()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:71:17
    t.method("DefaultColors", static_cast<void (TVirtualGeoPainter::*)() >(&TVirtualGeoPainter::DefaultColors));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::DistanceToPrimitiveVol(TGeoVolume *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::DistanceToPrimitiveVol(TGeoVolume *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:72:18
    t.method("DistanceToPrimitiveVol", static_cast<Int_t (TVirtualGeoPainter::*)(TGeoVolume *, Int_t, Int_t) >(&TVirtualGeoPainter::DistanceToPrimitiveVol));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawBatemanSol(TGeoBatemanSol *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawBatemanSol(TGeoBatemanSol *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:73:17
    t.method("DrawBatemanSol", static_cast<void (TVirtualGeoPainter::*)(TGeoBatemanSol *, Option_t *) >(&TVirtualGeoPainter::DrawBatemanSol));
    t.method("DrawBatemanSol", [](TVirtualGeoPainter& a, TGeoBatemanSol * arg0)->void { a.DrawBatemanSol(arg0); });
    t.method("DrawBatemanSol", [](TVirtualGeoPainter* a, TGeoBatemanSol * arg0)->void { a->DrawBatemanSol(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawShape(TGeoShape *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawShape(TGeoShape *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:74:17
    t.method("DrawShape", static_cast<void (TVirtualGeoPainter::*)(TGeoShape *, Option_t *) >(&TVirtualGeoPainter::DrawShape));
    t.method("DrawShape", [](TVirtualGeoPainter& a, TGeoShape * arg0)->void { a.DrawShape(arg0); });
    t.method("DrawShape", [](TVirtualGeoPainter* a, TGeoShape * arg0)->void { a->DrawShape(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawOnly(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawOnly(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:75:17
    t.method("DrawOnly", static_cast<void (TVirtualGeoPainter::*)(Option_t *) >(&TVirtualGeoPainter::DrawOnly));
    t.method("DrawOnly", [](TVirtualGeoPainter& a)->void { a.DrawOnly(); });
    t.method("DrawOnly", [](TVirtualGeoPainter* a)->void { a->DrawOnly(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawOverlap(void *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawOverlap(void *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:76:17
    t.method("DrawOverlap", static_cast<void (TVirtualGeoPainter::*)(void *, Option_t *) >(&TVirtualGeoPainter::DrawOverlap));
    t.method("DrawOverlap", [](TVirtualGeoPainter& a, void * arg0)->void { a.DrawOverlap(arg0); });
    t.method("DrawOverlap", [](TVirtualGeoPainter* a, void * arg0)->void { a->DrawOverlap(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawCurrentPoint(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawCurrentPoint(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:77:17
    t.method("DrawCurrentPoint", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::DrawCurrentPoint));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawPanel() (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawPanel()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:78:17
    t.method("DrawPanel", static_cast<void (TVirtualGeoPainter::*)() >(&TVirtualGeoPainter::DrawPanel));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawPath(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawPath(const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:79:17
    t.method("DrawPath", static_cast<void (TVirtualGeoPainter::*)(const char *, Option_t *) >(&TVirtualGeoPainter::DrawPath));
    t.method("DrawPath", [](TVirtualGeoPainter& a, const char * arg0)->void { a.DrawPath(arg0); });
    t.method("DrawPath", [](TVirtualGeoPainter* a, const char * arg0)->void { a->DrawPath(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawPolygon(const TGeoPolygon *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawPolygon(const TGeoPolygon *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:80:17
    t.method("DrawPolygon", static_cast<void (TVirtualGeoPainter::*)(const TGeoPolygon *) >(&TVirtualGeoPainter::DrawPolygon));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::DrawVolume(TGeoVolume *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::DrawVolume(TGeoVolume *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:81:17
    t.method("DrawVolume", static_cast<void (TVirtualGeoPainter::*)(TGeoVolume *, Option_t *) >(&TVirtualGeoPainter::DrawVolume));
    t.method("DrawVolume", [](TVirtualGeoPainter& a, TGeoVolume * arg0)->void { a.DrawVolume(arg0); });
    t.method("DrawVolume", [](TVirtualGeoPainter* a, TGeoVolume * arg0)->void { a->DrawVolume(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::EditGeometry(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::EditGeometry(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:82:17
    t.method("EditGeometry", static_cast<void (TVirtualGeoPainter::*)(Option_t *) >(&TVirtualGeoPainter::EditGeometry));
    t.method("EditGeometry", [](TVirtualGeoPainter& a)->void { a.EditGeometry(); });
    t.method("EditGeometry", [](TVirtualGeoPainter* a)->void { a->EditGeometry(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::EstimateCameraMove(Double_t, Double_t, Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::EstimateCameraMove(Double_t, Double_t, Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:83:17
    t.method("EstimateCameraMove", static_cast<void (TVirtualGeoPainter::*)(Double_t, Double_t, Double_t *, Double_t *) >(&TVirtualGeoPainter::EstimateCameraMove));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::ExecuteShapeEvent(TGeoShape *, Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::ExecuteShapeEvent(TGeoShape *, Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:84:17
    t.method("ExecuteShapeEvent", static_cast<void (TVirtualGeoPainter::*)(TGeoShape *, Int_t, Int_t, Int_t) >(&TVirtualGeoPainter::ExecuteShapeEvent));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::ExecuteManagerEvent(TGeoManager *, Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::ExecuteManagerEvent(TGeoManager *, Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:85:17
    t.method("ExecuteManagerEvent", static_cast<void (TVirtualGeoPainter::*)(TGeoManager *, Int_t, Int_t, Int_t) >(&TVirtualGeoPainter::ExecuteManagerEvent));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::ExecuteVolumeEvent(TGeoVolume *, Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::ExecuteVolumeEvent(TGeoVolume *, Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:86:17
    t.method("ExecuteVolumeEvent", static_cast<void (TVirtualGeoPainter::*)(TGeoVolume *, Int_t, Int_t, Int_t) >(&TVirtualGeoPainter::ExecuteVolumeEvent));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::GetColor(Int_t, Float_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::GetColor(Int_t, Float_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:87:18
    t.method("GetColor", static_cast<Int_t (TVirtualGeoPainter::*)(Int_t, Float_t)  const>(&TVirtualGeoPainter::GetColor));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::GetNsegments() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::GetNsegments()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:88:18
    t.method("GetNsegments", static_cast<Int_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::GetNsegments));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::GetBombFactors(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::GetBombFactors(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:89:17
    t.method("GetBombFactors", static_cast<void (TVirtualGeoPainter::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TVirtualGeoPainter::GetBombFactors));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::GetBombMode() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::GetBombMode()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:90:18
    t.method("GetBombMode", static_cast<Int_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::GetBombMode));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoPainter::GetDrawPath() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoPainter::GetDrawPath()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:91:24
    t.method("GetDrawPath", [](TVirtualGeoPainter const& a) { return (std::string)a.GetDrawPath(); });
    t.method("GetDrawPath", [](TVirtualGeoPainter const* a) { return (std::string)a->GetDrawPath(); });

    DEBUG_MSG("Adding wrapper for TGeoVolume * TVirtualGeoPainter::GetDrawnVolume() (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TVirtualGeoPainter::GetDrawnVolume()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:92:24
    t.method("GetDrawnVolume", static_cast<TGeoVolume * (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::GetDrawnVolume));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TVirtualGeoPainter::GetTopVolume() (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TVirtualGeoPainter::GetTopVolume()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:93:24
    t.method("GetTopVolume", static_cast<TGeoVolume * (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::GetTopVolume));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::GetViewAngles(Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::GetViewAngles(Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:94:17
    t.method("GetViewAngles", static_cast<void (TVirtualGeoPainter::*)(Double_t &, Double_t &, Double_t &) >(&TVirtualGeoPainter::GetViewAngles));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::GetVisLevel() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::GetVisLevel()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:95:18
    t.method("GetVisLevel", static_cast<Int_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::GetVisLevel));

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::GetVisOption() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::GetVisOption()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:96:18
    t.method("GetVisOption", static_cast<Int_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::GetVisOption));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoPainter::GetVolumeInfo(const TGeoVolume *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoPainter::GetVolumeInfo(const TGeoVolume *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:97:24
    t.method("GetVolumeInfo", [](TVirtualGeoPainter const& a, const TGeoVolume * arg0, Int_t arg1, Int_t arg2) { return (std::string)a.GetVolumeInfo(arg0, arg1, arg2); });
    t.method("GetVolumeInfo", [](TVirtualGeoPainter const* a, const TGeoVolume * arg0, Int_t arg1, Int_t arg2) { return (std::string)a->GetVolumeInfo(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::GrabFocus(Int_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::GrabFocus(Int_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:98:17
    t.method("GrabFocus", static_cast<void (TVirtualGeoPainter::*)(Int_t, Double_t, Double_t, Double_t) >(&TVirtualGeoPainter::GrabFocus));
    t.method("GrabFocus", [](TVirtualGeoPainter& a)->void { a.GrabFocus(); });
    t.method("GrabFocus", [](TVirtualGeoPainter& a, Int_t arg0)->void { a.GrabFocus(arg0); });
    t.method("GrabFocus", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1)->void { a.GrabFocus(arg0, arg1); });
    t.method("GrabFocus", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.GrabFocus(arg0, arg1, arg2); });
    t.method("GrabFocus", [](TVirtualGeoPainter* a)->void { a->GrabFocus(); });
    t.method("GrabFocus", [](TVirtualGeoPainter* a, Int_t arg0)->void { a->GrabFocus(arg0); });
    t.method("GrabFocus", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1)->void { a->GrabFocus(arg0, arg1); });
    t.method("GrabFocus", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->GrabFocus(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t * TVirtualGeoPainter::GetViewBox() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TVirtualGeoPainter::GetViewBox()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:99:22
    t.method("GetViewBox", static_cast<Double_t * (TVirtualGeoPainter::*)() >(&TVirtualGeoPainter::GetViewBox));

    DEBUG_MSG("Adding wrapper for Bool_t TVirtualGeoPainter::IsPaintingShape() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TVirtualGeoPainter::IsPaintingShape()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:100:19
    t.method("IsPaintingShape", static_cast<Bool_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::IsPaintingShape));

    DEBUG_MSG("Adding wrapper for Bool_t TVirtualGeoPainter::IsRaytracing() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TVirtualGeoPainter::IsRaytracing()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:101:19
    t.method("IsRaytracing", static_cast<Bool_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::IsRaytracing));

    DEBUG_MSG("Adding wrapper for Bool_t TVirtualGeoPainter::IsExplodedView() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TVirtualGeoPainter::IsExplodedView()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:102:19
    t.method("IsExplodedView", static_cast<Bool_t (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::IsExplodedView));

    DEBUG_MSG("Adding wrapper for TH2F * TVirtualGeoPainter::LegoPlot(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2F * TVirtualGeoPainter::LegoPlot(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, Double_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:103:18
    t.method("LegoPlot", static_cast<TH2F * (TVirtualGeoPainter::*)(Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, Double_t, Double_t, Option_t *) >(&TVirtualGeoPainter::LegoPlot));
    t.method("LegoPlot", [](TVirtualGeoPainter& a)->TH2F * { return a.LegoPlot(); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0)->TH2F * { return a.LegoPlot(arg0); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1)->TH2F * { return a.LegoPlot(arg0, arg1); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2)->TH2F * { return a.LegoPlot(arg0, arg1, arg2); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->TH2F * { return a.LegoPlot(arg0, arg1, arg2, arg3); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4)->TH2F * { return a.LegoPlot(arg0, arg1, arg2, arg3, arg4); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4, Double_t arg5)->TH2F * { return a.LegoPlot(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->TH2F * { return a.LegoPlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("LegoPlot", [](TVirtualGeoPainter& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->TH2F * { return a.LegoPlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a)->TH2F * { return a->LegoPlot(); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0)->TH2F * { return a->LegoPlot(arg0); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1)->TH2F * { return a->LegoPlot(arg0, arg1); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2)->TH2F * { return a->LegoPlot(arg0, arg1, arg2); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->TH2F * { return a->LegoPlot(arg0, arg1, arg2, arg3); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4)->TH2F * { return a->LegoPlot(arg0, arg1, arg2, arg3, arg4); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4, Double_t arg5)->TH2F * { return a->LegoPlot(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->TH2F * { return a->LegoPlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("LegoPlot", [](TVirtualGeoPainter* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->TH2F * { return a->LegoPlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::ModifiedPad(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::ModifiedPad(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:106:17
    t.method("ModifiedPad", static_cast<void (TVirtualGeoPainter::*)(Bool_t)  const>(&TVirtualGeoPainter::ModifiedPad));
    t.method("ModifiedPad", [](TVirtualGeoPainter const& a)->void { a.ModifiedPad(); });
    t.method("ModifiedPad", [](TVirtualGeoPainter const* a)->void { a->ModifiedPad(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:109:9
    t.method("Paint", static_cast<void (TVirtualGeoPainter::*)(Option_t *) >(&TVirtualGeoPainter::Paint));
    t.method("Paint", [](TVirtualGeoPainter& a)->void { a.Paint(); });
    t.method("Paint", [](TVirtualGeoPainter* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::PaintNode(TGeoNode *, Option_t *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::PaintNode(TGeoNode *, Option_t *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:110:17
    t.method("PaintNode", static_cast<void (TVirtualGeoPainter::*)(TGeoNode *, Option_t *, TGeoMatrix *) >(&TVirtualGeoPainter::PaintNode));
    t.method("PaintNode", [](TVirtualGeoPainter& a, TGeoNode * arg0)->void { a.PaintNode(arg0); });
    t.method("PaintNode", [](TVirtualGeoPainter& a, TGeoNode * arg0, Option_t * arg1)->void { a.PaintNode(arg0, arg1); });
    t.method("PaintNode", [](TVirtualGeoPainter* a, TGeoNode * arg0)->void { a->PaintNode(arg0); });
    t.method("PaintNode", [](TVirtualGeoPainter* a, TGeoNode * arg0, Option_t * arg1)->void { a->PaintNode(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::PaintShape(TGeoShape *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::PaintShape(TGeoShape *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:111:17
    t.method("PaintShape", static_cast<void (TVirtualGeoPainter::*)(TGeoShape *, Option_t *) >(&TVirtualGeoPainter::PaintShape));
    t.method("PaintShape", [](TVirtualGeoPainter& a, TGeoShape * arg0)->void { a.PaintShape(arg0); });
    t.method("PaintShape", [](TVirtualGeoPainter* a, TGeoShape * arg0)->void { a->PaintShape(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::PaintOverlap(void *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::PaintOverlap(void *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:112:17
    t.method("PaintOverlap", static_cast<void (TVirtualGeoPainter::*)(void *, Option_t *) >(&TVirtualGeoPainter::PaintOverlap));
    t.method("PaintOverlap", [](TVirtualGeoPainter& a, void * arg0)->void { a.PaintOverlap(arg0); });
    t.method("PaintOverlap", [](TVirtualGeoPainter* a, void * arg0)->void { a->PaintOverlap(arg0); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::PrintOverlaps() (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::PrintOverlaps()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:113:17
    t.method("PrintOverlaps", static_cast<void (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::PrintOverlaps));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::PaintVolume(TGeoVolume *, Option_t *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::PaintVolume(TGeoVolume *, Option_t *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:114:17
    t.method("PaintVolume", static_cast<void (TVirtualGeoPainter::*)(TGeoVolume *, Option_t *, TGeoMatrix *) >(&TVirtualGeoPainter::PaintVolume));
    t.method("PaintVolume", [](TVirtualGeoPainter& a, TGeoVolume * arg0)->void { a.PaintVolume(arg0); });
    t.method("PaintVolume", [](TVirtualGeoPainter& a, TGeoVolume * arg0, Option_t * arg1)->void { a.PaintVolume(arg0, arg1); });
    t.method("PaintVolume", [](TVirtualGeoPainter* a, TGeoVolume * arg0)->void { a->PaintVolume(arg0); });
    t.method("PaintVolume", [](TVirtualGeoPainter* a, TGeoVolume * arg0, Option_t * arg1)->void { a->PaintVolume(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::RandomPoints(const TGeoVolume *, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::RandomPoints(const TGeoVolume *, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:115:17
    t.method("RandomPoints", static_cast<void (TVirtualGeoPainter::*)(const TGeoVolume *, Int_t, Option_t *) >(&TVirtualGeoPainter::RandomPoints));
    t.method("RandomPoints", [](TVirtualGeoPainter& a, const TGeoVolume * arg0, Int_t arg1)->void { a.RandomPoints(arg0, arg1); });
    t.method("RandomPoints", [](TVirtualGeoPainter* a, const TGeoVolume * arg0, Int_t arg1)->void { a->RandomPoints(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::RandomRays(Int_t, Double_t, Double_t, Double_t, const char *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::RandomRays(Int_t, Double_t, Double_t, Double_t, const char *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:116:17
    t.method("RandomRays", static_cast<void (TVirtualGeoPainter::*)(Int_t, Double_t, Double_t, Double_t, const char *, Bool_t) >(&TVirtualGeoPainter::RandomRays));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::Raytrace(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::Raytrace(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:118:17
    t.method("Raytrace", static_cast<void (TVirtualGeoPainter::*)(Option_t *) >(&TVirtualGeoPainter::Raytrace));
    t.method("Raytrace", [](TVirtualGeoPainter& a)->void { a.Raytrace(); });
    t.method("Raytrace", [](TVirtualGeoPainter* a)->void { a->Raytrace(); });

    DEBUG_MSG("Adding wrapper for TGeoNode * TVirtualGeoPainter::SamplePoints(Int_t, Double_t &, Double_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TVirtualGeoPainter::SamplePoints(Int_t, Double_t &, Double_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:119:22
    t.method("SamplePoints", static_cast<TGeoNode * (TVirtualGeoPainter::*)(Int_t, Double_t &, Double_t, const char *) >(&TVirtualGeoPainter::SamplePoints));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetBombFactors(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetBombFactors(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:121:4
    t.method("SetBombFactors", static_cast<void (TVirtualGeoPainter::*)(Double_t, Double_t, Double_t, Double_t) >(&TVirtualGeoPainter::SetBombFactors));
    t.method("SetBombFactors", [](TVirtualGeoPainter& a)->void { a.SetBombFactors(); });
    t.method("SetBombFactors", [](TVirtualGeoPainter& a, Double_t arg0)->void { a.SetBombFactors(arg0); });
    t.method("SetBombFactors", [](TVirtualGeoPainter& a, Double_t arg0, Double_t arg1)->void { a.SetBombFactors(arg0, arg1); });
    t.method("SetBombFactors", [](TVirtualGeoPainter& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetBombFactors(arg0, arg1, arg2); });
    t.method("SetBombFactors", [](TVirtualGeoPainter* a)->void { a->SetBombFactors(); });
    t.method("SetBombFactors", [](TVirtualGeoPainter* a, Double_t arg0)->void { a->SetBombFactors(arg0); });
    t.method("SetBombFactors", [](TVirtualGeoPainter* a, Double_t arg0, Double_t arg1)->void { a->SetBombFactors(arg0, arg1); });
    t.method("SetBombFactors", [](TVirtualGeoPainter* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetBombFactors(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetClippingShape(TGeoShape *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetClippingShape(TGeoShape *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:122:17
    t.method("SetClippingShape", static_cast<void (TVirtualGeoPainter::*)(TGeoShape *) >(&TVirtualGeoPainter::SetClippingShape));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetExplodedView(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetExplodedView(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:123:17
    t.method("SetExplodedView", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::SetExplodedView));
    t.method("SetExplodedView", [](TVirtualGeoPainter& a)->void { a.SetExplodedView(); });
    t.method("SetExplodedView", [](TVirtualGeoPainter* a)->void { a->SetExplodedView(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetGeoManager(TGeoManager *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetGeoManager(TGeoManager *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:124:17
    t.method("SetGeoManager", static_cast<void (TVirtualGeoPainter::*)(TGeoManager *) >(&TVirtualGeoPainter::SetGeoManager));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetIteratorPlugin(TGeoIteratorPlugin *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetIteratorPlugin(TGeoIteratorPlugin *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:125:17
    t.method("SetIteratorPlugin", static_cast<void (TVirtualGeoPainter::*)(TGeoIteratorPlugin *) >(&TVirtualGeoPainter::SetIteratorPlugin));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetCheckedNode(TGeoNode *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetCheckedNode(TGeoNode *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:126:17
    t.method("SetCheckedNode", static_cast<void (TVirtualGeoPainter::*)(TGeoNode *) >(&TVirtualGeoPainter::SetCheckedNode));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetNsegments(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetNsegments(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:127:17
    t.method("SetNsegments", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::SetNsegments));
    t.method("SetNsegments", [](TVirtualGeoPainter& a)->void { a.SetNsegments(); });
    t.method("SetNsegments", [](TVirtualGeoPainter* a)->void { a->SetNsegments(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetNmeshPoints(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetNmeshPoints(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:128:17
    t.method("SetNmeshPoints", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::SetNmeshPoints));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetRaytracing(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetRaytracing(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:129:17
    t.method("SetRaytracing", static_cast<void (TVirtualGeoPainter::*)(Bool_t) >(&TVirtualGeoPainter::SetRaytracing));
    t.method("SetRaytracing", [](TVirtualGeoPainter& a)->void { a.SetRaytracing(); });
    t.method("SetRaytracing", [](TVirtualGeoPainter* a)->void { a->SetRaytracing(); });

    DEBUG_MSG("Adding wrapper for TVirtualGeoPainter * TVirtualGeoPainter::GeoPainter() (" __HERE__ ")");
    // signature to use in the veto list: TVirtualGeoPainter * TVirtualGeoPainter::GeoPainter()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:130:31
    module_.method("TVirtualGeoPainter!GeoPainter", static_cast<TVirtualGeoPainter * (*)() >(&TVirtualGeoPainter::GeoPainter));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetPainter(const TVirtualGeoPainter *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetPainter(const TVirtualGeoPainter *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:131:16
    module_.method("TVirtualGeoPainter!SetPainter", static_cast<void (*)(const TVirtualGeoPainter *) >(&TVirtualGeoPainter::SetPainter));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetTopVisible(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetTopVisible(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:132:17
    t.method("SetTopVisible", static_cast<void (TVirtualGeoPainter::*)(Bool_t) >(&TVirtualGeoPainter::SetTopVisible));
    t.method("SetTopVisible", [](TVirtualGeoPainter& a)->void { a.SetTopVisible(); });
    t.method("SetTopVisible", [](TVirtualGeoPainter* a)->void { a->SetTopVisible(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetTopVolume(TGeoVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetTopVolume(TGeoVolume *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:133:17
    t.method("SetTopVolume", static_cast<void (TVirtualGeoPainter::*)(TGeoVolume *) >(&TVirtualGeoPainter::SetTopVolume));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetVisLevel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetVisLevel(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:134:17
    t.method("SetVisLevel", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::SetVisLevel));
    t.method("SetVisLevel", [](TVirtualGeoPainter& a)->void { a.SetVisLevel(); });
    t.method("SetVisLevel", [](TVirtualGeoPainter* a)->void { a->SetVisLevel(); });

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::SetVisOption(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::SetVisOption(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:135:17
    t.method("SetVisOption", static_cast<void (TVirtualGeoPainter::*)(Int_t) >(&TVirtualGeoPainter::SetVisOption));
    t.method("SetVisOption", [](TVirtualGeoPainter& a)->void { a.SetVisOption(); });
    t.method("SetVisOption", [](TVirtualGeoPainter* a)->void { a->SetVisOption(); });

    DEBUG_MSG("Adding wrapper for Int_t TVirtualGeoPainter::ShapeDistancetoPrimitive(const TGeoShape *, Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TVirtualGeoPainter::ShapeDistancetoPrimitive(const TGeoShape *, Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:136:18
    t.method("ShapeDistancetoPrimitive", static_cast<Int_t (TVirtualGeoPainter::*)(const TGeoShape *, Int_t, Int_t, Int_t)  const>(&TVirtualGeoPainter::ShapeDistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::Test(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::Test(Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:137:17
    t.method("Test", static_cast<void (TVirtualGeoPainter::*)(Int_t, Option_t *) >(&TVirtualGeoPainter::Test));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::TestOverlaps(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::TestOverlaps(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:138:17
    t.method("TestOverlaps", static_cast<void (TVirtualGeoPainter::*)(const char *) >(&TVirtualGeoPainter::TestOverlaps));

    DEBUG_MSG("Adding wrapper for Bool_t TVirtualGeoPainter::TestVoxels(TGeoVolume *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TVirtualGeoPainter::TestVoxels(TGeoVolume *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:139:19
    t.method("TestVoxels", static_cast<Bool_t (TVirtualGeoPainter::*)(TGeoVolume *) >(&TVirtualGeoPainter::TestVoxels));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::UnbombTranslation(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::UnbombTranslation(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:140:17
    t.method("UnbombTranslation", static_cast<void (TVirtualGeoPainter::*)(const Double_t *, Double_t *) >(&TVirtualGeoPainter::UnbombTranslation));

    DEBUG_MSG("Adding wrapper for Double_t TVirtualGeoPainter::Weight(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TVirtualGeoPainter::Weight(Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:141:21
    t.method("Weight", static_cast<Double_t (TVirtualGeoPainter::*)(Double_t, Option_t *) >(&TVirtualGeoPainter::Weight));
    t.method("Weight", [](TVirtualGeoPainter& a, Double_t arg0)->Double_t { return a.Weight(arg0); });
    t.method("Weight", [](TVirtualGeoPainter* a, Double_t arg0)->Double_t { return a->Weight(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TVirtualGeoPainter::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TVirtualGeoPainter::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!Class_Version", static_cast<Version_t (*)() >(&TVirtualGeoPainter::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGeoPainter::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGeoPainter::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    t.method("IsA", static_cast<TClass * (TVirtualGeoPainter::*)()  const>(&TVirtualGeoPainter::IsA));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    t.method("StreamerNVirtual", static_cast<void (TVirtualGeoPainter::*)(TBuffer &) >(&TVirtualGeoPainter::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoPainter::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoPainter::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!DeclFileName", []() { return (std::string)TVirtualGeoPainter::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TVirtualGeoPainter::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualGeoPainter::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!ImplFileLine", static_cast<int (*)() >(&TVirtualGeoPainter::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoPainter::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoPainter::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!ImplFileName", []() { return (std::string)TVirtualGeoPainter::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualGeoPainter::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualGeoPainter::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!Class_Name", []() { return (std::string)TVirtualGeoPainter::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGeoPainter::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGeoPainter::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!Dictionary", static_cast<TClass * (*)() >(&TVirtualGeoPainter::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TVirtualGeoPainter::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualGeoPainter::Class()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!Class", static_cast<TClass * (*)() >(&TVirtualGeoPainter::Class));

    DEBUG_MSG("Adding wrapper for void TVirtualGeoPainter::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualGeoPainter::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    t.method("Streamer", static_cast<void (TVirtualGeoPainter::*)(TBuffer &) >(&TVirtualGeoPainter::Streamer));

    DEBUG_MSG("Adding wrapper for int TVirtualGeoPainter::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualGeoPainter::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualGeoPainter.h:143:4
    module_.method("TVirtualGeoPainter!DeclFileLine", static_cast<int (*)() >(&TVirtualGeoPainter::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualGeoPainter>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualGeoPainter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualGeoPainter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPNEntry> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPNEntry> : std::false_type { };
template<> struct SuperType<TGeoPNEntry> { typedef TNamed type; };
}

// Class generating the wrapper for type TGeoPNEntry
// signature to use in the veto file: TGeoPNEntry
struct JlTGeoPNEntry: public Wrapper {

  JlTGeoPNEntry(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPNEntry (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:100:7
    jlcxx::TypeWrapper<TGeoPNEntry>  t = jlModule.add_type<TGeoPNEntry>("TGeoPNEntry",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPNEntry>>(new jlcxx::TypeWrapper<TGeoPNEntry>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPNEntry::TGeoPNEntry(const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:121:4
    t.constructor<const char *, const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for const char * TGeoPNEntry::GetPath() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPNEntry::GetPath()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:124:23
    t.method("GetPath", [](TGeoPNEntry const& a) { return (std::string)a.GetPath(); });
    t.method("GetPath", [](TGeoPNEntry const* a) { return (std::string)a->GetPath(); });

    DEBUG_MSG("Adding wrapper for const TGeoHMatrix * TGeoPNEntry::GetMatrix() (" __HERE__ ")");
    // signature to use in the veto list: const TGeoHMatrix * TGeoPNEntry::GetMatrix()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:125:23
    t.method("GetMatrix", static_cast<const TGeoHMatrix * (TGeoPNEntry::*)()  const>(&TGeoPNEntry::GetMatrix));

    DEBUG_MSG("Adding wrapper for TGeoHMatrix * TGeoPNEntry::GetMatrixOrig() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix * TGeoPNEntry::GetMatrixOrig()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:126:17
    t.method("GetMatrixOrig", static_cast<TGeoHMatrix * (TGeoPNEntry::*)()  const>(&TGeoPNEntry::GetMatrixOrig));

    DEBUG_MSG("Adding wrapper for TGeoHMatrix * TGeoPNEntry::GetGlobalOrig() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix * TGeoPNEntry::GetGlobalOrig()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:133:17
    t.method("GetGlobalOrig", static_cast<TGeoHMatrix * (TGeoPNEntry::*)()  const>(&TGeoPNEntry::GetGlobalOrig));

    DEBUG_MSG("Adding wrapper for TGeoPhysicalNode * TGeoPNEntry::GetPhysicalNode() (" __HERE__ ")");
    // signature to use in the veto list: TGeoPhysicalNode * TGeoPNEntry::GetPhysicalNode()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:134:22
    t.method("GetPhysicalNode", static_cast<TGeoPhysicalNode * (TGeoPNEntry::*)()  const>(&TGeoPNEntry::GetPhysicalNode));

    DEBUG_MSG("Adding wrapper for void TGeoPNEntry::SetMatrix(const TGeoHMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPNEntry::SetMatrix(const TGeoHMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:135:9
    t.method("SetMatrix", static_cast<void (TGeoPNEntry::*)(const TGeoHMatrix *) >(&TGeoPNEntry::SetMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPNEntry::SetPhysicalNode(TGeoPhysicalNode *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPNEntry::SetPhysicalNode(TGeoPhysicalNode *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:136:9
    t.method("SetPhysicalNode", static_cast<void (TGeoPNEntry::*)(TGeoPhysicalNode *) >(&TGeoPNEntry::SetPhysicalNode));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPNEntry::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPNEntry::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!Class_Version", static_cast<Version_t (*)() >(&TGeoPNEntry::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPNEntry::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPNEntry::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    t.method("IsA", static_cast<TClass * (TGeoPNEntry::*)()  const>(&TGeoPNEntry::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPNEntry::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPNEntry::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPNEntry::*)(TBuffer &) >(&TGeoPNEntry::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPNEntry::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPNEntry::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!DeclFileName", []() { return (std::string)TGeoPNEntry::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPNEntry::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPNEntry::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!ImplFileLine", static_cast<int (*)() >(&TGeoPNEntry::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPNEntry::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPNEntry::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!ImplFileName", []() { return (std::string)TGeoPNEntry::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPNEntry::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPNEntry::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!Class_Name", []() { return (std::string)TGeoPNEntry::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPNEntry::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPNEntry::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!Dictionary", static_cast<TClass * (*)() >(&TGeoPNEntry::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPNEntry::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPNEntry::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!Class", static_cast<TClass * (*)() >(&TGeoPNEntry::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPNEntry::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPNEntry::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    t.method("Streamer", static_cast<void (TGeoPNEntry::*)(TBuffer &) >(&TGeoPNEntry::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPNEntry::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPNEntry::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:138:4
    module_.method("TGeoPNEntry!DeclFileLine", static_cast<int (*)() >(&TGeoPNEntry::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPNEntry>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPNEntry(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPNEntry(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPhysicalNode> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPhysicalNode> : std::false_type { };
template<> struct SuperType<TGeoPhysicalNode> { typedef TNamed type; };
}

// Class generating the wrapper for type TGeoPhysicalNode
// signature to use in the veto file: TGeoPhysicalNode
struct JlTGeoPhysicalNode: public Wrapper {

  JlTGeoPhysicalNode(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPhysicalNode (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:35:7
    jlcxx::TypeWrapper<TGeoPhysicalNode>  t = jlModule.add_type<TGeoPhysicalNode>("TGeoPhysicalNode",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPhysicalNode>>(new jlcxx::TypeWrapper<TGeoPhysicalNode>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::TGeoPhysicalNode(const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:59:4
    t.constructor<const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPhysicalNode::Align(TGeoMatrix *, TGeoShape *, Bool_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPhysicalNode::Align(TGeoMatrix *, TGeoShape *, Bool_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:64:4
    t.method("Align", static_cast<Bool_t (TGeoPhysicalNode::*)(TGeoMatrix *, TGeoShape *, Bool_t, Double_t) >(&TGeoPhysicalNode::Align));
    t.method("Align", [](TGeoPhysicalNode& a)->Bool_t { return a.Align(); });
    t.method("Align", [](TGeoPhysicalNode& a, TGeoMatrix * arg0)->Bool_t { return a.Align(arg0); });
    t.method("Align", [](TGeoPhysicalNode& a, TGeoMatrix * arg0, TGeoShape * arg1)->Bool_t { return a.Align(arg0, arg1); });
    t.method("Align", [](TGeoPhysicalNode& a, TGeoMatrix * arg0, TGeoShape * arg1, Bool_t arg2)->Bool_t { return a.Align(arg0, arg1, arg2); });
    t.method("Align", [](TGeoPhysicalNode* a)->Bool_t { return a->Align(); });
    t.method("Align", [](TGeoPhysicalNode* a, TGeoMatrix * arg0)->Bool_t { return a->Align(arg0); });
    t.method("Align", [](TGeoPhysicalNode* a, TGeoMatrix * arg0, TGeoShape * arg1)->Bool_t { return a->Align(arg0, arg1); });
    t.method("Align", [](TGeoPhysicalNode* a, TGeoMatrix * arg0, TGeoShape * arg1, Bool_t arg2)->Bool_t { return a->Align(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::cd() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::cd()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:65:9
    t.method("cd", static_cast<void (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::cd));

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:66:9
    t.method("Draw", static_cast<void (TGeoPhysicalNode::*)(Option_t *) >(&TGeoPhysicalNode::Draw));
    t.method("Draw", [](TGeoPhysicalNode& a)->void { a.Draw(); });
    t.method("Draw", [](TGeoPhysicalNode* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPhysicalNode::GetLevel() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPhysicalNode::GetLevel()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:67:10
    t.method("GetLevel", static_cast<Int_t (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::GetLevel));

    DEBUG_MSG("Adding wrapper for TGeoHMatrix * TGeoPhysicalNode::GetMatrix(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix * TGeoPhysicalNode::GetMatrix(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:68:17
    t.method("GetMatrix", static_cast<TGeoHMatrix * (TGeoPhysicalNode::*)(Int_t)  const>(&TGeoPhysicalNode::GetMatrix));
    t.method("GetMatrix", [](TGeoPhysicalNode const& a)->TGeoHMatrix * { return a.GetMatrix(); });
    t.method("GetMatrix", [](TGeoPhysicalNode const* a)->TGeoHMatrix * { return a->GetMatrix(); });

    DEBUG_MSG("Adding wrapper for TGeoHMatrix * TGeoPhysicalNode::GetOriginalMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix * TGeoPhysicalNode::GetOriginalMatrix()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:69:17
    t.method("GetOriginalMatrix", static_cast<TGeoHMatrix * (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::GetOriginalMatrix));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPhysicalNode::GetMother(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPhysicalNode::GetMother(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:70:14
    t.method("GetMother", static_cast<TGeoNode * (TGeoPhysicalNode::*)(Int_t)  const>(&TGeoPhysicalNode::GetMother));
    t.method("GetMother", [](TGeoPhysicalNode const& a)->TGeoNode * { return a.GetMother(); });
    t.method("GetMother", [](TGeoPhysicalNode const* a)->TGeoNode * { return a->GetMother(); });

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPhysicalNode::GetNode(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPhysicalNode::GetNode(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:71:14
    t.method("GetNode", static_cast<TGeoNode * (TGeoPhysicalNode::*)(Int_t)  const>(&TGeoPhysicalNode::GetNode));
    t.method("GetNode", [](TGeoPhysicalNode const& a)->TGeoNode * { return a.GetNode(); });
    t.method("GetNode", [](TGeoPhysicalNode const* a)->TGeoNode * { return a->GetNode(); });

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoPhysicalNode::GetShape(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoPhysicalNode::GetShape(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:72:15
    t.method("GetShape", static_cast<TGeoShape * (TGeoPhysicalNode::*)(Int_t)  const>(&TGeoPhysicalNode::GetShape));
    t.method("GetShape", [](TGeoPhysicalNode const& a)->TGeoShape * { return a.GetShape(); });
    t.method("GetShape", [](TGeoPhysicalNode const* a)->TGeoShape * { return a->GetShape(); });

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoPhysicalNode::GetVolume(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoPhysicalNode::GetVolume(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:73:16
    t.method("GetVolume", static_cast<TGeoVolume * (TGeoPhysicalNode::*)(Int_t)  const>(&TGeoPhysicalNode::GetVolume));
    t.method("GetVolume", [](TGeoPhysicalNode const& a)->TGeoVolume * { return a.GetVolume(); });
    t.method("GetVolume", [](TGeoPhysicalNode const* a)->TGeoVolume * { return a->GetVolume(); });

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPhysicalNode::IsAligned() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPhysicalNode::IsAligned()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:75:11
    t.method("IsAligned", static_cast<Bool_t (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::IsAligned));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPhysicalNode::IsMatchingState(TGeoNavigator *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPhysicalNode::IsMatchingState(TGeoNavigator *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:76:11
    t.method("IsMatchingState", static_cast<Bool_t (TGeoPhysicalNode::*)(TGeoNavigator *)  const>(&TGeoPhysicalNode::IsMatchingState));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPhysicalNode::IsVolAttributes() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPhysicalNode::IsVolAttributes()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:77:11
    t.method("IsVolAttributes", static_cast<Bool_t (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::IsVolAttributes));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPhysicalNode::IsVisible() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPhysicalNode::IsVisible()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:78:11
    t.method("IsVisible", static_cast<Bool_t (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::IsVisible));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPhysicalNode::IsVisibleFull() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPhysicalNode::IsVisibleFull()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:79:11
    t.method("IsVisibleFull", static_cast<Bool_t (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::IsVisibleFull));

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:81:9
    t.method("Print", static_cast<void (TGeoPhysicalNode::*)(Option_t *)  const>(&TGeoPhysicalNode::Print));
    t.method("Print", [](TGeoPhysicalNode const& a)->void { a.Print(); });
    t.method("Print", [](TGeoPhysicalNode const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::Refresh() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::Refresh()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:82:9
    t.method("Refresh", static_cast<void (TGeoPhysicalNode::*)() >(&TGeoPhysicalNode::Refresh));

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::SetMatrixOrig(const TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::SetMatrixOrig(const TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:84:9
    t.method("SetMatrixOrig", static_cast<void (TGeoPhysicalNode::*)(const TGeoMatrix *) >(&TGeoPhysicalNode::SetMatrixOrig));

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::SetIsVolAtt(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::SetIsVolAtt(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:85:9
    t.method("SetIsVolAtt", static_cast<void (TGeoPhysicalNode::*)(Bool_t) >(&TGeoPhysicalNode::SetIsVolAtt));
    t.method("SetIsVolAtt", [](TGeoPhysicalNode& a)->void { a.SetIsVolAtt(); });
    t.method("SetIsVolAtt", [](TGeoPhysicalNode* a)->void { a->SetIsVolAtt(); });

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::SetVisibility(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::SetVisibility(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:86:9
    t.method("SetVisibility", static_cast<void (TGeoPhysicalNode::*)(Bool_t) >(&TGeoPhysicalNode::SetVisibility));
    t.method("SetVisibility", [](TGeoPhysicalNode& a)->void { a.SetVisibility(); });
    t.method("SetVisibility", [](TGeoPhysicalNode* a)->void { a->SetVisibility(); });

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::SetVisibleFull(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::SetVisibleFull(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:87:9
    t.method("SetVisibleFull", static_cast<void (TGeoPhysicalNode::*)(Bool_t) >(&TGeoPhysicalNode::SetVisibleFull));
    t.method("SetVisibleFull", [](TGeoPhysicalNode& a)->void { a.SetVisibleFull(); });
    t.method("SetVisibleFull", [](TGeoPhysicalNode* a)->void { a->SetVisibleFull(); });

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:88:9
    t.method("Paint", static_cast<void (TGeoPhysicalNode::*)(Option_t *) >(&TGeoPhysicalNode::Paint));
    t.method("Paint", [](TGeoPhysicalNode& a)->void { a.Paint(); });
    t.method("Paint", [](TGeoPhysicalNode* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for Version_t TGeoPhysicalNode::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPhysicalNode::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!Class_Version", static_cast<Version_t (*)() >(&TGeoPhysicalNode::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPhysicalNode::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPhysicalNode::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    t.method("IsA", static_cast<TClass * (TGeoPhysicalNode::*)()  const>(&TGeoPhysicalNode::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPhysicalNode::*)(TBuffer &) >(&TGeoPhysicalNode::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPhysicalNode::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPhysicalNode::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!DeclFileName", []() { return (std::string)TGeoPhysicalNode::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPhysicalNode::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPhysicalNode::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!ImplFileLine", static_cast<int (*)() >(&TGeoPhysicalNode::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPhysicalNode::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPhysicalNode::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!ImplFileName", []() { return (std::string)TGeoPhysicalNode::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPhysicalNode::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPhysicalNode::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!Class_Name", []() { return (std::string)TGeoPhysicalNode::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPhysicalNode::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPhysicalNode::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!Dictionary", static_cast<TClass * (*)() >(&TGeoPhysicalNode::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPhysicalNode::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPhysicalNode::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!Class", static_cast<TClass * (*)() >(&TGeoPhysicalNode::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPhysicalNode::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPhysicalNode::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    t.method("Streamer", static_cast<void (TGeoPhysicalNode::*)(TBuffer &) >(&TGeoPhysicalNode::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPhysicalNode::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPhysicalNode::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPhysicalNode.h:90:4
    module_.method("TGeoPhysicalNode!DeclFileLine", static_cast<int (*)() >(&TGeoPhysicalNode::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPhysicalNode>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPhysicalNode(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPhysicalNode(module));
}
