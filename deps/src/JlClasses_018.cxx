// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Fit::UnBinData> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Fit::UnBinData> : std::false_type { };
template<> struct SuperType<ROOT::Fit::UnBinData> { typedef ROOT::Fit::FitData type; };
}

// Class generating the wrapper for type ROOT::Fit::UnBinData
// signature to use in the veto file: ROOT::Fit::UnBinData
struct JlROOT_Fit_UnBinData: public Wrapper {

  JlROOT_Fit_UnBinData(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Fit::UnBinData (" __HERE__ ")");
    // defined in /opt/root63206jll/include/Fit/UnBinData.h:46:7
    jlcxx::TypeWrapper<ROOT::Fit::UnBinData>  t = jlModule.add_type<ROOT::Fit::UnBinData>("ROOT!Fit!UnBinData",
      jlcxx::julia_base_type<ROOT::Fit::FitData>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Fit::UnBinData>>(new jlcxx::TypeWrapper<ROOT::Fit::UnBinData>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Fit::UnBinData>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Fit_UnBinData(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Fit_UnBinData(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Fit::BinData> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Fit::BinData> : std::false_type { };
template<> struct SuperType<ROOT::Fit::BinData> { typedef ROOT::Fit::FitData type; };
}

// Class generating the wrapper for type ROOT::Fit::BinData
// signature to use in the veto file: ROOT::Fit::BinData
struct JlROOT_Fit_BinData: public Wrapper {

  JlROOT_Fit_BinData(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Fit::BinData (" __HERE__ ")");
    // defined in /opt/root63206jll/include/Fit/BinData.h:52:7
    jlcxx::TypeWrapper<ROOT::Fit::BinData>  t = jlModule.add_type<ROOT::Fit::BinData>("ROOT!Fit!BinData",
      jlcxx::julia_base_type<ROOT::Fit::FitData>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Fit::BinData>>(new jlcxx::TypeWrapper<ROOT::Fit::BinData>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Fit::BinData>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Fit_BinData(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Fit_BinData(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Fit::FitResult> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Fit::FitResult> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Fit::FitResult
// signature to use in the veto file: ROOT::Fit::FitResult
struct JlROOT_Fit_FitResult: public Wrapper {

  JlROOT_Fit_FitResult(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Fit::FitResult (" __HERE__ ")");
    // defined in /opt/root63206jll/include/Fit/FitResult.h:47:7
    jlcxx::TypeWrapper<ROOT::Fit::FitResult>  t = jlModule.add_type<ROOT::Fit::FitResult>("ROOT!Fit!FitResult");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Fit::FitResult>>(new jlcxx::TypeWrapper<ROOT::Fit::FitResult>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Fit::FitResult>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Fit_FitResult(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Fit_FitResult(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGraphErrors> : std::false_type { };
  template<> struct DefaultConstructible<TGraphErrors> : std::false_type { };
template<> struct SuperType<TGraphErrors> { typedef TGraph type; };
}

// Class generating the wrapper for type TGraphErrors
// signature to use in the veto file: TGraphErrors
struct JlTGraphErrors: public Wrapper {

  JlTGraphErrors(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraphErrors (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:26:7
    jlcxx::TypeWrapper<TGraphErrors>  t = jlModule.add_type<TGraphErrors>("TGraphErrors",
      jlcxx::julia_base_type<TGraph>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraphErrors>>(new jlcxx::TypeWrapper<TGraphErrors>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:48:4
    t.constructor<Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:49:4
    t.constructor<Int_t, const Float_t *, const Float_t *>(/*finalize=*/true);
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/true);
    t.constructor<Int_t, const Float_t *, const Float_t *, const Float_t *, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:50:4
    t.constructor<Int_t, const Double_t *, const Double_t *>(/*finalize=*/true);
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/true);
    t.constructor<Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:52:4
    t.constructor<const TVectorD &, const TVectorD &, const TVectorD &, const TVectorD &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(const TGraphErrors &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:53:4
    t.constructor<const TGraphErrors &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGraphErrors & TGraphErrors::operator=(const TGraphErrors &) (" __HERE__ ")");
    // signature to use in the veto list: TGraphErrors & TGraphErrors::operator=(const TGraphErrors &)
    // defined in /opt/root63206jll/include/TGraphErrors.h:54:18
    t.method("assign", static_cast<TGraphErrors & (TGraphErrors::*)(const TGraphErrors &) >(&TGraphErrors::operator=));


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(const TH1 *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:55:4
    t.constructor<const TH1 *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraphErrors::TGraphErrors(const char *, const char *, Option_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGraphErrors.h:56:4
    t.constructor<const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Option_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGraphErrors::Apply(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::Apply(TF1 *)
    // defined in /opt/root63206jll/include/TGraphErrors.h:58:12
    t.method("Apply", static_cast<void (TGraphErrors::*)(TF1 *) >(&TGraphErrors::Apply));

    DEBUG_MSG("Adding wrapper for void TGraphErrors::ApplyX(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::ApplyX(TF1 *)
    // defined in /opt/root63206jll/include/TGraphErrors.h:59:20
    t.method("ApplyX", static_cast<void (TGraphErrors::*)(TF1 *) >(&TGraphErrors::ApplyX));

    DEBUG_MSG("Adding wrapper for Int_t TGraphErrors::CalculateScanfFields(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphErrors::CalculateScanfFields(const char *)
    // defined in /opt/root63206jll/include/TGraphErrors.h:60:20
    module_.method("TGraphErrors!CalculateScanfFields", static_cast<Int_t (*)(const char *) >(&TGraphErrors::CalculateScanfFields));

    DEBUG_MSG("Adding wrapper for void TGraphErrors::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TGraphErrors.h:61:12
    t.method("ComputeRange", static_cast<void (TGraphErrors::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TGraphErrors::ComputeRange));

    DEBUG_MSG("Adding wrapper for Double_t TGraphErrors::GetErrorX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphErrors::GetErrorX(Int_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:62:20
    t.method("GetErrorX", static_cast<Double_t (TGraphErrors::*)(Int_t)  const>(&TGraphErrors::GetErrorX));

    DEBUG_MSG("Adding wrapper for Double_t TGraphErrors::GetErrorY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphErrors::GetErrorY(Int_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:63:20
    t.method("GetErrorY", static_cast<Double_t (TGraphErrors::*)(Int_t)  const>(&TGraphErrors::GetErrorY));

    DEBUG_MSG("Adding wrapper for Double_t TGraphErrors::GetErrorXhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphErrors::GetErrorXhigh(Int_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:64:20
    t.method("GetErrorXhigh", static_cast<Double_t (TGraphErrors::*)(Int_t)  const>(&TGraphErrors::GetErrorXhigh));

    DEBUG_MSG("Adding wrapper for Double_t TGraphErrors::GetErrorXlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphErrors::GetErrorXlow(Int_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:65:20
    t.method("GetErrorXlow", static_cast<Double_t (TGraphErrors::*)(Int_t)  const>(&TGraphErrors::GetErrorXlow));

    DEBUG_MSG("Adding wrapper for Double_t TGraphErrors::GetErrorYhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphErrors::GetErrorYhigh(Int_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:66:20
    t.method("GetErrorYhigh", static_cast<Double_t (TGraphErrors::*)(Int_t)  const>(&TGraphErrors::GetErrorYhigh));

    DEBUG_MSG("Adding wrapper for Double_t TGraphErrors::GetErrorYlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraphErrors::GetErrorYlow(Int_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:67:20
    t.method("GetErrorYlow", static_cast<Double_t (TGraphErrors::*)(Int_t)  const>(&TGraphErrors::GetErrorYlow));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphErrors::GetEX() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphErrors::GetEX()
    // defined in /opt/root63206jll/include/TGraphErrors.h:68:20
    t.method("GetEX", static_cast<Double_t * (TGraphErrors::*)()  const>(&TGraphErrors::GetEX));

    DEBUG_MSG("Adding wrapper for Double_t * TGraphErrors::GetEY() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraphErrors::GetEY()
    // defined in /opt/root63206jll/include/TGraphErrors.h:69:20
    t.method("GetEY", static_cast<Double_t * (TGraphErrors::*)()  const>(&TGraphErrors::GetEY));

    DEBUG_MSG("Adding wrapper for Int_t TGraphErrors::Merge(TCollection *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraphErrors::Merge(TCollection *)
    // defined in /opt/root63206jll/include/TGraphErrors.h:70:12
    t.method("Merge", static_cast<Int_t (TGraphErrors::*)(TCollection *) >(&TGraphErrors::Merge));

    DEBUG_MSG("Adding wrapper for void TGraphErrors::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::Print(Option_t *)
    // defined in /opt/root63206jll/include/TGraphErrors.h:71:12
    t.method("Print", static_cast<void (TGraphErrors::*)(Option_t *)  const>(&TGraphErrors::Print));
    t.method("Print", [](TGraphErrors const& a)->void { a.Print(); });
    t.method("Print", [](TGraphErrors const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TGraphErrors::Scale(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::Scale(Double_t, Option_t *)
    // defined in /opt/root63206jll/include/TGraphErrors.h:73:12
    t.method("Scale", static_cast<void (TGraphErrors::*)(Double_t, Option_t *) >(&TGraphErrors::Scale));
    t.method("Scale", [](TGraphErrors& a)->void { a.Scale(); });
    t.method("Scale", [](TGraphErrors& a, Double_t arg0)->void { a.Scale(arg0); });
    t.method("Scale", [](TGraphErrors* a)->void { a->Scale(); });
    t.method("Scale", [](TGraphErrors* a, Double_t arg0)->void { a->Scale(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraphErrors::SetPointError(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::SetPointError(Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:74:20
    t.method("SetPointError", static_cast<void (TGraphErrors::*)(Double_t, Double_t) >(&TGraphErrors::SetPointError));

    DEBUG_MSG("Adding wrapper for void TGraphErrors::SetPointError(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::SetPointError(Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGraphErrors.h:75:20
    t.method("SetPointError", static_cast<void (TGraphErrors::*)(Int_t, Double_t, Double_t) >(&TGraphErrors::SetPointError));

    DEBUG_MSG("Adding wrapper for Version_t TGraphErrors::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraphErrors::Class_Version()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!Class_Version", static_cast<Version_t (*)() >(&TGraphErrors::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGraphErrors::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphErrors::IsA()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    t.method("IsA", static_cast<TClass * (TGraphErrors::*)()  const>(&TGraphErrors::IsA));

    DEBUG_MSG("Adding wrapper for void TGraphErrors::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    t.method("StreamerNVirtual", static_cast<void (TGraphErrors::*)(TBuffer &) >(&TGraphErrors::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGraphErrors::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphErrors::DeclFileName()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!DeclFileName", []() { return (std::string)TGraphErrors::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraphErrors::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphErrors::ImplFileLine()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!ImplFileLine", static_cast<int (*)() >(&TGraphErrors::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGraphErrors::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphErrors::ImplFileName()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!ImplFileName", []() { return (std::string)TGraphErrors::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraphErrors::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraphErrors::Class_Name()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!Class_Name", []() { return (std::string)TGraphErrors::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraphErrors::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphErrors::Dictionary()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!Dictionary", static_cast<TClass * (*)() >(&TGraphErrors::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGraphErrors::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraphErrors::Class()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!Class", static_cast<TClass * (*)() >(&TGraphErrors::Class));

    DEBUG_MSG("Adding wrapper for void TGraphErrors::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraphErrors::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    t.method("Streamer", static_cast<void (TGraphErrors::*)(TBuffer &) >(&TGraphErrors::Streamer));

    DEBUG_MSG("Adding wrapper for int TGraphErrors::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraphErrors::DeclFileLine()
    // defined in /opt/root63206jll/include/TGraphErrors.h:77:4
    module_.method("TGraphErrors!DeclFileLine", static_cast<int (*)() >(&TGraphErrors::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraphErrors>> type_;
};
std::shared_ptr<Wrapper> newJlTGraphErrors(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraphErrors(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TAxis> : std::false_type { };
  template<> struct DefaultConstructible<TAxis> : std::false_type { };
template<> struct SuperType<TAxis> { typedef TNamed type; };
}

// Class generating the wrapper for type TAxis
// signature to use in the veto file: TAxis
struct JlTAxis: public Wrapper {

  JlTAxis(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TAxis (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TAxis.h:31:7
    jlcxx::TypeWrapper<TAxis>  t = jlModule.add_type<TAxis>("TAxis",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TAxis>>(new jlcxx::TypeWrapper<TAxis>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TAxis::TAxis(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TAxis.h:80:4
    t.constructor<Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TAxis::TAxis(Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TAxis.h:81:4
    t.constructor<Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TAxis::TAxis(const TAxis &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TAxis.h:82:4
    t.constructor<const TAxis &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TAxis & TAxis::operator=(const TAxis &) (" __HERE__ ")");
    // signature to use in the veto list: TAxis & TAxis::operator=(const TAxis &)
    // defined in /opt/root63206jll/include/TAxis.h:84:11
    t.method("assign", static_cast<TAxis & (TAxis::*)(const TAxis &) >(&TAxis::operator=));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::CanExtend() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::CanExtend()
    // defined in /opt/root63206jll/include/TAxis.h:86:15
    t.method("CanExtend", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::CanExtend));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::CanBeAlphanumeric() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::CanBeAlphanumeric()
    // defined in /opt/root63206jll/include/TAxis.h:87:15
    t.method("CanBeAlphanumeric", static_cast<Bool_t (TAxis::*)() >(&TAxis::CanBeAlphanumeric));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::IsAlphanumeric() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::IsAlphanumeric()
    // defined in /opt/root63206jll/include/TAxis.h:88:15
    t.method("IsAlphanumeric", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::IsAlphanumeric));

    DEBUG_MSG("Adding wrapper for void TAxis::SetAlphanumeric(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetAlphanumeric(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:89:15
    t.method("SetAlphanumeric", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetAlphanumeric));
    t.method("SetAlphanumeric", [](TAxis& a)->void { a.SetAlphanumeric(); });
    t.method("SetAlphanumeric", [](TAxis* a)->void { a->SetAlphanumeric(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetCanExtend(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetCanExtend(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:90:15
    t.method("SetCanExtend", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetCanExtend));

    DEBUG_MSG("Adding wrapper for void TAxis::SetNoAlphanumeric(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetNoAlphanumeric(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:91:15
    t.method("SetNoAlphanumeric", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetNoAlphanumeric));
    t.method("SetNoAlphanumeric", [](TAxis& a)->void { a.SetNoAlphanumeric(); });
    t.method("SetNoAlphanumeric", [](TAxis* a)->void { a->SetNoAlphanumeric(); });

    DEBUG_MSG("Adding wrapper for void TAxis::CenterLabels(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::CenterLabels(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:98:23
    t.method("CenterLabels", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::CenterLabels));
    t.method("CenterLabels", [](TAxis& a)->void { a.CenterLabels(); });
    t.method("CenterLabels", [](TAxis* a)->void { a->CenterLabels(); });

    DEBUG_MSG("Adding wrapper for void TAxis::CenterTitle(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::CenterTitle(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:99:23
    t.method("CenterTitle", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::CenterTitle));
    t.method("CenterTitle", [](TAxis& a)->void { a.CenterTitle(); });
    t.method("CenterTitle", [](TAxis* a)->void { a->CenterTitle(); });

    DEBUG_MSG("Adding wrapper for const char * TAxis::ChooseTimeFormat(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::ChooseTimeFormat(Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:100:23
    t.method("ChooseTimeFormat", [](TAxis& a) { return (std::string)a.ChooseTimeFormat(); });
    t.method("ChooseTimeFormat", [](TAxis& a, Double_t arg0) { return (std::string)a.ChooseTimeFormat(arg0); });
    t.method("ChooseTimeFormat", [](TAxis* a) { return (std::string)a->ChooseTimeFormat(); });
    t.method("ChooseTimeFormat", [](TAxis* a, Double_t arg0) { return (std::string)a->ChooseTimeFormat(arg0); });

    DEBUG_MSG("Adding wrapper for void TAxis::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Copy(TObject &)
    // defined in /opt/root63206jll/include/TAxis.h:101:15
    t.method("Copy", static_cast<void (TAxis::*)(TObject &)  const>(&TAxis::Copy));

    DEBUG_MSG("Adding wrapper for void TAxis::Delete(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Delete(Option_t *)
    // defined in /opt/root63206jll/include/TAxis.h:102:15
    t.method("Delete", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::Delete));
    t.method("Delete", [](TAxis& a)->void { a.Delete(); });
    t.method("Delete", [](TAxis* a)->void { a->Delete(); });

    DEBUG_MSG("Adding wrapper for Int_t TAxis::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::DistancetoPrimitive(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:103:15
    t.method("DistancetoPrimitive", static_cast<Int_t (TAxis::*)(Int_t, Int_t) >(&TAxis::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for TObject * TAxis::DrawClone(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TAxis::DrawClone(Option_t *)
    // defined in /opt/root63206jll/include/TAxis.h:104:15
    t.method("DrawClone", static_cast<TObject * (TAxis::*)(Option_t *)  const>(&TAxis::DrawClone));
    t.method("DrawClone", [](TAxis const& a)->TObject * { return a.DrawClone(); });
    t.method("DrawClone", [](TAxis const* a)->TObject * { return a->DrawClone(); });

    DEBUG_MSG("Adding wrapper for void TAxis::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:105:15
    t.method("ExecuteEvent", static_cast<void (TAxis::*)(Int_t, Int_t, Int_t) >(&TAxis::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindBin(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindBin(Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:106:23
    t.method("FindBin", static_cast<Int_t (TAxis::*)(Double_t) >(&TAxis::FindBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindBin(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindBin(Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:107:23
    t.method("FindBin", static_cast<Int_t (TAxis::*)(Double_t)  const>(&TAxis::FindBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindBin(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindBin(const char *)
    // defined in /opt/root63206jll/include/TAxis.h:108:23
    t.method("FindBin", static_cast<Int_t (TAxis::*)(const char *) >(&TAxis::FindBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindFixBin(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindFixBin(Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:109:23
    t.method("FindFixBin", static_cast<Int_t (TAxis::*)(Double_t)  const>(&TAxis::FindFixBin));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::FindFixBin(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::FindFixBin(const char *)
    // defined in /opt/root63206jll/include/TAxis.h:110:23
    t.method("FindFixBin", static_cast<Int_t (TAxis::*)(const char *)  const>(&TAxis::FindFixBin));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinCenter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinCenter(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:111:23
    t.method("GetBinCenter", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinCenter));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinCenterLog(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinCenterLog(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:112:23
    t.method("GetBinCenterLog", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinCenterLog));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetBinLabel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetBinLabel(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:113:23
    t.method("GetBinLabel", [](TAxis const& a, Int_t arg0) { return (std::string)a.GetBinLabel(arg0); });
    t.method("GetBinLabel", [](TAxis const* a, Int_t arg0) { return (std::string)a->GetBinLabel(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinLowEdge(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinLowEdge(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:114:23
    t.method("GetBinLowEdge", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinLowEdge));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinUpEdge(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinUpEdge(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:115:23
    t.method("GetBinUpEdge", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinUpEdge));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetBinWidth(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetBinWidth(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:116:23
    t.method("GetBinWidth", static_cast<Double_t (TAxis::*)(Int_t)  const>(&TAxis::GetBinWidth));

    DEBUG_MSG("Adding wrapper for void TAxis::GetCenter(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::GetCenter(Double_t *)
    // defined in /opt/root63206jll/include/TAxis.h:117:23
    t.method("GetCenter", static_cast<void (TAxis::*)(Double_t *)  const>(&TAxis::GetCenter));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetCenterLabels() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetCenterLabels()
    // defined in /opt/root63206jll/include/TAxis.h:118:23
    t.method("GetCenterLabels", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetCenterLabels));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetCenterTitle() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetCenterTitle()
    // defined in /opt/root63206jll/include/TAxis.h:119:23
    t.method("GetCenterTitle", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetCenterTitle));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetDecimals() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetDecimals()
    // defined in /opt/root63206jll/include/TAxis.h:120:23
    t.method("GetDecimals", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetDecimals));

    DEBUG_MSG("Adding wrapper for TList * TAxis::GetModifiedLabels() (" __HERE__ ")");
    // signature to use in the veto list: TList * TAxis::GetModifiedLabels()
    // defined in /opt/root63206jll/include/TAxis.h:122:23
    t.method("GetModifiedLabels", static_cast<TList * (TAxis::*)()  const>(&TAxis::GetModifiedLabels));

    DEBUG_MSG("Adding wrapper for void TAxis::GetLowEdge(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::GetLowEdge(Double_t *)
    // defined in /opt/root63206jll/include/TAxis.h:123:23
    t.method("GetLowEdge", static_cast<void (TAxis::*)(Double_t *)  const>(&TAxis::GetLowEdge));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetMoreLogLabels() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetMoreLogLabels()
    // defined in /opt/root63206jll/include/TAxis.h:124:23
    t.method("GetMoreLogLabels", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetMoreLogLabels));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetNbins()
    // defined in /opt/root63206jll/include/TAxis.h:125:23
    t.method("GetNbins", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetNbins));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetNlabels() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetNlabels()
    // defined in /opt/root63206jll/include/TAxis.h:126:23
    t.method("GetNlabels", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetNlabels));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetNoExponent() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetNoExponent()
    // defined in /opt/root63206jll/include/TAxis.h:127:23
    t.method("GetNoExponent", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetNoExponent));

    DEBUG_MSG("Adding wrapper for TObject * TAxis::GetParent() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TAxis::GetParent()
    // defined in /opt/root63206jll/include/TAxis.h:128:23
    t.method("GetParent", static_cast<TObject * (TAxis::*)()  const>(&TAxis::GetParent));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetRotateTitle() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetRotateTitle()
    // defined in /opt/root63206jll/include/TAxis.h:129:23
    t.method("GetRotateTitle", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetRotateTitle));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTicks() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTicks()
    // defined in /opt/root63206jll/include/TAxis.h:130:24
    t.method("GetTicks", [](TAxis const& a) { return (std::string)a.GetTicks(); });
    t.method("GetTicks", [](TAxis const* a) { return (std::string)a->GetTicks(); });

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::GetTimeDisplay() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::GetTimeDisplay()
    // defined in /opt/root63206jll/include/TAxis.h:131:23
    t.method("GetTimeDisplay", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::GetTimeDisplay));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTimeFormat() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTimeFormat()
    // defined in /opt/root63206jll/include/TAxis.h:132:24
    t.method("GetTimeFormat", [](TAxis const& a) { return (std::string)a.GetTimeFormat(); });
    t.method("GetTimeFormat", [](TAxis const* a) { return (std::string)a->GetTimeFormat(); });

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTimeFormatOnly() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTimeFormatOnly()
    // defined in /opt/root63206jll/include/TAxis.h:133:24
    t.method("GetTimeFormatOnly", [](TAxis const& a) { return (std::string)a.GetTimeFormatOnly(); });
    t.method("GetTimeFormatOnly", [](TAxis const* a) { return (std::string)a->GetTimeFormatOnly(); });

    DEBUG_MSG("Adding wrapper for UInt_t TAxis::GetTimeOffset() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TAxis::GetTimeOffset()
    // defined in /opt/root63206jll/include/TAxis.h:134:24
    t.method("GetTimeOffset", static_cast<UInt_t (TAxis::*)() >(&TAxis::GetTimeOffset));

    DEBUG_MSG("Adding wrapper for const char * TAxis::GetTitle() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::GetTitle()
    // defined in /opt/root63206jll/include/TAxis.h:135:23
    t.method("GetTitle", [](TAxis const& a) { return (std::string)a.GetTitle(); });
    t.method("GetTitle", [](TAxis const* a) { return (std::string)a->GetTitle(); });

    DEBUG_MSG("Adding wrapper for const TArrayD * TAxis::GetXbins() (" __HERE__ ")");
    // signature to use in the veto list: const TArrayD * TAxis::GetXbins()
    // defined in /opt/root63206jll/include/TAxis.h:136:23
    t.method("GetXbins", static_cast<const TArrayD * (TAxis::*)()  const>(&TAxis::GetXbins));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetFirst() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetFirst()
    // defined in /opt/root63206jll/include/TAxis.h:137:23
    t.method("GetFirst", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetFirst));

    DEBUG_MSG("Adding wrapper for Int_t TAxis::GetLast() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TAxis::GetLast()
    // defined in /opt/root63206jll/include/TAxis.h:138:23
    t.method("GetLast", static_cast<Int_t (TAxis::*)()  const>(&TAxis::GetLast));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetXmin()
    // defined in /opt/root63206jll/include/TAxis.h:139:23
    t.method("GetXmin", static_cast<Double_t (TAxis::*)()  const>(&TAxis::GetXmin));

    DEBUG_MSG("Adding wrapper for Double_t TAxis::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TAxis::GetXmax()
    // defined in /opt/root63206jll/include/TAxis.h:140:23
    t.method("GetXmax", static_cast<Double_t (TAxis::*)()  const>(&TAxis::GetXmax));

    DEBUG_MSG("Adding wrapper for void TAxis::ImportAttributes(const TAxis *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ImportAttributes(const TAxis *)
    // defined in /opt/root63206jll/include/TAxis.h:141:23
    t.method("ImportAttributes", static_cast<void (TAxis::*)(const TAxis *) >(&TAxis::ImportAttributes));

    DEBUG_MSG("Adding wrapper for Bool_t TAxis::IsVariableBinSize() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TAxis::IsVariableBinSize()
    // defined in /opt/root63206jll/include/TAxis.h:142:23
    t.method("IsVariableBinSize", static_cast<Bool_t (TAxis::*)()  const>(&TAxis::IsVariableBinSize));

    DEBUG_MSG("Adding wrapper for void TAxis::LabelsOption(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::LabelsOption(Option_t *)
    // defined in /opt/root63206jll/include/TAxis.h:146:23
    t.method("LabelsOption", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::LabelsOption));
    t.method("LabelsOption", [](TAxis& a)->void { a.LabelsOption(); });
    t.method("LabelsOption", [](TAxis* a)->void { a->LabelsOption(); });

    DEBUG_MSG("Adding wrapper for void TAxis::RotateTitle(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::RotateTitle(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:147:23
    t.method("RotateTitle", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::RotateTitle));
    t.method("RotateTitle", [](TAxis& a)->void { a.RotateTitle(); });
    t.method("RotateTitle", [](TAxis* a)->void { a->RotateTitle(); });

    DEBUG_MSG("Adding wrapper for void TAxis::Set(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Set(Int_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:149:23
    t.method("Set", static_cast<void (TAxis::*)(Int_t, Double_t, Double_t) >(&TAxis::Set));

    DEBUG_MSG("Adding wrapper for void TAxis::Set(Int_t, const Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Set(Int_t, const Float_t *)
    // defined in /opt/root63206jll/include/TAxis.h:150:23
    t.method("Set", static_cast<void (TAxis::*)(Int_t, const Float_t *) >(&TAxis::Set));

    DEBUG_MSG("Adding wrapper for void TAxis::Set(Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Set(Int_t, const Double_t *)
    // defined in /opt/root63206jll/include/TAxis.h:151:23
    t.method("Set", static_cast<void (TAxis::*)(Int_t, const Double_t *) >(&TAxis::Set));

    DEBUG_MSG("Adding wrapper for void TAxis::SetBinLabel(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetBinLabel(Int_t, const char *)
    // defined in /opt/root63206jll/include/TAxis.h:152:23
    t.method("SetBinLabel", static_cast<void (TAxis::*)(Int_t, const char *) >(&TAxis::SetBinLabel));

    DEBUG_MSG("Adding wrapper for void TAxis::SetDecimals(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetDecimals(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:153:23
    t.method("SetDecimals", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetDecimals));
    t.method("SetDecimals", [](TAxis& a)->void { a.SetDecimals(); });
    t.method("SetDecimals", [](TAxis* a)->void { a->SetDecimals(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetDefaults() (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetDefaults()
    // defined in /opt/root63206jll/include/TAxis.h:154:23
    t.method("SetDefaults", static_cast<void (TAxis::*)() >(&TAxis::SetDefaults));

    DEBUG_MSG("Adding wrapper for void TAxis::SetDrawOption(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetDrawOption(Option_t *)
    // defined in /opt/root63206jll/include/TAxis.h:155:15
    t.method("SetDrawOption", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::SetDrawOption));
    t.method("SetDrawOption", [](TAxis& a)->void { a.SetDrawOption(); });
    t.method("SetDrawOption", [](TAxis* a)->void { a->SetDrawOption(); });

    DEBUG_MSG("Adding wrapper for void TAxis::ChangeLabel(Int_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ChangeLabel(Int_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &)
    // defined in /opt/root63206jll/include/TAxis.h:156:23
    t.method("ChangeLabel", static_cast<void (TAxis::*)(Int_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) >(&TAxis::ChangeLabel));
    t.method("ChangeLabel", [](TAxis& a)->void { a.ChangeLabel(); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0)->void { a.ChangeLabel(arg0); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1)->void { a.ChangeLabel(arg0, arg1); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.ChangeLabel(arg0, arg1, arg2); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a.ChangeLabel(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a.ChangeLabel(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabel", [](TAxis& a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a.ChangeLabel(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("ChangeLabel", [](TAxis* a)->void { a->ChangeLabel(); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0)->void { a->ChangeLabel(arg0); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1)->void { a->ChangeLabel(arg0, arg1); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->ChangeLabel(arg0, arg1, arg2); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a->ChangeLabel(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a->ChangeLabel(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabel", [](TAxis* a, Int_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a->ChangeLabel(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TAxis::ChangeLabelByValue(Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ChangeLabelByValue(Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &)
    // defined in /opt/root63206jll/include/TAxis.h:160:23
    t.method("ChangeLabelByValue", static_cast<void (TAxis::*)(Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, const TString &) >(&TAxis::ChangeLabelByValue));
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0)->void { a.ChangeLabelByValue(arg0); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1)->void { a.ChangeLabelByValue(arg0, arg1); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.ChangeLabelByValue(arg0, arg1, arg2); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a.ChangeLabelByValue(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a.ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabelByValue", [](TAxis& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a.ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0)->void { a->ChangeLabelByValue(arg0); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1)->void { a->ChangeLabelByValue(arg0, arg1); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->ChangeLabelByValue(arg0, arg1, arg2); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->void { a->ChangeLabelByValue(arg0, arg1, arg2, arg3); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4)->void { a->ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4); });
    t.method("ChangeLabelByValue", [](TAxis* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Int_t arg4, Int_t arg5)->void { a->ChangeLabelByValue(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetLimits(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetLimits(Double_t, Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:164:23
    t.method("SetLimits", static_cast<void (TAxis::*)(Double_t, Double_t) >(&TAxis::SetLimits));

    DEBUG_MSG("Adding wrapper for void TAxis::SetMoreLogLabels(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetMoreLogLabels(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:165:23
    t.method("SetMoreLogLabels", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetMoreLogLabels));
    t.method("SetMoreLogLabels", [](TAxis& a)->void { a.SetMoreLogLabels(); });
    t.method("SetMoreLogLabels", [](TAxis* a)->void { a->SetMoreLogLabels(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetNoExponent(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetNoExponent(Bool_t)
    // defined in /opt/root63206jll/include/TAxis.h:166:23
    t.method("SetNoExponent", static_cast<void (TAxis::*)(Bool_t) >(&TAxis::SetNoExponent));
    t.method("SetNoExponent", [](TAxis& a)->void { a.SetNoExponent(); });
    t.method("SetNoExponent", [](TAxis* a)->void { a->SetNoExponent(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetParent(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetParent(TObject *)
    // defined in /opt/root63206jll/include/TAxis.h:167:23
    t.method("SetParent", static_cast<void (TAxis::*)(TObject *) >(&TAxis::SetParent));

    DEBUG_MSG("Adding wrapper for void TAxis::SetRange(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetRange(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:168:23
    t.method("SetRange", static_cast<void (TAxis::*)(Int_t, Int_t) >(&TAxis::SetRange));
    t.method("SetRange", [](TAxis& a)->void { a.SetRange(); });
    t.method("SetRange", [](TAxis& a, Int_t arg0)->void { a.SetRange(arg0); });
    t.method("SetRange", [](TAxis* a)->void { a->SetRange(); });
    t.method("SetRange", [](TAxis* a, Int_t arg0)->void { a->SetRange(arg0); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetRangeUser(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetRangeUser(Double_t, Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:169:23
    t.method("SetRangeUser", static_cast<void (TAxis::*)(Double_t, Double_t) >(&TAxis::SetRangeUser));

    DEBUG_MSG("Adding wrapper for void TAxis::SetTicks(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTicks(Option_t *)
    // defined in /opt/root63206jll/include/TAxis.h:170:23
    t.method("SetTicks", static_cast<void (TAxis::*)(Option_t *) >(&TAxis::SetTicks));
    t.method("SetTicks", [](TAxis& a)->void { a.SetTicks(); });
    t.method("SetTicks", [](TAxis* a)->void { a->SetTicks(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetTimeDisplay(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTimeDisplay(Int_t)
    // defined in /opt/root63206jll/include/TAxis.h:171:23
    t.method("SetTimeDisplay", static_cast<void (TAxis::*)(Int_t) >(&TAxis::SetTimeDisplay));

    DEBUG_MSG("Adding wrapper for void TAxis::SetTimeFormat(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTimeFormat(const char *)
    // defined in /opt/root63206jll/include/TAxis.h:172:23
    t.method("SetTimeFormat", static_cast<void (TAxis::*)(const char *) >(&TAxis::SetTimeFormat));
    t.method("SetTimeFormat", [](TAxis& a)->void { a.SetTimeFormat(); });
    t.method("SetTimeFormat", [](TAxis* a)->void { a->SetTimeFormat(); });

    DEBUG_MSG("Adding wrapper for void TAxis::SetTimeOffset(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::SetTimeOffset(Double_t, Option_t *)
    // defined in /opt/root63206jll/include/TAxis.h:173:23
    t.method("SetTimeOffset", static_cast<void (TAxis::*)(Double_t, Option_t *) >(&TAxis::SetTimeOffset));
    t.method("SetTimeOffset", [](TAxis& a, Double_t arg0)->void { a.SetTimeOffset(arg0); });
    t.method("SetTimeOffset", [](TAxis* a, Double_t arg0)->void { a->SetTimeOffset(arg0); });

    DEBUG_MSG("Adding wrapper for void TAxis::UnZoom() (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::UnZoom()
    // defined in /opt/root63206jll/include/TAxis.h:174:23
    t.method("UnZoom", static_cast<void (TAxis::*)() >(&TAxis::UnZoom));

    DEBUG_MSG("Adding wrapper for void TAxis::ZoomOut(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::ZoomOut(Double_t, Double_t)
    // defined in /opt/root63206jll/include/TAxis.h:175:23
    t.method("ZoomOut", static_cast<void (TAxis::*)(Double_t, Double_t) >(&TAxis::ZoomOut));
    t.method("ZoomOut", [](TAxis& a)->void { a.ZoomOut(); });
    t.method("ZoomOut", [](TAxis& a, Double_t arg0)->void { a.ZoomOut(arg0); });
    t.method("ZoomOut", [](TAxis* a)->void { a->ZoomOut(); });
    t.method("ZoomOut", [](TAxis* a, Double_t arg0)->void { a->ZoomOut(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TAxis::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TAxis::Class_Version()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!Class_Version", static_cast<Version_t (*)() >(&TAxis::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TAxis::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TAxis::IsA()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    t.method("IsA", static_cast<TClass * (TAxis::*)()  const>(&TAxis::IsA));

    DEBUG_MSG("Adding wrapper for void TAxis::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    t.method("StreamerNVirtual", static_cast<void (TAxis::*)(TBuffer &) >(&TAxis::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TAxis::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::DeclFileName()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!DeclFileName", []() { return (std::string)TAxis::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TAxis::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TAxis::ImplFileLine()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!ImplFileLine", static_cast<int (*)() >(&TAxis::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TAxis::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::ImplFileName()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!ImplFileName", []() { return (std::string)TAxis::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TAxis::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TAxis::Class_Name()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!Class_Name", []() { return (std::string)TAxis::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TAxis::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TAxis::Dictionary()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!Dictionary", static_cast<TClass * (*)() >(&TAxis::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TAxis::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TAxis::Class()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!Class", static_cast<TClass * (*)() >(&TAxis::Class));

    DEBUG_MSG("Adding wrapper for void TAxis::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TAxis::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    t.method("Streamer", static_cast<void (TAxis::*)(TBuffer &) >(&TAxis::Streamer));

    DEBUG_MSG("Adding wrapper for int TAxis::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TAxis::DeclFileLine()
    // defined in /opt/root63206jll/include/TAxis.h:177:4
    module_.method("TAxis!DeclFileLine", static_cast<int (*)() >(&TAxis::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TAxis>> type_;
};
std::shared_ptr<Wrapper> newJlTAxis(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTAxis(module));
}
