// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoCtub> : std::false_type { };
  template<> struct DefaultConstructible<TGeoCtub> : std::false_type { };
template<> struct SuperType<TGeoCtub> { typedef TGeoTubeSeg type; };
}

// Class generating the wrapper for type TGeoCtub
// signature to use in the veto file: TGeoCtub
struct JlTGeoCtub: public Wrapper {

  JlTGeoCtub(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoCtub (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:173:7
    jlcxx::TypeWrapper<TGeoCtub>  t = jlModule.add_type<TGeoCtub>("TGeoCtub",
      jlcxx::julia_base_type<TGeoTubeSeg>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoCtub>>(new jlcxx::TypeWrapper<TGeoCtub>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCtub::TGeoCtub(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:182:4
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCtub::TGeoCtub(const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:184:4
    t.constructor<const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCtub::TGeoCtub(Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:186:4
    t.constructor<Double_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoCtub::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoCtub::Capacity()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:190:13
    t.method("Capacity", static_cast<Double_t (TGeoCtub::*)()  const>(&TGeoCtub::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::ComputeBBox()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:191:9
    t.method("ComputeBBox", static_cast<void (TGeoCtub::*)() >(&TGeoCtub::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:192:9
    t.method("ComputeNormal", static_cast<void (TGeoCtub::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoCtub::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:193:9
    t.method("ComputeNormal_v", static_cast<void (TGeoCtub::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoCtub::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoCtub::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoCtub::Contains(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:194:11
    t.method("Contains", static_cast<Bool_t (TGeoCtub::*)(const Double_t *)  const>(&TGeoCtub::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:195:9
    t.method("Contains_v", static_cast<void (TGeoCtub::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoCtub::Contains_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoCtub::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoCtub::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:196:13
    t.method("DistFromInside", static_cast<Double_t (TGeoCtub::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoCtub::DistFromInside));
    t.method("DistFromInside", [](TGeoCtub const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoCtub const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoCtub const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoCtub const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoCtub const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoCtub const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoCtub::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:198:9
    t.method("DistFromInside_v", static_cast<void (TGeoCtub::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoCtub::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoCtub::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoCtub::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:200:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoCtub::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoCtub::DistFromOutside));
    t.method("DistFromOutside", [](TGeoCtub const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoCtub const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoCtub const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoCtub const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoCtub const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoCtub const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoCtub::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:202:9
    t.method("DistFromOutside_v", static_cast<void (TGeoCtub::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoCtub::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoCtub::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoCtub::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:205:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoCtub::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoCtub::Divide));

    DEBUG_MSG("Adding wrapper for Double_t TGeoCtub::GetAxisRange(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoCtub::GetAxisRange(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:206:13
    t.method("GetAxisRange", static_cast<Double_t (TGeoCtub::*)(Int_t, Double_t &, Double_t &)  const>(&TGeoCtub::GetAxisRange));

    DEBUG_MSG("Adding wrapper for Int_t TGeoCtub::GetByteCount() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoCtub::GetByteCount()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:208:10
    t.method("GetByteCount", static_cast<Int_t (TGeoCtub::*)()  const>(&TGeoCtub::GetByteCount));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoCtub::GetPointsOnSegments(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoCtub::GetPointsOnSegments(Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:209:11
    t.method("GetPointsOnSegments", static_cast<Bool_t (TGeoCtub::*)(Int_t, Double_t *)  const>(&TGeoCtub::GetPointsOnSegments));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoCtub::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoCtub::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:210:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoCtub::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoCtub::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:211:9
    t.method("GetMeshNumbers", static_cast<void (TGeoCtub::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoCtub::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoCtub::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoCtub::GetNmeshVertices()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:212:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoCtub::*)()  const>(&TGeoCtub::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoCtub::GetNlow() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoCtub::GetNlow()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:213:20
    t.method("GetNlow", static_cast<const Double_t * (TGeoCtub::*)()  const>(&TGeoCtub::GetNlow));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoCtub::GetNhigh() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoCtub::GetNhigh()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:214:20
    t.method("GetNhigh", static_cast<const Double_t * (TGeoCtub::*)()  const>(&TGeoCtub::GetNhigh));

    DEBUG_MSG("Adding wrapper for Double_t TGeoCtub::GetZcoord(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoCtub::GetZcoord(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:215:13
    t.method("GetZcoord", static_cast<Double_t (TGeoCtub::*)(Double_t, Double_t, Double_t)  const>(&TGeoCtub::GetZcoord));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::InspectShape()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:216:9
    t.method("InspectShape", static_cast<void (TGeoCtub::*)()  const>(&TGeoCtub::InspectShape));

    DEBUG_MSG("Adding wrapper for Double_t TGeoCtub::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoCtub::Safety(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:217:13
    t.method("Safety", static_cast<Double_t (TGeoCtub::*)(const Double_t *, Bool_t)  const>(&TGeoCtub::Safety));
    t.method("Safety", [](TGeoCtub const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoCtub const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoCtub::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:218:9
    t.method("Safety_v", static_cast<void (TGeoCtub::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoCtub::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::SetCtubDimensions(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::SetCtubDimensions(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:220:9
    t.method("SetCtubDimensions", static_cast<void (TGeoCtub::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TGeoCtub::SetCtubDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::SetDimensions(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:222:9
    t.method("SetDimensions", static_cast<void (TGeoCtub::*)(Double_t *) >(&TGeoCtub::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::SetPoints(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:223:9
    t.method("SetPoints", static_cast<void (TGeoCtub::*)(Double_t *)  const>(&TGeoCtub::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::SetPoints(Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:224:9
    t.method("SetPoints", static_cast<void (TGeoCtub::*)(Float_t *)  const>(&TGeoCtub::SetPoints));

    DEBUG_MSG("Adding wrapper for Version_t TGeoCtub::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoCtub::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!Class_Version", static_cast<Version_t (*)() >(&TGeoCtub::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoCtub::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoCtub::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    t.method("IsA", static_cast<TClass * (TGeoCtub::*)()  const>(&TGeoCtub::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    t.method("StreamerNVirtual", static_cast<void (TGeoCtub::*)(TBuffer &) >(&TGeoCtub::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoCtub::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoCtub::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!DeclFileName", []() { return (std::string)TGeoCtub::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoCtub::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoCtub::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!ImplFileLine", static_cast<int (*)() >(&TGeoCtub::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoCtub::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoCtub::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!ImplFileName", []() { return (std::string)TGeoCtub::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoCtub::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoCtub::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!Class_Name", []() { return (std::string)TGeoCtub::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoCtub::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoCtub::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!Dictionary", static_cast<TClass * (*)() >(&TGeoCtub::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoCtub::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoCtub::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!Class", static_cast<TClass * (*)() >(&TGeoCtub::Class));

    DEBUG_MSG("Adding wrapper for void TGeoCtub::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCtub::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    t.method("Streamer", static_cast<void (TGeoCtub::*)(TBuffer &) >(&TGeoCtub::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoCtub::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoCtub::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoTube.h:226:4
    module_.method("TGeoCtub!DeclFileLine", static_cast<int (*)() >(&TGeoCtub::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoCtub>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoCtub(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoCtub(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoEltu> : std::false_type { };
  template<> struct DefaultConstructible<TGeoEltu> : std::false_type { };
template<> struct SuperType<TGeoEltu> { typedef TGeoTube type; };
}

// Class generating the wrapper for type TGeoEltu
// signature to use in the veto file: TGeoEltu
struct JlTGeoEltu: public Wrapper {

  JlTGeoEltu(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoEltu (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:17:7
    jlcxx::TypeWrapper<TGeoEltu>  t = jlModule.add_type<TGeoEltu>("TGeoEltu",
      jlcxx::julia_base_type<TGeoTube>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoEltu>>(new jlcxx::TypeWrapper<TGeoEltu>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoEltu::TGeoEltu(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:24:4
    t.constructor<Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoEltu::TGeoEltu(const char *, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:25:4
    t.constructor<const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoEltu::TGeoEltu(Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:26:4
    t.constructor<Double_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Double_t TGeoEltu::Capacity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoEltu::Capacity()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:30:13
    t.method("Capacity", static_cast<Double_t (TGeoEltu::*)()  const>(&TGeoEltu::Capacity));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::ComputeBBox() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::ComputeBBox()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:31:9
    t.method("ComputeBBox", static_cast<void (TGeoEltu::*)() >(&TGeoEltu::ComputeBBox));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::ComputeNormal(const Double_t *, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::ComputeNormal(const Double_t *, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:32:9
    t.method("ComputeNormal", static_cast<void (TGeoEltu::*)(const Double_t *, const Double_t *, Double_t *) >(&TGeoEltu::ComputeNormal));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:33:9
    t.method("ComputeNormal_v", static_cast<void (TGeoEltu::*)(const Double_t *, const Double_t *, Double_t *, Int_t) >(&TGeoEltu::ComputeNormal_v));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoEltu::Contains(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoEltu::Contains(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:34:11
    t.method("Contains", static_cast<Bool_t (TGeoEltu::*)(const Double_t *)  const>(&TGeoEltu::Contains));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::Contains_v(const Double_t *, Bool_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::Contains_v(const Double_t *, Bool_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:35:9
    t.method("Contains_v", static_cast<void (TGeoEltu::*)(const Double_t *, Bool_t *, Int_t)  const>(&TGeoEltu::Contains_v));

    DEBUG_MSG("Adding wrapper for Int_t TGeoEltu::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoEltu::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:36:10
    t.method("DistancetoPrimitive", static_cast<Int_t (TGeoEltu::*)(Int_t, Int_t) >(&TGeoEltu::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for Double_t TGeoEltu::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoEltu::DistFromInside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:37:13
    t.method("DistFromInside", static_cast<Double_t (TGeoEltu::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoEltu::DistFromInside));
    t.method("DistFromInside", [](TGeoEltu const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoEltu const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoEltu const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromInside(arg0, arg1, arg2, arg3); });
    t.method("DistFromInside", [](TGeoEltu const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromInside(arg0, arg1); });
    t.method("DistFromInside", [](TGeoEltu const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromInside(arg0, arg1, arg2); });
    t.method("DistFromInside", [](TGeoEltu const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromInside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoEltu::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:39:9
    t.method("DistFromInside_v", static_cast<void (TGeoEltu::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoEltu::DistFromInside_v));

    DEBUG_MSG("Adding wrapper for Double_t TGeoEltu::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoEltu::DistFromOutside(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:41:13
    t.method("DistFromOutside", static_cast<Double_t (TGeoEltu::*)(const Double_t *, const Double_t *, Int_t, Double_t, Double_t *)  const>(&TGeoEltu::DistFromOutside));
    t.method("DistFromOutside", [](TGeoEltu const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoEltu const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a.DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoEltu const& a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a.DistFromOutside(arg0, arg1, arg2, arg3); });
    t.method("DistFromOutside", [](TGeoEltu const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->DistFromOutside(arg0, arg1); });
    t.method("DistFromOutside", [](TGeoEltu const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2)->Double_t { return a->DistFromOutside(arg0, arg1, arg2); });
    t.method("DistFromOutside", [](TGeoEltu const* a, const Double_t * arg0, const Double_t * arg1, Int_t arg2, Double_t arg3)->Double_t { return a->DistFromOutside(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGeoEltu::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:43:9
    t.method("DistFromOutside_v", static_cast<void (TGeoEltu::*)(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *)  const>(&TGeoEltu::DistFromOutside_v));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoEltu::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoEltu::Divide(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:46:4
    t.method("Divide", static_cast<TGeoVolume * (TGeoEltu::*)(TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) >(&TGeoEltu::Divide));

    DEBUG_MSG("Adding wrapper for Double_t TGeoEltu::GetA() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoEltu::GetA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:47:21
    t.method("GetA", static_cast<Double_t (TGeoEltu::*)()  const>(&TGeoEltu::GetA));

    DEBUG_MSG("Adding wrapper for Double_t TGeoEltu::GetB() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoEltu::GetB()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:48:21
    t.method("GetB", static_cast<Double_t (TGeoEltu::*)()  const>(&TGeoEltu::GetB));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::GetBoundingCylinder(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::GetBoundingCylinder(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:49:9
    t.method("GetBoundingCylinder", static_cast<void (TGeoEltu::*)(Double_t *)  const>(&TGeoEltu::GetBoundingCylinder));

    DEBUG_MSG("Adding wrapper for TGeoShape * TGeoEltu::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoShape * TGeoEltu::GetMakeRuntimeShape(TGeoShape *, TGeoMatrix *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:51:15
    t.method("GetMakeRuntimeShape", static_cast<TGeoShape * (TGeoEltu::*)(TGeoShape *, TGeoMatrix *)  const>(&TGeoEltu::GetMakeRuntimeShape));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::GetMeshNumbers(Int_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::GetMeshNumbers(Int_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:52:9
    t.method("GetMeshNumbers", static_cast<void (TGeoEltu::*)(Int_t &, Int_t &, Int_t &)  const>(&TGeoEltu::GetMeshNumbers));

    DEBUG_MSG("Adding wrapper for Int_t TGeoEltu::GetNmeshVertices() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoEltu::GetNmeshVertices()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:53:10
    t.method("GetNmeshVertices", static_cast<Int_t (TGeoEltu::*)()  const>(&TGeoEltu::GetNmeshVertices));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoEltu::GetPointsOnSegments(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoEltu::GetPointsOnSegments(Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:54:11
    t.method("GetPointsOnSegments", static_cast<Bool_t (TGeoEltu::*)(Int_t, Double_t *)  const>(&TGeoEltu::GetPointsOnSegments));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::InspectShape() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::InspectShape()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:55:9
    t.method("InspectShape", static_cast<void (TGeoEltu::*)()  const>(&TGeoEltu::InspectShape));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoEltu::IsCylType() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoEltu::IsCylType()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:56:11
    t.method("IsCylType", static_cast<Bool_t (TGeoEltu::*)()  const>(&TGeoEltu::IsCylType));

    DEBUG_MSG("Adding wrapper for Double_t TGeoEltu::Safety(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoEltu::Safety(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:57:13
    t.method("Safety", static_cast<Double_t (TGeoEltu::*)(const Double_t *, Bool_t)  const>(&TGeoEltu::Safety));
    t.method("Safety", [](TGeoEltu const& a, const Double_t * arg0)->Double_t { return a.Safety(arg0); });
    t.method("Safety", [](TGeoEltu const* a, const Double_t * arg0)->Double_t { return a->Safety(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoEltu::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:58:9
    t.method("Safety_v", static_cast<void (TGeoEltu::*)(const Double_t *, const Bool_t *, Double_t *, Int_t)  const>(&TGeoEltu::Safety_v));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::SetEltuDimensions(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::SetEltuDimensions(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:60:9
    t.method("SetEltuDimensions", static_cast<void (TGeoEltu::*)(Double_t, Double_t, Double_t) >(&TGeoEltu::SetEltuDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::SetDimensions(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::SetDimensions(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:61:9
    t.method("SetDimensions", static_cast<void (TGeoEltu::*)(Double_t *) >(&TGeoEltu::SetDimensions));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::SetPoints(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::SetPoints(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:62:9
    t.method("SetPoints", static_cast<void (TGeoEltu::*)(Double_t *)  const>(&TGeoEltu::SetPoints));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::SetPoints(Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::SetPoints(Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:63:9
    t.method("SetPoints", static_cast<void (TGeoEltu::*)(Float_t *)  const>(&TGeoEltu::SetPoints));

    DEBUG_MSG("Adding wrapper for Version_t TGeoEltu::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoEltu::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!Class_Version", static_cast<Version_t (*)() >(&TGeoEltu::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoEltu::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoEltu::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    t.method("IsA", static_cast<TClass * (TGeoEltu::*)()  const>(&TGeoEltu::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    t.method("StreamerNVirtual", static_cast<void (TGeoEltu::*)(TBuffer &) >(&TGeoEltu::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoEltu::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoEltu::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!DeclFileName", []() { return (std::string)TGeoEltu::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoEltu::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoEltu::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!ImplFileLine", static_cast<int (*)() >(&TGeoEltu::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoEltu::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoEltu::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!ImplFileName", []() { return (std::string)TGeoEltu::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoEltu::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoEltu::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!Class_Name", []() { return (std::string)TGeoEltu::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoEltu::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoEltu::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!Dictionary", static_cast<TClass * (*)() >(&TGeoEltu::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoEltu::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoEltu::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!Class", static_cast<TClass * (*)() >(&TGeoEltu::Class));

    DEBUG_MSG("Adding wrapper for void TGeoEltu::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoEltu::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    t.method("Streamer", static_cast<void (TGeoEltu::*)(TBuffer &) >(&TGeoEltu::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoEltu::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoEltu::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoEltu.h:65:4
    module_.method("TGeoEltu!DeclFileLine", static_cast<int (*)() >(&TGeoEltu::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoEltu>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoEltu(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoEltu(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoRCExtension> : std::false_type { };
  template<> struct DefaultConstructible<TGeoRCExtension> : std::false_type { };
template<> struct SuperType<TGeoRCExtension> { typedef TGeoExtension type; };
}

// Class generating the wrapper for type TGeoRCExtension
// signature to use in the veto file: TGeoRCExtension
struct JlTGeoRCExtension: public Wrapper {

  JlTGeoRCExtension(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoRCExtension (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:33:7
    jlcxx::TypeWrapper<TGeoRCExtension>  t = jlModule.add_type<TGeoRCExtension>("TGeoRCExtension",
      jlcxx::julia_base_type<TGeoExtension>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoRCExtension>>(new jlcxx::TypeWrapper<TGeoRCExtension>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/false);


    DEBUG_MSG("Adding wrapper for void TGeoRCExtension::TGeoRCExtension(TObject *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:39:4
    t.constructor<TObject *>(/*finalize=*/false);

    DEBUG_MSG("Adding wrapper for TGeoExtension * TGeoRCExtension::Grab() (" __HERE__ ")");
    // signature to use in the veto list: TGeoExtension * TGeoRCExtension::Grab()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:41:19
    t.method("Grab", static_cast<TGeoExtension * (TGeoRCExtension::*)() >(&TGeoRCExtension::Grab));

    DEBUG_MSG("Adding wrapper for void TGeoRCExtension::Release() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRCExtension::Release()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:46:9
    t.method("Release", static_cast<void (TGeoRCExtension::*)()  const>(&TGeoRCExtension::Release));

    DEBUG_MSG("Adding wrapper for void TGeoRCExtension::SetUserObject(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRCExtension::SetUserObject(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:48:9
    t.method("SetUserObject", static_cast<void (TGeoRCExtension::*)(TObject *) >(&TGeoRCExtension::SetUserObject));

    DEBUG_MSG("Adding wrapper for TObject * TGeoRCExtension::GetUserObject() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TGeoRCExtension::GetUserObject()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:49:13
    t.method("GetUserObject", static_cast<TObject * (TGeoRCExtension::*)()  const>(&TGeoRCExtension::GetUserObject));

    DEBUG_MSG("Adding wrapper for Version_t TGeoRCExtension::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoRCExtension::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!Class_Version", static_cast<Version_t (*)() >(&TGeoRCExtension::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoRCExtension::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoRCExtension::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    t.method("IsA", static_cast<TClass * (TGeoRCExtension::*)()  const>(&TGeoRCExtension::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoRCExtension::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRCExtension::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    t.method("StreamerNVirtual", static_cast<void (TGeoRCExtension::*)(TBuffer &) >(&TGeoRCExtension::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoRCExtension::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoRCExtension::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!DeclFileName", []() { return (std::string)TGeoRCExtension::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoRCExtension::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoRCExtension::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!ImplFileLine", static_cast<int (*)() >(&TGeoRCExtension::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoRCExtension::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoRCExtension::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!ImplFileName", []() { return (std::string)TGeoRCExtension::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoRCExtension::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoRCExtension::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!Class_Name", []() { return (std::string)TGeoRCExtension::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoRCExtension::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoRCExtension::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!Dictionary", static_cast<TClass * (*)() >(&TGeoRCExtension::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoRCExtension::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoRCExtension::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!Class", static_cast<TClass * (*)() >(&TGeoRCExtension::Class));

    DEBUG_MSG("Adding wrapper for void TGeoRCExtension::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoRCExtension::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    t.method("Streamer", static_cast<void (TGeoRCExtension::*)(TBuffer &) >(&TGeoRCExtension::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoRCExtension::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoRCExtension::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoExtension.h:58:4
    module_.method("TGeoRCExtension!DeclFileLine", static_cast<int (*)() >(&TGeoRCExtension::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoRCExtension>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoRCExtension(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoRCExtension(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TVirtualMagField> : std::false_type { };
  template<> struct DefaultConstructible<TVirtualMagField> : std::false_type { };
template<> struct SuperType<TVirtualMagField> { typedef TNamed type; };
}

// Class generating the wrapper for type TVirtualMagField
// signature to use in the veto file: TVirtualMagField
struct JlTVirtualMagField: public Wrapper {

  JlTVirtualMagField(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TVirtualMagField (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:16:7
    jlcxx::TypeWrapper<TVirtualMagField>  t = jlModule.add_type<TVirtualMagField>("TVirtualMagField",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TVirtualMagField>>(new jlcxx::TypeWrapper<TVirtualMagField>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TVirtualMagField::Field(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualMagField::Field(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:22:17
    t.method("Field", static_cast<void (TVirtualMagField::*)(const Double_t *, Double_t *) >(&TVirtualMagField::Field));

    DEBUG_MSG("Adding wrapper for Version_t TVirtualMagField::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TVirtualMagField::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!Class_Version", static_cast<Version_t (*)() >(&TVirtualMagField::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TVirtualMagField::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualMagField::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    t.method("IsA", static_cast<TClass * (TVirtualMagField::*)()  const>(&TVirtualMagField::IsA));

    DEBUG_MSG("Adding wrapper for void TVirtualMagField::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualMagField::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    t.method("StreamerNVirtual", static_cast<void (TVirtualMagField::*)(TBuffer &) >(&TVirtualMagField::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TVirtualMagField::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualMagField::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!DeclFileName", []() { return (std::string)TVirtualMagField::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TVirtualMagField::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualMagField::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!ImplFileLine", static_cast<int (*)() >(&TVirtualMagField::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TVirtualMagField::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualMagField::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!ImplFileName", []() { return (std::string)TVirtualMagField::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TVirtualMagField::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TVirtualMagField::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!Class_Name", []() { return (std::string)TVirtualMagField::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TVirtualMagField::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualMagField::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!Dictionary", static_cast<TClass * (*)() >(&TVirtualMagField::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TVirtualMagField::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TVirtualMagField::Class()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!Class", static_cast<TClass * (*)() >(&TVirtualMagField::Class));

    DEBUG_MSG("Adding wrapper for void TVirtualMagField::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TVirtualMagField::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    t.method("Streamer", static_cast<void (TVirtualMagField::*)(TBuffer &) >(&TVirtualMagField::Streamer));

    DEBUG_MSG("Adding wrapper for int TVirtualMagField::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TVirtualMagField::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:24:4
    module_.method("TVirtualMagField!DeclFileLine", static_cast<int (*)() >(&TVirtualMagField::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TVirtualMagField>> type_;
};
std::shared_ptr<Wrapper> newJlTVirtualMagField(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTVirtualMagField(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoUniformMagField> : std::false_type { };
  template<> struct DefaultConstructible<TGeoUniformMagField> : std::false_type { };
template<> struct SuperType<TGeoUniformMagField> { typedef TVirtualMagField type; };
}

// Class generating the wrapper for type TGeoUniformMagField
// signature to use in the veto file: TGeoUniformMagField
struct JlTGeoUniformMagField: public Wrapper {

  JlTGeoUniformMagField(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoUniformMagField (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:33:7
    jlcxx::TypeWrapper<TGeoUniformMagField>  t = jlModule.add_type<TGeoUniformMagField>("TGeoUniformMagField",
      jlcxx::julia_base_type<TVirtualMagField>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoUniformMagField>>(new jlcxx::TypeWrapper<TGeoUniformMagField>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoUniformMagField::TGeoUniformMagField(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:43:4
    t.constructor<Double_t, Double_t, Double_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGeoUniformMagField::Field(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoUniformMagField::Field(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:46:9
    t.method("Field", static_cast<void (TGeoUniformMagField::*)(const Double_t *, Double_t *) >(&TGeoUniformMagField::Field));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoUniformMagField::GetFieldValue() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoUniformMagField::GetFieldValue()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:53:20
    t.method("GetFieldValue", static_cast<const Double_t * (TGeoUniformMagField::*)()  const>(&TGeoUniformMagField::GetFieldValue));

    DEBUG_MSG("Adding wrapper for void TGeoUniformMagField::SetFieldValue(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoUniformMagField::SetFieldValue(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:54:9
    t.method("SetFieldValue", static_cast<void (TGeoUniformMagField::*)(Double_t, Double_t, Double_t) >(&TGeoUniformMagField::SetFieldValue));

    DEBUG_MSG("Adding wrapper for Version_t TGeoUniformMagField::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoUniformMagField::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!Class_Version", static_cast<Version_t (*)() >(&TGeoUniformMagField::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoUniformMagField::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoUniformMagField::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    t.method("IsA", static_cast<TClass * (TGeoUniformMagField::*)()  const>(&TGeoUniformMagField::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoUniformMagField::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoUniformMagField::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    t.method("StreamerNVirtual", static_cast<void (TGeoUniformMagField::*)(TBuffer &) >(&TGeoUniformMagField::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoUniformMagField::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoUniformMagField::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!DeclFileName", []() { return (std::string)TGeoUniformMagField::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoUniformMagField::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoUniformMagField::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!ImplFileLine", static_cast<int (*)() >(&TGeoUniformMagField::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoUniformMagField::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoUniformMagField::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!ImplFileName", []() { return (std::string)TGeoUniformMagField::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoUniformMagField::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoUniformMagField::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!Class_Name", []() { return (std::string)TGeoUniformMagField::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoUniformMagField::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoUniformMagField::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!Dictionary", static_cast<TClass * (*)() >(&TGeoUniformMagField::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoUniformMagField::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoUniformMagField::Class()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!Class", static_cast<TClass * (*)() >(&TGeoUniformMagField::Class));

    DEBUG_MSG("Adding wrapper for void TGeoUniformMagField::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoUniformMagField::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    t.method("Streamer", static_cast<void (TGeoUniformMagField::*)(TBuffer &) >(&TGeoUniformMagField::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoUniformMagField::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoUniformMagField::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TVirtualMagField.h:61:4
    module_.method("TGeoUniformMagField!DeclFileLine", static_cast<int (*)() >(&TGeoUniformMagField::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoUniformMagField>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoUniformMagField(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoUniformMagField(module));
}
