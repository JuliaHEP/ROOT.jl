// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"
// Class generating the wrapper for type 
// signature to use in the veto file: 
struct JlGlobal: public Wrapper {

  JlGlobal(jlcxx::Module& jlModule): Wrapper(jlModule){
  }

  void add_methods() const{
    auto& t = module_;

    DEBUG_MSG("Adding wrapper for std::string cling::printValue(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: std::string cling::printValue(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TObject.h:378:16
    t.method("cling!printValue", static_cast<std::string (*)(TObject *) >(&cling::printValue));

    DEBUG_MSG("Adding wrapper for bool ROOT::Detail::HasBeenDeleted(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: bool ROOT::Detail::HasBeenDeleted(const TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TObject.h:402:23
    t.method("ROOT!Detail!HasBeenDeleted", static_cast<bool (*)(const TObject *) >(&ROOT::Detail::HasBeenDeleted));

    DEBUG_MSG("Adding wrapper for void ROOT::EnableThreadSafety() (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::EnableThreadSafety()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:85:9
    t.method("ROOT!EnableThreadSafety", static_cast<void (*)() >(&ROOT::EnableThreadSafety));

    DEBUG_MSG("Adding wrapper for void ROOT::EnableImplicitMT(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::EnableImplicitMT(UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:88:9
    t.method("ROOT!EnableImplicitMT", static_cast<void (*)(UInt_t) >(&ROOT::EnableImplicitMT));
    t.method("ROOT!EnableImplicitMT", []()->void { ROOT::EnableImplicitMT(); });

    DEBUG_MSG("Adding wrapper for void ROOT::DisableImplicitMT() (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::DisableImplicitMT()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:89:9
    t.method("ROOT!DisableImplicitMT", static_cast<void (*)() >(&ROOT::DisableImplicitMT));

    DEBUG_MSG("Adding wrapper for Bool_t ROOT::IsImplicitMTEnabled() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t ROOT::IsImplicitMTEnabled()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:90:11
    t.method("ROOT!IsImplicitMTEnabled", static_cast<Bool_t (*)() >(&ROOT::IsImplicitMTEnabled));

    DEBUG_MSG("Adding wrapper for UInt_t ROOT::GetThreadPoolSize() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t ROOT::GetThreadPoolSize()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:91:11
    t.method("ROOT!GetThreadPoolSize", static_cast<UInt_t (*)() >(&ROOT::GetThreadPoolSize));

    DEBUG_MSG("Adding wrapper for TROOT * ROOT::GetROOT() (" __HERE__ ")");
    // signature to use in the veto list: TROOT * ROOT::GetROOT()
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:378:11
    t.method("ROOT!GetROOT", static_cast<TROOT * (*)() >(&ROOT::GetROOT));

    DEBUG_MSG("Adding wrapper for void ROOT::CallRecursiveRemoveIfNeeded(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void ROOT::CallRecursiveRemoveIfNeeded(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:396:16
    t.method("ROOT!CallRecursiveRemoveIfNeeded", static_cast<void (*)(TObject &) >(&ROOT::CallRecursiveRemoveIfNeeded));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISDIR(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISDIR(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:113:15
    t.method("R_ISDIR", static_cast<Bool_t (*)(Int_t) >(&R_ISDIR));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISCHR(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISCHR(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:114:15
    t.method("R_ISCHR", static_cast<Bool_t (*)(Int_t) >(&R_ISCHR));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISBLK(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISBLK(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:115:15
    t.method("R_ISBLK", static_cast<Bool_t (*)(Int_t) >(&R_ISBLK));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISREG(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISREG(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:116:15
    t.method("R_ISREG", static_cast<Bool_t (*)(Int_t) >(&R_ISREG));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISLNK(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISLNK(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:117:15
    t.method("R_ISLNK", static_cast<Bool_t (*)(Int_t) >(&R_ISLNK));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISFIFO(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISFIFO(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:118:15
    t.method("R_ISFIFO", static_cast<Bool_t (*)(Int_t) >(&R_ISFIFO));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISSOCK(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISSOCK(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:119:15
    t.method("R_ISSOCK", static_cast<Bool_t (*)(Int_t) >(&R_ISSOCK));

    DEBUG_MSG("Adding wrapper for Bool_t R_ISOFF(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t R_ISOFF(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:120:15
    t.method("R_ISOFF", static_cast<Bool_t (*)(Int_t) >(&R_ISOFF));

    DEBUG_MSG("Adding wrapper for std::string cling::printValue(TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: std::string cling::printValue(TH1 *)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:452:15
    t.method("cling!printValue", static_cast<std::string (*)(TH1 *) >(&cling::printValue));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for TH1C operator*(Double_t, const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C operator*(Double_t, const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:488:6
    t.method("*", static_cast<TH1C (*)(Double_t, const TH1C &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1C operator*(const TH1C &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1C operator*(const TH1C &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:490:6
    t.method("*", static_cast<TH1C (*)(const TH1C &, Double_t) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1C operator+(const TH1C &, const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C operator+(const TH1C &, const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:491:6
    t.method("+", static_cast<TH1C (*)(const TH1C &, const TH1C &) >(&operator+));

    DEBUG_MSG("Adding wrapper for TH1C operator-(const TH1C &, const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C operator-(const TH1C &, const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:492:6
    t.method("-", static_cast<TH1C (*)(const TH1C &, const TH1C &) >(&operator-));

    DEBUG_MSG("Adding wrapper for TH1C operator*(const TH1C &, const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C operator*(const TH1C &, const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:493:6
    t.method("*", static_cast<TH1C (*)(const TH1C &, const TH1C &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1C operator/(const TH1C &, const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C operator/(const TH1C &, const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:494:6
    t.method("/", static_cast<TH1C (*)(const TH1C &, const TH1C &) >(&operator/));

    DEBUG_MSG("Adding wrapper for TH1S operator*(Double_t, const TH1S &) (" __HERE__ ")");
    // signature to use in the veto list: TH1S operator*(Double_t, const TH1S &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:529:6
    t.method("*", static_cast<TH1S (*)(Double_t, const TH1S &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1S operator*(const TH1S &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1S operator*(const TH1S &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:531:6
    t.method("*", static_cast<TH1S (*)(const TH1S &, Double_t) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1S operator+(const TH1S &, const TH1S &) (" __HERE__ ")");
    // signature to use in the veto list: TH1S operator+(const TH1S &, const TH1S &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:532:6
    t.method("+", static_cast<TH1S (*)(const TH1S &, const TH1S &) >(&operator+));

    DEBUG_MSG("Adding wrapper for TH1S operator-(const TH1S &, const TH1S &) (" __HERE__ ")");
    // signature to use in the veto list: TH1S operator-(const TH1S &, const TH1S &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:533:6
    t.method("-", static_cast<TH1S (*)(const TH1S &, const TH1S &) >(&operator-));

    DEBUG_MSG("Adding wrapper for TH1S operator*(const TH1S &, const TH1S &) (" __HERE__ ")");
    // signature to use in the veto list: TH1S operator*(const TH1S &, const TH1S &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:534:6
    t.method("*", static_cast<TH1S (*)(const TH1S &, const TH1S &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1S operator/(const TH1S &, const TH1S &) (" __HERE__ ")");
    // signature to use in the veto list: TH1S operator/(const TH1S &, const TH1S &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:535:6
    t.method("/", static_cast<TH1S (*)(const TH1S &, const TH1S &) >(&operator/));

    DEBUG_MSG("Adding wrapper for TH1I operator*(Double_t, const TH1I &) (" __HERE__ ")");
    // signature to use in the veto list: TH1I operator*(Double_t, const TH1I &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:570:6
    t.method("*", static_cast<TH1I (*)(Double_t, const TH1I &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1I operator*(const TH1I &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1I operator*(const TH1I &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:572:6
    t.method("*", static_cast<TH1I (*)(const TH1I &, Double_t) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1I operator+(const TH1I &, const TH1I &) (" __HERE__ ")");
    // signature to use in the veto list: TH1I operator+(const TH1I &, const TH1I &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:573:6
    t.method("+", static_cast<TH1I (*)(const TH1I &, const TH1I &) >(&operator+));

    DEBUG_MSG("Adding wrapper for TH1I operator-(const TH1I &, const TH1I &) (" __HERE__ ")");
    // signature to use in the veto list: TH1I operator-(const TH1I &, const TH1I &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:574:6
    t.method("-", static_cast<TH1I (*)(const TH1I &, const TH1I &) >(&operator-));

    DEBUG_MSG("Adding wrapper for TH1I operator*(const TH1I &, const TH1I &) (" __HERE__ ")");
    // signature to use in the veto list: TH1I operator*(const TH1I &, const TH1I &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:575:6
    t.method("*", static_cast<TH1I (*)(const TH1I &, const TH1I &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1I operator/(const TH1I &, const TH1I &) (" __HERE__ ")");
    // signature to use in the veto list: TH1I operator/(const TH1I &, const TH1I &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:576:6
    t.method("/", static_cast<TH1I (*)(const TH1I &, const TH1I &) >(&operator/));

    DEBUG_MSG("Adding wrapper for TH1L operator*(Double_t, const TH1L &) (" __HERE__ ")");
    // signature to use in the veto list: TH1L operator*(Double_t, const TH1L &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:611:6
    t.method("*", static_cast<TH1L (*)(Double_t, const TH1L &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1L operator*(const TH1L &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1L operator*(const TH1L &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:613:6
    t.method("*", static_cast<TH1L (*)(const TH1L &, Double_t) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1L operator+(const TH1L &, const TH1L &) (" __HERE__ ")");
    // signature to use in the veto list: TH1L operator+(const TH1L &, const TH1L &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:614:6
    t.method("+", static_cast<TH1L (*)(const TH1L &, const TH1L &) >(&operator+));

    DEBUG_MSG("Adding wrapper for TH1L operator-(const TH1L &, const TH1L &) (" __HERE__ ")");
    // signature to use in the veto list: TH1L operator-(const TH1L &, const TH1L &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:615:6
    t.method("-", static_cast<TH1L (*)(const TH1L &, const TH1L &) >(&operator-));

    DEBUG_MSG("Adding wrapper for TH1L operator*(const TH1L &, const TH1L &) (" __HERE__ ")");
    // signature to use in the veto list: TH1L operator*(const TH1L &, const TH1L &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:616:6
    t.method("*", static_cast<TH1L (*)(const TH1L &, const TH1L &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1L operator/(const TH1L &, const TH1L &) (" __HERE__ ")");
    // signature to use in the veto list: TH1L operator/(const TH1L &, const TH1L &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:617:6
    t.method("/", static_cast<TH1L (*)(const TH1L &, const TH1L &) >(&operator/));

    DEBUG_MSG("Adding wrapper for TH1F operator*(Double_t, const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F operator*(Double_t, const TH1F &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:659:6
    t.method("*", static_cast<TH1F (*)(Double_t, const TH1F &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1F operator*(const TH1F &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1F operator*(const TH1F &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:661:6
    t.method("*", static_cast<TH1F (*)(const TH1F &, Double_t) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1F operator+(const TH1F &, const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F operator+(const TH1F &, const TH1F &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:662:6
    t.method("+", static_cast<TH1F (*)(const TH1F &, const TH1F &) >(&operator+));

    DEBUG_MSG("Adding wrapper for TH1F operator-(const TH1F &, const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F operator-(const TH1F &, const TH1F &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:663:6
    t.method("-", static_cast<TH1F (*)(const TH1F &, const TH1F &) >(&operator-));

    DEBUG_MSG("Adding wrapper for TH1F operator*(const TH1F &, const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F operator*(const TH1F &, const TH1F &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:664:6
    t.method("*", static_cast<TH1F (*)(const TH1F &, const TH1F &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1F operator/(const TH1F &, const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F operator/(const TH1F &, const TH1F &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:665:6
    t.method("/", static_cast<TH1F (*)(const TH1F &, const TH1F &) >(&operator/));

    DEBUG_MSG("Adding wrapper for TH1D operator*(Double_t, const TH1D &) (" __HERE__ ")");
    // signature to use in the veto list: TH1D operator*(Double_t, const TH1D &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:706:6
    t.method("*", static_cast<TH1D (*)(Double_t, const TH1D &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1D operator*(const TH1D &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1D operator*(const TH1D &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:708:6
    t.method("*", static_cast<TH1D (*)(const TH1D &, Double_t) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1D operator+(const TH1D &, const TH1D &) (" __HERE__ ")");
    // signature to use in the veto list: TH1D operator+(const TH1D &, const TH1D &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:709:6
    t.method("+", static_cast<TH1D (*)(const TH1D &, const TH1D &) >(&operator+));

    DEBUG_MSG("Adding wrapper for TH1D operator-(const TH1D &, const TH1D &) (" __HERE__ ")");
    // signature to use in the veto list: TH1D operator-(const TH1D &, const TH1D &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:710:6
    t.method("-", static_cast<TH1D (*)(const TH1D &, const TH1D &) >(&operator-));

    DEBUG_MSG("Adding wrapper for TH1D operator*(const TH1D &, const TH1D &) (" __HERE__ ")");
    // signature to use in the veto list: TH1D operator*(const TH1D &, const TH1D &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:711:6
    t.method("*", static_cast<TH1D (*)(const TH1D &, const TH1D &) >(&operator*));

    DEBUG_MSG("Adding wrapper for TH1D operator/(const TH1D &, const TH1D &) (" __HERE__ ")");
    // signature to use in the veto list: TH1D operator/(const TH1D &, const TH1D &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:712:6
    t.method("/", static_cast<TH1D (*)(const TH1D &, const TH1D &) >(&operator/));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for TH1 * R__H(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * R__H(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:714:16
    t.method("R__H", static_cast<TH1 * (*)(Int_t) >(&R__H));

    DEBUG_MSG("Adding wrapper for TH1 * R__H(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * R__H(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:715:16
    t.method("R__H", static_cast<TH1 * (*)(const char *) >(&R__H));

    DEBUG_MSG("Adding wrapper for TTree * GetTTree(TDirectoryFile &, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TTree * GetTTree(TDirectoryFile &, const char *)
    // defined in src/Templates.h:18:15
    t.method("GetTTree", static_cast<TTree * (*)(TDirectoryFile &, const char *) >(&GetTTree));

    DEBUG_MSG("Adding wrapper for TH1 * GetTH1(TDirectoryFile &, const char *) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * GetTH1(TDirectoryFile &, const char *)
    // defined in src/Templates.h:22:13
    t.method("GetTH1", static_cast<TH1 * (*)(TDirectoryFile &, const char *) >(&GetTH1));

    DEBUG_MSG("Adding wrapper for size_t length(const TTreeReaderArray<Float_t> &) (" __HERE__ ")");
    // signature to use in the veto list: size_t length(const TTreeReaderArray<Float_t> &)
    // defined in src/Templates.h:67:21
    t.method("length", static_cast<size_t (*)(const TTreeReaderArray<Float_t> &) >(&length));

    DEBUG_MSG("Adding wrapper for TBranchPtr<Char_t> Branch(TTree &, const char *, Char_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<Char_t> Branch(TTree &, const char *, Char_t &, Int_t, Int_t)
    // defined in src/Templates.h:93:35
    t.method("Branch", static_cast<TBranchPtr<Char_t> (*)(TTree &, const char *, Char_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<UChar_t> Branch(TTree &, const char *, UChar_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<UChar_t> Branch(TTree &, const char *, UChar_t &, Int_t, Int_t)
    // defined in src/Templates.h:94:35
    t.method("Branch", static_cast<TBranchPtr<UChar_t> (*)(TTree &, const char *, UChar_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<Short_t> Branch(TTree &, const char *, Short_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<Short_t> Branch(TTree &, const char *, Short_t &, Int_t, Int_t)
    // defined in src/Templates.h:95:35
    t.method("Branch", static_cast<TBranchPtr<Short_t> (*)(TTree &, const char *, Short_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<UShort_t> Branch(TTree &, const char *, UShort_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<UShort_t> Branch(TTree &, const char *, UShort_t &, Int_t, Int_t)
    // defined in src/Templates.h:96:35
    t.method("Branch", static_cast<TBranchPtr<UShort_t> (*)(TTree &, const char *, UShort_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<Int_t> Branch(TTree &, const char *, Int_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<Int_t> Branch(TTree &, const char *, Int_t &, Int_t, Int_t)
    // defined in src/Templates.h:97:35
    t.method("Branch", static_cast<TBranchPtr<Int_t> (*)(TTree &, const char *, Int_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<UInt_t> Branch(TTree &, const char *, UInt_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<UInt_t> Branch(TTree &, const char *, UInt_t &, Int_t, Int_t)
    // defined in src/Templates.h:98:35
    t.method("Branch", static_cast<TBranchPtr<UInt_t> (*)(TTree &, const char *, UInt_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<Long_t> Branch(TTree &, const char *, Long_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<Long_t> Branch(TTree &, const char *, Long_t &, Int_t, Int_t)
    // defined in src/Templates.h:99:35
    t.method("Branch", static_cast<TBranchPtr<Long_t> (*)(TTree &, const char *, Long_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<ULong_t> Branch(TTree &, const char *, ULong_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<ULong_t> Branch(TTree &, const char *, ULong_t &, Int_t, Int_t)
    // defined in src/Templates.h:100:35
    t.method("Branch", static_cast<TBranchPtr<ULong_t> (*)(TTree &, const char *, ULong_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<Float_t> Branch(TTree &, const char *, Float_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<Float_t> Branch(TTree &, const char *, Float_t &, Int_t, Int_t)
    // defined in src/Templates.h:101:35
    t.method("Branch", static_cast<TBranchPtr<Float_t> (*)(TTree &, const char *, Float_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<Double_t> Branch(TTree &, const char *, Double_t &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<Double_t> Branch(TTree &, const char *, Double_t &, Int_t, Int_t)
    // defined in src/Templates.h:102:35
    t.method("Branch", static_cast<TBranchPtr<Double_t> (*)(TTree &, const char *, Double_t &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<Char_t>> Branch(TTree &, const char *, std::vector<Char_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<Char_t>> Branch(TTree &, const char *, std::vector<Char_t> &, Int_t, Int_t)
    // defined in src/Templates.h:104:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<Char_t>> (*)(TTree &, const char *, std::vector<Char_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<UChar_t>> Branch(TTree &, const char *, std::vector<UChar_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<UChar_t>> Branch(TTree &, const char *, std::vector<UChar_t> &, Int_t, Int_t)
    // defined in src/Templates.h:105:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<UChar_t>> (*)(TTree &, const char *, std::vector<UChar_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<Short_t>> Branch(TTree &, const char *, std::vector<Short_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<Short_t>> Branch(TTree &, const char *, std::vector<Short_t> &, Int_t, Int_t)
    // defined in src/Templates.h:106:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<Short_t>> (*)(TTree &, const char *, std::vector<Short_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<UShort_t>> Branch(TTree &, const char *, std::vector<UShort_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<UShort_t>> Branch(TTree &, const char *, std::vector<UShort_t> &, Int_t, Int_t)
    // defined in src/Templates.h:107:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<UShort_t>> (*)(TTree &, const char *, std::vector<UShort_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<Int_t>> Branch(TTree &, const char *, std::vector<Int_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<Int_t>> Branch(TTree &, const char *, std::vector<Int_t> &, Int_t, Int_t)
    // defined in src/Templates.h:108:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<Int_t>> (*)(TTree &, const char *, std::vector<Int_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<UInt_t>> Branch(TTree &, const char *, std::vector<UInt_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<UInt_t>> Branch(TTree &, const char *, std::vector<UInt_t> &, Int_t, Int_t)
    // defined in src/Templates.h:109:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<UInt_t>> (*)(TTree &, const char *, std::vector<UInt_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<Long_t>> Branch(TTree &, const char *, std::vector<Long_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<Long_t>> Branch(TTree &, const char *, std::vector<Long_t> &, Int_t, Int_t)
    // defined in src/Templates.h:110:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<Long_t>> (*)(TTree &, const char *, std::vector<Long_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<ULong_t>> Branch(TTree &, const char *, std::vector<ULong_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<ULong_t>> Branch(TTree &, const char *, std::vector<ULong_t> &, Int_t, Int_t)
    // defined in src/Templates.h:111:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<ULong_t>> (*)(TTree &, const char *, std::vector<ULong_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<Float_t>> Branch(TTree &, const char *, std::vector<Float_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<Float_t>> Branch(TTree &, const char *, std::vector<Float_t> &, Int_t, Int_t)
    // defined in src/Templates.h:112:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<Float_t>> (*)(TTree &, const char *, std::vector<Float_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for TBranchPtr<std::vector<Double_t>> Branch(TTree &, const char *, std::vector<Double_t> &, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TBranchPtr<std::vector<Double_t>> Branch(TTree &, const char *, std::vector<Double_t> &, Int_t, Int_t)
    // defined in src/Templates.h:113:48
    t.method("Branch", static_cast<TBranchPtr<std::vector<Double_t>> (*)(TTree &, const char *, std::vector<Double_t> &, Int_t, Int_t) >(&Branch));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<Char_t>, Char_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<Char_t>, Char_t *)
    // defined in src/Templates.h:115:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<Char_t>, Char_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<UChar_t>, UChar_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<UChar_t>, UChar_t *)
    // defined in src/Templates.h:116:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<UChar_t>, UChar_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<Short_t>, Short_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<Short_t>, Short_t *)
    // defined in src/Templates.h:117:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<Short_t>, Short_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<UShort_t>, UShort_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<UShort_t>, UShort_t *)
    // defined in src/Templates.h:118:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<UShort_t>, UShort_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<Int_t>, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<Int_t>, Int_t *)
    // defined in src/Templates.h:119:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<Int_t>, Int_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<UInt_t>, UInt_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<UInt_t>, UInt_t *)
    // defined in src/Templates.h:120:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<UInt_t>, UInt_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<Long_t>, Long_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<Long_t>, Long_t *)
    // defined in src/Templates.h:121:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<Long_t>, Long_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<ULong_t>, ULong_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<ULong_t>, ULong_t *)
    // defined in src/Templates.h:122:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<ULong_t>, ULong_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<Float_t>, Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<Float_t>, Float_t *)
    // defined in src/Templates.h:123:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<Float_t>, Float_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetAddress(TBranchPtr<Double_t>, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void SetAddress(TBranchPtr<Double_t>, Double_t *)
    // defined in src/Templates.h:124:19
    t.method("SetAddress", static_cast<void (*)(TBranchPtr<Double_t>, Double_t *) >(&SetAddress));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<Char_t>>, std::vector<Char_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<Char_t>>, std::vector<Char_t> &)
    // defined in src/Templates.h:126:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<Char_t>>, std::vector<Char_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<UChar_t>>, std::vector<UChar_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<UChar_t>>, std::vector<UChar_t> &)
    // defined in src/Templates.h:127:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<UChar_t>>, std::vector<UChar_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<Short_t>>, std::vector<Short_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<Short_t>>, std::vector<Short_t> &)
    // defined in src/Templates.h:128:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<Short_t>>, std::vector<Short_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<UShort_t>>, std::vector<UShort_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<UShort_t>>, std::vector<UShort_t> &)
    // defined in src/Templates.h:129:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<UShort_t>>, std::vector<UShort_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<Int_t>>, std::vector<Int_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<Int_t>>, std::vector<Int_t> &)
    // defined in src/Templates.h:130:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<Int_t>>, std::vector<Int_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<UInt_t>>, std::vector<UInt_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<UInt_t>>, std::vector<UInt_t> &)
    // defined in src/Templates.h:131:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<UInt_t>>, std::vector<UInt_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<Long_t>>, std::vector<Long_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<Long_t>>, std::vector<Long_t> &)
    // defined in src/Templates.h:132:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<Long_t>>, std::vector<Long_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<ULong_t>>, std::vector<ULong_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<ULong_t>>, std::vector<ULong_t> &)
    // defined in src/Templates.h:133:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<ULong_t>>, std::vector<ULong_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<Float_t>>, std::vector<Float_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<Float_t>>, std::vector<Float_t> &)
    // defined in src/Templates.h:134:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<Float_t>>, std::vector<Float_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for void SetObject(TBranchPtr<std::vector<Double_t>>, std::vector<Double_t> &) (" __HERE__ ")");
    // signature to use in the veto list: void SetObject(TBranchPtr<std::vector<Double_t>>, std::vector<Double_t> &)
    // defined in src/Templates.h:135:19
    t.method("SetObject", static_cast<void (*)(TBranchPtr<std::vector<Double_t>>, std::vector<Double_t> &) >(&SetObject));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, Char_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, Char_t *)
    // defined in src/Templates.h:137:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, Char_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, UChar_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, UChar_t *)
    // defined in src/Templates.h:138:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, UChar_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, Short_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, Short_t *)
    // defined in src/Templates.h:139:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, Short_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, UShort_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, UShort_t *)
    // defined in src/Templates.h:140:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, UShort_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, Int_t *)
    // defined in src/Templates.h:141:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, Int_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, UInt_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, UInt_t *)
    // defined in src/Templates.h:142:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, UInt_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, Long_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, Long_t *)
    // defined in src/Templates.h:143:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, Long_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, ULong_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, ULong_t *)
    // defined in src/Templates.h:144:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, ULong_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, Float_t *)
    // defined in src/Templates.h:145:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, Float_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, Double_t *)
    // defined in src/Templates.h:146:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, Double_t *) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<Char_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<Char_t> **)
    // defined in src/Templates.h:148:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<Char_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<UChar_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<UChar_t> **)
    // defined in src/Templates.h:149:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<UChar_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<Short_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<Short_t> **)
    // defined in src/Templates.h:150:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<Short_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<UShort_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<UShort_t> **)
    // defined in src/Templates.h:151:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<UShort_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<Int_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<Int_t> **)
    // defined in src/Templates.h:152:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<Int_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<UInt_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<UInt_t> **)
    // defined in src/Templates.h:153:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<UInt_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<Long_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<Long_t> **)
    // defined in src/Templates.h:154:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<Long_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<ULong_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<ULong_t> **)
    // defined in src/Templates.h:155:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<ULong_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<Float_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<Float_t> **)
    // defined in src/Templates.h:156:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<Float_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for Int_t SetBranchAddress(TTree &, const char *, std::vector<Double_t> **) (" __HERE__ ")");
    // signature to use in the veto list: Int_t SetBranchAddress(TTree &, const char *, std::vector<Double_t> **)
    // defined in src/Templates.h:157:20
    t.method("SetBranchAddress", static_cast<Int_t (*)(TTree &, const char *, std::vector<Double_t> **) >(&SetBranchAddress));

    DEBUG_MSG("Adding wrapper for void updateAllCanvas() (" __HERE__ ")");
    // signature to use in the veto list: void updateAllCanvas()
    // defined in src/Extra.h:4:6
    t.method("updateAllCanvas", static_cast<void (*)() >(&updateAllCanvas));

    DEBUG_MSG("Adding gROOTMutex methods to provide access to the global variable gROOTMutex (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TROOT.h:63:26
    t.method("gROOTMutex", []()-> TVirtualMutex * { return gROOTMutex; });
    t.method("gROOTMutex!", [](TVirtualMutex * val)-> TVirtualMutex * { return gROOTMutex = val; });

    DEBUG_MSG("Adding kDoNotProcess methods to provide access to the global variable kDoNotProcess (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TBranch.h:56:13
    t.method("kDoNotProcess", []()-> Int_t { return kDoNotProcess; });

    DEBUG_MSG("Adding kIsClone methods to provide access to the global variable kIsClone (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TBranch.h:57:13
    t.method("kIsClone", []()-> Int_t { return kIsClone; });

    DEBUG_MSG("Adding kBranchObject methods to provide access to the global variable kBranchObject (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TBranch.h:58:13
    t.method("kBranchObject", []()-> Int_t { return kBranchObject; });

    DEBUG_MSG("Adding kBranchAny methods to provide access to the global variable kBranchAny (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TBranch.h:59:13
    t.method("kBranchAny", []()-> Int_t { return kBranchAny; });

    DEBUG_MSG("Adding kMapObject methods to provide access to the global variable kMapObject (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TBranch.h:60:13
    t.method("kMapObject", []()-> Int_t { return kMapObject; });

    DEBUG_MSG("Adding TTree!kMaxEntries methods to provide access to the global variable TTree::kMaxEntries (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:229:30
    module_.method("TTree!kMaxEntries", []()-> Long64_t { return TTree::kMaxEntries; });

    DEBUG_MSG("Adding gRootDir methods to provide access to the global variable gRootDir (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:235:24
    t.method("gRootDir", []()-> const char * { return gRootDir; });

    DEBUG_MSG("Adding gProgName methods to provide access to the global variable gProgName (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:236:24
    t.method("gProgName", []()-> const char * { return gProgName; });

    DEBUG_MSG("Adding gProgPath methods to provide access to the global variable gProgPath (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:237:24
    t.method("gProgPath", []()-> const char * { return gProgPath; });

    DEBUG_MSG("Adding gSystemMutex methods to provide access to the global variable gSystemMutex (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:238:26
    t.method("gSystemMutex", []()-> TVirtualMutex * { return gSystemMutex; });
    t.method("gSystemMutex!", [](TVirtualMutex * val)-> TVirtualMutex * { return gSystemMutex = val; });

    DEBUG_MSG("Adding gSystem methods to provide access to the global variable gSystem (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:555:20
    t.method("gSystem", []()-> TSystem * { return gSystem; });
    t.method("gSystem!", [](TSystem * val)-> TSystem * { return gSystem = val; });

    DEBUG_MSG("Adding gXDisplay methods to provide access to the global variable gXDisplay (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:556:25
    t.method("gXDisplay", []()-> TFileHandler * { return gXDisplay; });
    t.method("gXDisplay!", [](TFileHandler * val)-> TFileHandler * { return gXDisplay = val; });

    DEBUG_MSG("Adding gRandom methods to provide access to the global variable gRandom (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:62:20
    t.method("gRandom", []()-> TRandom * { return gRandom; });
    t.method("gRandom!", [](TRandom * val)-> TRandom * { return gRandom = val; });

    DEBUG_MSG("Adding gApplication methods to provide access to the global variable gApplication (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TApplication.h:170:25
    t.method("gApplication", []()-> TApplication * { return gApplication; });
    t.method("gApplication!", [](TApplication * val)-> TApplication * { return gApplication = val; });
  }
};
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlGlobal(module));
}
