// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TKDE::TKernel> : std::false_type { };
  template<> struct DefaultConstructible<TKDE::TKernel> : std::false_type { };
}

// Class generating the wrapper for type TKDE::TKernel
// signature to use in the veto file: TKDE::TKernel
struct JlTKDE_TKernel: public Wrapper {

  JlTKDE_TKernel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TKDE::TKernel (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TKDE.h:163:10
    jlcxx::TypeWrapper<TKDE::TKernel>  t = jlModule.add_type<TKDE::TKernel>("TKDE!TKernel");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TKDE::TKernel>>(new jlcxx::TypeWrapper<TKDE::TKernel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TKDE::TKernel::TKernel(Double_t, TKDE *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TKDE.h:168:7
    t.constructor<Double_t, TKDE *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TKDE::TKernel::ComputeAdaptiveWeights() (" __HERE__ ")");
    // signature to use in the veto list: void TKDE::TKernel::ComputeAdaptiveWeights()
    // defined in /opt/root63206jll/include/TKDE.h:169:12
    t.method("ComputeAdaptiveWeights", static_cast<void (TKDE::TKernel::*)() >(&TKDE::TKernel::ComputeAdaptiveWeights));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::TKernel::operator()(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::TKernel::operator()(Double_t)
    // defined in /opt/root63206jll/include/TKDE.h:170:16
    t.method("paren", static_cast<Double_t (TKDE::TKernel::*)(Double_t)  const>(&TKDE::TKernel::operator()));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::TKernel::GetWeight(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::TKernel::GetWeight(Double_t)
    // defined in /opt/root63206jll/include/TKDE.h:171:16
    t.method("GetWeight", static_cast<Double_t (TKDE::TKernel::*)(Double_t)  const>(&TKDE::TKernel::GetWeight));

    DEBUG_MSG("Adding wrapper for Double_t TKDE::TKernel::GetFixedWeight() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TKDE::TKernel::GetFixedWeight()
    // defined in /opt/root63206jll/include/TKDE.h:172:16
    t.method("GetFixedWeight", static_cast<Double_t (TKDE::TKernel::*)()  const>(&TKDE::TKernel::GetFixedWeight));

    DEBUG_MSG("Adding wrapper for const std::vector<Double_t> & TKDE::TKernel::GetAdaptiveWeights() (" __HERE__ ")");
    // signature to use in the veto list: const std::vector<Double_t> & TKDE::TKernel::GetAdaptiveWeights()
    // defined in /opt/root63206jll/include/TKDE.h:173:36
    t.method("GetAdaptiveWeights", static_cast<const std::vector<Double_t> & (TKDE::TKernel::*)()  const>(&TKDE::TKernel::GetAdaptiveWeights));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TKDE::TKernel>> type_;
};
std::shared_ptr<Wrapper> newJlTKDE_TKernel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTKDE_TKernel(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TLimitDataSource> : std::false_type { };
  template<> struct DefaultConstructible<TLimitDataSource> : std::false_type { };
template<> struct SuperType<TLimitDataSource> { typedef TObject type; };
}

// Class generating the wrapper for type TLimitDataSource
// signature to use in the veto file: TLimitDataSource
struct JlTLimitDataSource: public Wrapper {

  JlTLimitDataSource(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TLimitDataSource (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TLimitDataSource.h:24:7
    jlcxx::TypeWrapper<TLimitDataSource>  t = jlModule.add_type<TLimitDataSource>("TLimitDataSource",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TLimitDataSource>>(new jlcxx::TypeWrapper<TLimitDataSource>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TLimitDataSource::TLimitDataSource(TH1 *, TH1 *, TH1 *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TLimitDataSource.h:28:4
    t.constructor<TH1 *, TH1 *, TH1 *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TLimitDataSource::TLimitDataSource(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TLimitDataSource.h:29:4
    t.constructor<TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TLimitDataSource::AddChannel(TH1 *, TH1 *, TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TLimitDataSource::AddChannel(TH1 *, TH1 *, TH1 *)
    // defined in /opt/root63206jll/include/TLimitDataSource.h:30:17
    t.method("AddChannel", static_cast<void (TLimitDataSource::*)(TH1 *, TH1 *, TH1 *) >(&TLimitDataSource::AddChannel));

    DEBUG_MSG("Adding wrapper for void TLimitDataSource::AddChannel(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *) (" __HERE__ ")");
    // signature to use in the veto list: void TLimitDataSource::AddChannel(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *)
    // defined in /opt/root63206jll/include/TLimitDataSource.h:31:17
    t.method("AddChannel", static_cast<void (TLimitDataSource::*)(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *) >(&TLimitDataSource::AddChannel));

    DEBUG_MSG("Adding wrapper for TObjArray * TLimitDataSource::GetSignal() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TLimitDataSource::GetSignal()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:32:30
    t.method("GetSignal", static_cast<TObjArray * (TLimitDataSource::*)() >(&TLimitDataSource::GetSignal));

    DEBUG_MSG("Adding wrapper for TObjArray * TLimitDataSource::GetBackground() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TLimitDataSource::GetBackground()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:33:30
    t.method("GetBackground", static_cast<TObjArray * (TLimitDataSource::*)() >(&TLimitDataSource::GetBackground));

    DEBUG_MSG("Adding wrapper for TObjArray * TLimitDataSource::GetCandidates() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TLimitDataSource::GetCandidates()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:34:30
    t.method("GetCandidates", static_cast<TObjArray * (TLimitDataSource::*)() >(&TLimitDataSource::GetCandidates));

    DEBUG_MSG("Adding wrapper for TObjArray * TLimitDataSource::GetErrorOnSignal() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TLimitDataSource::GetErrorOnSignal()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:35:30
    t.method("GetErrorOnSignal", static_cast<TObjArray * (TLimitDataSource::*)() >(&TLimitDataSource::GetErrorOnSignal));

    DEBUG_MSG("Adding wrapper for TObjArray * TLimitDataSource::GetErrorOnBackground() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TLimitDataSource::GetErrorOnBackground()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:36:30
    t.method("GetErrorOnBackground", static_cast<TObjArray * (TLimitDataSource::*)() >(&TLimitDataSource::GetErrorOnBackground));

    DEBUG_MSG("Adding wrapper for TObjArray * TLimitDataSource::GetErrorNames() (" __HERE__ ")");
    // signature to use in the veto list: TObjArray * TLimitDataSource::GetErrorNames()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:37:30
    t.method("GetErrorNames", static_cast<TObjArray * (TLimitDataSource::*)() >(&TLimitDataSource::GetErrorNames));

    DEBUG_MSG("Adding wrapper for void TLimitDataSource::SetOwner(bool) (" __HERE__ ")");
    // signature to use in the veto list: void TLimitDataSource::SetOwner(bool)
    // defined in /opt/root63206jll/include/TLimitDataSource.h:38:17
    t.method("SetOwner", static_cast<void (TLimitDataSource::*)(bool) >(&TLimitDataSource::SetOwner));
    t.method("SetOwner", [](TLimitDataSource& a)->void { a.SetOwner(); });
    t.method("SetOwner", [](TLimitDataSource* a)->void { a->SetOwner(); });

    DEBUG_MSG("Adding wrapper for Version_t TLimitDataSource::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TLimitDataSource::Class_Version()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!Class_Version", static_cast<Version_t (*)() >(&TLimitDataSource::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TLimitDataSource::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLimitDataSource::IsA()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    t.method("IsA", static_cast<TClass * (TLimitDataSource::*)()  const>(&TLimitDataSource::IsA));

    DEBUG_MSG("Adding wrapper for void TLimitDataSource::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLimitDataSource::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    t.method("StreamerNVirtual", static_cast<void (TLimitDataSource::*)(TBuffer &) >(&TLimitDataSource::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TLimitDataSource::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLimitDataSource::DeclFileName()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!DeclFileName", []() { return (std::string)TLimitDataSource::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TLimitDataSource::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TLimitDataSource::ImplFileLine()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!ImplFileLine", static_cast<int (*)() >(&TLimitDataSource::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TLimitDataSource::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLimitDataSource::ImplFileName()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!ImplFileName", []() { return (std::string)TLimitDataSource::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TLimitDataSource::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLimitDataSource::Class_Name()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!Class_Name", []() { return (std::string)TLimitDataSource::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TLimitDataSource::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLimitDataSource::Dictionary()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!Dictionary", static_cast<TClass * (*)() >(&TLimitDataSource::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TLimitDataSource::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLimitDataSource::Class()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!Class", static_cast<TClass * (*)() >(&TLimitDataSource::Class));

    DEBUG_MSG("Adding wrapper for void TLimitDataSource::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLimitDataSource::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    t.method("Streamer", static_cast<void (TLimitDataSource::*)(TBuffer &) >(&TLimitDataSource::Streamer));

    DEBUG_MSG("Adding wrapper for int TLimitDataSource::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TLimitDataSource::DeclFileLine()
    // defined in /opt/root63206jll/include/TLimitDataSource.h:56:4
    module_.method("TLimitDataSource!DeclFileLine", static_cast<int (*)() >(&TLimitDataSource::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TLimitDataSource>> type_;
};
std::shared_ptr<Wrapper> newJlTLimitDataSource(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTLimitDataSource(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TLimit> : std::false_type { };
  template<> struct DefaultConstructible<TLimit> : std::false_type { };
}

// Class generating the wrapper for type TLimit
// signature to use in the veto file: TLimit
struct JlTLimit: public Wrapper {

  JlTLimit(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TLimit (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TLimit.h:19:7
    jlcxx::TypeWrapper<TLimit>  t = jlModule.add_type<TLimit>("TLimit");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TLimit>>(new jlcxx::TypeWrapper<TLimit>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TConfidenceLevel * TLimit::ComputeLimit(TLimitDataSource *, Int_t, bool, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: TConfidenceLevel * TLimit::ComputeLimit(TLimitDataSource *, Int_t, bool, TRandom *)
    // defined in /opt/root63206jll/include/TLimit.h:27:29
    module_.method("TLimit!ComputeLimit", static_cast<TConfidenceLevel * (*)(TLimitDataSource *, Int_t, bool, TRandom *) >(&TLimit::ComputeLimit));
    module_.method("TLimit!ComputeLimit", [](TLimitDataSource * arg0)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0); });
    module_.method("TLimit!ComputeLimit", [](TLimitDataSource * arg0, Int_t arg1)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1); });
    module_.method("TLimit!ComputeLimit", [](TLimitDataSource * arg0, Int_t arg1, bool arg2)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TConfidenceLevel * TLimit::ComputeLimit(Double_t, Double_t, Int_t, Int_t, bool, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: TConfidenceLevel * TLimit::ComputeLimit(Double_t, Double_t, Int_t, Int_t, bool, TRandom *)
    // defined in /opt/root63206jll/include/TLimit.h:31:29
    module_.method("TLimit!ComputeLimit", static_cast<TConfidenceLevel * (*)(Double_t, Double_t, Int_t, Int_t, bool, TRandom *) >(&TLimit::ComputeLimit));
    module_.method("TLimit!ComputeLimit", [](Double_t arg0, Double_t arg1, Int_t arg2)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2); });
    module_.method("TLimit!ComputeLimit", [](Double_t arg0, Double_t arg1, Int_t arg2, Int_t arg3)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3); });
    module_.method("TLimit!ComputeLimit", [](Double_t arg0, Double_t arg1, Int_t arg2, Int_t arg3, bool arg4)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for TConfidenceLevel * TLimit::ComputeLimit(Double_t, Double_t, Int_t, TVectorD *, TVectorD *, TObjArray *, Int_t, bool, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: TConfidenceLevel * TLimit::ComputeLimit(Double_t, Double_t, Int_t, TVectorD *, TVectorD *, TObjArray *, Int_t, bool, TRandom *)
    // defined in /opt/root63206jll/include/TLimit.h:35:29
    module_.method("TLimit!ComputeLimit", static_cast<TConfidenceLevel * (*)(Double_t, Double_t, Int_t, TVectorD *, TVectorD *, TObjArray *, Int_t, bool, TRandom *) >(&TLimit::ComputeLimit));
    module_.method("TLimit!ComputeLimit", [](Double_t arg0, Double_t arg1, Int_t arg2, TVectorD * arg3, TVectorD * arg4, TObjArray * arg5)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4, arg5); });
    module_.method("TLimit!ComputeLimit", [](Double_t arg0, Double_t arg1, Int_t arg2, TVectorD * arg3, TVectorD * arg4, TObjArray * arg5, Int_t arg6)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    module_.method("TLimit!ComputeLimit", [](Double_t arg0, Double_t arg1, Int_t arg2, TVectorD * arg3, TVectorD * arg4, TObjArray * arg5, Int_t arg6, bool arg7)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for TConfidenceLevel * TLimit::ComputeLimit(TH1 *, TH1 *, TH1 *, Int_t, bool, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: TConfidenceLevel * TLimit::ComputeLimit(TH1 *, TH1 *, TH1 *, Int_t, bool, TRandom *)
    // defined in /opt/root63206jll/include/TLimit.h:40:29
    module_.method("TLimit!ComputeLimit", static_cast<TConfidenceLevel * (*)(TH1 *, TH1 *, TH1 *, Int_t, bool, TRandom *) >(&TLimit::ComputeLimit));
    module_.method("TLimit!ComputeLimit", [](TH1 * arg0, TH1 * arg1, TH1 * arg2)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2); });
    module_.method("TLimit!ComputeLimit", [](TH1 * arg0, TH1 * arg1, TH1 * arg2, Int_t arg3)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3); });
    module_.method("TLimit!ComputeLimit", [](TH1 * arg0, TH1 * arg1, TH1 * arg2, Int_t arg3, bool arg4)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for TConfidenceLevel * TLimit::ComputeLimit(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *, Int_t, bool, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: TConfidenceLevel * TLimit::ComputeLimit(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *, Int_t, bool, TRandom *)
    // defined in /opt/root63206jll/include/TLimit.h:44:29
    module_.method("TLimit!ComputeLimit", static_cast<TConfidenceLevel * (*)(TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *, Int_t, bool, TRandom *) >(&TLimit::ComputeLimit));
    module_.method("TLimit!ComputeLimit", [](TH1 * arg0, TH1 * arg1, TH1 * arg2, TVectorD * arg3, TVectorD * arg4, TObjArray * arg5)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4, arg5); });
    module_.method("TLimit!ComputeLimit", [](TH1 * arg0, TH1 * arg1, TH1 * arg2, TVectorD * arg3, TVectorD * arg4, TObjArray * arg5, Int_t arg6)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    module_.method("TLimit!ComputeLimit", [](TH1 * arg0, TH1 * arg1, TH1 * arg2, TVectorD * arg3, TVectorD * arg4, TObjArray * arg5, Int_t arg6, bool arg7)->TConfidenceLevel * { return TLimit::ComputeLimit(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for Version_t TLimit::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TLimit::Class_Version()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!Class_Version", static_cast<Version_t (*)() >(&TLimit::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TLimit::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLimit::IsA()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    t.method("IsA", static_cast<TClass * (TLimit::*)()  const>(&TLimit::IsA));

    DEBUG_MSG("Adding wrapper for void TLimit::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLimit::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    t.method("StreamerNVirtual", static_cast<void (TLimit::*)(TBuffer &) >(&TLimit::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TLimit::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLimit::DeclFileName()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!DeclFileName", []() { return (std::string)TLimit::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TLimit::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TLimit::ImplFileLine()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!ImplFileLine", static_cast<int (*)() >(&TLimit::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TLimit::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLimit::ImplFileName()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!ImplFileName", []() { return (std::string)TLimit::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TLimit::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLimit::Class_Name()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!Class_Name", []() { return (std::string)TLimit::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TLimit::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLimit::Dictionary()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!Dictionary", static_cast<TClass * (*)() >(&TLimit::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TLimit::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLimit::Class()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!Class", static_cast<TClass * (*)() >(&TLimit::Class));

    DEBUG_MSG("Adding wrapper for void TLimit::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLimit::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    t.method("Streamer", static_cast<void (TLimit::*)(TBuffer &) >(&TLimit::Streamer));

    DEBUG_MSG("Adding wrapper for int TLimit::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TLimit::DeclFileLine()
    // defined in /opt/root63206jll/include/TLimit.h:52:4
    module_.method("TLimit!DeclFileLine", static_cast<int (*)() >(&TLimit::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TLimit>> type_;
};
std::shared_ptr<Wrapper> newJlTLimit(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTLimit(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TMultiDimFit> : std::false_type { };
  template<> struct DefaultConstructible<TMultiDimFit> : std::false_type { };
template<> struct SuperType<TMultiDimFit> { typedef TNamed type; };
}

// Class generating the wrapper for type TMultiDimFit
// signature to use in the veto file: TMultiDimFit
struct JlTMultiDimFit: public Wrapper {

  JlTMultiDimFit(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TMultiDimFit (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TMultiDimFit.h:15:7
    jlcxx::TypeWrapper<TMultiDimFit>  t = jlModule.add_type<TMultiDimFit>("TMultiDimFit",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TMultiDimFit>>(new jlcxx::TypeWrapper<TMultiDimFit>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TMultiDimFit::TMultiDimFit(Int_t, TMultiDimFit::EMDFPolyType, Option_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TMultiDimFit.h:125:4
    t.constructor<Int_t>(/*finalize=*/true);
    t.constructor<Int_t, TMultiDimFit::EMDFPolyType>(/*finalize=*/true);
    t.constructor<Int_t, TMultiDimFit::EMDFPolyType, Option_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::AddRow(const Double_t *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::AddRow(const Double_t *, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:130:21
    t.method("AddRow", static_cast<void (TMultiDimFit::*)(const Double_t *, Double_t, Double_t) >(&TMultiDimFit::AddRow));
    t.method("AddRow", [](TMultiDimFit& a, const Double_t * arg0, Double_t arg1)->void { a.AddRow(arg0, arg1); });
    t.method("AddRow", [](TMultiDimFit* a, const Double_t * arg0, Double_t arg1)->void { a->AddRow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::AddTestRow(const Double_t *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::AddTestRow(const Double_t *, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:131:21
    t.method("AddTestRow", static_cast<void (TMultiDimFit::*)(const Double_t *, Double_t, Double_t) >(&TMultiDimFit::AddTestRow));
    t.method("AddTestRow", [](TMultiDimFit& a, const Double_t * arg0, Double_t arg1)->void { a.AddTestRow(arg0, arg1); });
    t.method("AddTestRow", [](TMultiDimFit* a, const Double_t * arg0, Double_t arg1)->void { a->AddTestRow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::Browse(TBrowser *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:132:13
    t.method("Browse", static_cast<void (TMultiDimFit::*)(TBrowser *) >(&TMultiDimFit::Browse));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::Clear(Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:133:13
    t.method("Clear", static_cast<void (TMultiDimFit::*)(Option_t *) >(&TMultiDimFit::Clear));
    t.method("Clear", [](TMultiDimFit& a)->void { a.Clear(); });
    t.method("Clear", [](TMultiDimFit* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::Draw(Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:134:13
    t.method("Draw", static_cast<void (TMultiDimFit::*)(Option_t *) >(&TMultiDimFit::Draw));
    t.method("Draw", [](TMultiDimFit& a)->void { a.Draw(); });
    t.method("Draw", [](TMultiDimFit* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::Eval(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::Eval(const Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:135:21
    t.method("Eval", static_cast<Double_t (TMultiDimFit::*)(const Double_t *, const Double_t *)  const>(&TMultiDimFit::Eval));
    t.method("Eval", [](TMultiDimFit const& a, const Double_t * arg0)->Double_t { return a.Eval(arg0); });
    t.method("Eval", [](TMultiDimFit const* a, const Double_t * arg0)->Double_t { return a->Eval(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::EvalError(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::EvalError(const Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:136:21
    t.method("EvalError", static_cast<Double_t (TMultiDimFit::*)(const Double_t *, const Double_t *)  const>(&TMultiDimFit::EvalError));
    t.method("EvalError", [](TMultiDimFit const& a, const Double_t * arg0)->Double_t { return a.EvalError(arg0); });
    t.method("EvalError", [](TMultiDimFit const* a, const Double_t * arg0)->Double_t { return a->EvalError(arg0); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::FindParameterization(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::FindParameterization(Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:137:21
    t.method("FindParameterization", static_cast<void (TMultiDimFit::*)(Option_t *) >(&TMultiDimFit::FindParameterization));
    t.method("FindParameterization", [](TMultiDimFit& a)->void { a.FindParameterization(); });
    t.method("FindParameterization", [](TMultiDimFit* a)->void { a->FindParameterization(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::Fit(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::Fit(Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:138:21
    t.method("Fit", static_cast<void (TMultiDimFit::*)(Option_t *) >(&TMultiDimFit::Fit));
    t.method("Fit", [](TMultiDimFit& a)->void { a.Fit(); });
    t.method("Fit", [](TMultiDimFit* a)->void { a->Fit(); });

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetChi2() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetChi2()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:140:21
    t.method("GetChi2", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetChi2));

    DEBUG_MSG("Adding wrapper for const TMatrixD * TMultiDimFit::GetCorrelationMatrix() (" __HERE__ ")");
    // signature to use in the veto list: const TMatrixD * TMultiDimFit::GetCorrelationMatrix()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:141:21
    t.method("GetCorrelationMatrix", static_cast<const TMatrixD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetCorrelationMatrix));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetCoefficients() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetCoefficients()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:142:21
    t.method("GetCoefficients", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetCoefficients));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetCoefficientsRMS() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetCoefficientsRMS()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:143:21
    t.method("GetCoefficientsRMS", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetCoefficientsRMS));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetError() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetError()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:144:21
    t.method("GetError", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetError));

    DEBUG_MSG("Adding wrapper for Int_t * TMultiDimFit::GetFunctionCodes() (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TMultiDimFit::GetFunctionCodes()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:145:21
    t.method("GetFunctionCodes", static_cast<Int_t * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetFunctionCodes));

    DEBUG_MSG("Adding wrapper for const TMatrixD * TMultiDimFit::GetFunctions() (" __HERE__ ")");
    // signature to use in the veto list: const TMatrixD * TMultiDimFit::GetFunctions()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:146:21
    t.method("GetFunctions", static_cast<const TMatrixD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetFunctions));

    DEBUG_MSG("Adding wrapper for TList * TMultiDimFit::GetHistograms() (" __HERE__ ")");
    // signature to use in the veto list: TList * TMultiDimFit::GetHistograms()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:147:21
    t.method("GetHistograms", static_cast<TList * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetHistograms));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetMaxAngle() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetMaxAngle()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:148:21
    t.method("GetMaxAngle", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxAngle));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetMaxFunctions() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetMaxFunctions()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:149:21
    t.method("GetMaxFunctions", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxFunctions));

    DEBUG_MSG("Adding wrapper for Int_t * TMultiDimFit::GetMaxPowers() (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TMultiDimFit::GetMaxPowers()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:150:21
    t.method("GetMaxPowers", static_cast<Int_t * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxPowers));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetMaxQuantity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetMaxQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:151:21
    t.method("GetMaxQuantity", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxQuantity));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetMaxStudy() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetMaxStudy()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:152:21
    t.method("GetMaxStudy", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxStudy));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetMaxTerms() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetMaxTerms()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:153:21
    t.method("GetMaxTerms", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxTerms));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetMaxVariables() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetMaxVariables()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:154:21
    t.method("GetMaxVariables", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMaxVariables));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetMeanQuantity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetMeanQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:155:21
    t.method("GetMeanQuantity", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMeanQuantity));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetMeanVariables() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetMeanVariables()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:156:21
    t.method("GetMeanVariables", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMeanVariables));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetMinAngle() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetMinAngle()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:157:21
    t.method("GetMinAngle", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMinAngle));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetMinQuantity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetMinQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:158:21
    t.method("GetMinQuantity", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMinQuantity));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetMinRelativeError() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetMinRelativeError()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:159:21
    t.method("GetMinRelativeError", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMinRelativeError));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetMinVariables() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetMinVariables()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:160:21
    t.method("GetMinVariables", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetMinVariables));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetNVariables() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetNVariables()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:161:21
    t.method("GetNVariables", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetNVariables));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetNCoefficients() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetNCoefficients()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:162:21
    t.method("GetNCoefficients", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetNCoefficients));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetPolyType() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetPolyType()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:163:21
    t.method("GetPolyType", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetPolyType));

    DEBUG_MSG("Adding wrapper for Int_t * TMultiDimFit::GetPowerIndex() (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TMultiDimFit::GetPowerIndex()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:164:21
    t.method("GetPowerIndex", static_cast<Int_t * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetPowerIndex));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetPowerLimit() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetPowerLimit()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:165:21
    t.method("GetPowerLimit", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetPowerLimit));

    DEBUG_MSG("Adding wrapper for const Int_t * TMultiDimFit::GetPowers() (" __HERE__ ")");
    // signature to use in the veto list: const Int_t * TMultiDimFit::GetPowers()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:166:21
    t.method("GetPowers", static_cast<const Int_t * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetPowers));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetPrecision() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetPrecision()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:167:21
    t.method("GetPrecision", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetPrecision));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetQuantity() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:168:21
    t.method("GetQuantity", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetQuantity));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetResidualMax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetResidualMax()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:169:21
    t.method("GetResidualMax", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetResidualMax));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetResidualMin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetResidualMin()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:170:21
    t.method("GetResidualMin", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetResidualMin));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetResidualMaxRow() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetResidualMaxRow()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:171:21
    t.method("GetResidualMaxRow", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetResidualMaxRow));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetResidualMinRow() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetResidualMinRow()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:172:21
    t.method("GetResidualMinRow", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetResidualMinRow));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetResidualSumSq() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetResidualSumSq()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:173:21
    t.method("GetResidualSumSq", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetResidualSumSq));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetRMS() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetRMS()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:174:21
    t.method("GetRMS", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetRMS));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetSampleSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetSampleSize()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:175:21
    t.method("GetSampleSize", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetSampleSize));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetSqError() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetSqError()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:176:21
    t.method("GetSqError", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetSqError));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetSumSqAvgQuantity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetSumSqAvgQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:177:21
    t.method("GetSumSqAvgQuantity", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetSumSqAvgQuantity));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetSumSqQuantity() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetSumSqQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:178:21
    t.method("GetSumSqQuantity", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetSumSqQuantity));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetTestError() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetTestError()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:179:21
    t.method("GetTestError", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetTestError));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::GetTestPrecision() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::GetTestPrecision()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:180:21
    t.method("GetTestPrecision", static_cast<Double_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetTestPrecision));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetTestQuantity() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetTestQuantity()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:181:21
    t.method("GetTestQuantity", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetTestQuantity));

    DEBUG_MSG("Adding wrapper for Int_t TMultiDimFit::GetTestSampleSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TMultiDimFit::GetTestSampleSize()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:182:21
    t.method("GetTestSampleSize", static_cast<Int_t (TMultiDimFit::*)()  const>(&TMultiDimFit::GetTestSampleSize));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetTestSqError() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetTestSqError()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:183:21
    t.method("GetTestSqError", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetTestSqError));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetTestVariables() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetTestVariables()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:184:21
    t.method("GetTestVariables", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetTestVariables));

    DEBUG_MSG("Adding wrapper for const TVectorD * TMultiDimFit::GetVariables() (" __HERE__ ")");
    // signature to use in the veto list: const TVectorD * TMultiDimFit::GetVariables()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:185:21
    t.method("GetVariables", static_cast<const TVectorD * (TMultiDimFit::*)()  const>(&TMultiDimFit::GetVariables));

    DEBUG_MSG("Adding wrapper for TMultiDimFit * TMultiDimFit::Instance() (" __HERE__ ")");
    // signature to use in the veto list: TMultiDimFit * TMultiDimFit::Instance()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:187:25
    module_.method("TMultiDimFit!Instance", static_cast<TMultiDimFit * (*)() >(&TMultiDimFit::Instance));

    DEBUG_MSG("Adding wrapper for Bool_t TMultiDimFit::IsFolder() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TMultiDimFit::IsFolder()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:188:13
    t.method("IsFolder", static_cast<Bool_t (TMultiDimFit::*)()  const>(&TMultiDimFit::IsFolder));

    DEBUG_MSG("Adding wrapper for Double_t TMultiDimFit::MakeChi2(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TMultiDimFit::MakeChi2(const Double_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:189:21
    t.method("MakeChi2", static_cast<Double_t (TMultiDimFit::*)(const Double_t *) >(&TMultiDimFit::MakeChi2));
    t.method("MakeChi2", [](TMultiDimFit& a)->Double_t { return a.MakeChi2(); });
    t.method("MakeChi2", [](TMultiDimFit* a)->Double_t { return a->MakeChi2(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::MakeCode(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::MakeCode(const char *, Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:190:21
    t.method("MakeCode", static_cast<void (TMultiDimFit::*)(const char *, Option_t *) >(&TMultiDimFit::MakeCode));
    t.method("MakeCode", [](TMultiDimFit& a)->void { a.MakeCode(); });
    t.method("MakeCode", [](TMultiDimFit& a, const char * arg0)->void { a.MakeCode(arg0); });
    t.method("MakeCode", [](TMultiDimFit* a)->void { a->MakeCode(); });
    t.method("MakeCode", [](TMultiDimFit* a, const char * arg0)->void { a->MakeCode(arg0); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::MakeHistograms(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::MakeHistograms(Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:191:21
    t.method("MakeHistograms", static_cast<void (TMultiDimFit::*)(Option_t *) >(&TMultiDimFit::MakeHistograms));
    t.method("MakeHistograms", [](TMultiDimFit& a)->void { a.MakeHistograms(); });
    t.method("MakeHistograms", [](TMultiDimFit* a)->void { a->MakeHistograms(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::MakeMethod(const Char_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::MakeMethod(const Char_t *, Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:192:21
    t.method("MakeMethod", static_cast<void (TMultiDimFit::*)(const Char_t *, Option_t *) >(&TMultiDimFit::MakeMethod));
    t.method("MakeMethod", [](TMultiDimFit& a)->void { a.MakeMethod(); });
    t.method("MakeMethod", [](TMultiDimFit& a, const Char_t * arg0)->void { a.MakeMethod(arg0); });
    t.method("MakeMethod", [](TMultiDimFit* a)->void { a->MakeMethod(); });
    t.method("MakeMethod", [](TMultiDimFit* a, const Char_t * arg0)->void { a->MakeMethod(arg0); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::Print(Option_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:193:13
    t.method("Print", static_cast<void (TMultiDimFit::*)(Option_t *)  const>(&TMultiDimFit::Print));
    t.method("Print", [](TMultiDimFit const& a)->void { a.Print(); });
    t.method("Print", [](TMultiDimFit const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetBinVarX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetBinVarX(Int_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:195:21
    t.method("SetBinVarX", static_cast<void (TMultiDimFit::*)(Int_t) >(&TMultiDimFit::SetBinVarX));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetBinVarY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetBinVarY(Int_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:196:21
    t.method("SetBinVarY", static_cast<void (TMultiDimFit::*)(Int_t) >(&TMultiDimFit::SetBinVarY));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMaxAngle(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMaxAngle(Double_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:197:21
    t.method("SetMaxAngle", static_cast<void (TMultiDimFit::*)(Double_t) >(&TMultiDimFit::SetMaxAngle));
    t.method("SetMaxAngle", [](TMultiDimFit& a)->void { a.SetMaxAngle(); });
    t.method("SetMaxAngle", [](TMultiDimFit* a)->void { a->SetMaxAngle(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMaxFunctions(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMaxFunctions(Int_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:198:21
    t.method("SetMaxFunctions", static_cast<void (TMultiDimFit::*)(Int_t) >(&TMultiDimFit::SetMaxFunctions));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMaxPowers(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMaxPowers(const Int_t *)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:199:21
    t.method("SetMaxPowers", static_cast<void (TMultiDimFit::*)(const Int_t *) >(&TMultiDimFit::SetMaxPowers));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMaxStudy(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMaxStudy(Int_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:200:21
    t.method("SetMaxStudy", static_cast<void (TMultiDimFit::*)(Int_t) >(&TMultiDimFit::SetMaxStudy));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMaxTerms(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMaxTerms(Int_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:201:21
    t.method("SetMaxTerms", static_cast<void (TMultiDimFit::*)(Int_t) >(&TMultiDimFit::SetMaxTerms));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMinRelativeError(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMinRelativeError(Double_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:202:21
    t.method("SetMinRelativeError", static_cast<void (TMultiDimFit::*)(Double_t) >(&TMultiDimFit::SetMinRelativeError));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetMinAngle(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetMinAngle(Double_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:203:21
    t.method("SetMinAngle", static_cast<void (TMultiDimFit::*)(Double_t) >(&TMultiDimFit::SetMinAngle));
    t.method("SetMinAngle", [](TMultiDimFit& a)->void { a.SetMinAngle(); });
    t.method("SetMinAngle", [](TMultiDimFit* a)->void { a->SetMinAngle(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetPowerLimit(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetPowerLimit(Double_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:204:21
    t.method("SetPowerLimit", static_cast<void (TMultiDimFit::*)(Double_t) >(&TMultiDimFit::SetPowerLimit));
    t.method("SetPowerLimit", [](TMultiDimFit& a)->void { a.SetPowerLimit(); });
    t.method("SetPowerLimit", [](TMultiDimFit* a)->void { a->SetPowerLimit(); });

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::SetPowers(const Int_t *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::SetPowers(const Int_t *, Int_t)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:205:21
    t.method("SetPowers", static_cast<void (TMultiDimFit::*)(const Int_t *, Int_t) >(&TMultiDimFit::SetPowers));

    DEBUG_MSG("Adding wrapper for Version_t TMultiDimFit::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TMultiDimFit::Class_Version()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!Class_Version", static_cast<Version_t (*)() >(&TMultiDimFit::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TMultiDimFit::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TMultiDimFit::IsA()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    t.method("IsA", static_cast<TClass * (TMultiDimFit::*)()  const>(&TMultiDimFit::IsA));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    t.method("StreamerNVirtual", static_cast<void (TMultiDimFit::*)(TBuffer &) >(&TMultiDimFit::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TMultiDimFit::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TMultiDimFit::DeclFileName()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!DeclFileName", []() { return (std::string)TMultiDimFit::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TMultiDimFit::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TMultiDimFit::ImplFileLine()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!ImplFileLine", static_cast<int (*)() >(&TMultiDimFit::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TMultiDimFit::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TMultiDimFit::ImplFileName()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!ImplFileName", []() { return (std::string)TMultiDimFit::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TMultiDimFit::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TMultiDimFit::Class_Name()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!Class_Name", []() { return (std::string)TMultiDimFit::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TMultiDimFit::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TMultiDimFit::Dictionary()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!Dictionary", static_cast<TClass * (*)() >(&TMultiDimFit::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TMultiDimFit::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TMultiDimFit::Class()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!Class", static_cast<TClass * (*)() >(&TMultiDimFit::Class));

    DEBUG_MSG("Adding wrapper for void TMultiDimFit::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TMultiDimFit::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    t.method("Streamer", static_cast<void (TMultiDimFit::*)(TBuffer &) >(&TMultiDimFit::Streamer));

    DEBUG_MSG("Adding wrapper for int TMultiDimFit::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TMultiDimFit::DeclFileLine()
    // defined in /opt/root63206jll/include/TMultiDimFit.h:207:4
    module_.method("TMultiDimFit!DeclFileLine", static_cast<int (*)() >(&TMultiDimFit::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TMultiDimFit>> type_;
};
std::shared_ptr<Wrapper> newJlTMultiDimFit(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTMultiDimFit(module));
}

namespace jlcxx {

  template<typename Element>
  struct BuildParameterList<TMatrixT<Element>>
  {
    typedef ParameterList<Element> type;
  };

  template<typename Element> struct IsMirroredType<TMatrixT<Element>> : std::false_type { };
  template<typename Element> struct DefaultConstructible<TMatrixT<Element>> : std::false_type { };
}

// Class generating the wrapper for type TMatrixT
// signature to use in the veto file: TMatrixT
struct JlTMatrixT: public Wrapper {

  JlTMatrixT(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TMatrixT (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TMatrixT.h:39:31
    jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>  t =  jlModule.add_type<jlcxx::Parametric<jlcxx::TypeVar<1>>>("TMatrixT");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>>(new jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>(jlModule, t));
    t.constructor<>(/*finalize=*/true);
    auto t253_decl_methods = [this]<typename Element> (jlcxx::TypeWrapper<TMatrixT<Element>> wrapped){
      auto module_ = this->module_;
      wrapped.template constructor<>(/*finalize=*/true);
    };
    t.apply<TMatrixT<double>>(t253_decl_methods);
  }

  void add_methods() const{
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>> type_;
};
std::shared_ptr<Wrapper> newJlTMatrixT(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTMatrixT(module));
}
