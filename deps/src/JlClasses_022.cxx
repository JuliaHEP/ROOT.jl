// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TFormula> : std::false_type { };
  template<> struct DefaultConstructible<TFormula> : std::false_type { };
template<> struct SuperType<TFormula> { typedef TNamed type; };
}

// Class generating the wrapper for type TFormula
// signature to use in the veto file: TFormula
struct JlTFormula: public Wrapper {

  JlTFormula(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFormula (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:86:7
    jlcxx::TypeWrapper<TFormula>  t = jlModule.add_type<TFormula>("TFormula",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFormula>>(new jlcxx::TypeWrapper<TFormula>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TFormula & TFormula::operator=(const TFormula &) (" __HERE__ ")");
    // signature to use in the veto list: TFormula & TFormula::operator=(const TFormula &)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:188:19
    t.method("assign", static_cast<TFormula & (TFormula::*)(const TFormula &) >(&TFormula::operator=));


    DEBUG_MSG("Adding wrapper for void TFormula::TFormula(const char *, const char *, bool, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:189:4
    t.constructor<const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, bool>(/*finalize=*/true);
    t.constructor<const char *, const char *, bool, bool>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TFormula::TFormula(const char *, const char *, int, int, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:190:4
    t.constructor<const char *, const char *, int, int>(/*finalize=*/true);
    t.constructor<const char *, const char *, int, int, bool>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TFormula::TFormula(const TFormula &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:191:19
    t.constructor<const TFormula &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TFormula::AddParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::AddParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:194:19
    t.method("AddParameter", static_cast<void (TFormula::*)(const TString &, Double_t) >(&TFormula::AddParameter));
    t.method("AddParameter", [](TFormula& a, const TString & arg0)->void { a.AddParameter(arg0); });
    t.method("AddParameter", [](TFormula* a, const TString & arg0)->void { a->AddParameter(arg0); });

    DEBUG_MSG("Adding wrapper for void TFormula::AddVariable(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::AddVariable(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:195:19
    t.method("AddVariable", static_cast<void (TFormula::*)(const TString &, Double_t) >(&TFormula::AddVariable));
    t.method("AddVariable", [](TFormula& a, const TString & arg0)->void { a.AddVariable(arg0); });
    t.method("AddVariable", [](TFormula* a, const TString & arg0)->void { a->AddVariable(arg0); });

    DEBUG_MSG("Adding wrapper for void TFormula::AddVariables(const TString *, const Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::AddVariables(const TString *, const Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:196:19
    t.method("AddVariables", static_cast<void (TFormula::*)(const TString *, const Int_t) >(&TFormula::AddVariables));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::Compile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::Compile(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:197:19
    t.method("Compile", static_cast<Int_t (TFormula::*)(const char *) >(&TFormula::Compile));
    t.method("Compile", [](TFormula& a)->Int_t { return a.Compile(); });
    t.method("Compile", [](TFormula* a)->Int_t { return a->Compile(); });

    DEBUG_MSG("Adding wrapper for void TFormula::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:198:11
    t.method("Copy", static_cast<void (TFormula::*)(TObject &)  const>(&TFormula::Copy));

    DEBUG_MSG("Adding wrapper for void TFormula::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Clear(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:199:11
    t.method("Clear", static_cast<void (TFormula::*)(Option_t *) >(&TFormula::Clear));
    t.method("Clear", [](TFormula& a)->void { a.Clear(); });
    t.method("Clear", [](TFormula* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for Double_t TFormula::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::Eval(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:200:19
    t.method("Eval", static_cast<Double_t (TFormula::*)(Double_t)  const>(&TFormula::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::Eval(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::Eval(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:201:19
    t.method("Eval", static_cast<Double_t (TFormula::*)(Double_t, Double_t)  const>(&TFormula::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::Eval(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::Eval(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:202:19
    t.method("Eval", static_cast<Double_t (TFormula::*)(Double_t, Double_t, Double_t)  const>(&TFormula::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::Eval(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::Eval(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:203:19
    t.method("Eval", static_cast<Double_t (TFormula::*)(Double_t, Double_t, Double_t, Double_t)  const>(&TFormula::Eval));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::EvalPar(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:204:19
    t.method("EvalPar", static_cast<Double_t (TFormula::*)(const Double_t *, const Double_t *)  const>(&TFormula::EvalPar));
    t.method("EvalPar", [](TFormula const& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); });
    t.method("EvalPar", [](TFormula const* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); });

    DEBUG_MSG("Adding wrapper for bool TFormula::GenerateGradientPar() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::GenerateGradientPar()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:208:9
    t.method("GenerateGradientPar", static_cast<bool (TFormula::*)() >(&TFormula::GenerateGradientPar));

    DEBUG_MSG("Adding wrapper for bool TFormula::GenerateHessianPar() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::GenerateHessianPar()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:212:9
    t.method("GenerateHessianPar", static_cast<bool (TFormula::*)() >(&TFormula::GenerateHessianPar));

    DEBUG_MSG("Adding wrapper for void TFormula::GradientPar(const Double_t *, TFormula::CladStorage &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::GradientPar(const Double_t *, TFormula::CladStorage &)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:219:9
    t.method("GradientPar", static_cast<void (TFormula::*)(const Double_t *, TFormula::CladStorage &) >(&TFormula::GradientPar));

    DEBUG_MSG("Adding wrapper for void TFormula::GradientPar(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::GradientPar(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:221:9
    t.method("GradientPar", static_cast<void (TFormula::*)(const Double_t *, Double_t *) >(&TFormula::GradientPar));

    DEBUG_MSG("Adding wrapper for void TFormula::HessianPar(const Double_t *, TFormula::CladStorage &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::HessianPar(const Double_t *, TFormula::CladStorage &)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:229:9
    t.method("HessianPar", static_cast<void (TFormula::*)(const Double_t *, TFormula::CladStorage &) >(&TFormula::HessianPar));

    DEBUG_MSG("Adding wrapper for void TFormula::HessianPar(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::HessianPar(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:231:9
    t.method("HessianPar", static_cast<void (TFormula::*)(const Double_t *, Double_t *) >(&TFormula::HessianPar));

    DEBUG_MSG("Adding wrapper for bool TFormula::HasGeneratedGradient() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::HasGeneratedGradient()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:234:9
    t.method("HasGeneratedGradient", static_cast<bool (TFormula::*)()  const>(&TFormula::HasGeneratedGradient));

    DEBUG_MSG("Adding wrapper for bool TFormula::HasGeneratedHessian() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::HasGeneratedHessian()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:239:9
    t.method("HasGeneratedHessian", static_cast<bool (TFormula::*)()  const>(&TFormula::HasGeneratedHessian));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetExpFormula(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetExpFormula(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:252:19
    t.method("GetExpFormula", static_cast<TString (TFormula::*)(Option_t *)  const>(&TFormula::GetExpFormula));
    t.method("GetExpFormula", [](TFormula const& a)->TString { return a.GetExpFormula(); });
    t.method("GetExpFormula", [](TFormula const* a)->TString { return a->GetExpFormula(); });

    DEBUG_MSG("Adding wrapper for TString TFormula::GetGradientFormula() (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetGradientFormula()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:253:19
    t.method("GetGradientFormula", static_cast<TString (TFormula::*)()  const>(&TFormula::GetGradientFormula));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetHessianFormula() (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetHessianFormula()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:254:19
    t.method("GetHessianFormula", static_cast<TString (TFormula::*)()  const>(&TFormula::GetHessianFormula));

    DEBUG_MSG("Adding wrapper for const TObject * TFormula::GetLinearPart(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const TObject * TFormula::GetLinearPart(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:255:19
    t.method("GetLinearPart", static_cast<const TObject * (TFormula::*)(Int_t)  const>(&TFormula::GetLinearPart));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetNdim() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetNdim()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:256:19
    t.method("GetNdim", static_cast<Int_t (TFormula::*)()  const>(&TFormula::GetNdim));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetNpar()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:257:19
    t.method("GetNpar", static_cast<Int_t (TFormula::*)()  const>(&TFormula::GetNpar));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetNumber()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:258:19
    t.method("GetNumber", static_cast<Int_t (TFormula::*)()  const>(&TFormula::GetNumber));

    DEBUG_MSG("Adding wrapper for const char * TFormula::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::GetParName(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:259:19
    t.method("GetParName", [](TFormula const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TFormula const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetParNumber(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:260:19
    t.method("GetParNumber", static_cast<Int_t (TFormula::*)(const char *)  const>(&TFormula::GetParNumber));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::GetParameter(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::GetParameter(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:261:19
    t.method("GetParameter", static_cast<Double_t (TFormula::*)(const char *)  const>(&TFormula::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::GetParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:262:19
    t.method("GetParameter", static_cast<Double_t (TFormula::*)(Int_t)  const>(&TFormula::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t * TFormula::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TFormula::GetParameters()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:263:19
    t.method("GetParameters", static_cast<Double_t * (TFormula::*)()  const>(&TFormula::GetParameters));

    DEBUG_MSG("Adding wrapper for void TFormula::GetParameters(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::GetParameters(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:264:19
    t.method("GetParameters", static_cast<void (TFormula::*)(Double_t *)  const>(&TFormula::GetParameters));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::GetVariable(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::GetVariable(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:265:19
    t.method("GetVariable", static_cast<Double_t (TFormula::*)(const char *)  const>(&TFormula::GetVariable));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetVarNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetVarNumber(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:266:19
    t.method("GetVarNumber", static_cast<Int_t (TFormula::*)(const char *)  const>(&TFormula::GetVarNumber));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetVarName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetVarName(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:267:19
    t.method("GetVarName", static_cast<TString (TFormula::*)(Int_t)  const>(&TFormula::GetVarName));

    DEBUG_MSG("Adding wrapper for Bool_t TFormula::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormula::IsValid()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:268:19
    t.method("IsValid", static_cast<Bool_t (TFormula::*)()  const>(&TFormula::IsValid));

    DEBUG_MSG("Adding wrapper for Bool_t TFormula::IsVectorized() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormula::IsVectorized()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:269:11
    t.method("IsVectorized", static_cast<Bool_t (TFormula::*)()  const>(&TFormula::IsVectorized));

    DEBUG_MSG("Adding wrapper for Bool_t TFormula::IsLinear() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormula::IsLinear()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:270:19
    t.method("IsLinear", static_cast<Bool_t (TFormula::*)()  const>(&TFormula::IsLinear));

    DEBUG_MSG("Adding wrapper for void TFormula::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:271:19
    t.method("Print", static_cast<void (TFormula::*)(Option_t *)  const>(&TFormula::Print));
    t.method("Print", [](TFormula const& a)->void { a.Print(); });
    t.method("Print", [](TFormula const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TFormula::SetName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:272:19
    t.method("SetName", static_cast<void (TFormula::*)(const char *) >(&TFormula::SetName));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameter(const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameter(const char *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:273:19
    t.method("SetParameter", static_cast<void (TFormula::*)(const char *, Double_t) >(&TFormula::SetParameter));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:274:19
    t.method("SetParameter", static_cast<void (TFormula::*)(Int_t, Double_t) >(&TFormula::SetParameter));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:275:19
    t.method("SetParameters", static_cast<void (TFormula::*)(const Double_t *) >(&TFormula::SetParameters));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:277:19
    t.method("SetParameters", static_cast<void (TFormula::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TFormula::SetParameters));
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TFormula& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TFormula* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TFormula::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:280:19
    t.method("SetParName", static_cast<void (TFormula::*)(Int_t, const char *) >(&TFormula::SetParName));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:281:19
    t.method("SetParNames", static_cast<void (TFormula::*)(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) >(&TFormula::SetParNames));
    t.method("SetParNames", [](TFormula& a)->void { a.SetParNames(); });
    t.method("SetParNames", [](TFormula& a, const char * arg0)->void { a.SetParNames(arg0); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1)->void { a.SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2)->void { a.SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a.SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TFormula& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TFormula* a)->void { a->SetParNames(); });
    t.method("SetParNames", [](TFormula* a, const char * arg0)->void { a->SetParNames(arg0); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1)->void { a->SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2)->void { a->SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a->SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TFormula* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TFormula::SetVariable(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetVariable(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:285:19
    t.method("SetVariable", static_cast<void (TFormula::*)(const TString &, Double_t) >(&TFormula::SetVariable));

    DEBUG_MSG("Adding wrapper for void TFormula::SetVectorized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetVectorized(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:287:9
    t.method("SetVectorized", static_cast<void (TFormula::*)(Bool_t) >(&TFormula::SetVectorized));

    DEBUG_MSG("Adding wrapper for Version_t TFormula::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TFormula::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!Class_Version", static_cast<Version_t (*)() >(&TFormula::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TFormula::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFormula::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    t.method("IsA", static_cast<TClass * (TFormula::*)()  const>(&TFormula::IsA));

    DEBUG_MSG("Adding wrapper for void TFormula::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    t.method("StreamerNVirtual", static_cast<void (TFormula::*)(TBuffer &) >(&TFormula::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TFormula::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!DeclFileName", []() { return (std::string)TFormula::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TFormula::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFormula::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!ImplFileLine", static_cast<int (*)() >(&TFormula::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TFormula::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!ImplFileName", []() { return (std::string)TFormula::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TFormula::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!Class_Name", []() { return (std::string)TFormula::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TFormula::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFormula::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!Dictionary", static_cast<TClass * (*)() >(&TFormula::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TFormula::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFormula::Class()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!Class", static_cast<TClass * (*)() >(&TFormula::Class));

    DEBUG_MSG("Adding wrapper for void TFormula::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    t.method("Streamer", static_cast<void (TFormula::*)(TBuffer &) >(&TFormula::Streamer));

    DEBUG_MSG("Adding wrapper for int TFormula::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFormula::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TFormula.h:289:4
    module_.method("TFormula!DeclFileLine", static_cast<int (*)() >(&TFormula::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFormula>> type_;
};
std::shared_ptr<Wrapper> newJlTFormula(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFormula(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1AbsComposition> : std::false_type { };
  template<> struct DefaultConstructible<TF1AbsComposition> : std::false_type { };
template<> struct SuperType<TF1AbsComposition> { typedef TObject type; };
}

// Class generating the wrapper for type TF1AbsComposition
// signature to use in the veto file: TF1AbsComposition
struct JlTF1AbsComposition: public Wrapper {

  JlTF1AbsComposition(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1AbsComposition (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:16:7
    jlcxx::TypeWrapper<TF1AbsComposition>  t = jlModule.add_type<TF1AbsComposition>("TF1AbsComposition",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1AbsComposition>>(new jlcxx::TypeWrapper<TF1AbsComposition>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for double TF1AbsComposition::operator()(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: double TF1AbsComposition::operator()(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:21:19
    t.method("paren", static_cast<double (TF1AbsComposition::*)(const Double_t *, const Double_t *) >(&TF1AbsComposition::operator()));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:22:17
    t.method("SetRange", static_cast<void (TF1AbsComposition::*)(Double_t, Double_t) >(&TF1AbsComposition::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:23:17
    t.method("SetParameters", static_cast<void (TF1AbsComposition::*)(const Double_t *) >(&TF1AbsComposition::SetParameters));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::Update()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:24:17
    t.method("Update", static_cast<void (TF1AbsComposition::*)() >(&TF1AbsComposition::Update));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:26:9
    t.method("Copy", static_cast<void (TF1AbsComposition::*)(TObject &)  const>(&TF1AbsComposition::Copy));

    DEBUG_MSG("Adding wrapper for Version_t TF1AbsComposition::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1AbsComposition::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!Class_Version", static_cast<Version_t (*)() >(&TF1AbsComposition::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF1AbsComposition::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1AbsComposition::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    t.method("IsA", static_cast<TClass * (TF1AbsComposition::*)()  const>(&TF1AbsComposition::IsA));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    t.method("StreamerNVirtual", static_cast<void (TF1AbsComposition::*)(TBuffer &) >(&TF1AbsComposition::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF1AbsComposition::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1AbsComposition::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!DeclFileName", []() { return (std::string)TF1AbsComposition::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1AbsComposition::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1AbsComposition::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!ImplFileLine", static_cast<int (*)() >(&TF1AbsComposition::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF1AbsComposition::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1AbsComposition::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!ImplFileName", []() { return (std::string)TF1AbsComposition::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1AbsComposition::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1AbsComposition::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!Class_Name", []() { return (std::string)TF1AbsComposition::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1AbsComposition::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1AbsComposition::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!Dictionary", static_cast<TClass * (*)() >(&TF1AbsComposition::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF1AbsComposition::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1AbsComposition::Class()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!Class", static_cast<TClass * (*)() >(&TF1AbsComposition::Class));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    t.method("Streamer", static_cast<void (TF1AbsComposition::*)(TBuffer &) >(&TF1AbsComposition::Streamer));

    DEBUG_MSG("Adding wrapper for int TF1AbsComposition::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1AbsComposition::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1AbsComposition.h:28:4
    module_.method("TF1AbsComposition!DeclFileLine", static_cast<int (*)() >(&TF1AbsComposition::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1AbsComposition>> type_;
};
std::shared_ptr<Wrapper> newJlTF1AbsComposition(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1AbsComposition(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1Parameters> : std::false_type { };
  template<> struct DefaultConstructible<TF1Parameters> : std::false_type { };
}

// Class generating the wrapper for type TF1Parameters
// signature to use in the veto file: TF1Parameters
struct JlTF1Parameters: public Wrapper {

  JlTF1Parameters(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1Parameters (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:51:7
    jlcxx::TypeWrapper<TF1Parameters>  t = jlModule.add_type<TF1Parameters>("TF1Parameters");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1Parameters>>(new jlcxx::TypeWrapper<TF1Parameters>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1Parameters::TF1Parameters(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:54:4
    t.constructor<Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1Parameters::TF1Parameters(const TF1Parameters &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:63:4
    t.constructor<const TF1Parameters &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TF1Parameters & TF1Parameters::operator=(const TF1Parameters &) (" __HERE__ ")");
    // signature to use in the veto list: TF1Parameters & TF1Parameters::operator=(const TF1Parameters &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:68:19
    t.method("assign", static_cast<TF1Parameters & (TF1Parameters::*)(const TF1Parameters &) >(&TF1Parameters::operator=));

    DEBUG_MSG("Adding wrapper for Double_t TF1Parameters::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Parameters::GetParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:78:13
    t.method("GetParameter", static_cast<Double_t (TF1Parameters::*)(Int_t)  const>(&TF1Parameters::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t TF1Parameters::GetParameter(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Parameters::GetParameter(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:82:13
    t.method("GetParameter", static_cast<Double_t (TF1Parameters::*)(const char *)  const>(&TF1Parameters::GetParameter));

    DEBUG_MSG("Adding wrapper for const Double_t * TF1Parameters::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF1Parameters::GetParameters()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:86:20
    t.method("GetParameters", static_cast<const Double_t * (TF1Parameters::*)()  const>(&TF1Parameters::GetParameters));

    DEBUG_MSG("Adding wrapper for const std::vector<double> & TF1Parameters::ParamsVec() (" __HERE__ ")");
    // signature to use in the veto list: const std::vector<double> & TF1Parameters::ParamsVec()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:90:31
    t.method("ParamsVec", static_cast<const std::vector<double> & (TF1Parameters::*)()  const>(&TF1Parameters::ParamsVec));

    DEBUG_MSG("Adding wrapper for Int_t TF1Parameters::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1Parameters::GetParNumber(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:95:10
    t.method("GetParNumber", static_cast<Int_t (TF1Parameters::*)(const char *)  const>(&TF1Parameters::GetParNumber));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::GetParName(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:97:16
    t.method("GetParName", [](TF1Parameters const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1Parameters const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:104:11
    t.method("SetParameter", static_cast<void (TF1Parameters::*)(Int_t, Double_t) >(&TF1Parameters::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:109:10
    t.method("SetParameters", static_cast<void (TF1Parameters::*)(const Double_t *) >(&TF1Parameters::SetParameters));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:113:10
    t.method("SetParameters", static_cast<void (TF1Parameters::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF1Parameters::SetParameters));
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameter(const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameter(const char *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:117:11
    t.method("SetParameter", static_cast<void (TF1Parameters::*)(const char *, Double_t) >(&TF1Parameters::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:121:11
    t.method("SetParName", static_cast<void (TF1Parameters::*)(Int_t, const char *) >(&TF1Parameters::SetParName));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:126:11
    t.method("SetParNames", static_cast<void (TF1Parameters::*)(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) >(&TF1Parameters::SetParNames));
    t.method("SetParNames", [](TF1Parameters& a)->void { a.SetParNames(); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0)->void { a.SetParNames(arg0); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1)->void { a.SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2)->void { a.SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a.SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TF1Parameters* a)->void { a->SetParNames(); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0)->void { a->SetParNames(arg0); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1)->void { a->SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2)->void { a->SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a->SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for Version_t TF1Parameters::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1Parameters::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Class_Version", static_cast<Version_t (*)() >(&TF1Parameters::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    t.method("IsA", static_cast<TClass * (TF1Parameters::*)()  const>(&TF1Parameters::IsA));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    t.method("StreamerNVirtual", static_cast<void (TF1Parameters::*)(TBuffer &) >(&TF1Parameters::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!DeclFileName", []() { return (std::string)TF1Parameters::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1Parameters::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Parameters::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!ImplFileLine", static_cast<int (*)() >(&TF1Parameters::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!ImplFileName", []() { return (std::string)TF1Parameters::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Class_Name", []() { return (std::string)TF1Parameters::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Dictionary", static_cast<TClass * (*)() >(&TF1Parameters::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::Class()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Class", static_cast<TClass * (*)() >(&TF1Parameters::Class));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    t.method("Streamer", static_cast<void (TF1Parameters::*)(TBuffer &) >(&TF1Parameters::Streamer));

    DEBUG_MSG("Adding wrapper for int TF1Parameters::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Parameters::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!DeclFileLine", static_cast<int (*)() >(&TF1Parameters::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1Parameters>> type_;
};
std::shared_ptr<Wrapper> newJlTF1Parameters(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1Parameters(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1::TF1FunctorPointer> : std::false_type { };
  template<> struct DefaultConstructible<TF1::TF1FunctorPointer> : std::false_type { };
}

// Class generating the wrapper for type TF1::TF1FunctorPointer
// signature to use in the veto file: TF1::TF1FunctorPointer
struct JlTF1_TF1FunctorPointer: public Wrapper {

  JlTF1_TF1FunctorPointer(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1::TF1FunctorPointer (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:228:11
    jlcxx::TypeWrapper<TF1::TF1FunctorPointer>  t = jlModule.add_type<TF1::TF1FunctorPointer>("TF1!TF1FunctorPointer");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1::TF1FunctorPointer>>(new jlcxx::TypeWrapper<TF1::TF1FunctorPointer>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for TF1::TF1FunctorPointer * TF1::TF1FunctorPointer::Clone() (" __HERE__ ")");
    // signature to use in the veto list: TF1::TF1FunctorPointer * TF1::TF1FunctorPointer::Clone()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:230:36
    t.method("Clone", static_cast<TF1::TF1FunctorPointer * (TF1::TF1FunctorPointer::*)()  const>(&TF1::TF1FunctorPointer::Clone));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1::TF1FunctorPointer>> type_;
};
std::shared_ptr<Wrapper> newJlTF1_TF1FunctorPointer(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1_TF1FunctorPointer(module));
}
