// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TFormulaParamOrder> : std::false_type { };
  template<> struct DefaultConstructible<TFormulaParamOrder> : std::false_type { };
}

// Class generating the wrapper for type TFormulaParamOrder
// signature to use in the veto file: TFormulaParamOrder
struct JlTFormulaParamOrder: public Wrapper {

  JlTFormulaParamOrder(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFormulaParamOrder (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:83:8
    jlcxx::TypeWrapper<TFormulaParamOrder>  t = jlModule.add_type<TFormulaParamOrder>("TFormulaParamOrder");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFormulaParamOrder>>(new jlcxx::TypeWrapper<TFormulaParamOrder>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for bool TFormulaParamOrder::operator()(const TString &, const TString &) (" __HERE__ ")");
    // signature to use in the veto list: bool TFormulaParamOrder::operator()(const TString &, const TString &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:84:9
    t.method("paren", [](TFormulaParamOrder const& a, const TString & arg0, const TString & arg1)->bool { return a.operator()(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("a"), jlcxx::arg("b"));
    t.method("paren", [](TFormulaParamOrder const* a, const TString & arg0, const TString & arg1)->bool { return a->operator()(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("a"), jlcxx::arg("b"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFormulaParamOrder>> type_;
};
std::shared_ptr<Wrapper> newJlTFormulaParamOrder(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFormulaParamOrder(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFormula> : std::false_type { };
  template<> struct DefaultConstructible<TFormula> : std::false_type { };
template<> struct SuperType<TFormula> { typedef TNamed type; };
}

// Class generating the wrapper for type TFormula
// signature to use in the veto file: TFormula
struct JlTFormula: public Wrapper {

  JlTFormula(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFormula (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:88:7
    jlcxx::TypeWrapper<TFormula>  t = jlModule.add_type<TFormula>("TFormula",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFormula>>(new jlcxx::TypeWrapper<TFormula>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for TFormula & TFormula::operator=(const TFormula &) (" __HERE__ ")");
    // signature to use in the veto list: TFormula & TFormula::operator=(const TFormula &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:188:19
    t.method("assign", [](TFormula& a, const TFormula & arg0)->TFormula & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("rhs"));
    t.method("assign", [](TFormula* a, const TFormula & arg0)->TFormula & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("rhs"));


    DEBUG_MSG("Adding wrapper for void TFormula::TFormula(const char *, const char *, bool, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:189:4
    t.constructor<const char *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name")    );
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula")    );
    t.constructor<const char *, const char *, bool>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("addToGlobList")    );
    t.constructor<const char *, const char *, bool, bool>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("addToGlobList"), jlcxx::arg("vectorize")    );


    DEBUG_MSG("Adding wrapper for void TFormula::TFormula(const char *, const char *, int, int, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:190:4
    t.constructor<const char *, const char *, int, int>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("ndim"), jlcxx::arg("npar")    );
    t.constructor<const char *, const char *, int, int, bool>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("ndim"), jlcxx::arg("npar"), jlcxx::arg("addToGlobList")    );


    DEBUG_MSG("Adding wrapper for void TFormula::TFormula(const TFormula &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:191:19
    t.constructor<const TFormula &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("formula")    );

    DEBUG_MSG("Adding wrapper for void TFormula::AddParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::AddParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:194:19
    t.method("AddParameter", [](TFormula& a, const TString & arg0)->void { a.AddParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("AddParameter", [](TFormula& a, const TString & arg0, Double_t arg1)->void { a.AddParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("AddParameter", [](TFormula* a, const TString & arg0)->void { a->AddParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("AddParameter", [](TFormula* a, const TString & arg0, Double_t arg1)->void { a->AddParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TFormula::AddVariable(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::AddVariable(const TString &, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:195:19
    t.method("AddVariable", [](TFormula& a, const TString & arg0)->void { a.AddVariable(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("AddVariable", [](TFormula& a, const TString & arg0, Double_t arg1)->void { a.AddVariable(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("AddVariable", [](TFormula* a, const TString & arg0)->void { a->AddVariable(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("AddVariable", [](TFormula* a, const TString & arg0, Double_t arg1)->void { a->AddVariable(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TFormula::AddVariables(const TString *, const Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::AddVariables(const TString *, const Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:196:19
    t.method("AddVariables", [](TFormula& a, const TString * arg0, const Int_t arg1)->void { a.AddVariables(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("vars"), jlcxx::arg("size"));
    t.method("AddVariables", [](TFormula* a, const TString * arg0, const Int_t arg1)->void { a->AddVariables(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("vars"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::Compile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::Compile(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:197:19
    t.method("Compile", [](TFormula& a)->Int_t { return a.Compile(); }, jlcxx::arg("this"));
    t.method("Compile", [](TFormula& a, const char * arg0)->Int_t { return a.Compile(arg0); }, jlcxx::arg("this"), jlcxx::arg("expression"));
    t.method("Compile", [](TFormula* a)->Int_t { return a->Compile(); }, jlcxx::arg("this"));
    t.method("Compile", [](TFormula* a, const char * arg0)->Int_t { return a->Compile(arg0); }, jlcxx::arg("this"), jlcxx::arg("expression"));

    DEBUG_MSG("Adding wrapper for void TFormula::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:198:11
    t.method("Copy", [](TFormula const& a, TObject & arg0)->void { a.Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("f1"));
    t.method("Copy", [](TFormula const* a, TObject & arg0)->void { a->Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("f1"));

    DEBUG_MSG("Adding wrapper for void TFormula::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Clear(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:199:11
    t.method("Clear", [](TFormula& a)->void { a.Clear(); }, jlcxx::arg("this"));
    t.method("Clear", [](TFormula& a, Option_t * arg0)->void { a.Clear(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Clear", [](TFormula* a)->void { a->Clear(); }, jlcxx::arg("this"));
    t.method("Clear", [](TFormula* a, Option_t * arg0)->void { a->Clear(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::EvalPar(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:202:19
    t.method("EvalPar", [](TFormula const& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("EvalPar", [](TFormula const& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.EvalPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("params"));
    t.method("EvalPar", [](TFormula const* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("EvalPar", [](TFormula const* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->EvalPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for bool TFormula::GenerateGradientPar() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::GenerateGradientPar()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:206:9
    t.method("GenerateGradientPar", [](TFormula& a)->bool { return a.GenerateGradientPar(); }, jlcxx::arg("this"));
    t.method("GenerateGradientPar", [](TFormula* a)->bool { return a->GenerateGradientPar(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool TFormula::GenerateHessianPar() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::GenerateHessianPar()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:210:9
    t.method("GenerateHessianPar", [](TFormula& a)->bool { return a.GenerateHessianPar(); }, jlcxx::arg("this"));
    t.method("GenerateHessianPar", [](TFormula* a)->bool { return a->GenerateHessianPar(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TFormula::GradientPar(const Double_t *, TFormula::CladStorage &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::GradientPar(const Double_t *, TFormula::CladStorage &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:217:9
    t.method("GradientPar", [](TFormula& a, const Double_t * arg0, TFormula::CladStorage & arg1)->void { a.GradientPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));
    t.method("GradientPar", [](TFormula* a, const Double_t * arg0, TFormula::CladStorage & arg1)->void { a->GradientPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));

    DEBUG_MSG("Adding wrapper for void TFormula::GradientPar(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::GradientPar(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:219:9
    t.method("GradientPar", [](TFormula& a, const Double_t * arg0, Double_t * arg1)->void { a.GradientPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));
    t.method("GradientPar", [](TFormula* a, const Double_t * arg0, Double_t * arg1)->void { a->GradientPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));

    DEBUG_MSG("Adding wrapper for void TFormula::HessianPar(const Double_t *, TFormula::CladStorage &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::HessianPar(const Double_t *, TFormula::CladStorage &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:227:9
    t.method("HessianPar", [](TFormula& a, const Double_t * arg0, TFormula::CladStorage & arg1)->void { a.HessianPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));
    t.method("HessianPar", [](TFormula* a, const Double_t * arg0, TFormula::CladStorage & arg1)->void { a->HessianPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));

    DEBUG_MSG("Adding wrapper for void TFormula::HessianPar(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::HessianPar(const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:229:9
    t.method("HessianPar", [](TFormula& a, const Double_t * arg0, Double_t * arg1)->void { a.HessianPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));
    t.method("HessianPar", [](TFormula* a, const Double_t * arg0, Double_t * arg1)->void { a->HessianPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("result"));

    DEBUG_MSG("Adding wrapper for bool TFormula::HasGeneratedGradient() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::HasGeneratedGradient()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:232:9
    t.method("HasGeneratedGradient", [](TFormula const& a)->bool { return a.HasGeneratedGradient(); }, jlcxx::arg("this"));
    t.method("HasGeneratedGradient", [](TFormula const* a)->bool { return a->HasGeneratedGradient(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool TFormula::HasGeneratedHessian() (" __HERE__ ")");
    // signature to use in the veto list: bool TFormula::HasGeneratedHessian()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:237:9
    t.method("HasGeneratedHessian", [](TFormula const& a)->bool { return a.HasGeneratedHessian(); }, jlcxx::arg("this"));
    t.method("HasGeneratedHessian", [](TFormula const* a)->bool { return a->HasGeneratedHessian(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetExpFormula(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetExpFormula(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:250:19
    t.method("GetExpFormula", [](TFormula const& a)->TString { return a.GetExpFormula(); }, jlcxx::arg("this"));
    t.method("GetExpFormula", [](TFormula const& a, Option_t * arg0)->TString { return a.GetExpFormula(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("GetExpFormula", [](TFormula const* a)->TString { return a->GetExpFormula(); }, jlcxx::arg("this"));
    t.method("GetExpFormula", [](TFormula const* a, Option_t * arg0)->TString { return a->GetExpFormula(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetGradientFormula() (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetGradientFormula()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:251:19
    t.method("GetGradientFormula", [](TFormula const& a)->TString { return a.GetGradientFormula(); }, jlcxx::arg("this"));
    t.method("GetGradientFormula", [](TFormula const* a)->TString { return a->GetGradientFormula(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetHessianFormula() (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetHessianFormula()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:252:19
    t.method("GetHessianFormula", [](TFormula const& a)->TString { return a.GetHessianFormula(); }, jlcxx::arg("this"));
    t.method("GetHessianFormula", [](TFormula const* a)->TString { return a->GetHessianFormula(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetUniqueFuncName() (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetUniqueFuncName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:253:19
    t.method("GetUniqueFuncName", [](TFormula const& a)->TString { return a.GetUniqueFuncName(); }, jlcxx::arg("this"));
    t.method("GetUniqueFuncName", [](TFormula const* a)->TString { return a->GetUniqueFuncName(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const TObject * TFormula::GetLinearPart(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const TObject * TFormula::GetLinearPart(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:258:19
    t.method("GetLinearPart", [](TFormula const& a, Int_t arg0)->const TObject * { return a.GetLinearPart(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("GetLinearPart", [](TFormula const* a, Int_t arg0)->const TObject * { return a->GetLinearPart(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetNdim() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetNdim()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:259:19
    t.method("GetNdim", [](TFormula const& a)->Int_t { return a.GetNdim(); }, jlcxx::arg("this"));
    t.method("GetNdim", [](TFormula const* a)->Int_t { return a->GetNdim(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetNpar()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:260:19
    t.method("GetNpar", [](TFormula const& a)->Int_t { return a.GetNpar(); }, jlcxx::arg("this"));
    t.method("GetNpar", [](TFormula const* a)->Int_t { return a->GetNpar(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetNumber()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:261:19
    t.method("GetNumber", [](TFormula const& a)->Int_t { return a.GetNumber(); }, jlcxx::arg("this"));
    t.method("GetNumber", [](TFormula const* a)->Int_t { return a->GetNumber(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const char * TFormula::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::GetParName(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:262:19
    t.method("GetParName", [](TFormula const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); }, jlcxx::arg("this"), jlcxx::arg("ipar"));
    t.method("GetParName", [](TFormula const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); }, jlcxx::arg("this"), jlcxx::arg("ipar"));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetParNumber(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:263:19
    t.method("GetParNumber", [](TFormula const& a, const char * arg0)->Int_t { return a.GetParNumber(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("GetParNumber", [](TFormula const* a, const char * arg0)->Int_t { return a->GetParNumber(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::GetParameter(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::GetParameter(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:264:19
    t.method("GetParameter", [](TFormula const& a, const char * arg0)->Double_t { return a.GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("GetParameter", [](TFormula const* a, const char * arg0)->Double_t { return a->GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::GetParameter(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:265:19
    t.method("GetParameter", [](TFormula const& a, Int_t arg0)->Double_t { return a.GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("param"));
    t.method("GetParameter", [](TFormula const* a, Int_t arg0)->Double_t { return a->GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("param"));

    DEBUG_MSG("Adding wrapper for Double_t * TFormula::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TFormula::GetParameters()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:266:19
    t.method("GetParameters", [](TFormula const& a)->Double_t * { return a.GetParameters(); }, jlcxx::arg("this"));
    t.method("GetParameters", [](TFormula const* a)->Double_t * { return a->GetParameters(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TFormula::GetParameters(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::GetParameters(Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:267:19
    t.method("GetParameters", [](TFormula const& a, Double_t * arg0)->void { a.GetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));
    t.method("GetParameters", [](TFormula const* a, Double_t * arg0)->void { a->GetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for Double_t TFormula::GetVariable(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TFormula::GetVariable(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:268:19
    t.method("GetVariable", [](TFormula const& a, const char * arg0)->Double_t { return a.GetVariable(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("GetVariable", [](TFormula const* a, const char * arg0)->Double_t { return a->GetVariable(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for Int_t TFormula::GetVarNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFormula::GetVarNumber(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:269:19
    t.method("GetVarNumber", [](TFormula const& a, const char * arg0)->Int_t { return a.GetVarNumber(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("GetVarNumber", [](TFormula const* a, const char * arg0)->Int_t { return a->GetVarNumber(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for TString TFormula::GetVarName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TString TFormula::GetVarName(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:270:19
    t.method("GetVarName", [](TFormula const& a, Int_t arg0)->TString { return a.GetVarName(arg0); }, jlcxx::arg("this"), jlcxx::arg("ivar"));
    t.method("GetVarName", [](TFormula const* a, Int_t arg0)->TString { return a->GetVarName(arg0); }, jlcxx::arg("this"), jlcxx::arg("ivar"));

    DEBUG_MSG("Adding wrapper for Bool_t TFormula::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormula::IsValid()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:271:19
    t.method("IsValid", [](TFormula const& a)->Bool_t { return a.IsValid(); }, jlcxx::arg("this"));
    t.method("IsValid", [](TFormula const* a)->Bool_t { return a->IsValid(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Bool_t TFormula::IsVectorized() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormula::IsVectorized()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:272:11
    t.method("IsVectorized", [](TFormula const& a)->Bool_t { return a.IsVectorized(); }, jlcxx::arg("this"));
    t.method("IsVectorized", [](TFormula const* a)->Bool_t { return a->IsVectorized(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Bool_t TFormula::IsLinear() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFormula::IsLinear()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:273:19
    t.method("IsLinear", [](TFormula const& a)->Bool_t { return a.IsLinear(); }, jlcxx::arg("this"));
    t.method("IsLinear", [](TFormula const* a)->Bool_t { return a->IsLinear(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TFormula::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:274:19
    t.method("Print", [](TFormula const& a)->void { a.Print(); }, jlcxx::arg("this"));
    t.method("Print", [](TFormula const& a, Option_t * arg0)->void { a.Print(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Print", [](TFormula const* a)->void { a->Print(); }, jlcxx::arg("this"));
    t.method("Print", [](TFormula const* a, Option_t * arg0)->void { a->Print(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetName(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:275:19
    t.method("SetName", [](TFormula& a, const char * arg0)->void { a.SetName(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("SetName", [](TFormula* a, const char * arg0)->void { a->SetName(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameter(const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameter(const char *, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:276:19
    t.method("SetParameter", [](TFormula& a, const char * arg0, Double_t arg1)->void { a.SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("SetParameter", [](TFormula* a, const char * arg0, Double_t arg1)->void { a->SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:277:19
    t.method("SetParameter", [](TFormula& a, Int_t arg0, Double_t arg1)->void { a.SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("param"), jlcxx::arg("value"));
    t.method("SetParameter", [](TFormula* a, Int_t arg0, Double_t arg1)->void { a->SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("param"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:278:19
    t.method("SetParameters", [](TFormula& a, const Double_t * arg0)->void { a.SetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));
    t.method("SetParameters", [](TFormula* a, const Double_t * arg0)->void { a->SetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:282:19
    t.method("SetParName", [](TFormula& a, Int_t arg0, const char * arg1)->void { a.SetParName(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("ipar"), jlcxx::arg("name"));
    t.method("SetParName", [](TFormula* a, Int_t arg0, const char * arg1)->void { a->SetParName(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("ipar"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetVariable(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetVariable(const TString &, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:285:19
    t.method("SetVariable", [](TFormula& a, const TString & arg0, Double_t arg1)->void { a.SetVariable(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("SetVariable", [](TFormula* a, const TString & arg0, Double_t arg1)->void { a->SetVariable(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TFormula::SetVectorized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::SetVectorized(Bool_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TFormula.h:287:9
    t.method("SetVectorized", [](TFormula& a, Bool_t arg0)->void { a.SetVectorized(arg0); }, jlcxx::arg("this"), jlcxx::arg("vectorized"));
    t.method("SetVectorized", [](TFormula* a, Bool_t arg0)->void { a->SetVectorized(arg0); }, jlcxx::arg("this"), jlcxx::arg("vectorized"));

    DEBUG_MSG("Adding wrapper for Version_t TFormula::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TFormula::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TFormula!Class_Version", []()->Version_t { return TFormula::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TFormula::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFormula::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TFormula const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TFormula const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TFormula::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TFormula& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TFormula* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TFormula::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TFormula!DeclFileName", []() { return (std::string)TFormula::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TFormula::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFormula::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TFormula!ImplFileLine", []()->int { return TFormula::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TFormula::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TFormula!ImplFileName", []() { return (std::string)TFormula::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TFormula::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFormula::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TFormula!Class_Name", []() { return (std::string)TFormula::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TFormula::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFormula::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TFormula!Dictionary", []()->TClass * { return TFormula::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TFormula::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFormula::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TFormula!Class", []()->TClass * { return TFormula::Class(); });

    DEBUG_MSG("Adding wrapper for void TFormula::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFormula::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TFormula& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TFormula* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TFormula::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFormula::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TFormula!DeclFileLine", []()->int { return TFormula::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFormula>> type_;
};
std::shared_ptr<Wrapper> newJlTFormula(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFormula(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1AbsComposition> : std::false_type { };
  template<> struct DefaultConstructible<TF1AbsComposition> : std::false_type { };
template<> struct SuperType<TF1AbsComposition> { typedef TObject type; };
}

// Class generating the wrapper for type TF1AbsComposition
// signature to use in the veto file: TF1AbsComposition
struct JlTF1AbsComposition: public Wrapper {

  JlTF1AbsComposition(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1AbsComposition (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1AbsComposition.h:16:7
    jlcxx::TypeWrapper<TF1AbsComposition>  t = jlModule.add_type<TF1AbsComposition>("TF1AbsComposition",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1AbsComposition>>(new jlcxx::TypeWrapper<TF1AbsComposition>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for double TF1AbsComposition::operator()(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: double TF1AbsComposition::operator()(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1AbsComposition.h:21:19
    t.method("paren", [](TF1AbsComposition& a, const Double_t * arg0, const Double_t * arg1)->double { return a.operator()(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("p"));
    t.method("paren", [](TF1AbsComposition* a, const Double_t * arg0, const Double_t * arg1)->double { return a->operator()(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1AbsComposition.h:22:17
    t.method("SetRange", [](TF1AbsComposition& a, Double_t arg0, Double_t arg1)->void { a.SetRange(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("a"), jlcxx::arg("b"));
    t.method("SetRange", [](TF1AbsComposition* a, Double_t arg0, Double_t arg1)->void { a->SetRange(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("a"), jlcxx::arg("b"));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1AbsComposition.h:23:17
    t.method("SetParameters", [](TF1AbsComposition& a, const Double_t * arg0)->void { a.SetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));
    t.method("SetParameters", [](TF1AbsComposition* a, const Double_t * arg0)->void { a->SetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::Update()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1AbsComposition.h:24:17
    t.method("Update", [](TF1AbsComposition& a)->void { a.Update(); }, jlcxx::arg("this"));
    t.method("Update", [](TF1AbsComposition* a)->void { a->Update(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1AbsComposition.h:26:9
    t.method("Copy", [](TF1AbsComposition const& a, TObject & arg0)->void { a.Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("obj"));
    t.method("Copy", [](TF1AbsComposition const* a, TObject & arg0)->void { a->Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("obj"));

    DEBUG_MSG("Adding wrapper for Version_t TF1AbsComposition::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1AbsComposition::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TF1AbsComposition!Class_Version", []()->Version_t { return TF1AbsComposition::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1AbsComposition::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1AbsComposition::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TF1AbsComposition const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TF1AbsComposition const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TF1AbsComposition& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TF1AbsComposition* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TF1AbsComposition::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1AbsComposition::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TF1AbsComposition!DeclFileName", []() { return (std::string)TF1AbsComposition::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1AbsComposition::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1AbsComposition::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TF1AbsComposition!ImplFileLine", []()->int { return TF1AbsComposition::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF1AbsComposition::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1AbsComposition::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TF1AbsComposition!ImplFileName", []() { return (std::string)TF1AbsComposition::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1AbsComposition::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1AbsComposition::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TF1AbsComposition!Class_Name", []() { return (std::string)TF1AbsComposition::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1AbsComposition::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1AbsComposition::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TF1AbsComposition!Dictionary", []()->TClass * { return TF1AbsComposition::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1AbsComposition::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1AbsComposition::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TF1AbsComposition!Class", []()->TClass * { return TF1AbsComposition::Class(); });

    DEBUG_MSG("Adding wrapper for void TF1AbsComposition::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1AbsComposition::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TF1AbsComposition& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TF1AbsComposition* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TF1AbsComposition::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1AbsComposition::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TF1AbsComposition!DeclFileLine", []()->int { return TF1AbsComposition::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1AbsComposition>> type_;
};
std::shared_ptr<Wrapper> newJlTF1AbsComposition(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1AbsComposition(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1Parameters> : std::false_type { };
  template<> struct DefaultConstructible<TF1Parameters> : std::false_type { };
}

// Class generating the wrapper for type TF1Parameters
// signature to use in the veto file: TF1Parameters
struct JlTF1Parameters: public Wrapper {

  JlTF1Parameters(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1Parameters (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:53:7
    jlcxx::TypeWrapper<TF1Parameters>  t = jlModule.add_type<TF1Parameters>("TF1Parameters");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1Parameters>>(new jlcxx::TypeWrapper<TF1Parameters>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void TF1Parameters::TF1Parameters(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:56:4
    t.constructor<Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("npar")    );


    DEBUG_MSG("Adding wrapper for void TF1Parameters::TF1Parameters(const TF1Parameters &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:65:4
    t.constructor<const TF1Parameters &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("rhs")    );

    DEBUG_MSG("Adding wrapper for TF1Parameters & TF1Parameters::operator=(const TF1Parameters &) (" __HERE__ ")");
    // signature to use in the veto list: TF1Parameters & TF1Parameters::operator=(const TF1Parameters &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:70:19
    t.method("assign", [](TF1Parameters& a, const TF1Parameters & arg0)->TF1Parameters & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("rhs"));
    t.method("assign", [](TF1Parameters* a, const TF1Parameters & arg0)->TF1Parameters & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("rhs"));

    DEBUG_MSG("Adding wrapper for Double_t TF1Parameters::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Parameters::GetParameter(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:80:13
    t.method("GetParameter", [](TF1Parameters const& a, Int_t arg0)->Double_t { return a.GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("iparam"));
    t.method("GetParameter", [](TF1Parameters const* a, Int_t arg0)->Double_t { return a->GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("iparam"));

    DEBUG_MSG("Adding wrapper for Double_t TF1Parameters::GetParameter(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Parameters::GetParameter(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:84:13
    t.method("GetParameter", [](TF1Parameters const& a, const char * arg0)->Double_t { return a.GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("GetParameter", [](TF1Parameters const* a, const char * arg0)->Double_t { return a->GetParameter(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for const Double_t * TF1Parameters::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF1Parameters::GetParameters()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:88:20
    t.method("GetParameters", [](TF1Parameters const& a)->const Double_t * { return a.GetParameters(); }, jlcxx::arg("this"));
    t.method("GetParameters", [](TF1Parameters const* a)->const Double_t * { return a->GetParameters(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::vector<double> & TF1Parameters::ParamsVec() (" __HERE__ ")");
    // signature to use in the veto list: const std::vector<double> & TF1Parameters::ParamsVec()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:92:31
    t.method("ParamsVec", [](TF1Parameters const& a)->const std::vector<double> & { return a.ParamsVec(); }, jlcxx::arg("this"));
    t.method("ParamsVec", [](TF1Parameters const* a)->const std::vector<double> & { return a->ParamsVec(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Int_t TF1Parameters::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1Parameters::GetParNumber(const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:97:10
    t.method("GetParNumber", [](TF1Parameters const& a, const char * arg0)->Int_t { return a.GetParNumber(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("GetParNumber", [](TF1Parameters const* a, const char * arg0)->Int_t { return a->GetParNumber(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::GetParName(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:99:16
    t.method("GetParName", [](TF1Parameters const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); }, jlcxx::arg("this"), jlcxx::arg("iparam"));
    t.method("GetParName", [](TF1Parameters const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); }, jlcxx::arg("this"), jlcxx::arg("iparam"));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:106:11
    t.method("SetParameter", [](TF1Parameters& a, Int_t arg0, Double_t arg1)->void { a.SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("iparam"), jlcxx::arg("value"));
    t.method("SetParameter", [](TF1Parameters* a, Int_t arg0, Double_t arg1)->void { a->SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("iparam"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:111:10
    t.method("SetParameters", [](TF1Parameters& a, const Double_t * arg0)->void { a.SetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));
    t.method("SetParameters", [](TF1Parameters* a, const Double_t * arg0)->void { a->SetParameters(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameter(const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameter(const char *, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:118:11
    t.method("SetParameter", [](TF1Parameters& a, const char * arg0, Double_t arg1)->void { a.SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("SetParameter", [](TF1Parameters* a, const char * arg0, Double_t arg1)->void { a->SetParameter(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:122:11
    t.method("SetParName", [](TF1Parameters& a, Int_t arg0, const char * arg1)->void { a.SetParName(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("iparam"), jlcxx::arg("name"));
    t.method("SetParName", [](TF1Parameters* a, Int_t arg0, const char * arg1)->void { a->SetParName(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("iparam"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for Version_t TF1Parameters::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1Parameters::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TF1Parameters!Class_Version", []()->Version_t { return TF1Parameters::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TF1Parameters const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TF1Parameters const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TF1Parameters& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TF1Parameters* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TF1Parameters!DeclFileName", []() { return (std::string)TF1Parameters::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1Parameters::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Parameters::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TF1Parameters!ImplFileLine", []()->int { return TF1Parameters::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TF1Parameters!ImplFileName", []() { return (std::string)TF1Parameters::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TF1Parameters!Class_Name", []() { return (std::string)TF1Parameters::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TF1Parameters!Dictionary", []()->TClass * { return TF1Parameters::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TF1Parameters!Class", []()->TClass * { return TF1Parameters::Class(); });

    DEBUG_MSG("Adding wrapper for void TF1Parameters::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TF1Parameters& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TF1Parameters* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TF1Parameters::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Parameters::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:339:43
    module_.method("TF1Parameters!DeclFileLine", []()->int { return TF1Parameters::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1Parameters>> type_;
};
std::shared_ptr<Wrapper> newJlTF1Parameters(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1Parameters(module));
}
