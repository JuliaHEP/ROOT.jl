// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternFinder> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternFinder> : std::false_type { };
template<> struct SuperType<TGeoPatternFinder> { typedef TObject type; };
}

// Class generating the wrapper for type TGeoPatternFinder
// signature to use in the veto file: TGeoPatternFinder
struct JlTGeoPatternFinder: public Wrapper {

  JlTGeoPatternFinder(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternFinder (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:31:7
    jlcxx::TypeWrapper<TGeoPatternFinder>  t = jlModule.add_type<TGeoPatternFinder>("TGeoPatternFinder",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternFinder>>(new jlcxx::TypeWrapper<TGeoPatternFinder>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder::ThreadData_t & TGeoPatternFinder::GetThreadData() (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t & TGeoPatternFinder::GetThreadData()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:45:18
    t.method("GetThreadData", static_cast<TGeoPatternFinder::ThreadData_t & (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetThreadData));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::ClearThreadData() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::ClearThreadData()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:46:9
    t.method("ClearThreadData", static_cast<void (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::ClearThreadData));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::CreateThreadData(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::CreateThreadData(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:47:9
    t.method("CreateThreadData", static_cast<void (TGeoPatternFinder::*)(Int_t) >(&TGeoPatternFinder::CreateThreadData));


    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternFinder::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternFinder::CreateMatrix()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:73:24
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::cd(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:74:17
    t.method("cd", static_cast<void (TGeoPatternFinder::*)(Int_t) >(&TGeoPatternFinder::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternFinder::CdNext() (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternFinder::CdNext()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:75:22
    t.method("CdNext", static_cast<TGeoNode * (TGeoPatternFinder::*)() >(&TGeoPatternFinder::CdNext));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternFinder::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternFinder::FindNode(Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:76:22
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternFinder::*)(Double_t *, const Double_t *) >(&TGeoPatternFinder::FindNode));
    t.method("FindNode", [](TGeoPatternFinder& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternFinder* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternFinder::GetByteCount() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternFinder::GetByteCount()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:77:18
    t.method("GetByteCount", static_cast<Int_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetByteCount));

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternFinder::GetCurrent() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternFinder::GetCurrent()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:78:10
    t.method("GetCurrent", static_cast<Int_t (TGeoPatternFinder::*)() >(&TGeoPatternFinder::GetCurrent));

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternFinder::GetDivIndex() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternFinder::GetDivIndex()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:79:10
    t.method("GetDivIndex", static_cast<Int_t (TGeoPatternFinder::*)() >(&TGeoPatternFinder::GetDivIndex));

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternFinder::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternFinder::GetDivAxis()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:80:18
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternFinder::*)() >(&TGeoPatternFinder::GetDivAxis));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternFinder::GetMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternFinder::GetMatrix()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:81:24
    t.method("GetMatrix", static_cast<TGeoMatrix * (TGeoPatternFinder::*)() >(&TGeoPatternFinder::GetMatrix));

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternFinder::GetNdiv() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternFinder::GetNdiv()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:82:10
    t.method("GetNdiv", static_cast<Int_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetNdiv));

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternFinder::GetNext() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternFinder::GetNext()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:83:10
    t.method("GetNext", static_cast<Int_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetNext));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternFinder::GetNodeOffset(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternFinder::GetNodeOffset(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:84:14
    t.method("GetNodeOffset", static_cast<TGeoNode * (TGeoPatternFinder::*)(Int_t) >(&TGeoPatternFinder::GetNodeOffset));

    DEBUG_MSG("Adding wrapper for Double_t TGeoPatternFinder::GetStart() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoPatternFinder::GetStart()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:85:13
    t.method("GetStart", static_cast<Double_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetStart));

    DEBUG_MSG("Adding wrapper for Double_t TGeoPatternFinder::GetStep() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoPatternFinder::GetStep()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:86:13
    t.method("GetStep", static_cast<Double_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetStep));

    DEBUG_MSG("Adding wrapper for Double_t TGeoPatternFinder::GetEnd() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoPatternFinder::GetEnd()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:87:13
    t.method("GetEnd", static_cast<Double_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetEnd));

    DEBUG_MSG("Adding wrapper for TGeoVolume * TGeoPatternFinder::GetVolume() (" __HERE__ ")");
    // signature to use in the veto list: TGeoVolume * TGeoPatternFinder::GetVolume()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:88:16
    t.method("GetVolume", static_cast<TGeoVolume * (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::GetVolume));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternFinder::IsOnBoundary(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternFinder::IsOnBoundary(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:89:19
    t.method("IsOnBoundary", static_cast<Bool_t (TGeoPatternFinder::*)(const Double_t *)  const>(&TGeoPatternFinder::IsOnBoundary));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternFinder::IsReflected() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternFinder::IsReflected()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:90:11
    t.method("IsReflected", static_cast<Bool_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::IsReflected));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternFinder::IsSpacedOut() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternFinder::IsSpacedOut()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:91:11
    t.method("IsSpacedOut", static_cast<Bool_t (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::IsSpacedOut));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternFinder::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternFinder::MakeCopy(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:92:31
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternFinder::*)(Bool_t) >(&TGeoPatternFinder::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternFinder& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternFinder* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::Reflect(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::Reflect(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:93:9
    t.method("Reflect", static_cast<void (TGeoPatternFinder::*)(Bool_t) >(&TGeoPatternFinder::Reflect));
    t.method("Reflect", [](TGeoPatternFinder& a)->void { a.Reflect(); });
    t.method("Reflect", [](TGeoPatternFinder* a)->void { a->Reflect(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::SetDivIndex(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::SetDivIndex(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:94:9
    t.method("SetDivIndex", static_cast<void (TGeoPatternFinder::*)(Int_t) >(&TGeoPatternFinder::SetDivIndex));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::SetNext(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::SetNext(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:95:9
    t.method("SetNext", static_cast<void (TGeoPatternFinder::*)(Int_t) >(&TGeoPatternFinder::SetNext));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::SetRange(Double_t, Double_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::SetRange(Double_t, Double_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:96:9
    t.method("SetRange", static_cast<void (TGeoPatternFinder::*)(Double_t, Double_t, Int_t) >(&TGeoPatternFinder::SetRange));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::SetSpacedOut(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::SetSpacedOut(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:97:9
    t.method("SetSpacedOut", static_cast<void (TGeoPatternFinder::*)(Bool_t) >(&TGeoPatternFinder::SetSpacedOut));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::SetVolume(TGeoVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::SetVolume(TGeoVolume *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:98:9
    t.method("SetVolume", static_cast<void (TGeoPatternFinder::*)(TGeoVolume *) >(&TGeoPatternFinder::SetVolume));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:99:17
    t.method("UpdateMatrix", static_cast<void (TGeoPatternFinder::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternFinder::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternFinder::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternFinder::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternFinder::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternFinder::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternFinder::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    t.method("IsA", static_cast<TClass * (TGeoPatternFinder::*)()  const>(&TGeoPatternFinder::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternFinder::*)(TBuffer &) >(&TGeoPatternFinder::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternFinder::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternFinder::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!DeclFileName", []() { return (std::string)TGeoPatternFinder::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternFinder::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternFinder::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!ImplFileLine", static_cast<int (*)() >(&TGeoPatternFinder::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternFinder::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternFinder::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!ImplFileName", []() { return (std::string)TGeoPatternFinder::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternFinder::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternFinder::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!Class_Name", []() { return (std::string)TGeoPatternFinder::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternFinder::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternFinder::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternFinder::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternFinder::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternFinder::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!Class", static_cast<TClass * (*)() >(&TGeoPatternFinder::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternFinder::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternFinder::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    t.method("Streamer", static_cast<void (TGeoPatternFinder::*)(TBuffer &) >(&TGeoPatternFinder::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternFinder::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternFinder::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:101:4
    module_.method("TGeoPatternFinder!DeclFileLine", static_cast<int (*)() >(&TGeoPatternFinder::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternFinder>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternFinder(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternFinder(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoVoxelFinder> : std::false_type { };
  template<> struct DefaultConstructible<TGeoVoxelFinder> : std::false_type { };
template<> struct SuperType<TGeoVoxelFinder> { typedef TObject type; };
}

// Class generating the wrapper for type TGeoVoxelFinder
// signature to use in the veto file: TGeoVoxelFinder
struct JlTGeoVoxelFinder: public Wrapper {

  JlTGeoVoxelFinder(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoVoxelFinder (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:20:7
    jlcxx::TypeWrapper<TGeoVoxelFinder>  t = jlModule.add_type<TGeoVoxelFinder>("TGeoVoxelFinder",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoVoxelFinder>>(new jlcxx::TypeWrapper<TGeoVoxelFinder>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::TGeoVoxelFinder(TGeoVolume *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:92:4
    t.constructor<TGeoVolume *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::DaughterToMother(Int_t, const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::DaughterToMother(Int_t, const Double_t *, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:94:9
    t.method("DaughterToMother", static_cast<void (TGeoVoxelFinder::*)(Int_t, const Double_t *, Double_t *)  const>(&TGeoVoxelFinder::DaughterToMother));

    DEBUG_MSG("Adding wrapper for Double_t TGeoVoxelFinder::Efficiency() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoVoxelFinder::Efficiency()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:95:21
    t.method("Efficiency", static_cast<Double_t (TGeoVoxelFinder::*)() >(&TGeoVoxelFinder::Efficiency));

    DEBUG_MSG("Adding wrapper for Int_t * TGeoVoxelFinder::GetCheckList(const Double_t *, Int_t &, TGeoStateInfo &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TGeoVoxelFinder::GetCheckList(const Double_t *, Int_t &, TGeoStateInfo &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:96:19
    t.method("GetCheckList", static_cast<Int_t * (TGeoVoxelFinder::*)(const Double_t *, Int_t &, TGeoStateInfo &) >(&TGeoVoxelFinder::GetCheckList));

    DEBUG_MSG("Adding wrapper for Int_t * TGeoVoxelFinder::GetCheckList(Int_t &, TGeoStateInfo &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TGeoVoxelFinder::GetCheckList(Int_t &, TGeoStateInfo &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:97:11
    t.method("GetCheckList", static_cast<Int_t * (TGeoVoxelFinder::*)(Int_t &, TGeoStateInfo &)  const>(&TGeoVoxelFinder::GetCheckList));

    DEBUG_MSG("Adding wrapper for Int_t * TGeoVoxelFinder::GetNextCandidates(const Double_t *, Int_t &, TGeoStateInfo &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TGeoVoxelFinder::GetNextCandidates(const Double_t *, Int_t &, TGeoStateInfo &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:98:19
    t.method("GetNextCandidates", static_cast<Int_t * (TGeoVoxelFinder::*)(const Double_t *, Int_t &, TGeoStateInfo &) >(&TGeoVoxelFinder::GetNextCandidates));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::FindOverlaps(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::FindOverlaps(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:99:17
    t.method("FindOverlaps", static_cast<void (TGeoVoxelFinder::*)(Int_t)  const>(&TGeoVoxelFinder::FindOverlaps));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoVoxelFinder::IsInvalid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoVoxelFinder::IsInvalid()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:100:11
    t.method("IsInvalid", static_cast<Bool_t (TGeoVoxelFinder::*)()  const>(&TGeoVoxelFinder::IsInvalid));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoVoxelFinder::NeedRebuild() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoVoxelFinder::NeedRebuild()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:101:11
    t.method("NeedRebuild", static_cast<Bool_t (TGeoVoxelFinder::*)()  const>(&TGeoVoxelFinder::NeedRebuild));

    DEBUG_MSG("Adding wrapper for Double_t * TGeoVoxelFinder::GetBoxes() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGeoVoxelFinder::GetBoxes()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:102:14
    t.method("GetBoxes", static_cast<Double_t * (TGeoVoxelFinder::*)()  const>(&TGeoVoxelFinder::GetBoxes));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoVoxelFinder::IsSafeVoxel(const Double_t *, Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoVoxelFinder::IsSafeVoxel(const Double_t *, Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:103:11
    t.method("IsSafeVoxel", static_cast<Bool_t (TGeoVoxelFinder::*)(const Double_t *, Int_t, Double_t)  const>(&TGeoVoxelFinder::IsSafeVoxel));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:104:9
    t.method("Print", static_cast<void (TGeoVoxelFinder::*)(Option_t *)  const>(&TGeoVoxelFinder::Print));
    t.method("Print", [](TGeoVoxelFinder const& a)->void { a.Print(); });
    t.method("Print", [](TGeoVoxelFinder const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::PrintVoxelLimits(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::PrintVoxelLimits(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:105:9
    t.method("PrintVoxelLimits", static_cast<void (TGeoVoxelFinder::*)(const Double_t *)  const>(&TGeoVoxelFinder::PrintVoxelLimits));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::SetInvalid(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::SetInvalid(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:106:9
    t.method("SetInvalid", static_cast<void (TGeoVoxelFinder::*)(Bool_t) >(&TGeoVoxelFinder::SetInvalid));
    t.method("SetInvalid", [](TGeoVoxelFinder& a)->void { a.SetInvalid(); });
    t.method("SetInvalid", [](TGeoVoxelFinder* a)->void { a->SetInvalid(); });

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::SetNeedRebuild(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::SetNeedRebuild(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:107:9
    t.method("SetNeedRebuild", static_cast<void (TGeoVoxelFinder::*)(Bool_t) >(&TGeoVoxelFinder::SetNeedRebuild));
    t.method("SetNeedRebuild", [](TGeoVoxelFinder& a)->void { a.SetNeedRebuild(); });
    t.method("SetNeedRebuild", [](TGeoVoxelFinder* a)->void { a->SetNeedRebuild(); });

    DEBUG_MSG("Adding wrapper for Int_t * TGeoVoxelFinder::GetNextVoxel(const Double_t *, const Double_t *, Int_t &, TGeoStateInfo &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TGeoVoxelFinder::GetNextVoxel(const Double_t *, const Double_t *, Int_t &, TGeoStateInfo &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:108:19
    t.method("GetNextVoxel", static_cast<Int_t * (TGeoVoxelFinder::*)(const Double_t *, const Double_t *, Int_t &, TGeoStateInfo &) >(&TGeoVoxelFinder::GetNextVoxel));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::SortCrossedVoxels(const Double_t *, const Double_t *, TGeoStateInfo &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::SortCrossedVoxels(const Double_t *, const Double_t *, TGeoStateInfo &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:109:17
    t.method("SortCrossedVoxels", static_cast<void (TGeoVoxelFinder::*)(const Double_t *, const Double_t *, TGeoStateInfo &) >(&TGeoVoxelFinder::SortCrossedVoxels));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::Voxelize(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::Voxelize(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:110:17
    t.method("Voxelize", static_cast<void (TGeoVoxelFinder::*)(Option_t *) >(&TGeoVoxelFinder::Voxelize));
    t.method("Voxelize", [](TGeoVoxelFinder& a)->void { a.Voxelize(); });
    t.method("Voxelize", [](TGeoVoxelFinder* a)->void { a->Voxelize(); });

    DEBUG_MSG("Adding wrapper for Version_t TGeoVoxelFinder::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoVoxelFinder::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!Class_Version", static_cast<Version_t (*)() >(&TGeoVoxelFinder::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoVoxelFinder::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoVoxelFinder::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    t.method("IsA", static_cast<TClass * (TGeoVoxelFinder::*)()  const>(&TGeoVoxelFinder::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    t.method("StreamerNVirtual", static_cast<void (TGeoVoxelFinder::*)(TBuffer &) >(&TGeoVoxelFinder::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoVoxelFinder::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoVoxelFinder::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!DeclFileName", []() { return (std::string)TGeoVoxelFinder::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoVoxelFinder::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoVoxelFinder::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!ImplFileLine", static_cast<int (*)() >(&TGeoVoxelFinder::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoVoxelFinder::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoVoxelFinder::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!ImplFileName", []() { return (std::string)TGeoVoxelFinder::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoVoxelFinder::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoVoxelFinder::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!Class_Name", []() { return (std::string)TGeoVoxelFinder::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoVoxelFinder::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoVoxelFinder::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!Dictionary", static_cast<TClass * (*)() >(&TGeoVoxelFinder::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoVoxelFinder::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoVoxelFinder::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!Class", static_cast<TClass * (*)() >(&TGeoVoxelFinder::Class));

    DEBUG_MSG("Adding wrapper for void TGeoVoxelFinder::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoVoxelFinder::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    t.method("Streamer", static_cast<void (TGeoVoxelFinder::*)(TBuffer &) >(&TGeoVoxelFinder::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoVoxelFinder::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoVoxelFinder::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoVoxelFinder.h:112:4
    module_.method("TGeoVoxelFinder!DeclFileLine", static_cast<int (*)() >(&TGeoVoxelFinder::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoVoxelFinder>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoVoxelFinder(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoVoxelFinder(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoVolumeAssembly::ThreadData_t> : std::false_type { };
  template<> struct DefaultConstructible<TGeoVolumeAssembly::ThreadData_t> : std::false_type { };
}

// Class generating the wrapper for type TGeoVolumeAssembly::ThreadData_t
// signature to use in the veto file: TGeoVolumeAssembly::ThreadData_t
struct JlTGeoVolumeAssembly_ThreadData_t: public Wrapper {

  JlTGeoVolumeAssembly_ThreadData_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoVolumeAssembly::ThreadData_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoVolume.h:318:11
    jlcxx::TypeWrapper<TGeoVolumeAssembly::ThreadData_t>  t = jlModule.add_type<TGeoVolumeAssembly::ThreadData_t>("TGeoVolumeAssembly!ThreadData_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoVolumeAssembly::ThreadData_t>>(new jlcxx::TypeWrapper<TGeoVolumeAssembly::ThreadData_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding fCurrent methods  to provide read access to the field fCurrent (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoVolume.h:319:13
    // signature to use in the veto list: TGeoVolumeAssembly::ThreadData_t::fCurrent
    t.method("fCurrent", [](const TGeoVolumeAssembly::ThreadData_t& a) -> Int_t { return a.fCurrent; });
    t.method("fCurrent", [](TGeoVolumeAssembly::ThreadData_t& a) -> Int_t { return a.fCurrent; });
    t.method("fCurrent", [](const TGeoVolumeAssembly::ThreadData_t* a) -> Int_t { return a->fCurrent; });
    t.method("fCurrent", [](TGeoVolumeAssembly::ThreadData_t* a) -> Int_t { return a->fCurrent; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoVolume.h:319:13
    // signature to use in the veto list: TGeoVolumeAssembly::ThreadData_t::fCurrent
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCurrent! methods to provide write access to the field fCurrent (" __HERE__ ")");
    t.method("fCurrent!", [](TGeoVolumeAssembly::ThreadData_t& a, Int_t val) -> Int_t { return a.fCurrent = val; });

    DEBUG_MSG("Adding fCurrent! methods to provide write access to the field fCurrent (" __HERE__ ")");
    t.method("fCurrent!", [](TGeoVolumeAssembly::ThreadData_t* a, Int_t val) -> Int_t { return a->fCurrent = val; });

    DEBUG_MSG("Adding fNext methods  to provide read access to the field fNext (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoVolume.h:320:13
    // signature to use in the veto list: TGeoVolumeAssembly::ThreadData_t::fNext
    t.method("fNext", [](const TGeoVolumeAssembly::ThreadData_t& a) -> Int_t { return a.fNext; });
    t.method("fNext", [](TGeoVolumeAssembly::ThreadData_t& a) -> Int_t { return a.fNext; });
    t.method("fNext", [](const TGeoVolumeAssembly::ThreadData_t* a) -> Int_t { return a->fNext; });
    t.method("fNext", [](TGeoVolumeAssembly::ThreadData_t* a) -> Int_t { return a->fNext; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoVolume.h:320:13
    // signature to use in the veto list: TGeoVolumeAssembly::ThreadData_t::fNext
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fNext! methods to provide write access to the field fNext (" __HERE__ ")");
    t.method("fNext!", [](TGeoVolumeAssembly::ThreadData_t& a, Int_t val) -> Int_t { return a.fNext = val; });

    DEBUG_MSG("Adding fNext! methods to provide write access to the field fNext (" __HERE__ ")");
    t.method("fNext!", [](TGeoVolumeAssembly::ThreadData_t* a, Int_t val) -> Int_t { return a->fNext = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoVolumeAssembly::ThreadData_t>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoVolumeAssembly_ThreadData_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoVolumeAssembly_ThreadData_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternFinder::ThreadData_t> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternFinder::ThreadData_t> : std::false_type { };
}

// Class generating the wrapper for type TGeoPatternFinder::ThreadData_t
// signature to use in the veto file: TGeoPatternFinder::ThreadData_t
struct JlTGeoPatternFinder_ThreadData_t: public Wrapper {

  JlTGeoPatternFinder_ThreadData_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternFinder::ThreadData_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:33:11
    jlcxx::TypeWrapper<TGeoPatternFinder::ThreadData_t>  t = jlModule.add_type<TGeoPatternFinder::ThreadData_t>("TGeoPatternFinder!ThreadData_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternFinder::ThreadData_t>>(new jlcxx::TypeWrapper<TGeoPatternFinder::ThreadData_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding fMatrix methods  to provide read access to the field fMatrix (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:34:19
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t::fMatrix
    t.method("fMatrix", [](const TGeoPatternFinder::ThreadData_t& a) -> TGeoMatrix * { return a.fMatrix; });
    t.method("fMatrix", [](TGeoPatternFinder::ThreadData_t& a) -> TGeoMatrix * { return a.fMatrix; });
    t.method("fMatrix", [](const TGeoPatternFinder::ThreadData_t* a) -> TGeoMatrix * { return a->fMatrix; });
    t.method("fMatrix", [](TGeoPatternFinder::ThreadData_t* a) -> TGeoMatrix * { return a->fMatrix; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:34:19
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t::fMatrix
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fMatrix! methods to provide write access to the field fMatrix (" __HERE__ ")");
    t.method("fMatrix!", [](TGeoPatternFinder::ThreadData_t& a, TGeoMatrix * val) -> TGeoMatrix * { return a.fMatrix = val; });

    DEBUG_MSG("Adding fMatrix! methods to provide write access to the field fMatrix (" __HERE__ ")");
    t.method("fMatrix!", [](TGeoPatternFinder::ThreadData_t* a, TGeoMatrix * val) -> TGeoMatrix * { return a->fMatrix = val; });

    DEBUG_MSG("Adding fCurrent methods  to provide read access to the field fCurrent (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:35:13
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t::fCurrent
    t.method("fCurrent", [](const TGeoPatternFinder::ThreadData_t& a) -> Int_t { return a.fCurrent; });
    t.method("fCurrent", [](TGeoPatternFinder::ThreadData_t& a) -> Int_t { return a.fCurrent; });
    t.method("fCurrent", [](const TGeoPatternFinder::ThreadData_t* a) -> Int_t { return a->fCurrent; });
    t.method("fCurrent", [](TGeoPatternFinder::ThreadData_t* a) -> Int_t { return a->fCurrent; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:35:13
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t::fCurrent
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCurrent! methods to provide write access to the field fCurrent (" __HERE__ ")");
    t.method("fCurrent!", [](TGeoPatternFinder::ThreadData_t& a, Int_t val) -> Int_t { return a.fCurrent = val; });

    DEBUG_MSG("Adding fCurrent! methods to provide write access to the field fCurrent (" __HERE__ ")");
    t.method("fCurrent!", [](TGeoPatternFinder::ThreadData_t* a, Int_t val) -> Int_t { return a->fCurrent = val; });

    DEBUG_MSG("Adding fNextIndex methods  to provide read access to the field fNextIndex (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:36:13
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t::fNextIndex
    t.method("fNextIndex", [](const TGeoPatternFinder::ThreadData_t& a) -> Int_t { return a.fNextIndex; });
    t.method("fNextIndex", [](TGeoPatternFinder::ThreadData_t& a) -> Int_t { return a.fNextIndex; });
    t.method("fNextIndex", [](const TGeoPatternFinder::ThreadData_t* a) -> Int_t { return a->fNextIndex; });
    t.method("fNextIndex", [](TGeoPatternFinder::ThreadData_t* a) -> Int_t { return a->fNextIndex; });
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:36:13
    // signature to use in the veto list: TGeoPatternFinder::ThreadData_t::fNextIndex
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fNextIndex! methods to provide write access to the field fNextIndex (" __HERE__ ")");
    t.method("fNextIndex!", [](TGeoPatternFinder::ThreadData_t& a, Int_t val) -> Int_t { return a.fNextIndex = val; });

    DEBUG_MSG("Adding fNextIndex! methods to provide write access to the field fNextIndex (" __HERE__ ")");
    t.method("fNextIndex!", [](TGeoPatternFinder::ThreadData_t* a, Int_t val) -> Int_t { return a->fNextIndex = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternFinder::ThreadData_t>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternFinder_ThreadData_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternFinder_ThreadData_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoPatternX> : std::false_type { };
  template<> struct DefaultConstructible<TGeoPatternX> : std::false_type { };
template<> struct SuperType<TGeoPatternX> { typedef TGeoPatternFinder type; };
}

// Class generating the wrapper for type TGeoPatternX
// signature to use in the veto file: TGeoPatternX
struct JlTGeoPatternX: public Wrapper {

  JlTGeoPatternX(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoPatternX (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:112:7
    jlcxx::TypeWrapper<TGeoPatternX>  t = jlModule.add_type<TGeoPatternX>("TGeoPatternX",
      jlcxx::julia_base_type<TGeoPatternFinder>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternX>>(new jlcxx::TypeWrapper<TGeoPatternX>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternX::TGeoPatternX(TGeoVolume *, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:116:4
    t.constructor<TGeoVolume *, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternX::TGeoPatternX(TGeoVolume *, Int_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:117:4
    t.constructor<TGeoVolume *, Int_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternX::TGeoPatternX(TGeoVolume *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:118:4
    t.constructor<TGeoVolume *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoPatternX::TGeoPatternX(const TGeoPatternX &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:119:4
    t.constructor<const TGeoPatternX &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoPatternX & TGeoPatternX::operator=(const TGeoPatternX &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternX & TGeoPatternX::operator=(const TGeoPatternX &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:120:18
    t.method("assign", static_cast<TGeoPatternX & (TGeoPatternX::*)(const TGeoPatternX &) >(&TGeoPatternX::operator=));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoPatternX::CreateMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoPatternX::CreateMatrix()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:125:16
    t.method("CreateMatrix", static_cast<TGeoMatrix * (TGeoPatternX::*)()  const>(&TGeoPatternX::CreateMatrix));

    DEBUG_MSG("Adding wrapper for void TGeoPatternX::cd(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternX::cd(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:126:9
    t.method("cd", static_cast<void (TGeoPatternX::*)(Int_t) >(&TGeoPatternX::cd));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoPatternX::FindNode(Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoPatternX::FindNode(Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:127:14
    t.method("FindNode", static_cast<TGeoNode * (TGeoPatternX::*)(Double_t *, const Double_t *) >(&TGeoPatternX::FindNode));
    t.method("FindNode", [](TGeoPatternX& a, Double_t * arg0)->TGeoNode * { return a.FindNode(arg0); });
    t.method("FindNode", [](TGeoPatternX* a, Double_t * arg0)->TGeoNode * { return a->FindNode(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TGeoPatternX::FindNextBoundary(Double_t *, Double_t *, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoPatternX::FindNextBoundary(Double_t *, Double_t *, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:128:21
    t.method("FindNextBoundary", static_cast<Double_t (TGeoPatternX::*)(Double_t *, Double_t *, Int_t &) >(&TGeoPatternX::FindNextBoundary));

    DEBUG_MSG("Adding wrapper for Int_t TGeoPatternX::GetDivAxis() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoPatternX::GetDivAxis()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:129:10
    t.method("GetDivAxis", static_cast<Int_t (TGeoPatternX::*)() >(&TGeoPatternX::GetDivAxis));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoPatternX::IsOnBoundary(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoPatternX::IsOnBoundary(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:130:11
    t.method("IsOnBoundary", static_cast<Bool_t (TGeoPatternX::*)(const Double_t *)  const>(&TGeoPatternX::IsOnBoundary));

    DEBUG_MSG("Adding wrapper for TGeoPatternFinder * TGeoPatternX::MakeCopy(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoPatternFinder * TGeoPatternX::MakeCopy(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:132:23
    t.method("MakeCopy", static_cast<TGeoPatternFinder * (TGeoPatternX::*)(Bool_t) >(&TGeoPatternX::MakeCopy));
    t.method("MakeCopy", [](TGeoPatternX& a)->TGeoPatternFinder * { return a.MakeCopy(); });
    t.method("MakeCopy", [](TGeoPatternX* a)->TGeoPatternFinder * { return a->MakeCopy(); });

    DEBUG_MSG("Adding wrapper for void TGeoPatternX::UpdateMatrix(Int_t, TGeoHMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternX::UpdateMatrix(Int_t, TGeoHMatrix &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:134:9
    t.method("UpdateMatrix", static_cast<void (TGeoPatternX::*)(Int_t, TGeoHMatrix &)  const>(&TGeoPatternX::UpdateMatrix));

    DEBUG_MSG("Adding wrapper for Version_t TGeoPatternX::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoPatternX::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!Class_Version", static_cast<Version_t (*)() >(&TGeoPatternX::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternX::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternX::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    t.method("IsA", static_cast<TClass * (TGeoPatternX::*)()  const>(&TGeoPatternX::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoPatternX::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternX::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    t.method("StreamerNVirtual", static_cast<void (TGeoPatternX::*)(TBuffer &) >(&TGeoPatternX::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternX::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternX::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!DeclFileName", []() { return (std::string)TGeoPatternX::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoPatternX::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternX::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!ImplFileLine", static_cast<int (*)() >(&TGeoPatternX::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternX::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternX::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!ImplFileName", []() { return (std::string)TGeoPatternX::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoPatternX::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoPatternX::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!Class_Name", []() { return (std::string)TGeoPatternX::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternX::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternX::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!Dictionary", static_cast<TClass * (*)() >(&TGeoPatternX::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoPatternX::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoPatternX::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!Class", static_cast<TClass * (*)() >(&TGeoPatternX::Class));

    DEBUG_MSG("Adding wrapper for void TGeoPatternX::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoPatternX::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    t.method("Streamer", static_cast<void (TGeoPatternX::*)(TBuffer &) >(&TGeoPatternX::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoPatternX::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoPatternX::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGeoPatternFinder.h:136:4
    module_.method("TGeoPatternX!DeclFileLine", static_cast<int (*)() >(&TGeoPatternX::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoPatternX>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoPatternX(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoPatternX(module));
}
