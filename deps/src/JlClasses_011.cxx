// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TLeaf> : std::false_type { };
  template<> struct DefaultConstructible<TLeaf> : std::false_type { };
template<> struct SuperType<TLeaf> { typedef TNamed type; };
}

// Class generating the wrapper for type TLeaf
// signature to use in the veto file: TLeaf
struct JlTLeaf: public Wrapper {

  JlTLeaf(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TLeaf (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:57:7
    jlcxx::TypeWrapper<TLeaf>  t = jlModule.add_type<TLeaf>("TLeaf",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TLeaf>>(new jlcxx::TypeWrapper<TLeaf>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TLeaf::TLeaf(TBranch *, const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:108:4
    t.constructor<TBranch *, const char *, const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TLeaf::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::Browse(TBrowser *)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:111:21
    t.method("Browse", static_cast<void (TLeaf::*)(TBrowser *) >(&TLeaf::Browse));

    DEBUG_MSG("Adding wrapper for Bool_t TLeaf::CanGenerateOffsetArray() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TLeaf::CanGenerateOffsetArray()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:112:21
    t.method("CanGenerateOffsetArray", static_cast<Bool_t (TLeaf::*)() >(&TLeaf::CanGenerateOffsetArray));

    DEBUG_MSG("Adding wrapper for void TLeaf::Export(TClonesArray *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::Export(TClonesArray *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:113:21
    t.method("Export", static_cast<void (TLeaf::*)(TClonesArray *, Int_t) >(&TLeaf::Export));

    DEBUG_MSG("Adding wrapper for void TLeaf::FillBasket(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::FillBasket(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:114:21
    t.method("FillBasket", static_cast<void (TLeaf::*)(TBuffer &) >(&TLeaf::FillBasket));

    DEBUG_MSG("Adding wrapper for Int_t * TLeaf::GenerateOffsetArray(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t * TLeaf::GenerateOffsetArray(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:115:21
    t.method("GenerateOffsetArray", static_cast<Int_t * (TLeaf::*)(Int_t, Int_t) >(&TLeaf::GenerateOffsetArray));

    DEBUG_MSG("Adding wrapper for TBranch * TLeaf::GetBranch() (" __HERE__ ")");
    // signature to use in the veto list: TBranch * TLeaf::GetBranch()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:116:21
    t.method("GetBranch", static_cast<TBranch * (TLeaf::*)()  const>(&TLeaf::GetBranch));

    DEBUG_MSG("Adding wrapper for TLeaf::DeserializeType TLeaf::GetDeserializeType() (" __HERE__ ")");
    // signature to use in the veto list: TLeaf::DeserializeType TLeaf::GetDeserializeType()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:117:28
    t.method("GetDeserializeType", static_cast<TLeaf::DeserializeType (TLeaf::*)()  const>(&TLeaf::GetDeserializeType));

    DEBUG_MSG("Adding wrapper for TString TLeaf::GetFullName() (" __HERE__ ")");
    // signature to use in the veto list: TString TLeaf::GetFullName()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:118:21
    t.method("GetFullName", static_cast<TString (TLeaf::*)()  const>(&TLeaf::GetFullName));

    DEBUG_MSG("Adding wrapper for TLeaf * TLeaf::GetLeafCount() (" __HERE__ ")");
    // signature to use in the veto list: TLeaf * TLeaf::GetLeafCount()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:121:21
    t.method("GetLeafCount", static_cast<TLeaf * (TLeaf::*)()  const>(&TLeaf::GetLeafCount));

    DEBUG_MSG("Adding wrapper for TLeaf * TLeaf::GetLeafCounter(Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: TLeaf * TLeaf::GetLeafCounter(Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:122:21
    t.method("GetLeafCounter", static_cast<TLeaf * (TLeaf::*)(Int_t &)  const>(&TLeaf::GetLeafCounter));


    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetLen() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetLen()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:126:21
    t.method("GetLen", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetLen));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetLenStatic() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetLenStatic()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:132:21
    t.method("GetLenStatic", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetLenStatic));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetLenType() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetLenType()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:133:21
    t.method("GetLenType", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetLenType));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetMaximum() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetMaximum()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:134:21
    t.method("GetMaximum", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetMaximum));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetMinimum() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetMinimum()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:135:21
    t.method("GetMinimum", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetMinimum));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetNdata() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetNdata()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:136:21
    t.method("GetNdata", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetNdata));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::GetOffset() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::GetOffset()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:137:21
    t.method("GetOffset", static_cast<Int_t (TLeaf::*)()  const>(&TLeaf::GetOffset));

    DEBUG_MSG("Adding wrapper for void * TLeaf::GetValuePointer() (" __HERE__ ")");
    // signature to use in the veto list: void * TLeaf::GetValuePointer()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:138:21
    t.method("GetValuePointer", static_cast<void * (TLeaf::*)()  const>(&TLeaf::GetValuePointer));

    DEBUG_MSG("Adding wrapper for const char * TLeaf::GetTypeName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLeaf::GetTypeName()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:139:24
    t.method("GetTypeName", [](TLeaf const& a) { return (std::string)a.GetTypeName(); });
    t.method("GetTypeName", [](TLeaf const* a) { return (std::string)a->GetTypeName(); });

    DEBUG_MSG("Adding wrapper for Double_t TLeaf::GetValue(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TLeaf::GetValue(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:141:21
    t.method("GetValue", static_cast<Double_t (TLeaf::*)(Int_t)  const>(&TLeaf::GetValue));
    t.method("GetValue", [](TLeaf const& a)->Double_t { return a.GetValue(); });
    t.method("GetValue", [](TLeaf const* a)->Double_t { return a->GetValue(); });

    DEBUG_MSG("Adding wrapper for Long64_t TLeaf::GetValueLong64(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TLeaf::GetValueLong64(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:142:21
    t.method("GetValueLong64", static_cast<Long64_t (TLeaf::*)(Int_t)  const>(&TLeaf::GetValueLong64));
    t.method("GetValueLong64", [](TLeaf const& a)->Long64_t { return a.GetValueLong64(); });
    t.method("GetValueLong64", [](TLeaf const* a)->Long64_t { return a->GetValueLong64(); });

    DEBUG_MSG("Adding wrapper for Bool_t TLeaf::IncludeRange(TLeaf *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TLeaf::IncludeRange(TLeaf *)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:146:21
    t.method("IncludeRange", static_cast<Bool_t (TLeaf::*)(TLeaf *) >(&TLeaf::IncludeRange));

    DEBUG_MSG("Adding wrapper for void TLeaf::Import(TClonesArray *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::Import(TClonesArray *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:147:21
    t.method("Import", static_cast<void (TLeaf::*)(TClonesArray *, Int_t) >(&TLeaf::Import));

    DEBUG_MSG("Adding wrapper for Bool_t TLeaf::IsOnTerminalBranch() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TLeaf::IsOnTerminalBranch()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:148:21
    t.method("IsOnTerminalBranch", static_cast<Bool_t (TLeaf::*)()  const>(&TLeaf::IsOnTerminalBranch));

    DEBUG_MSG("Adding wrapper for Bool_t TLeaf::IsRange() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TLeaf::IsRange()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:149:21
    t.method("IsRange", static_cast<Bool_t (TLeaf::*)()  const>(&TLeaf::IsRange));

    DEBUG_MSG("Adding wrapper for Bool_t TLeaf::IsUnsigned() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TLeaf::IsUnsigned()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:150:21
    t.method("IsUnsigned", static_cast<Bool_t (TLeaf::*)()  const>(&TLeaf::IsUnsigned));

    DEBUG_MSG("Adding wrapper for void TLeaf::PrintValue(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::PrintValue(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:151:21
    t.method("PrintValue", static_cast<void (TLeaf::*)(Int_t)  const>(&TLeaf::PrintValue));
    t.method("PrintValue", [](TLeaf const& a)->void { a.PrintValue(); });
    t.method("PrintValue", [](TLeaf const* a)->void { a->PrintValue(); });

    DEBUG_MSG("Adding wrapper for void TLeaf::ReadBasket(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::ReadBasket(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:152:21
    t.method("ReadBasket", static_cast<void (TLeaf::*)(TBuffer &) >(&TLeaf::ReadBasket));

    DEBUG_MSG("Adding wrapper for void TLeaf::ReadBasketExport(TBuffer &, TClonesArray *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::ReadBasketExport(TBuffer &, TClonesArray *, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:153:21
    t.method("ReadBasketExport", static_cast<void (TLeaf::*)(TBuffer &, TClonesArray *, Int_t) >(&TLeaf::ReadBasketExport));

    DEBUG_MSG("Adding wrapper for bool TLeaf::ReadBasketFast(TBuffer &, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: bool TLeaf::ReadBasketFast(TBuffer &, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:154:21
    t.method("ReadBasketFast", static_cast<bool (TLeaf::*)(TBuffer &, Long64_t) >(&TLeaf::ReadBasketFast));

    DEBUG_MSG("Adding wrapper for bool TLeaf::ReadBasketSerialized(TBuffer &, Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: bool TLeaf::ReadBasketSerialized(TBuffer &, Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:155:21
    t.method("ReadBasketSerialized", static_cast<bool (TLeaf::*)(TBuffer &, Long64_t) >(&TLeaf::ReadBasketSerialized));

    DEBUG_MSG("Adding wrapper for Int_t TLeaf::ResetAddress(void *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TLeaf::ResetAddress(void *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:159:21
    t.method("ResetAddress", static_cast<Int_t (TLeaf::*)(void *, Bool_t) >(&TLeaf::ResetAddress));
    t.method("ResetAddress", [](TLeaf& a, void * arg0)->Int_t { return a.ResetAddress(arg0); });
    t.method("ResetAddress", [](TLeaf* a, void * arg0)->Int_t { return a->ResetAddress(arg0); });

    DEBUG_MSG("Adding wrapper for void TLeaf::SetAddress(void *) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetAddress(void *)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:160:21
    t.method("SetAddress", static_cast<void (TLeaf::*)(void *) >(&TLeaf::SetAddress));
    t.method("SetAddress", [](TLeaf& a)->void { a.SetAddress(); });
    t.method("SetAddress", [](TLeaf* a)->void { a->SetAddress(); });

    DEBUG_MSG("Adding wrapper for void TLeaf::SetBranch(TBranch *) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetBranch(TBranch *)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:161:21
    t.method("SetBranch", static_cast<void (TLeaf::*)(TBranch *) >(&TLeaf::SetBranch));

    DEBUG_MSG("Adding wrapper for void TLeaf::SetLeafCount(TLeaf *) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetLeafCount(TLeaf *)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:162:21
    t.method("SetLeafCount", static_cast<void (TLeaf::*)(TLeaf *) >(&TLeaf::SetLeafCount));

    DEBUG_MSG("Adding wrapper for void TLeaf::SetLen(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetLen(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:163:21
    t.method("SetLen", static_cast<void (TLeaf::*)(Int_t) >(&TLeaf::SetLen));
    t.method("SetLen", [](TLeaf& a)->void { a.SetLen(); });
    t.method("SetLen", [](TLeaf* a)->void { a->SetLen(); });

    DEBUG_MSG("Adding wrapper for void TLeaf::SetOffset(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetOffset(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:164:21
    t.method("SetOffset", static_cast<void (TLeaf::*)(Int_t) >(&TLeaf::SetOffset));
    t.method("SetOffset", [](TLeaf& a)->void { a.SetOffset(); });
    t.method("SetOffset", [](TLeaf* a)->void { a->SetOffset(); });

    DEBUG_MSG("Adding wrapper for void TLeaf::SetRange(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetRange(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:165:21
    t.method("SetRange", static_cast<void (TLeaf::*)(Bool_t) >(&TLeaf::SetRange));
    t.method("SetRange", [](TLeaf& a)->void { a.SetRange(); });
    t.method("SetRange", [](TLeaf* a)->void { a->SetRange(); });

    DEBUG_MSG("Adding wrapper for void TLeaf::SetUnsigned() (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::SetUnsigned()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:166:21
    t.method("SetUnsigned", static_cast<void (TLeaf::*)() >(&TLeaf::SetUnsigned));

    DEBUG_MSG("Adding wrapper for Version_t TLeaf::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TLeaf::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!Class_Version", static_cast<Version_t (*)() >(&TLeaf::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TLeaf::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLeaf::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    t.method("IsA", static_cast<TClass * (TLeaf::*)()  const>(&TLeaf::IsA));

    DEBUG_MSG("Adding wrapper for void TLeaf::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    t.method("StreamerNVirtual", static_cast<void (TLeaf::*)(TBuffer &) >(&TLeaf::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TLeaf::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLeaf::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!DeclFileName", []() { return (std::string)TLeaf::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TLeaf::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TLeaf::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!ImplFileLine", static_cast<int (*)() >(&TLeaf::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TLeaf::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLeaf::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!ImplFileName", []() { return (std::string)TLeaf::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TLeaf::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TLeaf::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!Class_Name", []() { return (std::string)TLeaf::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TLeaf::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLeaf::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!Dictionary", static_cast<TClass * (*)() >(&TLeaf::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TLeaf::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TLeaf::Class()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!Class", static_cast<TClass * (*)() >(&TLeaf::Class));

    DEBUG_MSG("Adding wrapper for void TLeaf::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TLeaf::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    t.method("Streamer", static_cast<void (TLeaf::*)(TBuffer &) >(&TLeaf::Streamer));

    DEBUG_MSG("Adding wrapper for int TLeaf::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TLeaf::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TLeaf.h:168:4
    module_.method("TLeaf!DeclFileLine", static_cast<int (*)() >(&TLeaf::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TLeaf>> type_;
};
std::shared_ptr<Wrapper> newJlTLeaf(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTLeaf(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TClonesArray> : std::false_type { };
  template<> struct DefaultConstructible<TClonesArray> : std::false_type { };
template<> struct SuperType<TClonesArray> { typedef TObjArray type; };
}

// Class generating the wrapper for type TClonesArray
// signature to use in the veto file: TClonesArray
struct JlTClonesArray: public Wrapper {

  JlTClonesArray(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TClonesArray (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TClonesArray.h:29:7
    jlcxx::TypeWrapper<TClonesArray>  t = jlModule.add_type<TClonesArray>("TClonesArray",
      jlcxx::julia_base_type<TObjArray>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TClonesArray>>(new jlcxx::TypeWrapper<TClonesArray>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TClonesArray>> type_;
};
std::shared_ptr<Wrapper> newJlTClonesArray(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTClonesArray(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::TIOFeatures> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::TIOFeatures> : std::false_type { };
}

// Class generating the wrapper for type ROOT::TIOFeatures
// signature to use in the veto file: ROOT::TIOFeatures
struct JlROOT_TIOFeatures: public Wrapper {

  JlROOT_TIOFeatures(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::TIOFeatures (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/ROOT/TIOFeatures.hxx:69:7
    jlcxx::TypeWrapper<ROOT::TIOFeatures>  t = jlModule.add_type<ROOT::TIOFeatures>("ROOT!TIOFeatures");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::TIOFeatures>>(new jlcxx::TypeWrapper<ROOT::TIOFeatures>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::TIOFeatures>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_TIOFeatures(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_TIOFeatures(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TTree::TClusterIterator> : std::false_type { };
  template<> struct DefaultConstructible<TTree::TClusterIterator> : std::false_type { };
}

// Class generating the wrapper for type TTree::TClusterIterator
// signature to use in the veto file: TTree::TClusterIterator
struct JlTTree_TClusterIterator: public Wrapper {

  JlTTree_TClusterIterator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TTree::TClusterIterator (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:269:10
    jlcxx::TypeWrapper<TTree::TClusterIterator>  t = jlModule.add_type<TTree::TClusterIterator>("TTree!TClusterIterator");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TTree::TClusterIterator>>(new jlcxx::TypeWrapper<TTree::TClusterIterator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::Next() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::Next()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:295:16
    t.method("Next", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::Next));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::Previous() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::Previous()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:299:16
    t.method("Previous", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::Previous));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::GetStartEntry() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::GetStartEntry()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:302:16
    t.method("GetStartEntry", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::GetStartEntry));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::GetNextEntry() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::GetNextEntry()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:307:16
    t.method("GetNextEntry", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::GetNextEntry));

    DEBUG_MSG("Adding wrapper for Long64_t TTree::TClusterIterator::operator()() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TTree::TClusterIterator::operator()()
    // defined in /home/pgras/.julia/conda/3/include/TTree.h:311:16
    t.method("paren", static_cast<Long64_t (TTree::TClusterIterator::*)() >(&TTree::TClusterIterator::operator()));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TTree::TClusterIterator>> type_;
};
std::shared_ptr<Wrapper> newJlTTree_TClusterIterator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTTree_TClusterIterator(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TStreamerInfo> : std::false_type { };
  template<> struct DefaultConstructible<TStreamerInfo> : std::false_type { };
}

// Class generating the wrapper for type TStreamerInfo
// signature to use in the veto file: TStreamerInfo
struct JlTStreamerInfo: public Wrapper {

  JlTStreamerInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TStreamerInfo (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TStreamerInfo.h:39:7
    jlcxx::TypeWrapper<TStreamerInfo>  t = jlModule.add_type<TStreamerInfo>("TStreamerInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TStreamerInfo>>(new jlcxx::TypeWrapper<TStreamerInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TStreamerInfo>> type_;
};
std::shared_ptr<Wrapper> newJlTStreamerInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTStreamerInfo(module));
}
