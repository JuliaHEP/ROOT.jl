// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<CpuInfo_t> : std::false_type { };
  template<> struct DefaultConstructible<CpuInfo_t> : std::false_type { };
}

// Class generating the wrapper for type CpuInfo_t
// signature to use in the veto file: CpuInfo_t
struct JlCpuInfo_t: public Wrapper {

  JlCpuInfo_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type CpuInfo_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:163:8
    jlcxx::TypeWrapper<CpuInfo_t>  t = jlModule.add_type<CpuInfo_t>("CpuInfo_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<CpuInfo_t>>(new jlcxx::TypeWrapper<CpuInfo_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Version_t CpuInfo_t::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t CpuInfo_t::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!Class_Version", static_cast<Version_t (*)() >(&CpuInfo_t::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * CpuInfo_t::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * CpuInfo_t::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    t.method("IsA", static_cast<TClass * (CpuInfo_t::*)()  const>(&CpuInfo_t::IsA));

    DEBUG_MSG("Adding wrapper for void CpuInfo_t::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void CpuInfo_t::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    t.method("StreamerNVirtual", static_cast<void (CpuInfo_t::*)(TBuffer &) >(&CpuInfo_t::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * CpuInfo_t::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * CpuInfo_t::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!DeclFileName", []() { return (std::string)CpuInfo_t::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int CpuInfo_t::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int CpuInfo_t::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!ImplFileLine", static_cast<int (*)() >(&CpuInfo_t::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * CpuInfo_t::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * CpuInfo_t::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!ImplFileName", []() { return (std::string)CpuInfo_t::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * CpuInfo_t::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * CpuInfo_t::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!Class_Name", []() { return (std::string)CpuInfo_t::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * CpuInfo_t::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * CpuInfo_t::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!Dictionary", static_cast<TClass * (*)() >(&CpuInfo_t::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * CpuInfo_t::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * CpuInfo_t::Class()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!Class", static_cast<TClass * (*)() >(&CpuInfo_t::Class));

    DEBUG_MSG("Adding wrapper for void CpuInfo_t::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void CpuInfo_t::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    t.method("Streamer", static_cast<void (CpuInfo_t::*)(TBuffer &) >(&CpuInfo_t::Streamer));

    DEBUG_MSG("Adding wrapper for int CpuInfo_t::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int CpuInfo_t::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:174:4
    module_.method("CpuInfo_t!DeclFileLine", static_cast<int (*)() >(&CpuInfo_t::DeclFileLine));

    DEBUG_MSG("Adding fLoad1m methods  to provide read access to the field fLoad1m (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:164:14
    // signature to use in the veto list: CpuInfo_t::fLoad1m
    t.method("fLoad1m", [](const CpuInfo_t& a) -> Float_t { return a.fLoad1m; });
    t.method("fLoad1m", [](CpuInfo_t& a) -> Float_t { return a.fLoad1m; });
    t.method("fLoad1m", [](const CpuInfo_t* a) -> Float_t { return a->fLoad1m; });
    t.method("fLoad1m", [](CpuInfo_t* a) -> Float_t { return a->fLoad1m; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:164:14
    // signature to use in the veto list: CpuInfo_t::fLoad1m
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fLoad1m! methods to provide write access to the field fLoad1m (" __HERE__ ")");
    t.method("fLoad1m!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fLoad1m = val; });

    DEBUG_MSG("Adding fLoad1m! methods to provide write access to the field fLoad1m (" __HERE__ ")");
    t.method("fLoad1m!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fLoad1m = val; });

    DEBUG_MSG("Adding fLoad5m methods  to provide read access to the field fLoad5m (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:165:14
    // signature to use in the veto list: CpuInfo_t::fLoad5m
    t.method("fLoad5m", [](const CpuInfo_t& a) -> Float_t { return a.fLoad5m; });
    t.method("fLoad5m", [](CpuInfo_t& a) -> Float_t { return a.fLoad5m; });
    t.method("fLoad5m", [](const CpuInfo_t* a) -> Float_t { return a->fLoad5m; });
    t.method("fLoad5m", [](CpuInfo_t* a) -> Float_t { return a->fLoad5m; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:165:14
    // signature to use in the veto list: CpuInfo_t::fLoad5m
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fLoad5m! methods to provide write access to the field fLoad5m (" __HERE__ ")");
    t.method("fLoad5m!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fLoad5m = val; });

    DEBUG_MSG("Adding fLoad5m! methods to provide write access to the field fLoad5m (" __HERE__ ")");
    t.method("fLoad5m!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fLoad5m = val; });

    DEBUG_MSG("Adding fLoad15m methods  to provide read access to the field fLoad15m (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:166:14
    // signature to use in the veto list: CpuInfo_t::fLoad15m
    t.method("fLoad15m", [](const CpuInfo_t& a) -> Float_t { return a.fLoad15m; });
    t.method("fLoad15m", [](CpuInfo_t& a) -> Float_t { return a.fLoad15m; });
    t.method("fLoad15m", [](const CpuInfo_t* a) -> Float_t { return a->fLoad15m; });
    t.method("fLoad15m", [](CpuInfo_t* a) -> Float_t { return a->fLoad15m; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:166:14
    // signature to use in the veto list: CpuInfo_t::fLoad15m
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fLoad15m! methods to provide write access to the field fLoad15m (" __HERE__ ")");
    t.method("fLoad15m!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fLoad15m = val; });

    DEBUG_MSG("Adding fLoad15m! methods to provide write access to the field fLoad15m (" __HERE__ ")");
    t.method("fLoad15m!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fLoad15m = val; });

    DEBUG_MSG("Adding fUser methods  to provide read access to the field fUser (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:167:14
    // signature to use in the veto list: CpuInfo_t::fUser
    t.method("fUser", [](const CpuInfo_t& a) -> Float_t { return a.fUser; });
    t.method("fUser", [](CpuInfo_t& a) -> Float_t { return a.fUser; });
    t.method("fUser", [](const CpuInfo_t* a) -> Float_t { return a->fUser; });
    t.method("fUser", [](CpuInfo_t* a) -> Float_t { return a->fUser; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:167:14
    // signature to use in the veto list: CpuInfo_t::fUser
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fUser! methods to provide write access to the field fUser (" __HERE__ ")");
    t.method("fUser!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fUser = val; });

    DEBUG_MSG("Adding fUser! methods to provide write access to the field fUser (" __HERE__ ")");
    t.method("fUser!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fUser = val; });

    DEBUG_MSG("Adding fSys methods  to provide read access to the field fSys (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:168:14
    // signature to use in the veto list: CpuInfo_t::fSys
    t.method("fSys", [](const CpuInfo_t& a) -> Float_t { return a.fSys; });
    t.method("fSys", [](CpuInfo_t& a) -> Float_t { return a.fSys; });
    t.method("fSys", [](const CpuInfo_t* a) -> Float_t { return a->fSys; });
    t.method("fSys", [](CpuInfo_t* a) -> Float_t { return a->fSys; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:168:14
    // signature to use in the veto list: CpuInfo_t::fSys
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSys! methods to provide write access to the field fSys (" __HERE__ ")");
    t.method("fSys!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fSys = val; });

    DEBUG_MSG("Adding fSys! methods to provide write access to the field fSys (" __HERE__ ")");
    t.method("fSys!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fSys = val; });

    DEBUG_MSG("Adding fTotal methods  to provide read access to the field fTotal (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:169:14
    // signature to use in the veto list: CpuInfo_t::fTotal
    t.method("fTotal", [](const CpuInfo_t& a) -> Float_t { return a.fTotal; });
    t.method("fTotal", [](CpuInfo_t& a) -> Float_t { return a.fTotal; });
    t.method("fTotal", [](const CpuInfo_t* a) -> Float_t { return a->fTotal; });
    t.method("fTotal", [](CpuInfo_t* a) -> Float_t { return a->fTotal; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:169:14
    // signature to use in the veto list: CpuInfo_t::fTotal
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fTotal! methods to provide write access to the field fTotal (" __HERE__ ")");
    t.method("fTotal!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fTotal = val; });

    DEBUG_MSG("Adding fTotal! methods to provide write access to the field fTotal (" __HERE__ ")");
    t.method("fTotal!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fTotal = val; });

    DEBUG_MSG("Adding fIdle methods  to provide read access to the field fIdle (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:170:14
    // signature to use in the veto list: CpuInfo_t::fIdle
    t.method("fIdle", [](const CpuInfo_t& a) -> Float_t { return a.fIdle; });
    t.method("fIdle", [](CpuInfo_t& a) -> Float_t { return a.fIdle; });
    t.method("fIdle", [](const CpuInfo_t* a) -> Float_t { return a->fIdle; });
    t.method("fIdle", [](CpuInfo_t* a) -> Float_t { return a->fIdle; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:170:14
    // signature to use in the veto list: CpuInfo_t::fIdle
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fIdle! methods to provide write access to the field fIdle (" __HERE__ ")");
    t.method("fIdle!", [](CpuInfo_t& a, Float_t val) -> Float_t { return a.fIdle = val; });

    DEBUG_MSG("Adding fIdle! methods to provide write access to the field fIdle (" __HERE__ ")");
    t.method("fIdle!", [](CpuInfo_t* a, Float_t val) -> Float_t { return a->fIdle = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<CpuInfo_t>> type_;
};
std::shared_ptr<Wrapper> newJlCpuInfo_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlCpuInfo_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<MemInfo_t> : std::false_type { };
  template<> struct DefaultConstructible<MemInfo_t> : std::false_type { };
}

// Class generating the wrapper for type MemInfo_t
// signature to use in the veto file: MemInfo_t
struct JlMemInfo_t: public Wrapper {

  JlMemInfo_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type MemInfo_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:177:8
    jlcxx::TypeWrapper<MemInfo_t>  t = jlModule.add_type<MemInfo_t>("MemInfo_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<MemInfo_t>>(new jlcxx::TypeWrapper<MemInfo_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Version_t MemInfo_t::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t MemInfo_t::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!Class_Version", static_cast<Version_t (*)() >(&MemInfo_t::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * MemInfo_t::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * MemInfo_t::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    t.method("IsA", static_cast<TClass * (MemInfo_t::*)()  const>(&MemInfo_t::IsA));

    DEBUG_MSG("Adding wrapper for void MemInfo_t::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void MemInfo_t::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    t.method("StreamerNVirtual", static_cast<void (MemInfo_t::*)(TBuffer &) >(&MemInfo_t::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * MemInfo_t::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * MemInfo_t::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!DeclFileName", []() { return (std::string)MemInfo_t::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int MemInfo_t::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int MemInfo_t::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!ImplFileLine", static_cast<int (*)() >(&MemInfo_t::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * MemInfo_t::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * MemInfo_t::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!ImplFileName", []() { return (std::string)MemInfo_t::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * MemInfo_t::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * MemInfo_t::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!Class_Name", []() { return (std::string)MemInfo_t::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * MemInfo_t::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * MemInfo_t::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!Dictionary", static_cast<TClass * (*)() >(&MemInfo_t::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * MemInfo_t::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * MemInfo_t::Class()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!Class", static_cast<TClass * (*)() >(&MemInfo_t::Class));

    DEBUG_MSG("Adding wrapper for void MemInfo_t::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void MemInfo_t::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    t.method("Streamer", static_cast<void (MemInfo_t::*)(TBuffer &) >(&MemInfo_t::Streamer));

    DEBUG_MSG("Adding wrapper for int MemInfo_t::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int MemInfo_t::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:187:4
    module_.method("MemInfo_t!DeclFileLine", static_cast<int (*)() >(&MemInfo_t::DeclFileLine));

    DEBUG_MSG("Adding fMemTotal methods  to provide read access to the field fMemTotal (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:178:14
    // signature to use in the veto list: MemInfo_t::fMemTotal
    t.method("fMemTotal", [](const MemInfo_t& a) -> Int_t { return a.fMemTotal; });
    t.method("fMemTotal", [](MemInfo_t& a) -> Int_t { return a.fMemTotal; });
    t.method("fMemTotal", [](const MemInfo_t* a) -> Int_t { return a->fMemTotal; });
    t.method("fMemTotal", [](MemInfo_t* a) -> Int_t { return a->fMemTotal; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:178:14
    // signature to use in the veto list: MemInfo_t::fMemTotal
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fMemTotal! methods to provide write access to the field fMemTotal (" __HERE__ ")");
    t.method("fMemTotal!", [](MemInfo_t& a, Int_t val) -> Int_t { return a.fMemTotal = val; });

    DEBUG_MSG("Adding fMemTotal! methods to provide write access to the field fMemTotal (" __HERE__ ")");
    t.method("fMemTotal!", [](MemInfo_t* a, Int_t val) -> Int_t { return a->fMemTotal = val; });

    DEBUG_MSG("Adding fMemUsed methods  to provide read access to the field fMemUsed (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:179:14
    // signature to use in the veto list: MemInfo_t::fMemUsed
    t.method("fMemUsed", [](const MemInfo_t& a) -> Int_t { return a.fMemUsed; });
    t.method("fMemUsed", [](MemInfo_t& a) -> Int_t { return a.fMemUsed; });
    t.method("fMemUsed", [](const MemInfo_t* a) -> Int_t { return a->fMemUsed; });
    t.method("fMemUsed", [](MemInfo_t* a) -> Int_t { return a->fMemUsed; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:179:14
    // signature to use in the veto list: MemInfo_t::fMemUsed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fMemUsed! methods to provide write access to the field fMemUsed (" __HERE__ ")");
    t.method("fMemUsed!", [](MemInfo_t& a, Int_t val) -> Int_t { return a.fMemUsed = val; });

    DEBUG_MSG("Adding fMemUsed! methods to provide write access to the field fMemUsed (" __HERE__ ")");
    t.method("fMemUsed!", [](MemInfo_t* a, Int_t val) -> Int_t { return a->fMemUsed = val; });

    DEBUG_MSG("Adding fMemFree methods  to provide read access to the field fMemFree (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:180:14
    // signature to use in the veto list: MemInfo_t::fMemFree
    t.method("fMemFree", [](const MemInfo_t& a) -> Int_t { return a.fMemFree; });
    t.method("fMemFree", [](MemInfo_t& a) -> Int_t { return a.fMemFree; });
    t.method("fMemFree", [](const MemInfo_t* a) -> Int_t { return a->fMemFree; });
    t.method("fMemFree", [](MemInfo_t* a) -> Int_t { return a->fMemFree; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:180:14
    // signature to use in the veto list: MemInfo_t::fMemFree
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fMemFree! methods to provide write access to the field fMemFree (" __HERE__ ")");
    t.method("fMemFree!", [](MemInfo_t& a, Int_t val) -> Int_t { return a.fMemFree = val; });

    DEBUG_MSG("Adding fMemFree! methods to provide write access to the field fMemFree (" __HERE__ ")");
    t.method("fMemFree!", [](MemInfo_t* a, Int_t val) -> Int_t { return a->fMemFree = val; });

    DEBUG_MSG("Adding fSwapTotal methods  to provide read access to the field fSwapTotal (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:181:14
    // signature to use in the veto list: MemInfo_t::fSwapTotal
    t.method("fSwapTotal", [](const MemInfo_t& a) -> Int_t { return a.fSwapTotal; });
    t.method("fSwapTotal", [](MemInfo_t& a) -> Int_t { return a.fSwapTotal; });
    t.method("fSwapTotal", [](const MemInfo_t* a) -> Int_t { return a->fSwapTotal; });
    t.method("fSwapTotal", [](MemInfo_t* a) -> Int_t { return a->fSwapTotal; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:181:14
    // signature to use in the veto list: MemInfo_t::fSwapTotal
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSwapTotal! methods to provide write access to the field fSwapTotal (" __HERE__ ")");
    t.method("fSwapTotal!", [](MemInfo_t& a, Int_t val) -> Int_t { return a.fSwapTotal = val; });

    DEBUG_MSG("Adding fSwapTotal! methods to provide write access to the field fSwapTotal (" __HERE__ ")");
    t.method("fSwapTotal!", [](MemInfo_t* a, Int_t val) -> Int_t { return a->fSwapTotal = val; });

    DEBUG_MSG("Adding fSwapUsed methods  to provide read access to the field fSwapUsed (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:182:14
    // signature to use in the veto list: MemInfo_t::fSwapUsed
    t.method("fSwapUsed", [](const MemInfo_t& a) -> Int_t { return a.fSwapUsed; });
    t.method("fSwapUsed", [](MemInfo_t& a) -> Int_t { return a.fSwapUsed; });
    t.method("fSwapUsed", [](const MemInfo_t* a) -> Int_t { return a->fSwapUsed; });
    t.method("fSwapUsed", [](MemInfo_t* a) -> Int_t { return a->fSwapUsed; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:182:14
    // signature to use in the veto list: MemInfo_t::fSwapUsed
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSwapUsed! methods to provide write access to the field fSwapUsed (" __HERE__ ")");
    t.method("fSwapUsed!", [](MemInfo_t& a, Int_t val) -> Int_t { return a.fSwapUsed = val; });

    DEBUG_MSG("Adding fSwapUsed! methods to provide write access to the field fSwapUsed (" __HERE__ ")");
    t.method("fSwapUsed!", [](MemInfo_t* a, Int_t val) -> Int_t { return a->fSwapUsed = val; });

    DEBUG_MSG("Adding fSwapFree methods  to provide read access to the field fSwapFree (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:183:14
    // signature to use in the veto list: MemInfo_t::fSwapFree
    t.method("fSwapFree", [](const MemInfo_t& a) -> Int_t { return a.fSwapFree; });
    t.method("fSwapFree", [](MemInfo_t& a) -> Int_t { return a.fSwapFree; });
    t.method("fSwapFree", [](const MemInfo_t* a) -> Int_t { return a->fSwapFree; });
    t.method("fSwapFree", [](MemInfo_t* a) -> Int_t { return a->fSwapFree; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:183:14
    // signature to use in the veto list: MemInfo_t::fSwapFree
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fSwapFree! methods to provide write access to the field fSwapFree (" __HERE__ ")");
    t.method("fSwapFree!", [](MemInfo_t& a, Int_t val) -> Int_t { return a.fSwapFree = val; });

    DEBUG_MSG("Adding fSwapFree! methods to provide write access to the field fSwapFree (" __HERE__ ")");
    t.method("fSwapFree!", [](MemInfo_t* a, Int_t val) -> Int_t { return a->fSwapFree = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<MemInfo_t>> type_;
};
std::shared_ptr<Wrapper> newJlMemInfo_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlMemInfo_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ProcInfo_t> : std::false_type { };
  template<> struct DefaultConstructible<ProcInfo_t> : std::false_type { };
}

// Class generating the wrapper for type ProcInfo_t
// signature to use in the veto file: ProcInfo_t
struct JlProcInfo_t: public Wrapper {

  JlProcInfo_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ProcInfo_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:190:8
    jlcxx::TypeWrapper<ProcInfo_t>  t = jlModule.add_type<ProcInfo_t>("ProcInfo_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ProcInfo_t>>(new jlcxx::TypeWrapper<ProcInfo_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Version_t ProcInfo_t::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t ProcInfo_t::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!Class_Version", static_cast<Version_t (*)() >(&ProcInfo_t::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * ProcInfo_t::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * ProcInfo_t::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    t.method("IsA", static_cast<TClass * (ProcInfo_t::*)()  const>(&ProcInfo_t::IsA));

    DEBUG_MSG("Adding wrapper for void ProcInfo_t::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void ProcInfo_t::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    t.method("StreamerNVirtual", static_cast<void (ProcInfo_t::*)(TBuffer &) >(&ProcInfo_t::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * ProcInfo_t::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * ProcInfo_t::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!DeclFileName", []() { return (std::string)ProcInfo_t::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int ProcInfo_t::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int ProcInfo_t::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!ImplFileLine", static_cast<int (*)() >(&ProcInfo_t::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * ProcInfo_t::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * ProcInfo_t::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!ImplFileName", []() { return (std::string)ProcInfo_t::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * ProcInfo_t::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * ProcInfo_t::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!Class_Name", []() { return (std::string)ProcInfo_t::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * ProcInfo_t::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * ProcInfo_t::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!Dictionary", static_cast<TClass * (*)() >(&ProcInfo_t::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * ProcInfo_t::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * ProcInfo_t::Class()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!Class", static_cast<TClass * (*)() >(&ProcInfo_t::Class));

    DEBUG_MSG("Adding wrapper for void ProcInfo_t::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void ProcInfo_t::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    t.method("Streamer", static_cast<void (ProcInfo_t::*)(TBuffer &) >(&ProcInfo_t::Streamer));

    DEBUG_MSG("Adding wrapper for int ProcInfo_t::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int ProcInfo_t::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:198:4
    module_.method("ProcInfo_t!DeclFileLine", static_cast<int (*)() >(&ProcInfo_t::DeclFileLine));

    DEBUG_MSG("Adding fCpuUser methods  to provide read access to the field fCpuUser (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:191:14
    // signature to use in the veto list: ProcInfo_t::fCpuUser
    t.method("fCpuUser", [](const ProcInfo_t& a) -> Float_t { return a.fCpuUser; });
    t.method("fCpuUser", [](ProcInfo_t& a) -> Float_t { return a.fCpuUser; });
    t.method("fCpuUser", [](const ProcInfo_t* a) -> Float_t { return a->fCpuUser; });
    t.method("fCpuUser", [](ProcInfo_t* a) -> Float_t { return a->fCpuUser; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:191:14
    // signature to use in the veto list: ProcInfo_t::fCpuUser
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCpuUser! methods to provide write access to the field fCpuUser (" __HERE__ ")");
    t.method("fCpuUser!", [](ProcInfo_t& a, Float_t val) -> Float_t { return a.fCpuUser = val; });

    DEBUG_MSG("Adding fCpuUser! methods to provide write access to the field fCpuUser (" __HERE__ ")");
    t.method("fCpuUser!", [](ProcInfo_t* a, Float_t val) -> Float_t { return a->fCpuUser = val; });

    DEBUG_MSG("Adding fCpuSys methods  to provide read access to the field fCpuSys (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:192:14
    // signature to use in the veto list: ProcInfo_t::fCpuSys
    t.method("fCpuSys", [](const ProcInfo_t& a) -> Float_t { return a.fCpuSys; });
    t.method("fCpuSys", [](ProcInfo_t& a) -> Float_t { return a.fCpuSys; });
    t.method("fCpuSys", [](const ProcInfo_t* a) -> Float_t { return a->fCpuSys; });
    t.method("fCpuSys", [](ProcInfo_t* a) -> Float_t { return a->fCpuSys; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:192:14
    // signature to use in the veto list: ProcInfo_t::fCpuSys
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fCpuSys! methods to provide write access to the field fCpuSys (" __HERE__ ")");
    t.method("fCpuSys!", [](ProcInfo_t& a, Float_t val) -> Float_t { return a.fCpuSys = val; });

    DEBUG_MSG("Adding fCpuSys! methods to provide write access to the field fCpuSys (" __HERE__ ")");
    t.method("fCpuSys!", [](ProcInfo_t* a, Float_t val) -> Float_t { return a->fCpuSys = val; });

    DEBUG_MSG("Adding fMemResident methods  to provide read access to the field fMemResident (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:193:14
    // signature to use in the veto list: ProcInfo_t::fMemResident
    t.method("fMemResident", [](const ProcInfo_t& a) -> Long_t { return a.fMemResident; });
    t.method("fMemResident", [](ProcInfo_t& a) -> Long_t { return a.fMemResident; });
    t.method("fMemResident", [](const ProcInfo_t* a) -> Long_t { return a->fMemResident; });
    t.method("fMemResident", [](ProcInfo_t* a) -> Long_t { return a->fMemResident; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:193:14
    // signature to use in the veto list: ProcInfo_t::fMemResident
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fMemResident! methods to provide write access to the field fMemResident (" __HERE__ ")");
    t.method("fMemResident!", [](ProcInfo_t& a, Long_t val) -> Long_t { return a.fMemResident = val; });

    DEBUG_MSG("Adding fMemResident! methods to provide write access to the field fMemResident (" __HERE__ ")");
    t.method("fMemResident!", [](ProcInfo_t* a, Long_t val) -> Long_t { return a->fMemResident = val; });

    DEBUG_MSG("Adding fMemVirtual methods  to provide read access to the field fMemVirtual (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:194:14
    // signature to use in the veto list: ProcInfo_t::fMemVirtual
    t.method("fMemVirtual", [](const ProcInfo_t& a) -> Long_t { return a.fMemVirtual; });
    t.method("fMemVirtual", [](ProcInfo_t& a) -> Long_t { return a.fMemVirtual; });
    t.method("fMemVirtual", [](const ProcInfo_t* a) -> Long_t { return a->fMemVirtual; });
    t.method("fMemVirtual", [](ProcInfo_t* a) -> Long_t { return a->fMemVirtual; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:194:14
    // signature to use in the veto list: ProcInfo_t::fMemVirtual
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fMemVirtual! methods to provide write access to the field fMemVirtual (" __HERE__ ")");
    t.method("fMemVirtual!", [](ProcInfo_t& a, Long_t val) -> Long_t { return a.fMemVirtual = val; });

    DEBUG_MSG("Adding fMemVirtual! methods to provide write access to the field fMemVirtual (" __HERE__ ")");
    t.method("fMemVirtual!", [](ProcInfo_t* a, Long_t val) -> Long_t { return a->fMemVirtual = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ProcInfo_t>> type_;
};
std::shared_ptr<Wrapper> newJlProcInfo_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlProcInfo_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<RedirectHandle_t> : std::false_type { };
  template<> struct DefaultConstructible<RedirectHandle_t> : std::false_type { };
}

// Class generating the wrapper for type RedirectHandle_t
// signature to use in the veto file: RedirectHandle_t
struct JlRedirectHandle_t: public Wrapper {

  JlRedirectHandle_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type RedirectHandle_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:201:8
    jlcxx::TypeWrapper<RedirectHandle_t>  t = jlModule.add_type<RedirectHandle_t>("RedirectHandle_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<RedirectHandle_t>>(new jlcxx::TypeWrapper<RedirectHandle_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void RedirectHandle_t::RedirectHandle_t(const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:208:4
    t.constructor<const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void RedirectHandle_t::Reset() (" __HERE__ ")");
    // signature to use in the veto list: void RedirectHandle_t::Reset()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:209:9
    t.method("Reset", static_cast<void (RedirectHandle_t::*)() >(&RedirectHandle_t::Reset));

    DEBUG_MSG("Adding fFile methods  to provide read access to the field fFile (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:202:14
    // signature to use in the veto list: RedirectHandle_t::fFile
    t.method("fFile", [](const RedirectHandle_t& a) -> const TString& { return a.fFile; });
    t.method("fFile", [](RedirectHandle_t& a) -> TString& { return a.fFile; });
    t.method("fFile", [](const RedirectHandle_t* a) -> const TString& { return a->fFile; });
    t.method("fFile", [](RedirectHandle_t* a) -> TString& { return a->fFile; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:202:14
    // signature to use in the veto list: RedirectHandle_t::fFile
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fFile! methods to provide write access to the field fFile (" __HERE__ ")");
    t.method("fFile!", [](RedirectHandle_t& a, const TString& val) -> TString& { return a.fFile = val; });

    DEBUG_MSG("Adding fFile! methods to provide write access to the field fFile (" __HERE__ ")");
    t.method("fFile!", [](RedirectHandle_t* a, const TString& val) -> TString& { return a->fFile = val; });

    DEBUG_MSG("Adding fStdOutTty methods  to provide read access to the field fStdOutTty (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:203:14
    // signature to use in the veto list: RedirectHandle_t::fStdOutTty
    t.method("fStdOutTty", [](const RedirectHandle_t& a) -> const TString& { return a.fStdOutTty; });
    t.method("fStdOutTty", [](RedirectHandle_t& a) -> TString& { return a.fStdOutTty; });
    t.method("fStdOutTty", [](const RedirectHandle_t* a) -> const TString& { return a->fStdOutTty; });
    t.method("fStdOutTty", [](RedirectHandle_t* a) -> TString& { return a->fStdOutTty; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:203:14
    // signature to use in the veto list: RedirectHandle_t::fStdOutTty
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fStdOutTty! methods to provide write access to the field fStdOutTty (" __HERE__ ")");
    t.method("fStdOutTty!", [](RedirectHandle_t& a, const TString& val) -> TString& { return a.fStdOutTty = val; });

    DEBUG_MSG("Adding fStdOutTty! methods to provide write access to the field fStdOutTty (" __HERE__ ")");
    t.method("fStdOutTty!", [](RedirectHandle_t* a, const TString& val) -> TString& { return a->fStdOutTty = val; });

    DEBUG_MSG("Adding fStdErrTty methods  to provide read access to the field fStdErrTty (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:204:14
    // signature to use in the veto list: RedirectHandle_t::fStdErrTty
    t.method("fStdErrTty", [](const RedirectHandle_t& a) -> const TString& { return a.fStdErrTty; });
    t.method("fStdErrTty", [](RedirectHandle_t& a) -> TString& { return a.fStdErrTty; });
    t.method("fStdErrTty", [](const RedirectHandle_t* a) -> const TString& { return a->fStdErrTty; });
    t.method("fStdErrTty", [](RedirectHandle_t* a) -> TString& { return a->fStdErrTty; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:204:14
    // signature to use in the veto list: RedirectHandle_t::fStdErrTty
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fStdErrTty! methods to provide write access to the field fStdErrTty (" __HERE__ ")");
    t.method("fStdErrTty!", [](RedirectHandle_t& a, const TString& val) -> TString& { return a.fStdErrTty = val; });

    DEBUG_MSG("Adding fStdErrTty! methods to provide write access to the field fStdErrTty (" __HERE__ ")");
    t.method("fStdErrTty!", [](RedirectHandle_t* a, const TString& val) -> TString& { return a->fStdErrTty = val; });

    DEBUG_MSG("Adding fStdOutDup methods  to provide read access to the field fStdOutDup (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:205:14
    // signature to use in the veto list: RedirectHandle_t::fStdOutDup
    t.method("fStdOutDup", [](const RedirectHandle_t& a) -> Int_t { return a.fStdOutDup; });
    t.method("fStdOutDup", [](RedirectHandle_t& a) -> Int_t { return a.fStdOutDup; });
    t.method("fStdOutDup", [](const RedirectHandle_t* a) -> Int_t { return a->fStdOutDup; });
    t.method("fStdOutDup", [](RedirectHandle_t* a) -> Int_t { return a->fStdOutDup; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:205:14
    // signature to use in the veto list: RedirectHandle_t::fStdOutDup
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fStdOutDup! methods to provide write access to the field fStdOutDup (" __HERE__ ")");
    t.method("fStdOutDup!", [](RedirectHandle_t& a, Int_t val) -> Int_t { return a.fStdOutDup = val; });

    DEBUG_MSG("Adding fStdOutDup! methods to provide write access to the field fStdOutDup (" __HERE__ ")");
    t.method("fStdOutDup!", [](RedirectHandle_t* a, Int_t val) -> Int_t { return a->fStdOutDup = val; });

    DEBUG_MSG("Adding fStdErrDup methods  to provide read access to the field fStdErrDup (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:206:14
    // signature to use in the veto list: RedirectHandle_t::fStdErrDup
    t.method("fStdErrDup", [](const RedirectHandle_t& a) -> Int_t { return a.fStdErrDup; });
    t.method("fStdErrDup", [](RedirectHandle_t& a) -> Int_t { return a.fStdErrDup; });
    t.method("fStdErrDup", [](const RedirectHandle_t* a) -> Int_t { return a->fStdErrDup; });
    t.method("fStdErrDup", [](RedirectHandle_t* a) -> Int_t { return a->fStdErrDup; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:206:14
    // signature to use in the veto list: RedirectHandle_t::fStdErrDup
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fStdErrDup! methods to provide write access to the field fStdErrDup (" __HERE__ ")");
    t.method("fStdErrDup!", [](RedirectHandle_t& a, Int_t val) -> Int_t { return a.fStdErrDup = val; });

    DEBUG_MSG("Adding fStdErrDup! methods to provide write access to the field fStdErrDup (" __HERE__ ")");
    t.method("fStdErrDup!", [](RedirectHandle_t* a, Int_t val) -> Int_t { return a->fStdErrDup = val; });

    DEBUG_MSG("Adding fReadOffSet methods  to provide read access to the field fReadOffSet (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:207:14
    // signature to use in the veto list: RedirectHandle_t::fReadOffSet
    t.method("fReadOffSet", [](const RedirectHandle_t& a) -> Int_t { return a.fReadOffSet; });
    t.method("fReadOffSet", [](RedirectHandle_t& a) -> Int_t { return a.fReadOffSet; });
    t.method("fReadOffSet", [](const RedirectHandle_t* a) -> Int_t { return a->fReadOffSet; });
    t.method("fReadOffSet", [](RedirectHandle_t* a) -> Int_t { return a->fReadOffSet; });
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:207:14
    // signature to use in the veto list: RedirectHandle_t::fReadOffSet
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fReadOffSet! methods to provide write access to the field fReadOffSet (" __HERE__ ")");
    t.method("fReadOffSet!", [](RedirectHandle_t& a, Int_t val) -> Int_t { return a.fReadOffSet = val; });

    DEBUG_MSG("Adding fReadOffSet! methods to provide write access to the field fReadOffSet (" __HERE__ ")");
    t.method("fReadOffSet!", [](RedirectHandle_t* a, Int_t val) -> Int_t { return a->fReadOffSet = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<RedirectHandle_t>> type_;
};
std::shared_ptr<Wrapper> newJlRedirectHandle_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlRedirectHandle_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TProcessEventTimer> : std::false_type { };
  template<> struct DefaultConstructible<TProcessEventTimer> : std::false_type { };
template<> struct SuperType<TProcessEventTimer> { typedef TTimer type; };
}

// Class generating the wrapper for type TProcessEventTimer
// signature to use in the veto file: TProcessEventTimer
struct JlTProcessEventTimer: public Wrapper {

  JlTProcessEventTimer(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TProcessEventTimer (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:251:7
    jlcxx::TypeWrapper<TProcessEventTimer>  t = jlModule.add_type<TProcessEventTimer>("TProcessEventTimer",
      jlcxx::julia_base_type<TTimer>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TProcessEventTimer>>(new jlcxx::TypeWrapper<TProcessEventTimer>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TProcessEventTimer::TProcessEventTimer(Long_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:253:4
    t.constructor<Long_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Bool_t TProcessEventTimer::Notify() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TProcessEventTimer::Notify()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:254:11
    t.method("Notify", static_cast<Bool_t (TProcessEventTimer::*)() >(&TProcessEventTimer::Notify));

    DEBUG_MSG("Adding wrapper for Bool_t TProcessEventTimer::ProcessEvents() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TProcessEventTimer::ProcessEvents()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:255:11
    t.method("ProcessEvents", static_cast<Bool_t (TProcessEventTimer::*)() >(&TProcessEventTimer::ProcessEvents));

    DEBUG_MSG("Adding wrapper for Version_t TProcessEventTimer::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TProcessEventTimer::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!Class_Version", static_cast<Version_t (*)() >(&TProcessEventTimer::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TProcessEventTimer::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TProcessEventTimer::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    t.method("IsA", static_cast<TClass * (TProcessEventTimer::*)()  const>(&TProcessEventTimer::IsA));

    DEBUG_MSG("Adding wrapper for void TProcessEventTimer::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TProcessEventTimer::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    t.method("StreamerNVirtual", static_cast<void (TProcessEventTimer::*)(TBuffer &) >(&TProcessEventTimer::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TProcessEventTimer::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TProcessEventTimer::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!DeclFileName", []() { return (std::string)TProcessEventTimer::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TProcessEventTimer::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TProcessEventTimer::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!ImplFileLine", static_cast<int (*)() >(&TProcessEventTimer::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TProcessEventTimer::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TProcessEventTimer::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!ImplFileName", []() { return (std::string)TProcessEventTimer::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TProcessEventTimer::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TProcessEventTimer::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!Class_Name", []() { return (std::string)TProcessEventTimer::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TProcessEventTimer::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TProcessEventTimer::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!Dictionary", static_cast<TClass * (*)() >(&TProcessEventTimer::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TProcessEventTimer::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TProcessEventTimer::Class()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!Class", static_cast<TClass * (*)() >(&TProcessEventTimer::Class));

    DEBUG_MSG("Adding wrapper for void TProcessEventTimer::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TProcessEventTimer::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    t.method("Streamer", static_cast<void (TProcessEventTimer::*)(TBuffer &) >(&TProcessEventTimer::Streamer));

    DEBUG_MSG("Adding wrapper for int TProcessEventTimer::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TProcessEventTimer::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TSystem.h:256:4
    module_.method("TProcessEventTimer!DeclFileLine", static_cast<int (*)() >(&TProcessEventTimer::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TProcessEventTimer>> type_;
};
std::shared_ptr<Wrapper> newJlTProcessEventTimer(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTProcessEventTimer(module));
}
