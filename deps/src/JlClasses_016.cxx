// this file was auto-generated by wrapit v1.3.3
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TArrayC> : std::false_type { };
  template<> struct DefaultConstructible<TArrayC> : std::false_type { };
}

// Class generating the wrapper for type TArrayC
// signature to use in the veto file: TArrayC
struct JlTArrayC: public Wrapper {

  JlTArrayC(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TArrayC (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TArrayC.h:27:7
    jlcxx::TypeWrapper<TArrayC>  t = jlModule.add_type<TArrayC>("TArrayC");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TArrayC>>(new jlcxx::TypeWrapper<TArrayC>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TArrayC>> type_;
};
std::shared_ptr<Wrapper> newJlTArrayC(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTArrayC(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TUrl> : std::false_type { };
  template<> struct DefaultConstructible<TUrl> : std::false_type { };
template<> struct SuperType<TUrl> { typedef TObject type; };
}

// Class generating the wrapper for type TUrl
// signature to use in the veto file: TUrl
struct JlTUrl: public Wrapper {

  JlTUrl(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TUrl (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TUrl.h:33:7
    jlcxx::TypeWrapper<TUrl>  t = jlModule.add_type<TUrl>("TUrl",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TUrl>>(new jlcxx::TypeWrapper<TUrl>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TUrl>> type_;
};
std::shared_ptr<Wrapper> newJlTUrl(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTUrl(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFileOpenHandle> : std::false_type { };
  template<> struct DefaultConstructible<TFileOpenHandle> : std::false_type { };
template<> struct SuperType<TFileOpenHandle> { typedef TNamed type; };
}

// Class generating the wrapper for type TFileOpenHandle
// signature to use in the veto file: TFileOpenHandle
struct JlTFileOpenHandle: public Wrapper {

  JlTFileOpenHandle(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFileOpenHandle (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:356:7
    jlcxx::TypeWrapper<TFileOpenHandle>  t = jlModule.add_type<TFileOpenHandle>("TFileOpenHandle",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFileOpenHandle>>(new jlcxx::TypeWrapper<TFileOpenHandle>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for Bool_t TFileOpenHandle::Matches(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TFileOpenHandle::Matches(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:379:16
    t.method("Matches", static_cast<Bool_t (TFileOpenHandle::*)(const char *) >(&TFileOpenHandle::Matches));

    DEBUG_MSG("Adding wrapper for const char * TFileOpenHandle::GetOpt() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFileOpenHandle::GetOpt()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:381:16
    t.method("GetOpt", [](TFileOpenHandle const& a) { return (std::string)a.GetOpt(); });
    t.method("GetOpt", [](TFileOpenHandle const* a) { return (std::string)a->GetOpt(); });

    DEBUG_MSG("Adding wrapper for Int_t TFileOpenHandle::GetCompress() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFileOpenHandle::GetCompress()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:382:16
    t.method("GetCompress", static_cast<Int_t (TFileOpenHandle::*)()  const>(&TFileOpenHandle::GetCompress));

    DEBUG_MSG("Adding wrapper for Int_t TFileOpenHandle::GetNetOpt() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TFileOpenHandle::GetNetOpt()
    // defined in /home/pgras/.julia/conda/3/include/TFile.h:383:16
    t.method("GetNetOpt", static_cast<Int_t (TFileOpenHandle::*)()  const>(&TFileOpenHandle::GetNetOpt));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFileOpenHandle>> type_;
};
std::shared_ptr<Wrapper> newJlTFileOpenHandle(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFileOpenHandle(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGraph> : std::false_type { };
  template<> struct DefaultConstructible<TGraph> : std::false_type { };
template<> struct SuperType<TGraph> { typedef TNamed type; };
}

// Class generating the wrapper for type TGraph
// signature to use in the veto file: TGraph
struct JlTGraph: public Wrapper {

  JlTGraph(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGraph (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:41:7
    jlcxx::TypeWrapper<TGraph>  t = jlModule.add_type<TGraph>("TGraph",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGraph>>(new jlcxx::TypeWrapper<TGraph>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:83:4
    t.constructor<Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(Int_t, const Int_t *, const Int_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:84:4
    t.constructor<Int_t, const Int_t *, const Int_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(Int_t, const Float_t *, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:85:4
    t.constructor<Int_t, const Float_t *, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(Int_t, const Double_t *, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:86:4
    t.constructor<Int_t, const Double_t *, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(Int_t, const Double_t *, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:87:4
    t.constructor<Int_t, const Double_t *>(/*finalize=*/true);
    t.constructor<Int_t, const Double_t *, Double_t>(/*finalize=*/true);
    t.constructor<Int_t, const Double_t *, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(const TGraph &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:88:4
    t.constructor<const TGraph &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGraph & TGraph::operator=(const TGraph &) (" __HERE__ ")");
    // signature to use in the veto list: TGraph & TGraph::operator=(const TGraph &)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:89:12
    t.method("assign", static_cast<TGraph & (TGraph::*)(const TGraph &) >(&TGraph::operator=));


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(const TVectorD &, const TVectorD &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:91:4
    t.constructor<const TVectorD &, const TVectorD &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(const TH1 *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:92:4
    t.constructor<const TH1 *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(const TF1 *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:93:4
    t.constructor<const TF1 *>(/*finalize=*/true);
    t.constructor<const TF1 *, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGraph::TGraph(const char *, const char *, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:94:4
    t.constructor<const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Option_t *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGraph::AddPoint(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::AddPoint(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:97:26
    t.method("AddPoint", static_cast<void (TGraph::*)(Double_t, Double_t) >(&TGraph::AddPoint));

    DEBUG_MSG("Adding wrapper for void TGraph::Apply(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Apply(TF1 *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:98:26
    t.method("Apply", static_cast<void (TGraph::*)(TF1 *) >(&TGraph::Apply));

    DEBUG_MSG("Adding wrapper for void TGraph::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Browse(TBrowser *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:99:26
    t.method("Browse", static_cast<void (TGraph::*)(TBrowser *) >(&TGraph::Browse));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::Chisquare(TF1 *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::Chisquare(TF1 *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:100:26
    t.method("Chisquare", static_cast<Double_t (TGraph::*)(TF1 *, Option_t *)  const>(&TGraph::Chisquare));
    t.method("Chisquare", [](TGraph const& a, TF1 * arg0)->Double_t { return a.Chisquare(arg0); });
    t.method("Chisquare", [](TGraph const* a, TF1 * arg0)->Double_t { return a->Chisquare(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::CompareArg(const TGraph *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::CompareArg(const TGraph *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:101:26
    module_.method("TGraph!CompareArg", static_cast<Bool_t (*)(const TGraph *, Int_t, Int_t) >(&TGraph::CompareArg));

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::CompareX(const TGraph *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::CompareX(const TGraph *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:102:26
    module_.method("TGraph!CompareX", static_cast<Bool_t (*)(const TGraph *, Int_t, Int_t) >(&TGraph::CompareX));

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::CompareY(const TGraph *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::CompareY(const TGraph *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:103:26
    module_.method("TGraph!CompareY", static_cast<Bool_t (*)(const TGraph *, Int_t, Int_t) >(&TGraph::CompareY));

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::CompareRadius(const TGraph *, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::CompareRadius(const TGraph *, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:104:26
    module_.method("TGraph!CompareRadius", static_cast<Bool_t (*)(const TGraph *, Int_t, Int_t) >(&TGraph::CompareRadius));

    DEBUG_MSG("Adding wrapper for void TGraph::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::ComputeRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:105:26
    t.method("ComputeRange", static_cast<void (TGraph::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TGraph::ComputeRange));

    DEBUG_MSG("Adding wrapper for Int_t TGraph::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:106:26
    t.method("DistancetoPrimitive", static_cast<Int_t (TGraph::*)(Int_t, Int_t) >(&TGraph::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TGraph::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:107:26
    t.method("Draw", static_cast<void (TGraph::*)(Option_t *) >(&TGraph::Draw));
    t.method("Draw", [](TGraph& a)->void { a.Draw(); });
    t.method("Draw", [](TGraph* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for void TGraph::DrawGraph(Int_t, const Int_t *, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::DrawGraph(Int_t, const Int_t *, const Int_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:108:26
    t.method("DrawGraph", static_cast<void (TGraph::*)(Int_t, const Int_t *, const Int_t *, Option_t *) >(&TGraph::DrawGraph));
    t.method("DrawGraph", [](TGraph& a, Int_t arg0, const Int_t * arg1, const Int_t * arg2)->void { a.DrawGraph(arg0, arg1, arg2); });
    t.method("DrawGraph", [](TGraph* a, Int_t arg0, const Int_t * arg1, const Int_t * arg2)->void { a->DrawGraph(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraph::DrawGraph(Int_t, const Float_t *, const Float_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::DrawGraph(Int_t, const Float_t *, const Float_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:109:26
    t.method("DrawGraph", static_cast<void (TGraph::*)(Int_t, const Float_t *, const Float_t *, Option_t *) >(&TGraph::DrawGraph));
    t.method("DrawGraph", [](TGraph& a, Int_t arg0, const Float_t * arg1, const Float_t * arg2)->void { a.DrawGraph(arg0, arg1, arg2); });
    t.method("DrawGraph", [](TGraph* a, Int_t arg0, const Float_t * arg1, const Float_t * arg2)->void { a->DrawGraph(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraph::DrawGraph(Int_t, const Double_t *, const Double_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::DrawGraph(Int_t, const Double_t *, const Double_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:110:26
    t.method("DrawGraph", static_cast<void (TGraph::*)(Int_t, const Double_t *, const Double_t *, Option_t *) >(&TGraph::DrawGraph));
    t.method("DrawGraph", [](TGraph& a, Int_t arg0)->void { a.DrawGraph(arg0); });
    t.method("DrawGraph", [](TGraph& a, Int_t arg0, const Double_t * arg1)->void { a.DrawGraph(arg0, arg1); });
    t.method("DrawGraph", [](TGraph& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->void { a.DrawGraph(arg0, arg1, arg2); });
    t.method("DrawGraph", [](TGraph* a, Int_t arg0)->void { a->DrawGraph(arg0); });
    t.method("DrawGraph", [](TGraph* a, Int_t arg0, const Double_t * arg1)->void { a->DrawGraph(arg0, arg1); });
    t.method("DrawGraph", [](TGraph* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->void { a->DrawGraph(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraph::DrawPanel() (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::DrawPanel()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:111:26
    t.method("DrawPanel", static_cast<void (TGraph::*)() >(&TGraph::DrawPanel));

    DEBUG_MSG("Adding wrapper for void TGraph::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:113:26
    t.method("ExecuteEvent", static_cast<void (TGraph::*)(Int_t, Int_t, Int_t) >(&TGraph::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for void TGraph::Expand(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Expand(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:114:26
    t.method("Expand", static_cast<void (TGraph::*)(Int_t) >(&TGraph::Expand));

    DEBUG_MSG("Adding wrapper for void TGraph::Expand(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Expand(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:115:26
    t.method("Expand", static_cast<void (TGraph::*)(Int_t, Int_t) >(&TGraph::Expand));

    DEBUG_MSG("Adding wrapper for TObject * TGraph::FindObject(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TGraph::FindObject(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:116:26
    t.method("FindObject", static_cast<TObject * (TGraph::*)(const char *)  const>(&TGraph::FindObject));

    DEBUG_MSG("Adding wrapper for TObject * TGraph::FindObject(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TGraph::FindObject(const TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:117:26
    t.method("FindObject", static_cast<TObject * (TGraph::*)(const TObject *)  const>(&TGraph::FindObject));

    DEBUG_MSG("Adding wrapper for TFitResultPtr TGraph::Fit(const char *, Option_t *, Option_t *, Axis_t, Axis_t) (" __HERE__ ")");
    // signature to use in the veto list: TFitResultPtr TGraph::Fit(const char *, Option_t *, Option_t *, Axis_t, Axis_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:118:26
    t.method("Fit", static_cast<TFitResultPtr (TGraph::*)(const char *, Option_t *, Option_t *, Axis_t, Axis_t) >(&TGraph::Fit));
    t.method("Fit", [](TGraph& a, const char * arg0)->TFitResultPtr { return a.Fit(arg0); });
    t.method("Fit", [](TGraph& a, const char * arg0, Option_t * arg1)->TFitResultPtr { return a.Fit(arg0, arg1); });
    t.method("Fit", [](TGraph& a, const char * arg0, Option_t * arg1, Option_t * arg2)->TFitResultPtr { return a.Fit(arg0, arg1, arg2); });
    t.method("Fit", [](TGraph& a, const char * arg0, Option_t * arg1, Option_t * arg2, Axis_t arg3)->TFitResultPtr { return a.Fit(arg0, arg1, arg2, arg3); });
    t.method("Fit", [](TGraph* a, const char * arg0)->TFitResultPtr { return a->Fit(arg0); });
    t.method("Fit", [](TGraph* a, const char * arg0, Option_t * arg1)->TFitResultPtr { return a->Fit(arg0, arg1); });
    t.method("Fit", [](TGraph* a, const char * arg0, Option_t * arg1, Option_t * arg2)->TFitResultPtr { return a->Fit(arg0, arg1, arg2); });
    t.method("Fit", [](TGraph* a, const char * arg0, Option_t * arg1, Option_t * arg2, Axis_t arg3)->TFitResultPtr { return a->Fit(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for TFitResultPtr TGraph::Fit(TF1 *, Option_t *, Option_t *, Axis_t, Axis_t) (" __HERE__ ")");
    // signature to use in the veto list: TFitResultPtr TGraph::Fit(TF1 *, Option_t *, Option_t *, Axis_t, Axis_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:119:26
    t.method("Fit", static_cast<TFitResultPtr (TGraph::*)(TF1 *, Option_t *, Option_t *, Axis_t, Axis_t) >(&TGraph::Fit));
    t.method("Fit", [](TGraph& a, TF1 * arg0)->TFitResultPtr { return a.Fit(arg0); });
    t.method("Fit", [](TGraph& a, TF1 * arg0, Option_t * arg1)->TFitResultPtr { return a.Fit(arg0, arg1); });
    t.method("Fit", [](TGraph& a, TF1 * arg0, Option_t * arg1, Option_t * arg2)->TFitResultPtr { return a.Fit(arg0, arg1, arg2); });
    t.method("Fit", [](TGraph& a, TF1 * arg0, Option_t * arg1, Option_t * arg2, Axis_t arg3)->TFitResultPtr { return a.Fit(arg0, arg1, arg2, arg3); });
    t.method("Fit", [](TGraph* a, TF1 * arg0)->TFitResultPtr { return a->Fit(arg0); });
    t.method("Fit", [](TGraph* a, TF1 * arg0, Option_t * arg1)->TFitResultPtr { return a->Fit(arg0, arg1); });
    t.method("Fit", [](TGraph* a, TF1 * arg0, Option_t * arg1, Option_t * arg2)->TFitResultPtr { return a->Fit(arg0, arg1, arg2); });
    t.method("Fit", [](TGraph* a, TF1 * arg0, Option_t * arg1, Option_t * arg2, Axis_t arg3)->TFitResultPtr { return a->Fit(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TGraph::FitPanel() (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::FitPanel()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:120:26
    t.method("FitPanel", static_cast<void (TGraph::*)() >(&TGraph::FitPanel));

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::GetEditable() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::GetEditable()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:121:26
    t.method("GetEditable", static_cast<Bool_t (TGraph::*)()  const>(&TGraph::GetEditable));

    DEBUG_MSG("Adding wrapper for TF1 * TGraph::GetFunction(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TGraph::GetFunction(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:122:26
    t.method("GetFunction", static_cast<TF1 * (TGraph::*)(const char *)  const>(&TGraph::GetFunction));

    DEBUG_MSG("Adding wrapper for TH1F * TGraph::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1F * TGraph::GetHistogram()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:123:26
    t.method("GetHistogram", static_cast<TH1F * (TGraph::*)()  const>(&TGraph::GetHistogram));

    DEBUG_MSG("Adding wrapper for TList * TGraph::GetListOfFunctions() (" __HERE__ ")");
    // signature to use in the veto list: TList * TGraph::GetListOfFunctions()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:124:26
    t.method("GetListOfFunctions", static_cast<TList * (TGraph::*)()  const>(&TGraph::GetListOfFunctions));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetCorrelationFactor() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetCorrelationFactor()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:125:26
    t.method("GetCorrelationFactor", static_cast<Double_t (TGraph::*)()  const>(&TGraph::GetCorrelationFactor));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetCovariance() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetCovariance()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:126:26
    t.method("GetCovariance", static_cast<Double_t (TGraph::*)()  const>(&TGraph::GetCovariance));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetMean(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetMean(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:127:26
    t.method("GetMean", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetMean));
    t.method("GetMean", [](TGraph const& a)->Double_t { return a.GetMean(); });
    t.method("GetMean", [](TGraph const* a)->Double_t { return a->GetMean(); });

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetRMS(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetRMS(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:128:26
    t.method("GetRMS", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetRMS));
    t.method("GetRMS", [](TGraph const& a)->Double_t { return a.GetRMS(); });
    t.method("GetRMS", [](TGraph const* a)->Double_t { return a->GetRMS(); });

    DEBUG_MSG("Adding wrapper for Int_t TGraph::GetMaxSize() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::GetMaxSize()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:129:26
    t.method("GetMaxSize", static_cast<Int_t (TGraph::*)()  const>(&TGraph::GetMaxSize));

    DEBUG_MSG("Adding wrapper for Int_t TGraph::GetN() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::GetN()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:130:26
    t.method("GetN", static_cast<Int_t (TGraph::*)()  const>(&TGraph::GetN));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetErrorX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetErrorX(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:131:26
    t.method("GetErrorX", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetErrorX));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetErrorY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetErrorY(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:132:26
    t.method("GetErrorY", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetErrorY));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetErrorXhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetErrorXhigh(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:133:26
    t.method("GetErrorXhigh", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetErrorXhigh));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetErrorXlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetErrorXlow(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:134:26
    t.method("GetErrorXlow", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetErrorXlow));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetErrorYhigh(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetErrorYhigh(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:135:26
    t.method("GetErrorYhigh", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetErrorYhigh));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetErrorYlow(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetErrorYlow(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:136:26
    t.method("GetErrorYlow", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetErrorYlow));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetX() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetX()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:137:26
    t.method("GetX", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetX));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetY() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetY()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:138:26
    t.method("GetY", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetY));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEX() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEX()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:139:26
    t.method("GetEX", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEX));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEY() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEY()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:140:26
    t.method("GetEY", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEY));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEXhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEXhigh()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:141:26
    t.method("GetEXhigh", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEXhigh));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEXlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEXlow()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:142:26
    t.method("GetEXlow", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEXlow));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEYhigh() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEYhigh()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:143:26
    t.method("GetEYhigh", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEYhigh));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEYlow() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEYlow()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:144:26
    t.method("GetEYlow", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEYlow));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEXlowd() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEXlowd()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:145:26
    t.method("GetEXlowd", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEXlowd));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEXhighd() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEXhighd()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:146:26
    t.method("GetEXhighd", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEXhighd));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEYlowd() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEYlowd()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:147:26
    t.method("GetEYlowd", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEYlowd));

    DEBUG_MSG("Adding wrapper for Double_t * TGraph::GetEYhighd() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TGraph::GetEYhighd()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:148:26
    t.method("GetEYhighd", static_cast<Double_t * (TGraph::*)()  const>(&TGraph::GetEYhighd));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetMaximum() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetMaximum()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:149:26
    t.method("GetMaximum", static_cast<Double_t (TGraph::*)()  const>(&TGraph::GetMaximum));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetMinimum() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetMinimum()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:150:26
    t.method("GetMinimum", static_cast<Double_t (TGraph::*)()  const>(&TGraph::GetMinimum));

    DEBUG_MSG("Adding wrapper for TAxis * TGraph::GetXaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TGraph::GetXaxis()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:151:26
    t.method("GetXaxis", static_cast<TAxis * (TGraph::*)()  const>(&TGraph::GetXaxis));

    DEBUG_MSG("Adding wrapper for TAxis * TGraph::GetYaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TGraph::GetYaxis()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:152:26
    t.method("GetYaxis", static_cast<TAxis * (TGraph::*)()  const>(&TGraph::GetYaxis));

    DEBUG_MSG("Adding wrapper for char * TGraph::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TGraph::GetObjectInfo(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:153:26
    t.method("GetObjectInfo", static_cast<char * (TGraph::*)(Int_t, Int_t)  const>(&TGraph::GetObjectInfo));

    DEBUG_MSG("Adding wrapper for Int_t TGraph::GetPoint(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::GetPoint(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:154:26
    t.method("GetPoint", static_cast<Int_t (TGraph::*)(Int_t, Double_t &, Double_t &)  const>(&TGraph::GetPoint));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetPointX(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetPointX(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:155:26
    t.method("GetPointX", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetPointX));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::GetPointY(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::GetPointY(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:156:26
    t.method("GetPointY", static_cast<Double_t (TGraph::*)(Int_t)  const>(&TGraph::GetPointY));

    DEBUG_MSG("Adding wrapper for void TGraph::InitExpo(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::InitExpo(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:158:26
    t.method("InitExpo", static_cast<void (TGraph::*)(Double_t, Double_t) >(&TGraph::InitExpo));
    t.method("InitExpo", [](TGraph& a)->void { a.InitExpo(); });
    t.method("InitExpo", [](TGraph& a, Double_t arg0)->void { a.InitExpo(arg0); });
    t.method("InitExpo", [](TGraph* a)->void { a->InitExpo(); });
    t.method("InitExpo", [](TGraph* a, Double_t arg0)->void { a->InitExpo(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph::InitGaus(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::InitGaus(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:159:26
    t.method("InitGaus", static_cast<void (TGraph::*)(Double_t, Double_t) >(&TGraph::InitGaus));
    t.method("InitGaus", [](TGraph& a)->void { a.InitGaus(); });
    t.method("InitGaus", [](TGraph& a, Double_t arg0)->void { a.InitGaus(arg0); });
    t.method("InitGaus", [](TGraph* a)->void { a->InitGaus(); });
    t.method("InitGaus", [](TGraph* a, Double_t arg0)->void { a->InitGaus(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph::InitPolynom(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::InitPolynom(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:160:26
    t.method("InitPolynom", static_cast<void (TGraph::*)(Double_t, Double_t) >(&TGraph::InitPolynom));
    t.method("InitPolynom", [](TGraph& a)->void { a.InitPolynom(); });
    t.method("InitPolynom", [](TGraph& a, Double_t arg0)->void { a.InitPolynom(arg0); });
    t.method("InitPolynom", [](TGraph* a)->void { a->InitPolynom(); });
    t.method("InitPolynom", [](TGraph* a, Double_t arg0)->void { a->InitPolynom(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TGraph::InsertPoint() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::InsertPoint()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:161:26
    t.method("InsertPoint", static_cast<Int_t (TGraph::*)() >(&TGraph::InsertPoint));

    DEBUG_MSG("Adding wrapper for void TGraph::InsertPointBefore(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::InsertPointBefore(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:162:26
    t.method("InsertPointBefore", static_cast<void (TGraph::*)(Int_t, Double_t, Double_t) >(&TGraph::InsertPointBefore));

    DEBUG_MSG("Adding wrapper for Double_t TGraph::Integral(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGraph::Integral(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:163:26
    t.method("Integral", static_cast<Double_t (TGraph::*)(Int_t, Int_t)  const>(&TGraph::Integral));
    t.method("Integral", [](TGraph const& a)->Double_t { return a.Integral(); });
    t.method("Integral", [](TGraph const& a, Int_t arg0)->Double_t { return a.Integral(arg0); });
    t.method("Integral", [](TGraph const* a)->Double_t { return a->Integral(); });
    t.method("Integral", [](TGraph const* a, Int_t arg0)->Double_t { return a->Integral(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::IsEditable() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::IsEditable()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:164:26
    t.method("IsEditable", static_cast<Bool_t (TGraph::*)()  const>(&TGraph::IsEditable));

    DEBUG_MSG("Adding wrapper for Bool_t TGraph::IsHighlight() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGraph::IsHighlight()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:165:26
    t.method("IsHighlight", static_cast<Bool_t (TGraph::*)()  const>(&TGraph::IsHighlight));

    DEBUG_MSG("Adding wrapper for Int_t TGraph::IsInside(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::IsInside(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:166:26
    t.method("IsInside", static_cast<Int_t (TGraph::*)(Double_t, Double_t)  const>(&TGraph::IsInside));

    DEBUG_MSG("Adding wrapper for void TGraph::LeastSquareFit(Int_t, Double_t *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::LeastSquareFit(Int_t, Double_t *, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:167:26
    t.method("LeastSquareFit", static_cast<void (TGraph::*)(Int_t, Double_t *, Double_t, Double_t) >(&TGraph::LeastSquareFit));
    t.method("LeastSquareFit", [](TGraph& a, Int_t arg0, Double_t * arg1)->void { a.LeastSquareFit(arg0, arg1); });
    t.method("LeastSquareFit", [](TGraph& a, Int_t arg0, Double_t * arg1, Double_t arg2)->void { a.LeastSquareFit(arg0, arg1, arg2); });
    t.method("LeastSquareFit", [](TGraph* a, Int_t arg0, Double_t * arg1)->void { a->LeastSquareFit(arg0, arg1); });
    t.method("LeastSquareFit", [](TGraph* a, Int_t arg0, Double_t * arg1, Double_t arg2)->void { a->LeastSquareFit(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraph::LeastSquareLinearFit(Int_t, Double_t &, Double_t &, Int_t &, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::LeastSquareLinearFit(Int_t, Double_t &, Double_t &, Int_t &, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:168:26
    t.method("LeastSquareLinearFit", static_cast<void (TGraph::*)(Int_t, Double_t &, Double_t &, Int_t &, Double_t, Double_t) >(&TGraph::LeastSquareLinearFit));
    t.method("LeastSquareLinearFit", [](TGraph& a, Int_t arg0, Double_t & arg1, Double_t & arg2, Int_t & arg3)->void { a.LeastSquareLinearFit(arg0, arg1, arg2, arg3); });
    t.method("LeastSquareLinearFit", [](TGraph& a, Int_t arg0, Double_t & arg1, Double_t & arg2, Int_t & arg3, Double_t arg4)->void { a.LeastSquareLinearFit(arg0, arg1, arg2, arg3, arg4); });
    t.method("LeastSquareLinearFit", [](TGraph* a, Int_t arg0, Double_t & arg1, Double_t & arg2, Int_t & arg3)->void { a->LeastSquareLinearFit(arg0, arg1, arg2, arg3); });
    t.method("LeastSquareLinearFit", [](TGraph* a, Int_t arg0, Double_t & arg1, Double_t & arg2, Int_t & arg3, Double_t arg4)->void { a->LeastSquareLinearFit(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Int_t TGraph::Merge(TCollection *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::Merge(TCollection *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:169:26
    t.method("Merge", static_cast<Int_t (TGraph::*)(TCollection *) >(&TGraph::Merge));

    DEBUG_MSG("Adding wrapper for void TGraph::MovePoints(Double_t, Double_t, Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::MovePoints(Double_t, Double_t, Bool_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:170:26
    t.method("MovePoints", static_cast<void (TGraph::*)(Double_t, Double_t, Bool_t, Bool_t) >(&TGraph::MovePoints));
    t.method("MovePoints", [](TGraph& a, Double_t arg0, Double_t arg1)->void { a.MovePoints(arg0, arg1); });
    t.method("MovePoints", [](TGraph& a, Double_t arg0, Double_t arg1, Bool_t arg2)->void { a.MovePoints(arg0, arg1, arg2); });
    t.method("MovePoints", [](TGraph* a, Double_t arg0, Double_t arg1)->void { a->MovePoints(arg0, arg1); });
    t.method("MovePoints", [](TGraph* a, Double_t arg0, Double_t arg1, Bool_t arg2)->void { a->MovePoints(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraph::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:171:26
    t.method("Paint", static_cast<void (TGraph::*)(Option_t *) >(&TGraph::Paint));
    t.method("Paint", [](TGraph& a)->void { a.Paint(); });
    t.method("Paint", [](TGraph* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TGraph::PaintGraph(Int_t, const Double_t *, const Double_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::PaintGraph(Int_t, const Double_t *, const Double_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:172:26
    t.method("PaintGraph", static_cast<void (TGraph::*)(Int_t, const Double_t *, const Double_t *, Option_t *) >(&TGraph::PaintGraph));

    DEBUG_MSG("Adding wrapper for void TGraph::PaintGrapHist(Int_t, const Double_t *, const Double_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::PaintGrapHist(Int_t, const Double_t *, const Double_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:173:26
    t.method("PaintGrapHist", static_cast<void (TGraph::*)(Int_t, const Double_t *, const Double_t *, Option_t *) >(&TGraph::PaintGrapHist));

    DEBUG_MSG("Adding wrapper for void TGraph::PaintStats(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::PaintStats(TF1 *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:174:26
    t.method("PaintStats", static_cast<void (TGraph::*)(TF1 *) >(&TGraph::PaintStats));

    DEBUG_MSG("Adding wrapper for void TGraph::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:175:26
    t.method("Print", static_cast<void (TGraph::*)(Option_t *)  const>(&TGraph::Print));
    t.method("Print", [](TGraph const& a)->void { a.Print(); });
    t.method("Print", [](TGraph const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TGraph::RecursiveRemove(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::RecursiveRemove(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:176:26
    t.method("RecursiveRemove", static_cast<void (TGraph::*)(TObject *) >(&TGraph::RecursiveRemove));

    DEBUG_MSG("Adding wrapper for Int_t TGraph::RemovePoint() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::RemovePoint()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:177:26
    t.method("RemovePoint", static_cast<Int_t (TGraph::*)() >(&TGraph::RemovePoint));

    DEBUG_MSG("Adding wrapper for Int_t TGraph::RemovePoint(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGraph::RemovePoint(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:178:26
    t.method("RemovePoint", static_cast<Int_t (TGraph::*)(Int_t) >(&TGraph::RemovePoint));

    DEBUG_MSG("Adding wrapper for void TGraph::SaveAs(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SaveAs(const char *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:180:26
    t.method("SaveAs", static_cast<void (TGraph::*)(const char *, Option_t *)  const>(&TGraph::SaveAs));
    t.method("SaveAs", [](TGraph const& a, const char * arg0)->void { a.SaveAs(arg0); });
    t.method("SaveAs", [](TGraph const* a, const char * arg0)->void { a->SaveAs(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph::Scale(Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Scale(Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:181:26
    t.method("Scale", static_cast<void (TGraph::*)(Double_t, Option_t *) >(&TGraph::Scale));
    t.method("Scale", [](TGraph& a)->void { a.Scale(); });
    t.method("Scale", [](TGraph& a, Double_t arg0)->void { a.Scale(arg0); });
    t.method("Scale", [](TGraph* a)->void { a->Scale(); });
    t.method("Scale", [](TGraph* a, Double_t arg0)->void { a->Scale(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetEditable(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetEditable(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:182:26
    t.method("SetEditable", static_cast<void (TGraph::*)(Bool_t) >(&TGraph::SetEditable));
    t.method("SetEditable", [](TGraph& a)->void { a.SetEditable(); });
    t.method("SetEditable", [](TGraph* a)->void { a->SetEditable(); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetHighlight(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetHighlight(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:183:26
    t.method("SetHighlight", static_cast<void (TGraph::*)(Bool_t) >(&TGraph::SetHighlight));
    t.method("SetHighlight", [](TGraph& a)->void { a.SetHighlight(); });
    t.method("SetHighlight", [](TGraph* a)->void { a->SetHighlight(); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetHistogram(TH1F *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetHistogram(TH1F *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:184:26
    t.method("SetHistogram", static_cast<void (TGraph::*)(TH1F *) >(&TGraph::SetHistogram));

    DEBUG_MSG("Adding wrapper for void TGraph::SetMaximum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetMaximum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:185:26
    t.method("SetMaximum", static_cast<void (TGraph::*)(Double_t) >(&TGraph::SetMaximum));
    t.method("SetMaximum", [](TGraph& a)->void { a.SetMaximum(); });
    t.method("SetMaximum", [](TGraph* a)->void { a->SetMaximum(); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetMinimum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetMinimum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:186:26
    t.method("SetMinimum", static_cast<void (TGraph::*)(Double_t) >(&TGraph::SetMinimum));
    t.method("SetMinimum", [](TGraph& a)->void { a.SetMinimum(); });
    t.method("SetMinimum", [](TGraph* a)->void { a->SetMinimum(); });

    DEBUG_MSG("Adding wrapper for void TGraph::Set(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Set(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:187:26
    t.method("Set", static_cast<void (TGraph::*)(Int_t) >(&TGraph::Set));

    DEBUG_MSG("Adding wrapper for void TGraph::SetPoint(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetPoint(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:188:26
    t.method("SetPoint", static_cast<void (TGraph::*)(Int_t, Double_t, Double_t) >(&TGraph::SetPoint));

    DEBUG_MSG("Adding wrapper for void TGraph::SetPointX(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetPointX(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:189:26
    t.method("SetPointX", static_cast<void (TGraph::*)(Int_t, Double_t) >(&TGraph::SetPointX));

    DEBUG_MSG("Adding wrapper for void TGraph::SetPointY(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetPointY(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:190:26
    t.method("SetPointY", static_cast<void (TGraph::*)(Int_t, Double_t) >(&TGraph::SetPointY));

    DEBUG_MSG("Adding wrapper for void TGraph::SetName(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetName(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:191:26
    t.method("SetName", static_cast<void (TGraph::*)(const char *) >(&TGraph::SetName));
    t.method("SetName", [](TGraph& a)->void { a.SetName(); });
    t.method("SetName", [](TGraph* a)->void { a->SetName(); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetNameTitle(const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetNameTitle(const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:192:26
    t.method("SetNameTitle", static_cast<void (TGraph::*)(const char *, const char *) >(&TGraph::SetNameTitle));
    t.method("SetNameTitle", [](TGraph& a)->void { a.SetNameTitle(); });
    t.method("SetNameTitle", [](TGraph& a, const char * arg0)->void { a.SetNameTitle(arg0); });
    t.method("SetNameTitle", [](TGraph* a)->void { a->SetNameTitle(); });
    t.method("SetNameTitle", [](TGraph* a, const char * arg0)->void { a->SetNameTitle(arg0); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetStats(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetStats(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:193:26
    t.method("SetStats", static_cast<void (TGraph::*)(Bool_t) >(&TGraph::SetStats));
    t.method("SetStats", [](TGraph& a)->void { a.SetStats(); });
    t.method("SetStats", [](TGraph* a)->void { a->SetStats(); });

    DEBUG_MSG("Adding wrapper for void TGraph::SetTitle(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::SetTitle(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:194:26
    t.method("SetTitle", static_cast<void (TGraph::*)(const char *) >(&TGraph::SetTitle));
    t.method("SetTitle", [](TGraph& a)->void { a.SetTitle(); });
    t.method("SetTitle", [](TGraph* a)->void { a->SetTitle(); });

    DEBUG_MSG("Adding wrapper for void TGraph::Sort(Bool_t (*)(const TGraph *, Int_t, Int_t), Bool_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Sort(Bool_t (*)(const TGraph *, Int_t, Int_t), Bool_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:195:26
    t.method("Sort", static_cast<void (TGraph::*)(Bool_t (*)(const TGraph *, Int_t, Int_t), Bool_t, Int_t, Int_t) >(&TGraph::Sort));
    t.method("Sort", [](TGraph& a)->void { a.Sort(); });
    t.method("Sort", [](TGraph& a, Bool_t (*arg0)(const TGraph *, Int_t, Int_t))->void { a.Sort(arg0); });
    t.method("Sort", [](TGraph& a, Bool_t (*arg0)(const TGraph *, Int_t, Int_t), Bool_t arg1)->void { a.Sort(arg0, arg1); });
    t.method("Sort", [](TGraph& a, Bool_t (*arg0)(const TGraph *, Int_t, Int_t), Bool_t arg1, Int_t arg2)->void { a.Sort(arg0, arg1, arg2); });
    t.method("Sort", [](TGraph* a)->void { a->Sort(); });
    t.method("Sort", [](TGraph* a, Bool_t (*arg0)(const TGraph *, Int_t, Int_t))->void { a->Sort(arg0); });
    t.method("Sort", [](TGraph* a, Bool_t (*arg0)(const TGraph *, Int_t, Int_t), Bool_t arg1)->void { a->Sort(arg0, arg1); });
    t.method("Sort", [](TGraph* a, Bool_t (*arg0)(const TGraph *, Int_t, Int_t), Bool_t arg1, Int_t arg2)->void { a->Sort(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGraph::UseCurrentStyle() (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::UseCurrentStyle()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:197:26
    t.method("UseCurrentStyle", static_cast<void (TGraph::*)() >(&TGraph::UseCurrentStyle));

    DEBUG_MSG("Adding wrapper for void TGraph::Zero(Int_t &, Double_t, Double_t, Double_t, Double_t &, Double_t &, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Zero(Int_t &, Double_t, Double_t, Double_t, Double_t &, Double_t &, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:198:26
    t.method("Zero", static_cast<void (TGraph::*)(Int_t &, Double_t, Double_t, Double_t, Double_t &, Double_t &, Int_t) >(&TGraph::Zero));

    DEBUG_MSG("Adding wrapper for Version_t TGraph::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGraph::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!Class_Version", static_cast<Version_t (*)() >(&TGraph::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGraph::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraph::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    t.method("IsA", static_cast<TClass * (TGraph::*)()  const>(&TGraph::IsA));

    DEBUG_MSG("Adding wrapper for void TGraph::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    t.method("StreamerNVirtual", static_cast<void (TGraph::*)(TBuffer &) >(&TGraph::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGraph::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraph::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!DeclFileName", []() { return (std::string)TGraph::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGraph::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraph::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!ImplFileLine", static_cast<int (*)() >(&TGraph::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGraph::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraph::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!ImplFileName", []() { return (std::string)TGraph::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGraph::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGraph::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!Class_Name", []() { return (std::string)TGraph::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGraph::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraph::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!Dictionary", static_cast<TClass * (*)() >(&TGraph::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGraph::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGraph::Class()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!Class", static_cast<TClass * (*)() >(&TGraph::Class));

    DEBUG_MSG("Adding wrapper for void TGraph::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGraph::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    t.method("Streamer", static_cast<void (TGraph::*)(TBuffer &) >(&TGraph::Streamer));

    DEBUG_MSG("Adding wrapper for int TGraph::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGraph::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TGraph.h:200:4
    module_.method("TGraph!DeclFileLine", static_cast<int (*)() >(&TGraph::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGraph>> type_;
};
std::shared_ptr<Wrapper> newJlTGraph(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGraph(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1Parameters> : std::false_type { };
  template<> struct DefaultConstructible<TF1Parameters> : std::false_type { };
}

// Class generating the wrapper for type TF1Parameters
// signature to use in the veto file: TF1Parameters
struct JlTF1Parameters: public Wrapper {

  JlTF1Parameters(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1Parameters (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:51:7
    jlcxx::TypeWrapper<TF1Parameters>  t = jlModule.add_type<TF1Parameters>("TF1Parameters");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1Parameters>>(new jlcxx::TypeWrapper<TF1Parameters>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1Parameters::TF1Parameters(Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:54:4
    t.constructor<Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1Parameters::TF1Parameters(const TF1Parameters &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:63:4
    t.constructor<const TF1Parameters &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TF1Parameters & TF1Parameters::operator=(const TF1Parameters &) (" __HERE__ ")");
    // signature to use in the veto list: TF1Parameters & TF1Parameters::operator=(const TF1Parameters &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:68:19
    t.method("assign", static_cast<TF1Parameters & (TF1Parameters::*)(const TF1Parameters &) >(&TF1Parameters::operator=));

    DEBUG_MSG("Adding wrapper for Double_t TF1Parameters::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Parameters::GetParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:78:13
    t.method("GetParameter", static_cast<Double_t (TF1Parameters::*)(Int_t)  const>(&TF1Parameters::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t TF1Parameters::GetParameter(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1Parameters::GetParameter(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:82:13
    t.method("GetParameter", static_cast<Double_t (TF1Parameters::*)(const char *)  const>(&TF1Parameters::GetParameter));

    DEBUG_MSG("Adding wrapper for const Double_t * TF1Parameters::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF1Parameters::GetParameters()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:86:20
    t.method("GetParameters", static_cast<const Double_t * (TF1Parameters::*)()  const>(&TF1Parameters::GetParameters));

    DEBUG_MSG("Adding wrapper for const std::vector<double> & TF1Parameters::ParamsVec() (" __HERE__ ")");
    // signature to use in the veto list: const std::vector<double> & TF1Parameters::ParamsVec()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:90:31
    t.method("ParamsVec", static_cast<const std::vector<double> & (TF1Parameters::*)()  const>(&TF1Parameters::ParamsVec));

    DEBUG_MSG("Adding wrapper for Int_t TF1Parameters::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1Parameters::GetParNumber(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:95:10
    t.method("GetParNumber", static_cast<Int_t (TF1Parameters::*)(const char *)  const>(&TF1Parameters::GetParNumber));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::GetParName(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:97:16
    t.method("GetParName", [](TF1Parameters const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1Parameters const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:104:11
    t.method("SetParameter", static_cast<void (TF1Parameters::*)(Int_t, Double_t) >(&TF1Parameters::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:109:10
    t.method("SetParameters", static_cast<void (TF1Parameters::*)(const Double_t *) >(&TF1Parameters::SetParameters));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameters(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:113:10
    t.method("SetParameters", static_cast<void (TF1Parameters::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF1Parameters::SetParameters));
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1Parameters& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1Parameters* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6, Double_t arg7, Double_t arg8, Double_t arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParameter(const char *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParameter(const char *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:117:11
    t.method("SetParameter", static_cast<void (TF1Parameters::*)(const char *, Double_t) >(&TF1Parameters::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:121:11
    t.method("SetParName", static_cast<void (TF1Parameters::*)(Int_t, const char *) >(&TF1Parameters::SetParName));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:126:11
    t.method("SetParNames", static_cast<void (TF1Parameters::*)(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) >(&TF1Parameters::SetParNames));
    t.method("SetParNames", [](TF1Parameters& a)->void { a.SetParNames(); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0)->void { a.SetParNames(arg0); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1)->void { a.SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2)->void { a.SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a.SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1Parameters& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TF1Parameters* a)->void { a->SetParNames(); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0)->void { a->SetParNames(arg0); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1)->void { a->SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2)->void { a->SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a->SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1Parameters* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for Version_t TF1Parameters::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1Parameters::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Class_Version", static_cast<Version_t (*)() >(&TF1Parameters::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    t.method("IsA", static_cast<TClass * (TF1Parameters::*)()  const>(&TF1Parameters::IsA));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    t.method("StreamerNVirtual", static_cast<void (TF1Parameters::*)(TBuffer &) >(&TF1Parameters::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!DeclFileName", []() { return (std::string)TF1Parameters::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1Parameters::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Parameters::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!ImplFileLine", static_cast<int (*)() >(&TF1Parameters::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!ImplFileName", []() { return (std::string)TF1Parameters::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1Parameters::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1Parameters::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Class_Name", []() { return (std::string)TF1Parameters::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Dictionary", static_cast<TClass * (*)() >(&TF1Parameters::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF1Parameters::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1Parameters::Class()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!Class", static_cast<TClass * (*)() >(&TF1Parameters::Class));

    DEBUG_MSG("Adding wrapper for void TF1Parameters::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1Parameters::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    t.method("Streamer", static_cast<void (TF1Parameters::*)(TBuffer &) >(&TF1Parameters::Streamer));

    DEBUG_MSG("Adding wrapper for int TF1Parameters::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1Parameters::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:133:4
    module_.method("TF1Parameters!DeclFileLine", static_cast<int (*)() >(&TF1Parameters::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1Parameters>> type_;
};
std::shared_ptr<Wrapper> newJlTF1Parameters(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1Parameters(module));
}
