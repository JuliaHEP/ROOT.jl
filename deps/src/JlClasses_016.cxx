// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Foption_t> : std::false_type { };
  template<> struct DefaultConstructible<Foption_t> : std::false_type { };
}

// Class generating the wrapper for type Foption_t
// signature to use in the veto file: Foption_t
struct JlFoption_t: public Wrapper {

  JlFoption_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Foption_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:24:8
    jlcxx::TypeWrapper<Foption_t>  t = jlModule.add_type<Foption_t>("Foption_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Foption_t>>(new jlcxx::TypeWrapper<Foption_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding Quiet methods  to provide read access to the field Quiet (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:29:8
    // signature to use in the veto list: Foption_t::Quiet
    t.method("Quiet", [](const Foption_t& a) -> int { return a.Quiet; });
    t.method("Quiet", [](Foption_t& a) -> int { return a.Quiet; });
    t.method("Quiet", [](const Foption_t* a) -> int { return a->Quiet; });
    t.method("Quiet", [](Foption_t* a) -> int { return a->Quiet; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:29:8
    // signature to use in the veto list: Foption_t::Quiet
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Quiet! methods to provide write access to the field Quiet (" __HERE__ ")");
    t.method("Quiet!", [](Foption_t& a, int val) -> int { return a.Quiet = val; });

    DEBUG_MSG("Adding Quiet! methods to provide write access to the field Quiet (" __HERE__ ")");
    t.method("Quiet!", [](Foption_t* a, int val) -> int { return a->Quiet = val; });

    DEBUG_MSG("Adding Verbose methods  to provide read access to the field Verbose (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:30:8
    // signature to use in the veto list: Foption_t::Verbose
    t.method("Verbose", [](const Foption_t& a) -> int { return a.Verbose; });
    t.method("Verbose", [](Foption_t& a) -> int { return a.Verbose; });
    t.method("Verbose", [](const Foption_t* a) -> int { return a->Verbose; });
    t.method("Verbose", [](Foption_t* a) -> int { return a->Verbose; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:30:8
    // signature to use in the veto list: Foption_t::Verbose
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Verbose! methods to provide write access to the field Verbose (" __HERE__ ")");
    t.method("Verbose!", [](Foption_t& a, int val) -> int { return a.Verbose = val; });

    DEBUG_MSG("Adding Verbose! methods to provide write access to the field Verbose (" __HERE__ ")");
    t.method("Verbose!", [](Foption_t* a, int val) -> int { return a->Verbose = val; });

    DEBUG_MSG("Adding Bound methods  to provide read access to the field Bound (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:31:8
    // signature to use in the veto list: Foption_t::Bound
    t.method("Bound", [](const Foption_t& a) -> int { return a.Bound; });
    t.method("Bound", [](Foption_t& a) -> int { return a.Bound; });
    t.method("Bound", [](const Foption_t* a) -> int { return a->Bound; });
    t.method("Bound", [](Foption_t* a) -> int { return a->Bound; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:31:8
    // signature to use in the veto list: Foption_t::Bound
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Bound! methods to provide write access to the field Bound (" __HERE__ ")");
    t.method("Bound!", [](Foption_t& a, int val) -> int { return a.Bound = val; });

    DEBUG_MSG("Adding Bound! methods to provide write access to the field Bound (" __HERE__ ")");
    t.method("Bound!", [](Foption_t* a, int val) -> int { return a->Bound = val; });

    DEBUG_MSG("Adding Chi2 methods  to provide read access to the field Chi2 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:32:8
    // signature to use in the veto list: Foption_t::Chi2
    t.method("Chi2", [](const Foption_t& a) -> int { return a.Chi2; });
    t.method("Chi2", [](Foption_t& a) -> int { return a.Chi2; });
    t.method("Chi2", [](const Foption_t* a) -> int { return a->Chi2; });
    t.method("Chi2", [](Foption_t* a) -> int { return a->Chi2; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:32:8
    // signature to use in the veto list: Foption_t::Chi2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Chi2! methods to provide write access to the field Chi2 (" __HERE__ ")");
    t.method("Chi2!", [](Foption_t& a, int val) -> int { return a.Chi2 = val; });

    DEBUG_MSG("Adding Chi2! methods to provide write access to the field Chi2 (" __HERE__ ")");
    t.method("Chi2!", [](Foption_t* a, int val) -> int { return a->Chi2 = val; });

    DEBUG_MSG("Adding PChi2 methods  to provide read access to the field PChi2 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:33:8
    // signature to use in the veto list: Foption_t::PChi2
    t.method("PChi2", [](const Foption_t& a) -> int { return a.PChi2; });
    t.method("PChi2", [](Foption_t& a) -> int { return a.PChi2; });
    t.method("PChi2", [](const Foption_t* a) -> int { return a->PChi2; });
    t.method("PChi2", [](Foption_t* a) -> int { return a->PChi2; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:33:8
    // signature to use in the veto list: Foption_t::PChi2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding PChi2! methods to provide write access to the field PChi2 (" __HERE__ ")");
    t.method("PChi2!", [](Foption_t& a, int val) -> int { return a.PChi2 = val; });

    DEBUG_MSG("Adding PChi2! methods to provide write access to the field PChi2 (" __HERE__ ")");
    t.method("PChi2!", [](Foption_t* a, int val) -> int { return a->PChi2 = val; });

    DEBUG_MSG("Adding Like methods  to provide read access to the field Like (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:34:8
    // signature to use in the veto list: Foption_t::Like
    t.method("Like", [](const Foption_t& a) -> int { return a.Like; });
    t.method("Like", [](Foption_t& a) -> int { return a.Like; });
    t.method("Like", [](const Foption_t* a) -> int { return a->Like; });
    t.method("Like", [](Foption_t* a) -> int { return a->Like; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:34:8
    // signature to use in the veto list: Foption_t::Like
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Like! methods to provide write access to the field Like (" __HERE__ ")");
    t.method("Like!", [](Foption_t& a, int val) -> int { return a.Like = val; });

    DEBUG_MSG("Adding Like! methods to provide write access to the field Like (" __HERE__ ")");
    t.method("Like!", [](Foption_t* a, int val) -> int { return a->Like = val; });

    DEBUG_MSG("Adding User methods  to provide read access to the field User (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:35:8
    // signature to use in the veto list: Foption_t::User
    t.method("User", [](const Foption_t& a) -> int { return a.User; });
    t.method("User", [](Foption_t& a) -> int { return a.User; });
    t.method("User", [](const Foption_t* a) -> int { return a->User; });
    t.method("User", [](Foption_t* a) -> int { return a->User; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:35:8
    // signature to use in the veto list: Foption_t::User
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding User! methods to provide write access to the field User (" __HERE__ ")");
    t.method("User!", [](Foption_t& a, int val) -> int { return a.User = val; });

    DEBUG_MSG("Adding User! methods to provide write access to the field User (" __HERE__ ")");
    t.method("User!", [](Foption_t* a, int val) -> int { return a->User = val; });

    DEBUG_MSG("Adding W1 methods  to provide read access to the field W1 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:36:8
    // signature to use in the veto list: Foption_t::W1
    t.method("W1", [](const Foption_t& a) -> int { return a.W1; });
    t.method("W1", [](Foption_t& a) -> int { return a.W1; });
    t.method("W1", [](const Foption_t* a) -> int { return a->W1; });
    t.method("W1", [](Foption_t* a) -> int { return a->W1; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:36:8
    // signature to use in the veto list: Foption_t::W1
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding W1! methods to provide write access to the field W1 (" __HERE__ ")");
    t.method("W1!", [](Foption_t& a, int val) -> int { return a.W1 = val; });

    DEBUG_MSG("Adding W1! methods to provide write access to the field W1 (" __HERE__ ")");
    t.method("W1!", [](Foption_t* a, int val) -> int { return a->W1 = val; });

    DEBUG_MSG("Adding Errors methods  to provide read access to the field Errors (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:37:8
    // signature to use in the veto list: Foption_t::Errors
    t.method("Errors", [](const Foption_t& a) -> int { return a.Errors; });
    t.method("Errors", [](Foption_t& a) -> int { return a.Errors; });
    t.method("Errors", [](const Foption_t* a) -> int { return a->Errors; });
    t.method("Errors", [](Foption_t* a) -> int { return a->Errors; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:37:8
    // signature to use in the veto list: Foption_t::Errors
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Errors! methods to provide write access to the field Errors (" __HERE__ ")");
    t.method("Errors!", [](Foption_t& a, int val) -> int { return a.Errors = val; });

    DEBUG_MSG("Adding Errors! methods to provide write access to the field Errors (" __HERE__ ")");
    t.method("Errors!", [](Foption_t* a, int val) -> int { return a->Errors = val; });

    DEBUG_MSG("Adding More methods  to provide read access to the field More (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:38:8
    // signature to use in the veto list: Foption_t::More
    t.method("More", [](const Foption_t& a) -> int { return a.More; });
    t.method("More", [](Foption_t& a) -> int { return a.More; });
    t.method("More", [](const Foption_t* a) -> int { return a->More; });
    t.method("More", [](Foption_t* a) -> int { return a->More; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:38:8
    // signature to use in the veto list: Foption_t::More
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding More! methods to provide write access to the field More (" __HERE__ ")");
    t.method("More!", [](Foption_t& a, int val) -> int { return a.More = val; });

    DEBUG_MSG("Adding More! methods to provide write access to the field More (" __HERE__ ")");
    t.method("More!", [](Foption_t* a, int val) -> int { return a->More = val; });

    DEBUG_MSG("Adding Range methods  to provide read access to the field Range (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:39:8
    // signature to use in the veto list: Foption_t::Range
    t.method("Range", [](const Foption_t& a) -> int { return a.Range; });
    t.method("Range", [](Foption_t& a) -> int { return a.Range; });
    t.method("Range", [](const Foption_t* a) -> int { return a->Range; });
    t.method("Range", [](Foption_t* a) -> int { return a->Range; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:39:8
    // signature to use in the veto list: Foption_t::Range
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Range! methods to provide write access to the field Range (" __HERE__ ")");
    t.method("Range!", [](Foption_t& a, int val) -> int { return a.Range = val; });

    DEBUG_MSG("Adding Range! methods to provide write access to the field Range (" __HERE__ ")");
    t.method("Range!", [](Foption_t* a, int val) -> int { return a->Range = val; });

    DEBUG_MSG("Adding Gradient methods  to provide read access to the field Gradient (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:40:8
    // signature to use in the veto list: Foption_t::Gradient
    t.method("Gradient", [](const Foption_t& a) -> int { return a.Gradient; });
    t.method("Gradient", [](Foption_t& a) -> int { return a.Gradient; });
    t.method("Gradient", [](const Foption_t* a) -> int { return a->Gradient; });
    t.method("Gradient", [](Foption_t* a) -> int { return a->Gradient; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:40:8
    // signature to use in the veto list: Foption_t::Gradient
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Gradient! methods to provide write access to the field Gradient (" __HERE__ ")");
    t.method("Gradient!", [](Foption_t& a, int val) -> int { return a.Gradient = val; });

    DEBUG_MSG("Adding Gradient! methods to provide write access to the field Gradient (" __HERE__ ")");
    t.method("Gradient!", [](Foption_t* a, int val) -> int { return a->Gradient = val; });

    DEBUG_MSG("Adding Nostore methods  to provide read access to the field Nostore (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:41:8
    // signature to use in the veto list: Foption_t::Nostore
    t.method("Nostore", [](const Foption_t& a) -> int { return a.Nostore; });
    t.method("Nostore", [](Foption_t& a) -> int { return a.Nostore; });
    t.method("Nostore", [](const Foption_t* a) -> int { return a->Nostore; });
    t.method("Nostore", [](Foption_t* a) -> int { return a->Nostore; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:41:8
    // signature to use in the veto list: Foption_t::Nostore
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Nostore! methods to provide write access to the field Nostore (" __HERE__ ")");
    t.method("Nostore!", [](Foption_t& a, int val) -> int { return a.Nostore = val; });

    DEBUG_MSG("Adding Nostore! methods to provide write access to the field Nostore (" __HERE__ ")");
    t.method("Nostore!", [](Foption_t* a, int val) -> int { return a->Nostore = val; });

    DEBUG_MSG("Adding Nograph methods  to provide read access to the field Nograph (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:42:8
    // signature to use in the veto list: Foption_t::Nograph
    t.method("Nograph", [](const Foption_t& a) -> int { return a.Nograph; });
    t.method("Nograph", [](Foption_t& a) -> int { return a.Nograph; });
    t.method("Nograph", [](const Foption_t* a) -> int { return a->Nograph; });
    t.method("Nograph", [](Foption_t* a) -> int { return a->Nograph; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:42:8
    // signature to use in the veto list: Foption_t::Nograph
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Nograph! methods to provide write access to the field Nograph (" __HERE__ ")");
    t.method("Nograph!", [](Foption_t& a, int val) -> int { return a.Nograph = val; });

    DEBUG_MSG("Adding Nograph! methods to provide write access to the field Nograph (" __HERE__ ")");
    t.method("Nograph!", [](Foption_t* a, int val) -> int { return a->Nograph = val; });

    DEBUG_MSG("Adding Plus methods  to provide read access to the field Plus (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:43:8
    // signature to use in the veto list: Foption_t::Plus
    t.method("Plus", [](const Foption_t& a) -> int { return a.Plus; });
    t.method("Plus", [](Foption_t& a) -> int { return a.Plus; });
    t.method("Plus", [](const Foption_t* a) -> int { return a->Plus; });
    t.method("Plus", [](Foption_t* a) -> int { return a->Plus; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:43:8
    // signature to use in the veto list: Foption_t::Plus
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Plus! methods to provide write access to the field Plus (" __HERE__ ")");
    t.method("Plus!", [](Foption_t& a, int val) -> int { return a.Plus = val; });

    DEBUG_MSG("Adding Plus! methods to provide write access to the field Plus (" __HERE__ ")");
    t.method("Plus!", [](Foption_t* a, int val) -> int { return a->Plus = val; });

    DEBUG_MSG("Adding Integral methods  to provide read access to the field Integral (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:44:8
    // signature to use in the veto list: Foption_t::Integral
    t.method("Integral", [](const Foption_t& a) -> int { return a.Integral; });
    t.method("Integral", [](Foption_t& a) -> int { return a.Integral; });
    t.method("Integral", [](const Foption_t* a) -> int { return a->Integral; });
    t.method("Integral", [](Foption_t* a) -> int { return a->Integral; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:44:8
    // signature to use in the veto list: Foption_t::Integral
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Integral! methods to provide write access to the field Integral (" __HERE__ ")");
    t.method("Integral!", [](Foption_t& a, int val) -> int { return a.Integral = val; });

    DEBUG_MSG("Adding Integral! methods to provide write access to the field Integral (" __HERE__ ")");
    t.method("Integral!", [](Foption_t* a, int val) -> int { return a->Integral = val; });

    DEBUG_MSG("Adding Nochisq methods  to provide read access to the field Nochisq (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:45:8
    // signature to use in the veto list: Foption_t::Nochisq
    t.method("Nochisq", [](const Foption_t& a) -> int { return a.Nochisq; });
    t.method("Nochisq", [](Foption_t& a) -> int { return a.Nochisq; });
    t.method("Nochisq", [](const Foption_t* a) -> int { return a->Nochisq; });
    t.method("Nochisq", [](Foption_t* a) -> int { return a->Nochisq; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:45:8
    // signature to use in the veto list: Foption_t::Nochisq
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Nochisq! methods to provide write access to the field Nochisq (" __HERE__ ")");
    t.method("Nochisq!", [](Foption_t& a, int val) -> int { return a.Nochisq = val; });

    DEBUG_MSG("Adding Nochisq! methods to provide write access to the field Nochisq (" __HERE__ ")");
    t.method("Nochisq!", [](Foption_t* a, int val) -> int { return a->Nochisq = val; });

    DEBUG_MSG("Adding Minuit methods  to provide read access to the field Minuit (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:46:8
    // signature to use in the veto list: Foption_t::Minuit
    t.method("Minuit", [](const Foption_t& a) -> int { return a.Minuit; });
    t.method("Minuit", [](Foption_t& a) -> int { return a.Minuit; });
    t.method("Minuit", [](const Foption_t* a) -> int { return a->Minuit; });
    t.method("Minuit", [](Foption_t* a) -> int { return a->Minuit; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:46:8
    // signature to use in the veto list: Foption_t::Minuit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Minuit! methods to provide write access to the field Minuit (" __HERE__ ")");
    t.method("Minuit!", [](Foption_t& a, int val) -> int { return a.Minuit = val; });

    DEBUG_MSG("Adding Minuit! methods to provide write access to the field Minuit (" __HERE__ ")");
    t.method("Minuit!", [](Foption_t* a, int val) -> int { return a->Minuit = val; });

    DEBUG_MSG("Adding NoErrX methods  to provide read access to the field NoErrX (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:47:8
    // signature to use in the veto list: Foption_t::NoErrX
    t.method("NoErrX", [](const Foption_t& a) -> int { return a.NoErrX; });
    t.method("NoErrX", [](Foption_t& a) -> int { return a.NoErrX; });
    t.method("NoErrX", [](const Foption_t* a) -> int { return a->NoErrX; });
    t.method("NoErrX", [](Foption_t* a) -> int { return a->NoErrX; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:47:8
    // signature to use in the veto list: Foption_t::NoErrX
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding NoErrX! methods to provide write access to the field NoErrX (" __HERE__ ")");
    t.method("NoErrX!", [](Foption_t& a, int val) -> int { return a.NoErrX = val; });

    DEBUG_MSG("Adding NoErrX! methods to provide write access to the field NoErrX (" __HERE__ ")");
    t.method("NoErrX!", [](Foption_t* a, int val) -> int { return a->NoErrX = val; });

    DEBUG_MSG("Adding Robust methods  to provide read access to the field Robust (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:48:8
    // signature to use in the veto list: Foption_t::Robust
    t.method("Robust", [](const Foption_t& a) -> int { return a.Robust; });
    t.method("Robust", [](Foption_t& a) -> int { return a.Robust; });
    t.method("Robust", [](const Foption_t* a) -> int { return a->Robust; });
    t.method("Robust", [](Foption_t* a) -> int { return a->Robust; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:48:8
    // signature to use in the veto list: Foption_t::Robust
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Robust! methods to provide write access to the field Robust (" __HERE__ ")");
    t.method("Robust!", [](Foption_t& a, int val) -> int { return a.Robust = val; });

    DEBUG_MSG("Adding Robust! methods to provide write access to the field Robust (" __HERE__ ")");
    t.method("Robust!", [](Foption_t* a, int val) -> int { return a->Robust = val; });

    DEBUG_MSG("Adding StoreResult methods  to provide read access to the field StoreResult (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:49:8
    // signature to use in the veto list: Foption_t::StoreResult
    t.method("StoreResult", [](const Foption_t& a) -> int { return a.StoreResult; });
    t.method("StoreResult", [](Foption_t& a) -> int { return a.StoreResult; });
    t.method("StoreResult", [](const Foption_t* a) -> int { return a->StoreResult; });
    t.method("StoreResult", [](Foption_t* a) -> int { return a->StoreResult; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:49:8
    // signature to use in the veto list: Foption_t::StoreResult
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding StoreResult! methods to provide write access to the field StoreResult (" __HERE__ ")");
    t.method("StoreResult!", [](Foption_t& a, int val) -> int { return a.StoreResult = val; });

    DEBUG_MSG("Adding StoreResult! methods to provide write access to the field StoreResult (" __HERE__ ")");
    t.method("StoreResult!", [](Foption_t* a, int val) -> int { return a->StoreResult = val; });

    DEBUG_MSG("Adding BinVolume methods  to provide read access to the field BinVolume (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:50:8
    // signature to use in the veto list: Foption_t::BinVolume
    t.method("BinVolume", [](const Foption_t& a) -> int { return a.BinVolume; });
    t.method("BinVolume", [](Foption_t& a) -> int { return a.BinVolume; });
    t.method("BinVolume", [](const Foption_t* a) -> int { return a->BinVolume; });
    t.method("BinVolume", [](Foption_t* a) -> int { return a->BinVolume; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:50:8
    // signature to use in the veto list: Foption_t::BinVolume
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding BinVolume! methods to provide write access to the field BinVolume (" __HERE__ ")");
    t.method("BinVolume!", [](Foption_t& a, int val) -> int { return a.BinVolume = val; });

    DEBUG_MSG("Adding BinVolume! methods to provide write access to the field BinVolume (" __HERE__ ")");
    t.method("BinVolume!", [](Foption_t* a, int val) -> int { return a->BinVolume = val; });

    DEBUG_MSG("Adding hRobust methods  to provide read access to the field hRobust (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:51:11
    // signature to use in the veto list: Foption_t::hRobust
    t.method("hRobust", [](const Foption_t& a) -> double { return a.hRobust; });
    t.method("hRobust", [](Foption_t& a) -> double { return a.hRobust; });
    t.method("hRobust", [](const Foption_t* a) -> double { return a->hRobust; });
    t.method("hRobust", [](Foption_t* a) -> double { return a->hRobust; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:51:11
    // signature to use in the veto list: Foption_t::hRobust
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding hRobust! methods to provide write access to the field hRobust (" __HERE__ ")");
    t.method("hRobust!", [](Foption_t& a, double val) -> double { return a.hRobust = val; });

    DEBUG_MSG("Adding hRobust! methods to provide write access to the field hRobust (" __HERE__ ")");
    t.method("hRobust!", [](Foption_t* a, double val) -> double { return a->hRobust = val; });

    DEBUG_MSG("Adding ExecPolicy methods  to provide read access to the field ExecPolicy (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:52:27
    // signature to use in the veto list: Foption_t::ExecPolicy
    t.method("ExecPolicy", [](const Foption_t& a) -> ROOT::EExecutionPolicy { return a.ExecPolicy; });
    t.method("ExecPolicy", [](Foption_t& a) -> ROOT::EExecutionPolicy { return a.ExecPolicy; });
    t.method("ExecPolicy", [](const Foption_t* a) -> ROOT::EExecutionPolicy { return a->ExecPolicy; });
    t.method("ExecPolicy", [](Foption_t* a) -> ROOT::EExecutionPolicy { return a->ExecPolicy; });
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Foption.h:52:27
    // signature to use in the veto list: Foption_t::ExecPolicy
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ExecPolicy! methods to provide write access to the field ExecPolicy (" __HERE__ ")");
    t.method("ExecPolicy!", [](Foption_t& a, ROOT::EExecutionPolicy val) -> ROOT::EExecutionPolicy { return a.ExecPolicy = val; });

    DEBUG_MSG("Adding ExecPolicy! methods to provide write access to the field ExecPolicy (" __HERE__ ")");
    t.method("ExecPolicy!", [](Foption_t* a, ROOT::EExecutionPolicy val) -> ROOT::EExecutionPolicy { return a->ExecPolicy = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Foption_t>> type_;
};
std::shared_ptr<Wrapper> newJlFoption_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlFoption_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFitResultPtr> : std::false_type { };
  template<> struct DefaultConstructible<TFitResultPtr> : std::false_type { };
}

// Class generating the wrapper for type TFitResultPtr
// signature to use in the veto file: TFitResultPtr
struct JlTFitResultPtr: public Wrapper {

  JlTFitResultPtr(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFitResultPtr (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:32:7
    jlcxx::TypeWrapper<TFitResultPtr>  t = jlModule.add_type<TFitResultPtr>("TFitResultPtr");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFitResultPtr>>(new jlcxx::TypeWrapper<TFitResultPtr>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResultPtr::TFitResultPtr(int) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:35:4
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResultPtr::TFitResultPtr(const std::shared_ptr<TFitResult> &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:37:4
    t.constructor<const std::shared_ptr<TFitResult> &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResultPtr::TFitResultPtr(TFitResult *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:39:4
    t.constructor<TFitResult *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResultPtr::TFitResultPtr(const TFitResultPtr &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:41:4
    t.constructor<const TFitResultPtr &>(/*finalize=*/jlcxx::finalize_policy::yes);
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for TFitResult & TFitResultPtr::operator*() (" __HERE__ ")");
    // signature to use in the veto list: TFitResult & TFitResultPtr::operator*()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:45:16
    t.method("getindex", [](TFitResultPtr const& a)->TFitResult & { return a.operator*(); });
    t.method("getindex", [](TFitResultPtr const* a)->TFitResult & { return a->operator*(); });

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for TFitResult * TFitResultPtr::operator->() (" __HERE__ ")");
    // signature to use in the veto list: TFitResult * TFitResultPtr::operator->()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:47:16
    t.method("arrow", [](TFitResultPtr const& a)->TFitResult * { return a.operator->(); });
    t.method("arrow", [](TFitResultPtr const* a)->TFitResult * { return a->operator->(); });

    DEBUG_MSG("Adding wrapper for TFitResult * TFitResultPtr::Get() (" __HERE__ ")");
    // signature to use in the veto list: TFitResult * TFitResultPtr::Get()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:49:16
    t.method("Get", [](TFitResultPtr const& a)->TFitResult * { return a.Get(); });
    t.method("Get", [](TFitResultPtr const* a)->TFitResult * { return a->Get(); });

    DEBUG_MSG("Adding wrapper for TFitResultPtr & TFitResultPtr::operator=(const TFitResultPtr &) (" __HERE__ ")");
    // signature to use in the veto list: TFitResultPtr & TFitResultPtr::operator=(const TFitResultPtr &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:51:19
    t.method("assign", [](TFitResultPtr& a, const TFitResultPtr & arg0)->TFitResultPtr & { return a.operator=(arg0); });
    t.method("assign", [](TFitResultPtr* a, const TFitResultPtr & arg0)->TFitResultPtr & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TFitResultPtr::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TFitResultPtr::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!Class_Version", []()->Version_t { return TFitResultPtr::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TFitResultPtr::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFitResultPtr::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    t.method("IsA", [](TFitResultPtr const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TFitResultPtr const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TFitResultPtr::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFitResultPtr::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    t.method("StreamerNVirtual", [](TFitResultPtr& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TFitResultPtr* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TFitResultPtr::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFitResultPtr::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!DeclFileName", []() { return (std::string)TFitResultPtr::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TFitResultPtr::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFitResultPtr::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!ImplFileLine", []()->int { return TFitResultPtr::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TFitResultPtr::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFitResultPtr::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!ImplFileName", []() { return (std::string)TFitResultPtr::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TFitResultPtr::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFitResultPtr::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!Class_Name", []() { return (std::string)TFitResultPtr::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TFitResultPtr::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFitResultPtr::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!Dictionary", []()->TClass * { return TFitResultPtr::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TFitResultPtr::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFitResultPtr::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!Class", []()->TClass * { return TFitResultPtr::Class(); });

    DEBUG_MSG("Adding wrapper for void TFitResultPtr::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFitResultPtr::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    t.method("Streamer", [](TFitResultPtr& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TFitResultPtr* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TFitResultPtr::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFitResultPtr::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResultPtr.h:60:4
    module_.method("TFitResultPtr!DeclFileLine", []()->int { return TFitResultPtr::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFitResultPtr>> type_;
};
std::shared_ptr<Wrapper> newJlTFitResultPtr(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFitResultPtr(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFitResult> : std::false_type { };
  template<> struct DefaultConstructible<TFitResult> : std::false_type { };
template<> struct SuperType<TFitResult> { typedef TNamed type; };
}

// Class generating the wrapper for type TFitResult
// signature to use in the veto file: TFitResult
struct JlTFitResult: public Wrapper {

  JlTFitResult(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFitResult (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:34:7
    jlcxx::TypeWrapper<TFitResult>  t = jlModule.add_type<TFitResult>("TFitResult",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFitResult>>(new jlcxx::TypeWrapper<TFitResult>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResult::TFitResult(int) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:39:4
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResult::TFitResult(const char *, const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:45:4
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TFitResult::TFitResult(const ROOT::Fit::FitResult &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:51:4
    t.constructor<const ROOT::Fit::FitResult &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void TFitResult::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TFitResult::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:56:10
    t.method("Print", [](TFitResult const& a)->void { a.Print(); });
    t.method("Print", [](TFitResult const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TFitResult const* a)->void { a->Print(); });
    t.method("Print", [](TFitResult const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for TMatrixDSym TFitResult::GetCovarianceMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TMatrixDSym TFitResult::GetCovarianceMatrix()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:58:16
    t.method("GetCovarianceMatrix", [](TFitResult const& a)->TMatrixDSym { return a.GetCovarianceMatrix(); });
    t.method("GetCovarianceMatrix", [](TFitResult const* a)->TMatrixDSym { return a->GetCovarianceMatrix(); });

    DEBUG_MSG("Adding wrapper for TMatrixDSym TFitResult::GetCorrelationMatrix() (" __HERE__ ")");
    // signature to use in the veto list: TMatrixDSym TFitResult::GetCorrelationMatrix()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:60:16
    t.method("GetCorrelationMatrix", [](TFitResult const& a)->TMatrixDSym { return a.GetCorrelationMatrix(); });
    t.method("GetCorrelationMatrix", [](TFitResult const* a)->TMatrixDSym { return a->GetCorrelationMatrix(); });

    DEBUG_MSG("Adding wrapper for bool TFitResult::Scan(unsigned int, TGraph *, double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool TFitResult::Scan(unsigned int, TGraph *, double, double)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:64:10
    t.method("Scan", [](TFitResult& a, unsigned int arg0, TGraph * arg1)->bool { return a.Scan(arg0, arg1); });
    t.method("Scan", [](TFitResult& a, unsigned int arg0, TGraph * arg1, double arg2)->bool { return a.Scan(arg0, arg1, arg2); });
    t.method("Scan", [](TFitResult& a, unsigned int arg0, TGraph * arg1, double arg2, double arg3)->bool { return a.Scan(arg0, arg1, arg2, arg3); });
    t.method("Scan", [](TFitResult* a, unsigned int arg0, TGraph * arg1)->bool { return a->Scan(arg0, arg1); });
    t.method("Scan", [](TFitResult* a, unsigned int arg0, TGraph * arg1, double arg2)->bool { return a->Scan(arg0, arg1, arg2); });
    t.method("Scan", [](TFitResult* a, unsigned int arg0, TGraph * arg1, double arg2, double arg3)->bool { return a->Scan(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool TFitResult::Contour(unsigned int, unsigned int, TGraph *, double) (" __HERE__ ")");
    // signature to use in the veto list: bool TFitResult::Contour(unsigned int, unsigned int, TGraph *, double)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:69:10
    t.method("Contour", [](TFitResult& a, unsigned int arg0, unsigned int arg1, TGraph * arg2)->bool { return a.Contour(arg0, arg1, arg2); });
    t.method("Contour", [](TFitResult& a, unsigned int arg0, unsigned int arg1, TGraph * arg2, double arg3)->bool { return a.Contour(arg0, arg1, arg2, arg3); });
    t.method("Contour", [](TFitResult* a, unsigned int arg0, unsigned int arg1, TGraph * arg2)->bool { return a->Contour(arg0, arg1, arg2); });
    t.method("Contour", [](TFitResult* a, unsigned int arg0, unsigned int arg1, TGraph * arg2, double arg3)->bool { return a->Contour(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for double TFitResult::Error(unsigned int) (" __HERE__ ")");
    // signature to use in the veto list: double TFitResult::Error(unsigned int)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:74:11
    t.method("Error", [](TFitResult const& a, unsigned int arg0)->double { return a.Error(arg0); });
    t.method("Error", [](TFitResult const* a, unsigned int arg0)->double { return a->Error(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t TFitResult::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TFitResult::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!Class_Version", []()->Version_t { return TFitResult::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TFitResult::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFitResult::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    t.method("IsA", [](TFitResult const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TFitResult const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TFitResult::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFitResult::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    t.method("StreamerNVirtual", [](TFitResult& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TFitResult* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TFitResult::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFitResult::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!DeclFileName", []() { return (std::string)TFitResult::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TFitResult::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFitResult::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!ImplFileLine", []()->int { return TFitResult::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TFitResult::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFitResult::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!ImplFileName", []() { return (std::string)TFitResult::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TFitResult::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TFitResult::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!Class_Name", []() { return (std::string)TFitResult::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TFitResult::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFitResult::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!Dictionary", []()->TClass * { return TFitResult::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TFitResult::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TFitResult::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!Class", []()->TClass * { return TFitResult::Class(); });

    DEBUG_MSG("Adding wrapper for void TFitResult::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TFitResult::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    t.method("Streamer", [](TFitResult& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TFitResult* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TFitResult::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TFitResult::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TFitResult.h:79:4
    module_.method("TFitResult!DeclFileLine", []()->int { return TFitResult::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFitResult>> type_;
};
std::shared_ptr<Wrapper> newJlTFitResult(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFitResult(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1> : std::false_type { };
  template<> struct DefaultConstructible<TF1> : std::false_type { };
template<> struct SuperType<TF1> { typedef TNamed type; };
}

// Class generating the wrapper for type TF1
// signature to use in the veto file: TF1
struct JlTF1: public Wrapper {

  JlTF1(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:233:7
    jlcxx::TypeWrapper<TF1>  t = jlModule.add_type<TF1>("TF1",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1>>(new jlcxx::TypeWrapper<TF1>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, const char *, Double_t, Double_t, TF1::EAddToList, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:350:4
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, TF1::EAddToList>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, const char *, Double_t, Double_t, TF1::EAddToList, bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, const char *, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:351:4
    t.constructor<const char *, const char *, Double_t, Double_t, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, Double_t, Double_t, Int_t, Int_t, TF1::EAddToList) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:352:4
    t.constructor<const char *, Double_t, Double_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t, Double_t, Int_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t, Double_t, Int_t, Int_t, TF1::EAddToList>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t, TF1::EAddToList) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:354:4
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *)>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t, TF1::EAddToList>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const TF1 &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:432:4
    t.constructor<const TF1 &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for TF1 & TF1::operator=(const TF1 &) (" __HERE__ ")");
    // signature to use in the veto list: TF1 & TF1::operator=(const TF1 &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:433:9
    t.method("assign", [](TF1& a, const TF1 & arg0)->TF1 & { return a.operator=(arg0); });
    t.method("assign", [](TF1* a, const TF1 & arg0)->TF1 & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::AddParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::AddParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:435:21
    t.method("AddParameter", [](TF1& a, const TString & arg0, Double_t arg1)->void { a.AddParameter(arg0, arg1); });
    t.method("AddParameter", [](TF1* a, const TString & arg0, Double_t arg1)->void { a->AddParameter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::AddToGlobalList(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::AddToGlobalList(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:442:21
    t.method("AddToGlobalList", [](TF1& a)->Bool_t { return a.AddToGlobalList(); });
    t.method("AddToGlobalList", [](TF1& a, Bool_t arg0)->Bool_t { return a.AddToGlobalList(arg0); });
    t.method("AddToGlobalList", [](TF1* a)->Bool_t { return a->AddToGlobalList(); });
    t.method("AddToGlobalList", [](TF1* a, Bool_t arg0)->Bool_t { return a->AddToGlobalList(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::DefaultAddToGlobalList(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::DefaultAddToGlobalList(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:443:21
    module_.method("TF1!DefaultAddToGlobalList", []()->Bool_t { return TF1::DefaultAddToGlobalList(); });
    module_.method("TF1!DefaultAddToGlobalList", [](Bool_t arg0)->Bool_t { return TF1::DefaultAddToGlobalList(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Browse(TBrowser *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:444:13
    t.method("Browse", [](TF1& a, TBrowser * arg0)->void { a.Browse(arg0); });
    t.method("Browse", [](TF1* a, TBrowser * arg0)->void { a->Browse(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:445:13
    t.method("Copy", [](TF1 const& a, TObject & arg0)->void { a.Copy(arg0); });
    t.method("Copy", [](TF1 const* a, TObject & arg0)->void { a->Copy(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::Clone(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::Clone(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:446:21
    t.method("Clone", [](TF1 const& a)->TObject * { return a.Clone(); });
    t.method("Clone", [](TF1 const& a, const char * arg0)->TObject * { return a.Clone(arg0); });
    t.method("Clone", [](TF1 const* a)->TObject * { return a->Clone(); });
    t.method("Clone", [](TF1 const* a, const char * arg0)->TObject * { return a->Clone(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:447:21
    t.method("Derivative", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative(arg0); });
    t.method("Derivative", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative(arg0, arg1); });
    t.method("Derivative", [](TF1 const& a, Double_t arg0, Double_t * arg1, Double_t arg2)->Double_t { return a.Derivative(arg0, arg1, arg2); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative(arg0); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative(arg0, arg1); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0, Double_t * arg1, Double_t arg2)->Double_t { return a->Derivative(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative2(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative2(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:448:21
    t.method("Derivative2", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative2(arg0); });
    t.method("Derivative2", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative2(arg0, arg1); });
    t.method("Derivative2", [](TF1 const& a, Double_t arg0, Double_t * arg1, Double_t arg2)->Double_t { return a.Derivative2(arg0, arg1, arg2); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative2(arg0); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative2(arg0, arg1); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0, Double_t * arg1, Double_t arg2)->Double_t { return a->Derivative2(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative3(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative3(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:449:21
    t.method("Derivative3", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative3(arg0); });
    t.method("Derivative3", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative3(arg0, arg1); });
    t.method("Derivative3", [](TF1 const& a, Double_t arg0, Double_t * arg1, Double_t arg2)->Double_t { return a.Derivative3(arg0, arg1, arg2); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative3(arg0); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative3(arg0, arg1); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0, Double_t * arg1, Double_t arg2)->Double_t { return a->Derivative3(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::DerivativeError() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::DerivativeError()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:450:21
    module_.method("TF1!DerivativeError", []()->Double_t { return TF1::DerivativeError(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:451:13
    t.method("DistancetoPrimitive", [](TF1& a, Int_t arg0, Int_t arg1)->Int_t { return a.DistancetoPrimitive(arg0, arg1); });
    t.method("DistancetoPrimitive", [](TF1* a, Int_t arg0, Int_t arg1)->Int_t { return a->DistancetoPrimitive(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:452:13
    t.method("Draw", [](TF1& a)->void { a.Draw(); });
    t.method("Draw", [](TF1& a, Option_t * arg0)->void { a.Draw(arg0); });
    t.method("Draw", [](TF1* a)->void { a->Draw(); });
    t.method("Draw", [](TF1* a, Option_t * arg0)->void { a->Draw(arg0); });

    DEBUG_MSG("Adding wrapper for TF1 * TF1::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF1::DrawCopy(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:453:21
    t.method("DrawCopy", [](TF1 const& a)->TF1 * { return a.DrawCopy(); });
    t.method("DrawCopy", [](TF1 const& a, Option_t * arg0)->TF1 * { return a.DrawCopy(arg0); });
    t.method("DrawCopy", [](TF1 const* a)->TF1 * { return a->DrawCopy(); });
    t.method("DrawCopy", [](TF1 const* a, Option_t * arg0)->TF1 * { return a->DrawCopy(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::DrawDerivative(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::DrawDerivative(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:454:21
    t.method("DrawDerivative", [](TF1& a)->TObject * { return a.DrawDerivative(); });
    t.method("DrawDerivative", [](TF1& a, Option_t * arg0)->TObject * { return a.DrawDerivative(arg0); });
    t.method("DrawDerivative", [](TF1* a)->TObject * { return a->DrawDerivative(); });
    t.method("DrawDerivative", [](TF1* a, Option_t * arg0)->TObject * { return a->DrawDerivative(arg0); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::DrawIntegral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::DrawIntegral(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:455:21
    t.method("DrawIntegral", [](TF1& a)->TObject * { return a.DrawIntegral(); });
    t.method("DrawIntegral", [](TF1& a, Option_t * arg0)->TObject * { return a.DrawIntegral(arg0); });
    t.method("DrawIntegral", [](TF1* a)->TObject * { return a->DrawIntegral(); });
    t.method("DrawIntegral", [](TF1* a, Option_t * arg0)->TObject * { return a->DrawIntegral(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::DrawF1(Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::DrawF1(Double_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:456:21
    t.method("DrawF1", [](TF1& a, Double_t arg0, Double_t arg1)->void { a.DrawF1(arg0, arg1); });
    t.method("DrawF1", [](TF1& a, Double_t arg0, Double_t arg1, Option_t * arg2)->void { a.DrawF1(arg0, arg1, arg2); });
    t.method("DrawF1", [](TF1* a, Double_t arg0, Double_t arg1)->void { a->DrawF1(arg0, arg1); });
    t.method("DrawF1", [](TF1* a, Double_t arg0, Double_t arg1, Option_t * arg2)->void { a->DrawF1(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Eval(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Eval(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:457:21
    t.method("Eval", [](TF1 const& a, Double_t arg0)->Double_t { return a.Eval(arg0); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.Eval(arg0, arg1); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Eval(arg0, arg1, arg2, arg3); });
    t.method("Eval", [](TF1 const* a, Double_t arg0)->Double_t { return a->Eval(arg0); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->Eval(arg0, arg1); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Eval(arg0, arg1, arg2); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Eval(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::EvalPar(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:459:21
    t.method("EvalPar", [](TF1& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); });
    t.method("EvalPar", [](TF1& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.EvalPar(arg0, arg1); });
    t.method("EvalPar", [](TF1* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); });
    t.method("EvalPar", [](TF1* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->EvalPar(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::operator()(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::operator()(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:461:21
    t.method("paren", [](TF1 const& a, Double_t arg0)->Double_t { return a.operator()(arg0); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.operator()(arg0, arg1); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.operator()(arg0, arg1, arg2); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.operator()(arg0, arg1, arg2, arg3); });
    t.method("paren", [](TF1 const* a, Double_t arg0)->Double_t { return a->operator()(arg0); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->operator()(arg0, arg1); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->operator()(arg0, arg1, arg2); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->operator()(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF1::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:463:13
    t.method("ExecuteEvent", [](TF1& a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a.ExecuteEvent(arg0, arg1, arg2); });
    t.method("ExecuteEvent", [](TF1* a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a->ExecuteEvent(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::FixParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::FixParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:464:21
    t.method("FixParameter", [](TF1& a, Int_t arg0, Double_t arg1)->void { a.FixParameter(arg0, arg1); });
    t.method("FixParameter", [](TF1* a, Int_t arg0, Double_t arg1)->void { a->FixParameter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for bool TF1::IsVectorized() (" __HERE__ ")");
    // signature to use in the veto list: bool TF1::IsVectorized()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:465:14
    t.method("IsVectorized", [](TF1& a)->bool { return a.IsVectorized(); });
    t.method("IsVectorized", [](TF1* a)->bool { return a->IsVectorized(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetChisquare() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetChisquare()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:470:17
    t.method("GetChisquare", [](TF1 const& a)->Double_t { return a.GetChisquare(); });
    t.method("GetChisquare", [](TF1 const* a)->Double_t { return a->GetChisquare(); });

    DEBUG_MSG("Adding wrapper for TH1 * TF1::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF1::GetHistogram()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:474:21
    t.method("GetHistogram", [](TF1 const& a)->TH1 * { return a.GetHistogram(); });
    t.method("GetHistogram", [](TF1 const* a)->TH1 * { return a->GetHistogram(); });

    DEBUG_MSG("Adding wrapper for TH1 * TF1::CreateHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF1::CreateHistogram()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:475:21
    t.method("CreateHistogram", [](TF1& a)->TH1 * { return a.CreateHistogram(); });
    t.method("CreateHistogram", [](TF1* a)->TH1 * { return a->CreateHistogram(); });

    DEBUG_MSG("Adding wrapper for TFormula * TF1::GetFormula() (" __HERE__ ")");
    // signature to use in the veto list: TFormula * TF1::GetFormula()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:479:22
    t.method("GetFormula", [](TF1& a)->TFormula * { return a.GetFormula(); });
    t.method("GetFormula", [](TF1* a)->TFormula * { return a->GetFormula(); });

    DEBUG_MSG("Adding wrapper for const TFormula * TF1::GetFormula() (" __HERE__ ")");
    // signature to use in the veto list: const TFormula * TF1::GetFormula()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:483:28
    t.method("GetFormula", [](TF1 const& a)->const TFormula * { return a.GetFormula(); });
    t.method("GetFormula", [](TF1 const* a)->const TFormula * { return a->GetFormula(); });

    DEBUG_MSG("Adding wrapper for TString TF1::GetExpFormula(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TString TF1::GetExpFormula(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:487:21
    t.method("GetExpFormula", [](TF1 const& a)->TString { return a.GetExpFormula(); });
    t.method("GetExpFormula", [](TF1 const& a, Option_t * arg0)->TString { return a.GetExpFormula(arg0); });
    t.method("GetExpFormula", [](TF1 const* a)->TString { return a->GetExpFormula(); });
    t.method("GetExpFormula", [](TF1 const* a, Option_t * arg0)->TString { return a->GetExpFormula(arg0); });

    DEBUG_MSG("Adding wrapper for const TObject * TF1::GetLinearPart(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const TObject * TF1::GetLinearPart(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:491:27
    t.method("GetLinearPart", [](TF1 const& a, Int_t arg0)->const TObject * { return a.GetLinearPart(arg0); });
    t.method("GetLinearPart", [](TF1 const* a, Int_t arg0)->const TObject * { return a->GetLinearPart(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximum(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximum(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:495:21
    t.method("GetMaximum", [](TF1 const& a)->Double_t { return a.GetMaximum(); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMaximum(arg0); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMaximum(arg0, arg1); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMaximum(arg0, arg1, arg2); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMaximum(arg0, arg1, arg2, arg3); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a.GetMaximum(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetMaximum", [](TF1 const* a)->Double_t { return a->GetMaximum(); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMaximum(arg0); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMaximum(arg0, arg1); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMaximum(arg0, arg1, arg2); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMaximum(arg0, arg1, arg2, arg3); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a->GetMaximum(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimum(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimum(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:496:21
    t.method("GetMinimum", [](TF1 const& a)->Double_t { return a.GetMinimum(); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMinimum(arg0); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMinimum(arg0, arg1); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMinimum(arg0, arg1, arg2); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMinimum(arg0, arg1, arg2, arg3); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a.GetMinimum(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetMinimum", [](TF1 const* a)->Double_t { return a->GetMinimum(); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMinimum(arg0); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMinimum(arg0, arg1); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMinimum(arg0, arg1, arg2); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMinimum(arg0, arg1, arg2, arg3); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a->GetMinimum(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximumX(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximumX(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:497:21
    t.method("GetMaximumX", [](TF1 const& a)->Double_t { return a.GetMaximumX(); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMaximumX(arg0); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMaximumX(arg0, arg1); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMaximumX(arg0, arg1, arg2); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMaximumX(arg0, arg1, arg2, arg3); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a.GetMaximumX(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetMaximumX", [](TF1 const* a)->Double_t { return a->GetMaximumX(); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMaximumX(arg0); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMaximumX(arg0, arg1); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMaximumX(arg0, arg1, arg2); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMaximumX(arg0, arg1, arg2, arg3); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a->GetMaximumX(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimumX(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimumX(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:498:21
    t.method("GetMinimumX", [](TF1 const& a)->Double_t { return a.GetMinimumX(); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMinimumX(arg0); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMinimumX(arg0, arg1); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMinimumX(arg0, arg1, arg2); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMinimumX(arg0, arg1, arg2, arg3); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a.GetMinimumX(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetMinimumX", [](TF1 const* a)->Double_t { return a->GetMinimumX(); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMinimumX(arg0); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMinimumX(arg0, arg1); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMinimumX(arg0, arg1, arg2); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMinimumX(arg0, arg1, arg2, arg3); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3, Bool_t arg4)->Double_t { return a->GetMinimumX(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximumStored() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximumStored()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:499:21
    t.method("GetMaximumStored", [](TF1 const& a)->Double_t { return a.GetMaximumStored(); });
    t.method("GetMaximumStored", [](TF1 const* a)->Double_t { return a->GetMaximumStored(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimumStored() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimumStored()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:503:21
    t.method("GetMinimumStored", [](TF1 const& a)->Double_t { return a.GetMinimumStored(); });
    t.method("GetMinimumStored", [](TF1 const* a)->Double_t { return a->GetMinimumStored(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNpar()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:507:21
    t.method("GetNpar", [](TF1 const& a)->Int_t { return a.GetNpar(); });
    t.method("GetNpar", [](TF1 const* a)->Int_t { return a->GetNpar(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNdim() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNdim()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:511:21
    t.method("GetNdim", [](TF1 const& a)->Int_t { return a.GetNdim(); });
    t.method("GetNdim", [](TF1 const* a)->Int_t { return a->GetNdim(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNDF() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNDF()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:515:21
    t.method("GetNDF", [](TF1 const& a)->Int_t { return a.GetNDF(); });
    t.method("GetNDF", [](TF1 const* a)->Int_t { return a->GetNDF(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNpx() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNpx()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:516:21
    t.method("GetNpx", [](TF1 const& a)->Int_t { return a.GetNpx(); });
    t.method("GetNpx", [](TF1 const* a)->Int_t { return a->GetNpx(); });

    DEBUG_MSG("Adding wrapper for TMethodCall * TF1::GetMethodCall() (" __HERE__ ")");
    // signature to use in the veto list: TMethodCall * TF1::GetMethodCall()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:520:20
    t.method("GetMethodCall", [](TF1 const& a)->TMethodCall * { return a.GetMethodCall(); });
    t.method("GetMethodCall", [](TF1 const* a)->TMethodCall * { return a->GetMethodCall(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumber()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:524:21
    t.method("GetNumber", [](TF1 const& a)->Int_t { return a.GetNumber(); });
    t.method("GetNumber", [](TF1 const* a)->Int_t { return a->GetNumber(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumberFreeParameters() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumberFreeParameters()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:528:21
    t.method("GetNumberFreeParameters", [](TF1 const& a)->Int_t { return a.GetNumberFreeParameters(); });
    t.method("GetNumberFreeParameters", [](TF1 const* a)->Int_t { return a->GetNumberFreeParameters(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumberFitPoints() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumberFitPoints()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:529:21
    t.method("GetNumberFitPoints", [](TF1 const& a)->Int_t { return a.GetNumberFitPoints(); });
    t.method("GetNumberFitPoints", [](TF1 const* a)->Int_t { return a->GetNumberFitPoints(); });

    DEBUG_MSG("Adding wrapper for char * TF1::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TF1::GetObjectInfo(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:533:13
    t.method("GetObjectInfo", [](TF1 const& a, Int_t arg0, Int_t arg1)->char * { return a.GetObjectInfo(arg0, arg1); });
    t.method("GetObjectInfo", [](TF1 const* a, Int_t arg0, Int_t arg1)->char * { return a->GetObjectInfo(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::GetParent() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::GetParent()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:534:16
    t.method("GetParent", [](TF1 const& a)->TObject * { return a.GetParent(); });
    t.method("GetParent", [](TF1 const* a)->TObject * { return a->GetParent(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParameter(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:538:21
    t.method("GetParameter", [](TF1 const& a, Int_t arg0)->Double_t { return a.GetParameter(arg0); });
    t.method("GetParameter", [](TF1 const* a, Int_t arg0)->Double_t { return a->GetParameter(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParameter(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParameter(const TString &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:542:21
    t.method("GetParameter", [](TF1 const& a, const TString & arg0)->Double_t { return a.GetParameter(arg0); });
    t.method("GetParameter", [](TF1 const* a, const TString & arg0)->Double_t { return a->GetParameter(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t * TF1::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TF1::GetParameters()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:546:22
    t.method("GetParameters", [](TF1 const& a)->Double_t * { return a.GetParameters(); });
    t.method("GetParameters", [](TF1 const* a)->Double_t * { return a->GetParameters(); });

    DEBUG_MSG("Adding wrapper for void TF1::GetParameters(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetParameters(Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:550:21
    t.method("GetParameters", [](TF1& a, Double_t * arg0)->void { a.GetParameters(arg0); });
    t.method("GetParameters", [](TF1* a, Double_t * arg0)->void { a->GetParameters(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TF1::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::GetParName(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:555:24
    t.method("GetParName", [](TF1 const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1 const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetParNumber(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:559:21
    t.method("GetParNumber", [](TF1 const& a, const char * arg0)->Int_t { return a.GetParNumber(arg0); });
    t.method("GetParNumber", [](TF1 const* a, const char * arg0)->Int_t { return a->GetParNumber(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParError(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParError(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:563:21
    t.method("GetParError", [](TF1 const& a, Int_t arg0)->Double_t { return a.GetParError(arg0); });
    t.method("GetParError", [](TF1 const* a, Int_t arg0)->Double_t { return a->GetParError(arg0); });

    DEBUG_MSG("Adding wrapper for const Double_t * TF1::GetParErrors() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF1::GetParErrors()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:564:28
    t.method("GetParErrors", [](TF1 const& a)->const Double_t * { return a.GetParErrors(); });
    t.method("GetParErrors", [](TF1 const* a)->const Double_t * { return a->GetParErrors(); });

    DEBUG_MSG("Adding wrapper for void TF1::GetParLimits(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetParLimits(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:568:21
    t.method("GetParLimits", [](TF1 const& a, Int_t arg0, Double_t & arg1, Double_t & arg2)->void { a.GetParLimits(arg0, arg1, arg2); });
    t.method("GetParLimits", [](TF1 const* a, Int_t arg0, Double_t & arg1, Double_t & arg2)->void { a->GetParLimits(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetProb() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetProb()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:569:21
    t.method("GetProb", [](TF1 const& a)->Double_t { return a.GetProb(); });
    t.method("GetProb", [](TF1 const* a)->Double_t { return a->GetProb(); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetQuantiles(Int_t, Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetQuantiles(Int_t, Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:570:21
    t.method("GetQuantiles", [](TF1& a, Int_t arg0, Double_t * arg1, const Double_t * arg2)->Int_t { return a.GetQuantiles(arg0, arg1, arg2); });
    t.method("GetQuantiles", [](TF1* a, Int_t arg0, Double_t * arg1, const Double_t * arg2)->Int_t { return a->GetQuantiles(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetRandom(TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetRandom(TRandom *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:571:21
    t.method("GetRandom", [](TF1& a)->Double_t { return a.GetRandom(); });
    t.method("GetRandom", [](TF1& a, TRandom * arg0)->Double_t { return a.GetRandom(arg0); });
    t.method("GetRandom", [](TF1& a, TRandom * arg0, Option_t * arg1)->Double_t { return a.GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1* a)->Double_t { return a->GetRandom(); });
    t.method("GetRandom", [](TF1* a, TRandom * arg0)->Double_t { return a->GetRandom(arg0); });
    t.method("GetRandom", [](TF1* a, TRandom * arg0, Option_t * arg1)->Double_t { return a->GetRandom(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetRandom(Double_t, Double_t, TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetRandom(Double_t, Double_t, TRandom *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:572:21
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a.GetRandom(arg0, arg1, arg2); });
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1, TRandom * arg2, Option_t * arg3)->Double_t { return a.GetRandom(arg0, arg1, arg2, arg3); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a->GetRandom(arg0, arg1, arg2); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1, TRandom * arg2, Option_t * arg3)->Double_t { return a->GetRandom(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:573:21
    t.method("GetRange", [](TF1 const& a, Double_t & arg0, Double_t & arg1)->void { a.GetRange(arg0, arg1); });
    t.method("GetRange", [](TF1 const* a, Double_t & arg0, Double_t & arg1)->void { a->GetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:574:21
    t.method("GetRange", [](TF1 const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a.GetRange(arg0, arg1, arg2, arg3); });
    t.method("GetRange", [](TF1 const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a->GetRange(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:575:21
    t.method("GetRange", [](TF1 const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4, Double_t & arg5)->void { a.GetRange(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetRange", [](TF1 const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4, Double_t & arg5)->void { a->GetRange(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetSave(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetSave(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:576:21
    t.method("GetSave", [](TF1& a, const Double_t * arg0)->Double_t { return a.GetSave(arg0); });
    t.method("GetSave", [](TF1* a, const Double_t * arg0)->Double_t { return a->GetSave(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetX(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetX(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:577:21
    t.method("GetX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetX(arg0); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetX(arg0, arg1); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetX(arg0, arg1, arg2); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.GetX(arg0, arg1, arg2, arg3); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4)->Double_t { return a.GetX(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4, Bool_t arg5)->Double_t { return a.GetX(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetX(arg0); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetX(arg0, arg1); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetX(arg0, arg1, arg2); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->GetX(arg0, arg1, arg2, arg3); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4)->Double_t { return a->GetX(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4, Bool_t arg5)->Double_t { return a->GetX(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetXmin()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:578:21
    t.method("GetXmin", [](TF1 const& a)->Double_t { return a.GetXmin(); });
    t.method("GetXmin", [](TF1 const* a)->Double_t { return a->GetXmin(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetXmax()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:582:21
    t.method("GetXmax", [](TF1 const& a)->Double_t { return a.GetXmax(); });
    t.method("GetXmax", [](TF1 const* a)->Double_t { return a->GetXmax(); });

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetXaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetXaxis()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:586:21
    t.method("GetXaxis", [](TF1 const& a)->TAxis * { return a.GetXaxis(); });
    t.method("GetXaxis", [](TF1 const* a)->TAxis * { return a->GetXaxis(); });

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetYaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetYaxis()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:587:21
    t.method("GetYaxis", [](TF1 const& a)->TAxis * { return a.GetYaxis(); });
    t.method("GetYaxis", [](TF1 const* a)->TAxis * { return a->GetYaxis(); });

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetZaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetZaxis()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:588:21
    t.method("GetZaxis", [](TF1 const& a)->TAxis * { return a.GetZaxis(); });
    t.method("GetZaxis", [](TF1 const* a)->TAxis * { return a->GetZaxis(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetVariable(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetVariable(const TString &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:589:21
    t.method("GetVariable", [](TF1& a, const TString & arg0)->Double_t { return a.GetVariable(arg0); });
    t.method("GetVariable", [](TF1* a, const TString & arg0)->Double_t { return a->GetVariable(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GradientPar(Int_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GradientPar(Int_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:593:21
    t.method("GradientPar", [](TF1& a, Int_t arg0, const Double_t * arg1)->Double_t { return a.GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1& a, Int_t arg0, const Double_t * arg1, Double_t arg2)->Double_t { return a.GradientPar(arg0, arg1, arg2); });
    t.method("GradientPar", [](TF1* a, Int_t arg0, const Double_t * arg1)->Double_t { return a->GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1* a, Int_t arg0, const Double_t * arg1, Double_t arg2)->Double_t { return a->GradientPar(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::GradientPar(const Double_t *, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GradientPar(const Double_t *, Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:599:21
    t.method("GradientPar", [](TF1& a, const Double_t * arg0, Double_t * arg1)->void { a.GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1& a, const Double_t * arg0, Double_t * arg1, Double_t arg2)->void { a.GradientPar(arg0, arg1, arg2); });
    t.method("GradientPar", [](TF1* a, const Double_t * arg0, Double_t * arg1)->void { a->GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1* a, const Double_t * arg0, Double_t * arg1, Double_t arg2)->void { a->GradientPar(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::InitArgs(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::InitArgs(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:605:21
    t.method("InitArgs", [](TF1& a, const Double_t * arg0, const Double_t * arg1)->void { a.InitArgs(arg0, arg1); });
    t.method("InitArgs", [](TF1* a, const Double_t * arg0, const Double_t * arg1)->void { a->InitArgs(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::InitStandardFunctions() (" __HERE__ ")");
    // signature to use in the veto list: void TF1::InitStandardFunctions()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:606:21
    module_.method("TF1!InitStandardFunctions", []()->void { TF1::InitStandardFunctions(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Integral(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Integral(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:607:21
    t.method("Integral", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Integral(arg0, arg1); });
    t.method("Integral", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Integral(arg0, arg1, arg2); });
    t.method("Integral", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Integral(arg0, arg1); });
    t.method("Integral", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Integral(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralOneDim(Double_t, Double_t, Double_t, Double_t, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralOneDim(Double_t, Double_t, Double_t, Double_t, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:608:21
    t.method("IntegralOneDim", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t & arg4)->Double_t { return a.IntegralOneDim(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralOneDim", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t & arg4)->Double_t { return a->IntegralOneDim(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralError(Double_t, Double_t, const Double_t *, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralError(Double_t, Double_t, const Double_t *, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:609:21
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.IntegralError(arg0, arg1); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3, Double_t arg4)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->IntegralError(arg0, arg1); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3, Double_t arg4)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralError(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralError(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:610:21
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->Double_t { return a.IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4, Double_t arg5)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->Double_t { return a->IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4, Double_t arg5)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralFast(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralFast(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:612:21
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5, Double_t arg6)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5, Double_t arg6)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:613:21
    t.method("IntegralMultiple", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Int_t arg3, Double_t arg4, Double_t arg5, Double_t & arg6, Int_t & arg7, Int_t & arg8)->Double_t { return a.IntegralMultiple(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("IntegralMultiple", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Int_t arg3, Double_t arg4, Double_t arg5, Double_t & arg6, Int_t & arg7, Int_t & arg8)->Double_t { return a->IntegralMultiple(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:614:21
    t.method("IntegralMultiple", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Int_t arg3, Int_t arg4, Double_t arg5, Double_t & arg6, Int_t & arg7, Int_t & arg8)->Double_t { return a.IntegralMultiple(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("IntegralMultiple", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Int_t arg3, Int_t arg4, Double_t arg5, Double_t & arg6, Int_t & arg7, Int_t & arg8)->Double_t { return a->IntegralMultiple(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:618:21
    t.method("IntegralMultiple", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Double_t arg3, Double_t & arg4)->Double_t { return a.IntegralMultiple(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralMultiple", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, Double_t arg3, Double_t & arg4)->Double_t { return a->IntegralMultiple(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsEvalNormalized() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsEvalNormalized()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:619:21
    t.method("IsEvalNormalized", [](TF1 const& a)->Bool_t { return a.IsEvalNormalized(); });
    t.method("IsEvalNormalized", [](TF1 const* a)->Bool_t { return a->IsEvalNormalized(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsInside(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsInside(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:624:21
    t.method("IsInside", [](TF1 const& a, const Double_t * arg0)->Bool_t { return a.IsInside(arg0); });
    t.method("IsInside", [](TF1 const* a, const Double_t * arg0)->Bool_t { return a->IsInside(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsLinear() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsLinear()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:628:21
    t.method("IsLinear", [](TF1 const& a)->Bool_t { return a.IsLinear(); });
    t.method("IsLinear", [](TF1 const* a)->Bool_t { return a->IsLinear(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsValid()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:632:21
    t.method("IsValid", [](TF1 const& a)->Bool_t { return a.IsValid(); });
    t.method("IsValid", [](TF1 const* a)->Bool_t { return a->IsValid(); });

    DEBUG_MSG("Adding wrapper for void TF1::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Print(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:633:13
    t.method("Print", [](TF1 const& a)->void { a.Print(); });
    t.method("Print", [](TF1 const& a, Option_t * arg0)->void { a.Print(arg0); });
    t.method("Print", [](TF1 const* a)->void { a->Print(); });
    t.method("Print", [](TF1 const* a, Option_t * arg0)->void { a->Print(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:634:13
    t.method("Paint", [](TF1& a)->void { a.Paint(); });
    t.method("Paint", [](TF1& a, Option_t * arg0)->void { a.Paint(arg0); });
    t.method("Paint", [](TF1* a)->void { a->Paint(); });
    t.method("Paint", [](TF1* a, Option_t * arg0)->void { a->Paint(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::ReleaseParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::ReleaseParameter(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:635:21
    t.method("ReleaseParameter", [](TF1& a, Int_t arg0)->void { a.ReleaseParameter(arg0); });
    t.method("ReleaseParameter", [](TF1* a, Int_t arg0)->void { a->ReleaseParameter(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:636:21
    t.method("Save", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.Save(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Save", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->Save(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TF1::SetChisquare(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetChisquare(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:638:21
    t.method("SetChisquare", [](TF1& a, Double_t arg0)->void { a.SetChisquare(arg0); });
    t.method("SetChisquare", [](TF1* a, Double_t arg0)->void { a->SetChisquare(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetFitResult(const ROOT::Fit::FitResult &, const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetFitResult(const ROOT::Fit::FitResult &, const Int_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:642:21
    t.method("SetFitResult", [](TF1& a, const ROOT::Fit::FitResult & arg0)->void { a.SetFitResult(arg0); });
    t.method("SetFitResult", [](TF1& a, const ROOT::Fit::FitResult & arg0, const Int_t * arg1)->void { a.SetFitResult(arg0, arg1); });
    t.method("SetFitResult", [](TF1* a, const ROOT::Fit::FitResult & arg0)->void { a->SetFitResult(arg0); });
    t.method("SetFitResult", [](TF1* a, const ROOT::Fit::FitResult & arg0, const Int_t * arg1)->void { a->SetFitResult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetMaximum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetMaximum(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:647:21
    t.method("SetMaximum", [](TF1& a)->void { a.SetMaximum(); });
    t.method("SetMaximum", [](TF1& a, Double_t arg0)->void { a.SetMaximum(arg0); });
    t.method("SetMaximum", [](TF1* a)->void { a->SetMaximum(); });
    t.method("SetMaximum", [](TF1* a, Double_t arg0)->void { a->SetMaximum(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetMinimum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetMinimum(Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:648:21
    t.method("SetMinimum", [](TF1& a)->void { a.SetMinimum(); });
    t.method("SetMinimum", [](TF1& a, Double_t arg0)->void { a.SetMinimum(arg0); });
    t.method("SetMinimum", [](TF1* a)->void { a->SetMinimum(); });
    t.method("SetMinimum", [](TF1* a, Double_t arg0)->void { a->SetMinimum(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetNDF(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNDF(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:649:21
    t.method("SetNDF", [](TF1& a, Int_t arg0)->void { a.SetNDF(arg0); });
    t.method("SetNDF", [](TF1* a, Int_t arg0)->void { a->SetNDF(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetNumberFitPoints(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNumberFitPoints(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:650:21
    t.method("SetNumberFitPoints", [](TF1& a, Int_t arg0)->void { a.SetNumberFitPoints(arg0); });
    t.method("SetNumberFitPoints", [](TF1* a, Int_t arg0)->void { a->SetNumberFitPoints(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetNormalized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNormalized(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:654:21
    t.method("SetNormalized", [](TF1& a, Bool_t arg0)->void { a.SetNormalized(arg0); });
    t.method("SetNormalized", [](TF1* a, Bool_t arg0)->void { a->SetNormalized(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetNpx(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNpx(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:659:21
    t.method("SetNpx", [](TF1& a)->void { a.SetNpx(); });
    t.method("SetNpx", [](TF1& a, Int_t arg0)->void { a.SetNpx(arg0); });
    t.method("SetNpx", [](TF1* a)->void { a->SetNpx(); });
    t.method("SetNpx", [](TF1* a, Int_t arg0)->void { a->SetNpx(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:660:21
    t.method("SetParameter", [](TF1& a, Int_t arg0, Double_t arg1)->void { a.SetParameter(arg0, arg1); });
    t.method("SetParameter", [](TF1* a, Int_t arg0, Double_t arg1)->void { a->SetParameter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:665:21
    t.method("SetParameter", [](TF1& a, const TString & arg0, Double_t arg1)->void { a.SetParameter(arg0, arg1); });
    t.method("SetParameter", [](TF1* a, const TString & arg0, Double_t arg1)->void { a->SetParameter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:670:21
    t.method("SetParameters", [](TF1& a, const Double_t * arg0)->void { a.SetParameters(arg0); });
    t.method("SetParameters", [](TF1* a, const Double_t * arg0)->void { a->SetParameters(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParameters(double, double, double, double, double, double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameters(double, double, double, double, double, double, double, double, double, double, double)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:677:17
    t.method("SetParameters", [](TF1& a, double arg0)->void { a.SetParameters(arg0); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9, double arg10)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("SetParameters", [](TF1* a, double arg0)->void { a->SetParameters(arg0); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9, double arg10)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:691:21
    t.method("SetParName", [](TF1& a, Int_t arg0, const char * arg1)->void { a.SetParName(arg0, arg1); });
    t.method("SetParName", [](TF1* a, Int_t arg0, const char * arg1)->void { a->SetParName(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:692:21
    t.method("SetParNames", [](TF1& a)->void { a.SetParNames(); });
    t.method("SetParNames", [](TF1& a, const char * arg0)->void { a.SetParNames(arg0); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1)->void { a.SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2)->void { a.SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a.SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9, const char * arg10)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("SetParNames", [](TF1* a)->void { a->SetParNames(); });
    t.method("SetParNames", [](TF1* a, const char * arg0)->void { a->SetParNames(arg0); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1)->void { a->SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2)->void { a->SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a->SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9, const char * arg10)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParError(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParError(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:696:21
    t.method("SetParError", [](TF1& a, Int_t arg0, Double_t arg1)->void { a.SetParError(arg0, arg1); });
    t.method("SetParError", [](TF1* a, Int_t arg0, Double_t arg1)->void { a->SetParError(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParErrors(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParErrors(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:697:21
    t.method("SetParErrors", [](TF1& a, const Double_t * arg0)->void { a.SetParErrors(arg0); });
    t.method("SetParErrors", [](TF1* a, const Double_t * arg0)->void { a->SetParErrors(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParLimits(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParLimits(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:698:21
    t.method("SetParLimits", [](TF1& a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a.SetParLimits(arg0, arg1, arg2); });
    t.method("SetParLimits", [](TF1* a, Int_t arg0, Double_t arg1, Double_t arg2)->void { a->SetParLimits(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParent(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParent(TObject *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:699:21
    t.method("SetParent", [](TF1& a)->void { a.SetParent(); });
    t.method("SetParent", [](TF1& a, TObject * arg0)->void { a.SetParent(arg0); });
    t.method("SetParent", [](TF1* a)->void { a->SetParent(); });
    t.method("SetParent", [](TF1* a, TObject * arg0)->void { a->SetParent(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:703:21
    t.method("SetRange", [](TF1& a, Double_t arg0, Double_t arg1)->void { a.SetRange(arg0, arg1); });
    t.method("SetRange", [](TF1* a, Double_t arg0, Double_t arg1)->void { a->SetRange(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:704:21
    t.method("SetRange", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetRange(arg0, arg1, arg2, arg3); });
    t.method("SetRange", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetRange(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:705:21
    t.method("SetRange", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetRange(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetRange", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetRange(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for void TF1::SetSavedPoint(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetSavedPoint(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:706:21
    t.method("SetSavedPoint", [](TF1& a, Int_t arg0, Double_t arg1)->void { a.SetSavedPoint(arg0, arg1); });
    t.method("SetSavedPoint", [](TF1* a, Int_t arg0, Double_t arg1)->void { a->SetSavedPoint(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::SetTitle(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetTitle(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:707:13
    t.method("SetTitle", [](TF1& a)->void { a.SetTitle(); });
    t.method("SetTitle", [](TF1& a, const char * arg0)->void { a.SetTitle(arg0); });
    t.method("SetTitle", [](TF1* a)->void { a->SetTitle(); });
    t.method("SetTitle", [](TF1* a, const char * arg0)->void { a->SetTitle(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::SetVectorized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetVectorized(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:708:21
    t.method("SetVectorized", [](TF1& a, Bool_t arg0)->void { a.SetVectorized(arg0); });
    t.method("SetVectorized", [](TF1* a, Bool_t arg0)->void { a->SetVectorized(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Update()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:715:21
    t.method("Update", [](TF1& a)->void { a.Update(); });
    t.method("Update", [](TF1* a)->void { a->Update(); });

    DEBUG_MSG("Adding wrapper for TF1 * TF1::GetCurrent() (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF1::GetCurrent()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:717:21
    module_.method("TF1!GetCurrent", []()->TF1 * { return TF1::GetCurrent(); });

    DEBUG_MSG("Adding wrapper for void TF1::AbsValue(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::AbsValue(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:718:21
    module_.method("TF1!AbsValue", []()->void { TF1::AbsValue(); });
    module_.method("TF1!AbsValue", [](Bool_t arg0)->void { TF1::AbsValue(arg0); });

    DEBUG_MSG("Adding wrapper for void TF1::RejectPoint(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::RejectPoint(Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:719:21
    module_.method("TF1!RejectPoint", []()->void { TF1::RejectPoint(); });
    module_.method("TF1!RejectPoint", [](Bool_t arg0)->void { TF1::RejectPoint(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::RejectedPoint() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::RejectedPoint()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:720:21
    module_.method("TF1!RejectedPoint", []()->Bool_t { return TF1::RejectedPoint(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetCurrent(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetCurrent(TF1 *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:721:21
    module_.method("TF1!SetCurrent", [](TF1 * arg0)->void { TF1::SetCurrent(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Moment(Double_t, Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Moment(Double_t, Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:724:21
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Moment(arg0, arg1, arg2); });
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a.Moment(arg0, arg1, arg2, arg3); });
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3, Double_t arg4)->Double_t { return a.Moment(arg0, arg1, arg2, arg3, arg4); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Moment(arg0, arg1, arg2); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a->Moment(arg0, arg1, arg2, arg3); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3, Double_t arg4)->Double_t { return a->Moment(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::CentralMoment(Double_t, Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::CentralMoment(Double_t, Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:725:21
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.CentralMoment(arg0, arg1, arg2); });
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a.CentralMoment(arg0, arg1, arg2, arg3); });
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3, Double_t arg4)->Double_t { return a.CentralMoment(arg0, arg1, arg2, arg3, arg4); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->CentralMoment(arg0, arg1, arg2); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a->CentralMoment(arg0, arg1, arg2, arg3); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3, Double_t arg4)->Double_t { return a->CentralMoment(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Mean(Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Mean(Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:726:21
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Mean(arg0, arg1); });
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.Mean(arg0, arg1, arg2); });
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2, Double_t arg3)->Double_t { return a.Mean(arg0, arg1, arg2, arg3); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Mean(arg0, arg1); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->Mean(arg0, arg1, arg2); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2, Double_t arg3)->Double_t { return a->Mean(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Variance(Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Variance(Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:730:21
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Variance(arg0, arg1); });
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.Variance(arg0, arg1, arg2); });
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2, Double_t arg3)->Double_t { return a.Variance(arg0, arg1, arg2, arg3); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Variance(arg0, arg1); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->Variance(arg0, arg1, arg2); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2, Double_t arg3)->Double_t { return a->Variance(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void TF1::CalcGaussLegendreSamplingPoints(Int_t, Double_t *, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::CalcGaussLegendreSamplingPoints(Int_t, Double_t *, Double_t *, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:738:21
    module_.method("TF1!CalcGaussLegendreSamplingPoints", [](Int_t arg0, Double_t * arg1, Double_t * arg2)->void { TF1::CalcGaussLegendreSamplingPoints(arg0, arg1, arg2); });
    module_.method("TF1!CalcGaussLegendreSamplingPoints", [](Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3)->void { TF1::CalcGaussLegendreSamplingPoints(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Version_t TF1::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!Class_Version", []()->Version_t { return TF1::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    t.method("IsA", [](TF1 const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TF1 const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TF1::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    t.method("StreamerNVirtual", [](TF1& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TF1* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TF1::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!DeclFileName", []() { return (std::string)TF1::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!ImplFileLine", []()->int { return TF1::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF1::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!ImplFileName", []() { return (std::string)TF1::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!Class_Name", []() { return (std::string)TF1::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!Dictionary", []()->TClass * { return TF1::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!Class", []()->TClass * { return TF1::Class(); });

    DEBUG_MSG("Adding wrapper for void TF1::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    t.method("Streamer", [](TF1& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TF1* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TF1::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TF1.h:748:4
    module_.method("TF1!DeclFileLine", []()->int { return TF1::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1>> type_;
};
std::shared_ptr<Wrapper> newJlTF1(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<ROOT::Math::MinimizerOptions> : std::false_type { };
  template<> struct DefaultConstructible<ROOT::Math::MinimizerOptions> : std::false_type { };
}

// Class generating the wrapper for type ROOT::Math::MinimizerOptions
// signature to use in the veto file: ROOT::Math::MinimizerOptions
struct JlROOT_Math_MinimizerOptions: public Wrapper {

  JlROOT_Math_MinimizerOptions(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type ROOT::Math::MinimizerOptions (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/Math/MinimizerOptions.h:40:7
    jlcxx::TypeWrapper<ROOT::Math::MinimizerOptions>  t = jlModule.add_type<ROOT::Math::MinimizerOptions>("ROOT!Math!MinimizerOptions");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<ROOT::Math::MinimizerOptions>>(new jlcxx::TypeWrapper<ROOT::Math::MinimizerOptions>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<ROOT::Math::MinimizerOptions>> type_;
};
std::shared_ptr<Wrapper> newJlROOT_Math_MinimizerOptions(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlROOT_Math_MinimizerOptions(module));
}
