// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Foption_t> : std::false_type { };
  template<> struct DefaultConstructible<Foption_t> : std::false_type { };
}

// Class generating the wrapper for type Foption_t
// signature to use in the veto file: Foption_t
struct JlFoption_t: public Wrapper {

  JlFoption_t(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Foption_t (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/Foption.h:24:8
    jlcxx::TypeWrapper<Foption_t>  t = jlModule.add_type<Foption_t>("Foption_t");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Foption_t>>(new jlcxx::TypeWrapper<Foption_t>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Foption_t>> type_;
};
std::shared_ptr<Wrapper> newJlFoption_t(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlFoption_t(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF1> : std::false_type { };
  template<> struct DefaultConstructible<TF1> : std::false_type { };
template<> struct SuperType<TF1> { typedef TNamed type; };
}

// Class generating the wrapper for type TF1
// signature to use in the veto file: TF1
struct JlTF1: public Wrapper {

  JlTF1(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1 (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:233:7
    jlcxx::TypeWrapper<TF1>  t = jlModule.add_type<TF1>("TF1",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1>>(new jlcxx::TypeWrapper<TF1>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, const char *, Double_t, Double_t, TF1::EAddToList, bool) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:350:4
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, TF1::EAddToList>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, TF1::EAddToList, bool>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, const char *, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:351:4
    t.constructor<const char *, const char *, Double_t, Double_t, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, Double_t, Double_t, Int_t, Int_t, TF1::EAddToList) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:352:4
    t.constructor<const char *, Double_t, Double_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t, Double_t, Int_t, Int_t, TF1::EAddToList>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t, TF1::EAddToList) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:354:4
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *)>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Int_t, Int_t, TF1::EAddToList>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF1::TF1(const TF1 &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:432:4
    t.constructor<const TF1 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TF1 & TF1::operator=(const TF1 &) (" __HERE__ ")");
    // signature to use in the veto list: TF1 & TF1::operator=(const TF1 &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:433:9
    t.method("assign", static_cast<TF1 & (TF1::*)(const TF1 &) >(&TF1::operator=));

    DEBUG_MSG("Adding wrapper for void TF1::AddParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::AddParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:435:21
    t.method("AddParameter", static_cast<void (TF1::*)(const TString &, Double_t) >(&TF1::AddParameter));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::AddToGlobalList(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::AddToGlobalList(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:442:21
    t.method("AddToGlobalList", static_cast<Bool_t (TF1::*)(Bool_t) >(&TF1::AddToGlobalList));
    t.method("AddToGlobalList", [](TF1& a)->Bool_t { return a.AddToGlobalList(); });
    t.method("AddToGlobalList", [](TF1* a)->Bool_t { return a->AddToGlobalList(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::DefaultAddToGlobalList(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::DefaultAddToGlobalList(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:443:21
    module_.method("TF1!DefaultAddToGlobalList", static_cast<Bool_t (*)(Bool_t) >(&TF1::DefaultAddToGlobalList));
    module_.method("TF1!DefaultAddToGlobalList", []()->Bool_t { return TF1::DefaultAddToGlobalList(); });

    DEBUG_MSG("Adding wrapper for void TF1::Browse(TBrowser *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Browse(TBrowser *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:444:13
    t.method("Browse", static_cast<void (TF1::*)(TBrowser *) >(&TF1::Browse));

    DEBUG_MSG("Adding wrapper for void TF1::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:445:13
    t.method("Copy", static_cast<void (TF1::*)(TObject &)  const>(&TF1::Copy));

    DEBUG_MSG("Adding wrapper for TObject * TF1::Clone(const char *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::Clone(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:446:21
    t.method("Clone", static_cast<TObject * (TF1::*)(const char *)  const>(&TF1::Clone));
    t.method("Clone", [](TF1 const& a)->TObject * { return a.Clone(); });
    t.method("Clone", [](TF1 const* a)->TObject * { return a->Clone(); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:447:21
    t.method("Derivative", static_cast<Double_t (TF1::*)(Double_t, Double_t *, Double_t)  const>(&TF1::Derivative));
    t.method("Derivative", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative(arg0); });
    t.method("Derivative", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative(arg0, arg1); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative(arg0); });
    t.method("Derivative", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative2(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative2(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:448:21
    t.method("Derivative2", static_cast<Double_t (TF1::*)(Double_t, Double_t *, Double_t)  const>(&TF1::Derivative2));
    t.method("Derivative2", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative2(arg0); });
    t.method("Derivative2", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative2(arg0, arg1); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative2(arg0); });
    t.method("Derivative2", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative2(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Derivative3(Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Derivative3(Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:449:21
    t.method("Derivative3", static_cast<Double_t (TF1::*)(Double_t, Double_t *, Double_t)  const>(&TF1::Derivative3));
    t.method("Derivative3", [](TF1 const& a, Double_t arg0)->Double_t { return a.Derivative3(arg0); });
    t.method("Derivative3", [](TF1 const& a, Double_t arg0, Double_t * arg1)->Double_t { return a.Derivative3(arg0, arg1); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0)->Double_t { return a->Derivative3(arg0); });
    t.method("Derivative3", [](TF1 const* a, Double_t arg0, Double_t * arg1)->Double_t { return a->Derivative3(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::DerivativeError() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::DerivativeError()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:450:21
    module_.method("TF1!DerivativeError", static_cast<Double_t (*)() >(&TF1::DerivativeError));

    DEBUG_MSG("Adding wrapper for Int_t TF1::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:451:13
    t.method("DistancetoPrimitive", static_cast<Int_t (TF1::*)(Int_t, Int_t) >(&TF1::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TF1::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Draw(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:452:13
    t.method("Draw", static_cast<void (TF1::*)(Option_t *) >(&TF1::Draw));
    t.method("Draw", [](TF1& a)->void { a.Draw(); });
    t.method("Draw", [](TF1* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for TF1 * TF1::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF1::DrawCopy(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:453:21
    t.method("DrawCopy", static_cast<TF1 * (TF1::*)(Option_t *)  const>(&TF1::DrawCopy));
    t.method("DrawCopy", [](TF1 const& a)->TF1 * { return a.DrawCopy(); });
    t.method("DrawCopy", [](TF1 const* a)->TF1 * { return a->DrawCopy(); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::DrawDerivative(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::DrawDerivative(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:454:21
    t.method("DrawDerivative", static_cast<TObject * (TF1::*)(Option_t *) >(&TF1::DrawDerivative));
    t.method("DrawDerivative", [](TF1& a)->TObject * { return a.DrawDerivative(); });
    t.method("DrawDerivative", [](TF1* a)->TObject * { return a->DrawDerivative(); });

    DEBUG_MSG("Adding wrapper for TObject * TF1::DrawIntegral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::DrawIntegral(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:455:21
    t.method("DrawIntegral", static_cast<TObject * (TF1::*)(Option_t *) >(&TF1::DrawIntegral));
    t.method("DrawIntegral", [](TF1& a)->TObject * { return a.DrawIntegral(); });
    t.method("DrawIntegral", [](TF1* a)->TObject * { return a->DrawIntegral(); });

    DEBUG_MSG("Adding wrapper for void TF1::DrawF1(Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::DrawF1(Double_t, Double_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:456:21
    t.method("DrawF1", static_cast<void (TF1::*)(Double_t, Double_t, Option_t *) >(&TF1::DrawF1));
    t.method("DrawF1", [](TF1& a, Double_t arg0, Double_t arg1)->void { a.DrawF1(arg0, arg1); });
    t.method("DrawF1", [](TF1* a, Double_t arg0, Double_t arg1)->void { a->DrawF1(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Eval(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Eval(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:457:21
    t.method("Eval", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t)  const>(&TF1::Eval));
    t.method("Eval", [](TF1 const& a, Double_t arg0)->Double_t { return a.Eval(arg0); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.Eval(arg0, arg1); });
    t.method("Eval", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](TF1 const* a, Double_t arg0)->Double_t { return a->Eval(arg0); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->Eval(arg0, arg1); });
    t.method("Eval", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Eval(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::EvalPar(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:459:21
    t.method("EvalPar", static_cast<Double_t (TF1::*)(const Double_t *, const Double_t *) >(&TF1::EvalPar));
    t.method("EvalPar", [](TF1& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); });
    t.method("EvalPar", [](TF1* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::operator()(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::operator()(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:461:21
    t.method("paren", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t)  const>(&TF1::operator()));
    t.method("paren", [](TF1 const& a, Double_t arg0)->Double_t { return a.operator()(arg0); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.operator()(arg0, arg1); });
    t.method("paren", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.operator()(arg0, arg1, arg2); });
    t.method("paren", [](TF1 const* a, Double_t arg0)->Double_t { return a->operator()(arg0); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->operator()(arg0, arg1); });
    t.method("paren", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->operator()(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:463:13
    t.method("ExecuteEvent", static_cast<void (TF1::*)(Int_t, Int_t, Int_t) >(&TF1::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for void TF1::FixParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::FixParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:464:21
    t.method("FixParameter", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::FixParameter));

    DEBUG_MSG("Adding wrapper for bool TF1::IsVectorized() (" __HERE__ ")");
    // signature to use in the veto list: bool TF1::IsVectorized()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:465:14
    t.method("IsVectorized", static_cast<bool (TF1::*)() >(&TF1::IsVectorized));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetChisquare() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetChisquare()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:470:17
    t.method("GetChisquare", static_cast<Double_t (TF1::*)()  const>(&TF1::GetChisquare));

    DEBUG_MSG("Adding wrapper for TH1 * TF1::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF1::GetHistogram()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:474:21
    t.method("GetHistogram", static_cast<TH1 * (TF1::*)()  const>(&TF1::GetHistogram));

    DEBUG_MSG("Adding wrapper for TH1 * TF1::CreateHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF1::CreateHistogram()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:475:21
    t.method("CreateHistogram", static_cast<TH1 * (TF1::*)() >(&TF1::CreateHistogram));

    DEBUG_MSG("Adding wrapper for TFormula * TF1::GetFormula() (" __HERE__ ")");
    // signature to use in the veto list: TFormula * TF1::GetFormula()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:479:22
    t.method("GetFormula", static_cast<TFormula * (TF1::*)() >(&TF1::GetFormula));

    DEBUG_MSG("Adding wrapper for const TFormula * TF1::GetFormula() (" __HERE__ ")");
    // signature to use in the veto list: const TFormula * TF1::GetFormula()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:483:28
    t.method("GetFormula", static_cast<const TFormula * (TF1::*)()  const>(&TF1::GetFormula));

    DEBUG_MSG("Adding wrapper for TString TF1::GetExpFormula(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TString TF1::GetExpFormula(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:487:21
    t.method("GetExpFormula", static_cast<TString (TF1::*)(Option_t *)  const>(&TF1::GetExpFormula));
    t.method("GetExpFormula", [](TF1 const& a)->TString { return a.GetExpFormula(); });
    t.method("GetExpFormula", [](TF1 const* a)->TString { return a->GetExpFormula(); });

    DEBUG_MSG("Adding wrapper for const TObject * TF1::GetLinearPart(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const TObject * TF1::GetLinearPart(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:491:27
    t.method("GetLinearPart", static_cast<const TObject * (TF1::*)(Int_t)  const>(&TF1::GetLinearPart));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximum(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximum(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:495:21
    t.method("GetMaximum", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMaximum));
    t.method("GetMaximum", [](TF1 const& a)->Double_t { return a.GetMaximum(); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMaximum(arg0); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMaximum(arg0, arg1); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMaximum(arg0, arg1, arg2); });
    t.method("GetMaximum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMaximum(arg0, arg1, arg2, arg3); });
    t.method("GetMaximum", [](TF1 const* a)->Double_t { return a->GetMaximum(); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMaximum(arg0); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMaximum(arg0, arg1); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMaximum(arg0, arg1, arg2); });
    t.method("GetMaximum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMaximum(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimum(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimum(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:496:21
    t.method("GetMinimum", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMinimum));
    t.method("GetMinimum", [](TF1 const& a)->Double_t { return a.GetMinimum(); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMinimum(arg0); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMinimum(arg0, arg1); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMinimum(arg0, arg1, arg2); });
    t.method("GetMinimum", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMinimum(arg0, arg1, arg2, arg3); });
    t.method("GetMinimum", [](TF1 const* a)->Double_t { return a->GetMinimum(); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMinimum(arg0); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMinimum(arg0, arg1); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMinimum(arg0, arg1, arg2); });
    t.method("GetMinimum", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMinimum(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximumX(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximumX(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:497:21
    t.method("GetMaximumX", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMaximumX));
    t.method("GetMaximumX", [](TF1 const& a)->Double_t { return a.GetMaximumX(); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMaximumX(arg0); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMaximumX(arg0, arg1); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMaximumX(arg0, arg1, arg2); });
    t.method("GetMaximumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMaximumX(arg0, arg1, arg2, arg3); });
    t.method("GetMaximumX", [](TF1 const* a)->Double_t { return a->GetMaximumX(); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMaximumX(arg0); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMaximumX(arg0, arg1); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMaximumX(arg0, arg1, arg2); });
    t.method("GetMaximumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMaximumX(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimumX(Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimumX(Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:498:21
    t.method("GetMinimumX", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetMinimumX));
    t.method("GetMinimumX", [](TF1 const& a)->Double_t { return a.GetMinimumX(); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetMinimumX(arg0); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetMinimumX(arg0, arg1); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetMinimumX(arg0, arg1, arg2); });
    t.method("GetMinimumX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a.GetMinimumX(arg0, arg1, arg2, arg3); });
    t.method("GetMinimumX", [](TF1 const* a)->Double_t { return a->GetMinimumX(); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetMinimumX(arg0); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetMinimumX(arg0, arg1); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetMinimumX(arg0, arg1, arg2); });
    t.method("GetMinimumX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Int_t arg3)->Double_t { return a->GetMinimumX(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMaximumStored() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMaximumStored()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:499:21
    t.method("GetMaximumStored", static_cast<Double_t (TF1::*)()  const>(&TF1::GetMaximumStored));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetMinimumStored() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetMinimumStored()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:503:21
    t.method("GetMinimumStored", static_cast<Double_t (TF1::*)()  const>(&TF1::GetMinimumStored));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNpar() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNpar()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:507:21
    t.method("GetNpar", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNpar));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNdim() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNdim()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:511:21
    t.method("GetNdim", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNdim));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNDF() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNDF()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:515:21
    t.method("GetNDF", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNDF));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNpx() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNpx()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:516:21
    t.method("GetNpx", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNpx));

    DEBUG_MSG("Adding wrapper for TMethodCall * TF1::GetMethodCall() (" __HERE__ ")");
    // signature to use in the veto list: TMethodCall * TF1::GetMethodCall()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:520:20
    t.method("GetMethodCall", static_cast<TMethodCall * (TF1::*)()  const>(&TF1::GetMethodCall));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumber() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumber()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:524:21
    t.method("GetNumber", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNumber));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumberFreeParameters() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumberFreeParameters()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:528:21
    t.method("GetNumberFreeParameters", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNumberFreeParameters));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetNumberFitPoints() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetNumberFitPoints()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:529:21
    t.method("GetNumberFitPoints", static_cast<Int_t (TF1::*)()  const>(&TF1::GetNumberFitPoints));

    DEBUG_MSG("Adding wrapper for char * TF1::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TF1::GetObjectInfo(Int_t, Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:533:13
    t.method("GetObjectInfo", static_cast<char * (TF1::*)(Int_t, Int_t)  const>(&TF1::GetObjectInfo));

    DEBUG_MSG("Adding wrapper for TObject * TF1::GetParent() (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF1::GetParent()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:534:16
    t.method("GetParent", static_cast<TObject * (TF1::*)()  const>(&TF1::GetParent));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:538:21
    t.method("GetParameter", static_cast<Double_t (TF1::*)(Int_t)  const>(&TF1::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParameter(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParameter(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:542:21
    t.method("GetParameter", static_cast<Double_t (TF1::*)(const TString &)  const>(&TF1::GetParameter));

    DEBUG_MSG("Adding wrapper for Double_t * TF1::GetParameters() (" __HERE__ ")");
    // signature to use in the veto list: Double_t * TF1::GetParameters()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:546:22
    t.method("GetParameters", static_cast<Double_t * (TF1::*)()  const>(&TF1::GetParameters));

    DEBUG_MSG("Adding wrapper for void TF1::GetParameters(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetParameters(Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:550:21
    t.method("GetParameters", static_cast<void (TF1::*)(Double_t *) >(&TF1::GetParameters));

    DEBUG_MSG("Adding wrapper for const char * TF1::GetParName(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::GetParName(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:555:24
    t.method("GetParName", [](TF1 const& a, Int_t arg0) { return (std::string)a.GetParName(arg0); });
    t.method("GetParName", [](TF1 const* a, Int_t arg0) { return (std::string)a->GetParName(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetParNumber(const char *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetParNumber(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:559:21
    t.method("GetParNumber", static_cast<Int_t (TF1::*)(const char *)  const>(&TF1::GetParNumber));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetParError(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetParError(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:563:21
    t.method("GetParError", static_cast<Double_t (TF1::*)(Int_t)  const>(&TF1::GetParError));

    DEBUG_MSG("Adding wrapper for const Double_t * TF1::GetParErrors() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TF1::GetParErrors()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:564:28
    t.method("GetParErrors", static_cast<const Double_t * (TF1::*)()  const>(&TF1::GetParErrors));

    DEBUG_MSG("Adding wrapper for void TF1::GetParLimits(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetParLimits(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:568:21
    t.method("GetParLimits", static_cast<void (TF1::*)(Int_t, Double_t &, Double_t &)  const>(&TF1::GetParLimits));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetProb() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetProb()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:569:21
    t.method("GetProb", static_cast<Double_t (TF1::*)()  const>(&TF1::GetProb));

    DEBUG_MSG("Adding wrapper for Int_t TF1::GetQuantiles(Int_t, Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF1::GetQuantiles(Int_t, Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:570:21
    t.method("GetQuantiles", static_cast<Int_t (TF1::*)(Int_t, Double_t *, const Double_t *) >(&TF1::GetQuantiles));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetRandom(TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetRandom(TRandom *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:571:21
    t.method("GetRandom", static_cast<Double_t (TF1::*)(TRandom *, Option_t *) >(&TF1::GetRandom));
    t.method("GetRandom", [](TF1& a)->Double_t { return a.GetRandom(); });
    t.method("GetRandom", [](TF1& a, TRandom * arg0)->Double_t { return a.GetRandom(arg0); });
    t.method("GetRandom", [](TF1* a)->Double_t { return a->GetRandom(); });
    t.method("GetRandom", [](TF1* a, TRandom * arg0)->Double_t { return a->GetRandom(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetRandom(Double_t, Double_t, TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetRandom(Double_t, Double_t, TRandom *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:572:21
    t.method("GetRandom", static_cast<Double_t (TF1::*)(Double_t, Double_t, TRandom *, Option_t *) >(&TF1::GetRandom));
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1& a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a.GetRandom(arg0, arg1, arg2); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF1* a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a->GetRandom(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:573:21
    t.method("GetRange", static_cast<void (TF1::*)(Double_t &, Double_t &)  const>(&TF1::GetRange));

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:574:21
    t.method("GetRange", static_cast<void (TF1::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TF1::GetRange));

    DEBUG_MSG("Adding wrapper for void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:575:21
    t.method("GetRange", static_cast<void (TF1::*)(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TF1::GetRange));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetSave(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetSave(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:576:21
    t.method("GetSave", static_cast<Double_t (TF1::*)(const Double_t *) >(&TF1::GetSave));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetX(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetX(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:577:21
    t.method("GetX", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t, Int_t, Bool_t)  const>(&TF1::GetX));
    t.method("GetX", [](TF1 const& a, Double_t arg0)->Double_t { return a.GetX(arg0); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetX(arg0, arg1); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.GetX(arg0, arg1, arg2); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.GetX(arg0, arg1, arg2, arg3); });
    t.method("GetX", [](TF1 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4)->Double_t { return a.GetX(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetX", [](TF1 const* a, Double_t arg0)->Double_t { return a->GetX(arg0); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetX(arg0, arg1); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->GetX(arg0, arg1, arg2); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->GetX(arg0, arg1, arg2, arg3); });
    t.method("GetX", [](TF1 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Int_t arg4)->Double_t { return a->GetX(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetXmin()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:578:21
    t.method("GetXmin", static_cast<Double_t (TF1::*)()  const>(&TF1::GetXmin));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetXmax()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:582:21
    t.method("GetXmax", static_cast<Double_t (TF1::*)()  const>(&TF1::GetXmax));

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetXaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetXaxis()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:586:21
    t.method("GetXaxis", static_cast<TAxis * (TF1::*)()  const>(&TF1::GetXaxis));

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetYaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetYaxis()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:587:21
    t.method("GetYaxis", static_cast<TAxis * (TF1::*)()  const>(&TF1::GetYaxis));

    DEBUG_MSG("Adding wrapper for TAxis * TF1::GetZaxis() (" __HERE__ ")");
    // signature to use in the veto list: TAxis * TF1::GetZaxis()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:588:21
    t.method("GetZaxis", static_cast<TAxis * (TF1::*)()  const>(&TF1::GetZaxis));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GetVariable(const TString &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GetVariable(const TString &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:589:21
    t.method("GetVariable", static_cast<Double_t (TF1::*)(const TString &) >(&TF1::GetVariable));

    DEBUG_MSG("Adding wrapper for Double_t TF1::GradientPar(Int_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::GradientPar(Int_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:593:21
    t.method("GradientPar", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, Double_t) >(&TF1::GradientPar));
    t.method("GradientPar", [](TF1& a, Int_t arg0, const Double_t * arg1)->Double_t { return a.GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1* a, Int_t arg0, const Double_t * arg1)->Double_t { return a->GradientPar(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::GradientPar(const Double_t *, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::GradientPar(const Double_t *, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:599:21
    t.method("GradientPar", static_cast<void (TF1::*)(const Double_t *, Double_t *, Double_t) >(&TF1::GradientPar));
    t.method("GradientPar", [](TF1& a, const Double_t * arg0, Double_t * arg1)->void { a.GradientPar(arg0, arg1); });
    t.method("GradientPar", [](TF1* a, const Double_t * arg0, Double_t * arg1)->void { a->GradientPar(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF1::InitArgs(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::InitArgs(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:605:21
    t.method("InitArgs", static_cast<void (TF1::*)(const Double_t *, const Double_t *) >(&TF1::InitArgs));

    DEBUG_MSG("Adding wrapper for void TF1::InitStandardFunctions() (" __HERE__ ")");
    // signature to use in the veto list: void TF1::InitStandardFunctions()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:606:21
    module_.method("TF1!InitStandardFunctions", static_cast<void (*)() >(&TF1::InitStandardFunctions));

    DEBUG_MSG("Adding wrapper for Double_t TF1::Integral(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Integral(Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:607:21
    t.method("Integral", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t) >(&TF1::Integral));
    t.method("Integral", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Integral(arg0, arg1); });
    t.method("Integral", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Integral(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralOneDim(Double_t, Double_t, Double_t, Double_t, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralOneDim(Double_t, Double_t, Double_t, Double_t, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:608:21
    t.method("IntegralOneDim", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, Double_t, Double_t &) >(&TF1::IntegralOneDim));

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralError(Double_t, Double_t, const Double_t *, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralError(Double_t, Double_t, const Double_t *, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:609:21
    t.method("IntegralError", static_cast<Double_t (TF1::*)(Double_t, Double_t, const Double_t *, const Double_t *, Double_t) >(&TF1::IntegralError));
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.IntegralError(arg0, arg1); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->IntegralError(arg0, arg1); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralError(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralError(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:610:21
    t.method("IntegralError", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, const Double_t *, const Double_t *, Double_t) >(&TF1::IntegralError));
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->Double_t { return a.IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1& a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4)->Double_t { return a.IntegralError(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2)->Double_t { return a->IntegralError(arg0, arg1, arg2); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3); });
    t.method("IntegralError", [](TF1* a, Int_t arg0, const Double_t * arg1, const Double_t * arg2, const Double_t * arg3, const Double_t * arg4)->Double_t { return a->IntegralError(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralFast(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralFast(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:612:21
    t.method("IntegralFast", static_cast<Double_t (TF1::*)(Int_t, Double_t *, Double_t *, Double_t, Double_t, Double_t *, Double_t) >(&TF1::IntegralFast));
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralFast", [](TF1& a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5)->Double_t { return a.IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4); });
    t.method("IntegralFast", [](TF1* a, Int_t arg0, Double_t * arg1, Double_t * arg2, Double_t arg3, Double_t arg4, Double_t * arg5)->Double_t { return a->IntegralFast(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:613:21
    t.method("IntegralMultiple", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, Int_t, Double_t, Double_t, Double_t &, Int_t &, Int_t &) >(&TF1::IntegralMultiple));

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:614:21
    t.method("IntegralMultiple", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, Int_t, Int_t, Double_t, Double_t &, Int_t &, Int_t &) >(&TF1::IntegralMultiple));

    DEBUG_MSG("Adding wrapper for Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::IntegralMultiple(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:618:21
    t.method("IntegralMultiple", static_cast<Double_t (TF1::*)(Int_t, const Double_t *, const Double_t *, Double_t, Double_t &) >(&TF1::IntegralMultiple));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsEvalNormalized() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsEvalNormalized()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:619:21
    t.method("IsEvalNormalized", static_cast<Bool_t (TF1::*)()  const>(&TF1::IsEvalNormalized));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsInside(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsInside(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:624:21
    t.method("IsInside", static_cast<Bool_t (TF1::*)(const Double_t *)  const>(&TF1::IsInside));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsLinear() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsLinear()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:628:21
    t.method("IsLinear", static_cast<Bool_t (TF1::*)()  const>(&TF1::IsLinear));

    DEBUG_MSG("Adding wrapper for Bool_t TF1::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::IsValid()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:632:21
    t.method("IsValid", static_cast<Bool_t (TF1::*)()  const>(&TF1::IsValid));

    DEBUG_MSG("Adding wrapper for void TF1::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Print(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:633:13
    t.method("Print", static_cast<void (TF1::*)(Option_t *)  const>(&TF1::Print));
    t.method("Print", [](TF1 const& a)->void { a.Print(); });
    t.method("Print", [](TF1 const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TF1::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Paint(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:634:13
    t.method("Paint", static_cast<void (TF1::*)(Option_t *) >(&TF1::Paint));
    t.method("Paint", [](TF1& a)->void { a.Paint(); });
    t.method("Paint", [](TF1* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TF1::ReleaseParameter(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::ReleaseParameter(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:635:21
    t.method("ReleaseParameter", static_cast<void (TF1::*)(Int_t) >(&TF1::ReleaseParameter));

    DEBUG_MSG("Adding wrapper for void TF1::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:636:21
    t.method("Save", static_cast<void (TF1::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF1::Save));

    DEBUG_MSG("Adding wrapper for void TF1::SetChisquare(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetChisquare(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:638:21
    t.method("SetChisquare", static_cast<void (TF1::*)(Double_t) >(&TF1::SetChisquare));

    DEBUG_MSG("Adding wrapper for void TF1::SetMaximum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetMaximum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:647:21
    t.method("SetMaximum", static_cast<void (TF1::*)(Double_t) >(&TF1::SetMaximum));
    t.method("SetMaximum", [](TF1& a)->void { a.SetMaximum(); });
    t.method("SetMaximum", [](TF1* a)->void { a->SetMaximum(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetMinimum(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetMinimum(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:648:21
    t.method("SetMinimum", static_cast<void (TF1::*)(Double_t) >(&TF1::SetMinimum));
    t.method("SetMinimum", [](TF1& a)->void { a.SetMinimum(); });
    t.method("SetMinimum", [](TF1* a)->void { a->SetMinimum(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetNDF(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNDF(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:649:21
    t.method("SetNDF", static_cast<void (TF1::*)(Int_t) >(&TF1::SetNDF));

    DEBUG_MSG("Adding wrapper for void TF1::SetNumberFitPoints(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNumberFitPoints(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:650:21
    t.method("SetNumberFitPoints", static_cast<void (TF1::*)(Int_t) >(&TF1::SetNumberFitPoints));

    DEBUG_MSG("Adding wrapper for void TF1::SetNormalized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNormalized(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:654:21
    t.method("SetNormalized", static_cast<void (TF1::*)(Bool_t) >(&TF1::SetNormalized));

    DEBUG_MSG("Adding wrapper for void TF1::SetNpx(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetNpx(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:659:21
    t.method("SetNpx", static_cast<void (TF1::*)(Int_t) >(&TF1::SetNpx));
    t.method("SetNpx", [](TF1& a)->void { a.SetNpx(); });
    t.method("SetNpx", [](TF1* a)->void { a->SetNpx(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParameter(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameter(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:660:21
    t.method("SetParameter", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1::SetParameter(const TString &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameter(const TString &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:665:21
    t.method("SetParameter", static_cast<void (TF1::*)(const TString &, Double_t) >(&TF1::SetParameter));

    DEBUG_MSG("Adding wrapper for void TF1::SetParameters(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameters(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:670:21
    t.method("SetParameters", static_cast<void (TF1::*)(const Double_t *) >(&TF1::SetParameters));

    DEBUG_MSG("Adding wrapper for void TF1::SetParameters(double, double, double, double, double, double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParameters(double, double, double, double, double, double, double, double, double, double, double)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:677:17
    t.method("SetParameters", static_cast<void (TF1::*)(double, double, double, double, double, double, double, double, double, double, double) >(&TF1::SetParameters));
    t.method("SetParameters", [](TF1& a, double arg0)->void { a.SetParameters(arg0); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1)->void { a.SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2)->void { a.SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3)->void { a.SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1& a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9)->void { a.SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParameters", [](TF1* a, double arg0)->void { a->SetParameters(arg0); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1)->void { a->SetParameters(arg0, arg1); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2)->void { a->SetParameters(arg0, arg1, arg2); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3)->void { a->SetParameters(arg0, arg1, arg2, arg3); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParameters", [](TF1* a, double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9)->void { a->SetParameters(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParName(Int_t, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParName(Int_t, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:691:21
    t.method("SetParName", static_cast<void (TF1::*)(Int_t, const char *) >(&TF1::SetParName));

    DEBUG_MSG("Adding wrapper for void TF1::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParNames(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:692:21
    t.method("SetParNames", static_cast<void (TF1::*)(const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *) >(&TF1::SetParNames));
    t.method("SetParNames", [](TF1& a)->void { a.SetParNames(); });
    t.method("SetParNames", [](TF1& a, const char * arg0)->void { a.SetParNames(arg0); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1)->void { a.SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2)->void { a.SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a.SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1& a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a.SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("SetParNames", [](TF1* a)->void { a->SetParNames(); });
    t.method("SetParNames", [](TF1* a, const char * arg0)->void { a->SetParNames(arg0); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1)->void { a->SetParNames(arg0, arg1); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2)->void { a->SetParNames(arg0, arg1, arg2); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3)->void { a->SetParNames(arg0, arg1, arg2, arg3); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("SetParNames", [](TF1* a, const char * arg0, const char * arg1, const char * arg2, const char * arg3, const char * arg4, const char * arg5, const char * arg6, const char * arg7, const char * arg8, const char * arg9)->void { a->SetParNames(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });

    DEBUG_MSG("Adding wrapper for void TF1::SetParError(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParError(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:696:21
    t.method("SetParError", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::SetParError));

    DEBUG_MSG("Adding wrapper for void TF1::SetParErrors(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParErrors(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:697:21
    t.method("SetParErrors", static_cast<void (TF1::*)(const Double_t *) >(&TF1::SetParErrors));

    DEBUG_MSG("Adding wrapper for void TF1::SetParLimits(Int_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParLimits(Int_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:698:21
    t.method("SetParLimits", static_cast<void (TF1::*)(Int_t, Double_t, Double_t) >(&TF1::SetParLimits));

    DEBUG_MSG("Adding wrapper for void TF1::SetParent(TObject *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetParent(TObject *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:699:21
    t.method("SetParent", static_cast<void (TF1::*)(TObject *) >(&TF1::SetParent));
    t.method("SetParent", [](TF1& a)->void { a.SetParent(); });
    t.method("SetParent", [](TF1* a)->void { a->SetParent(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:703:21
    t.method("SetRange", static_cast<void (TF1::*)(Double_t, Double_t) >(&TF1::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:704:21
    t.method("SetRange", static_cast<void (TF1::*)(Double_t, Double_t, Double_t, Double_t) >(&TF1::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:705:21
    t.method("SetRange", static_cast<void (TF1::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF1::SetRange));

    DEBUG_MSG("Adding wrapper for void TF1::SetSavedPoint(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetSavedPoint(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:706:21
    t.method("SetSavedPoint", static_cast<void (TF1::*)(Int_t, Double_t) >(&TF1::SetSavedPoint));

    DEBUG_MSG("Adding wrapper for void TF1::SetTitle(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetTitle(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:707:13
    t.method("SetTitle", static_cast<void (TF1::*)(const char *) >(&TF1::SetTitle));
    t.method("SetTitle", [](TF1& a)->void { a.SetTitle(); });
    t.method("SetTitle", [](TF1* a)->void { a->SetTitle(); });

    DEBUG_MSG("Adding wrapper for void TF1::SetVectorized(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetVectorized(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:708:21
    t.method("SetVectorized", static_cast<void (TF1::*)(Bool_t) >(&TF1::SetVectorized));

    DEBUG_MSG("Adding wrapper for void TF1::Update() (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Update()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:715:21
    t.method("Update", static_cast<void (TF1::*)() >(&TF1::Update));

    DEBUG_MSG("Adding wrapper for TF1 * TF1::GetCurrent() (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF1::GetCurrent()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:717:21
    module_.method("TF1!GetCurrent", static_cast<TF1 * (*)() >(&TF1::GetCurrent));

    DEBUG_MSG("Adding wrapper for void TF1::AbsValue(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::AbsValue(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:718:21
    module_.method("TF1!AbsValue", static_cast<void (*)(Bool_t) >(&TF1::AbsValue));
    module_.method("TF1!AbsValue", []()->void { TF1::AbsValue(); });

    DEBUG_MSG("Adding wrapper for void TF1::RejectPoint(Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::RejectPoint(Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:719:21
    module_.method("TF1!RejectPoint", static_cast<void (*)(Bool_t) >(&TF1::RejectPoint));
    module_.method("TF1!RejectPoint", []()->void { TF1::RejectPoint(); });

    DEBUG_MSG("Adding wrapper for Bool_t TF1::RejectedPoint() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF1::RejectedPoint()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:720:21
    module_.method("TF1!RejectedPoint", static_cast<Bool_t (*)() >(&TF1::RejectedPoint));

    DEBUG_MSG("Adding wrapper for void TF1::SetCurrent(TF1 *) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::SetCurrent(TF1 *)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:721:21
    module_.method("TF1!SetCurrent", static_cast<void (*)(TF1 *) >(&TF1::SetCurrent));

    DEBUG_MSG("Adding wrapper for Double_t TF1::Moment(Double_t, Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Moment(Double_t, Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:724:21
    t.method("Moment", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, const Double_t *, Double_t) >(&TF1::Moment));
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Moment(arg0, arg1, arg2); });
    t.method("Moment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a.Moment(arg0, arg1, arg2, arg3); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Moment(arg0, arg1, arg2); });
    t.method("Moment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a->Moment(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::CentralMoment(Double_t, Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::CentralMoment(Double_t, Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:725:21
    t.method("CentralMoment", static_cast<Double_t (TF1::*)(Double_t, Double_t, Double_t, const Double_t *, Double_t) >(&TF1::CentralMoment));
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.CentralMoment(arg0, arg1, arg2); });
    t.method("CentralMoment", [](TF1& a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a.CentralMoment(arg0, arg1, arg2, arg3); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->CentralMoment(arg0, arg1, arg2); });
    t.method("CentralMoment", [](TF1* a, Double_t arg0, Double_t arg1, Double_t arg2, const Double_t * arg3)->Double_t { return a->CentralMoment(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Mean(Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Mean(Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:726:21
    t.method("Mean", static_cast<Double_t (TF1::*)(Double_t, Double_t, const Double_t *, Double_t) >(&TF1::Mean));
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Mean(arg0, arg1); });
    t.method("Mean", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.Mean(arg0, arg1, arg2); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Mean(arg0, arg1); });
    t.method("Mean", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->Mean(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF1::Variance(Double_t, Double_t, const Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF1::Variance(Double_t, Double_t, const Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:730:21
    t.method("Variance", static_cast<Double_t (TF1::*)(Double_t, Double_t, const Double_t *, Double_t) >(&TF1::Variance));
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1)->Double_t { return a.Variance(arg0, arg1); });
    t.method("Variance", [](TF1& a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a.Variance(arg0, arg1, arg2); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1)->Double_t { return a->Variance(arg0, arg1); });
    t.method("Variance", [](TF1* a, Double_t arg0, Double_t arg1, const Double_t * arg2)->Double_t { return a->Variance(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF1::CalcGaussLegendreSamplingPoints(Int_t, Double_t *, Double_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::CalcGaussLegendreSamplingPoints(Int_t, Double_t *, Double_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:738:21
    module_.method("TF1!CalcGaussLegendreSamplingPoints", static_cast<void (*)(Int_t, Double_t *, Double_t *, Double_t) >(&TF1::CalcGaussLegendreSamplingPoints));
    module_.method("TF1!CalcGaussLegendreSamplingPoints", [](Int_t arg0, Double_t * arg1, Double_t * arg2)->void { TF1::CalcGaussLegendreSamplingPoints(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Version_t TF1::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF1::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!Class_Version", static_cast<Version_t (*)() >(&TF1::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF1::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    t.method("IsA", static_cast<TClass * (TF1::*)()  const>(&TF1::IsA));

    DEBUG_MSG("Adding wrapper for void TF1::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    t.method("StreamerNVirtual", static_cast<void (TF1::*)(TBuffer &) >(&TF1::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF1::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!DeclFileName", []() { return (std::string)TF1::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF1::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!ImplFileLine", static_cast<int (*)() >(&TF1::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF1::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!ImplFileName", []() { return (std::string)TF1::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF1::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF1::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!Class_Name", []() { return (std::string)TF1::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF1::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!Dictionary", static_cast<TClass * (*)() >(&TF1::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF1::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF1::Class()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!Class", static_cast<TClass * (*)() >(&TF1::Class));

    DEBUG_MSG("Adding wrapper for void TF1::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF1::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    t.method("Streamer", static_cast<void (TF1::*)(TBuffer &) >(&TF1::Streamer));

    DEBUG_MSG("Adding wrapper for int TF1::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF1::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TF1.h:748:4
    module_.method("TF1!DeclFileLine", static_cast<int (*)() >(&TF1::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1>> type_;
};
std::shared_ptr<Wrapper> newJlTF1(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TRandom> : std::false_type { };
  template<> struct DefaultConstructible<TRandom> : std::false_type { };
template<> struct SuperType<TRandom> { typedef TNamed type; };
}

// Class generating the wrapper for type TRandom
// signature to use in the veto file: TRandom
struct JlTRandom: public Wrapper {

  JlTRandom(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TRandom (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:27:7
    jlcxx::TypeWrapper<TRandom>  t = jlModule.add_type<TRandom>("TRandom",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TRandom>>(new jlcxx::TypeWrapper<TRandom>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TRandom::TRandom(UInt_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:33:4
    t.constructor<UInt_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Int_t TRandom::Binomial(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TRandom::Binomial(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:35:22
    t.method("Binomial", static_cast<Int_t (TRandom::*)(Int_t, Double_t) >(&TRandom::Binomial));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::BreitWigner(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::BreitWigner(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:36:22
    t.method("BreitWigner", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::BreitWigner));
    t.method("BreitWigner", [](TRandom& a)->Double_t { return a.BreitWigner(); });
    t.method("BreitWigner", [](TRandom& a, Double_t arg0)->Double_t { return a.BreitWigner(arg0); });
    t.method("BreitWigner", [](TRandom* a)->Double_t { return a->BreitWigner(); });
    t.method("BreitWigner", [](TRandom* a, Double_t arg0)->Double_t { return a->BreitWigner(arg0); });

    DEBUG_MSG("Adding wrapper for void TRandom::Circle(Double_t &, Double_t &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Circle(Double_t &, Double_t &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:37:22
    t.method("Circle", static_cast<void (TRandom::*)(Double_t &, Double_t &, Double_t) >(&TRandom::Circle));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Exp(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Exp(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:38:22
    t.method("Exp", static_cast<Double_t (TRandom::*)(Double_t) >(&TRandom::Exp));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Gaus(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Gaus(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:39:22
    t.method("Gaus", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::Gaus));
    t.method("Gaus", [](TRandom& a)->Double_t { return a.Gaus(); });
    t.method("Gaus", [](TRandom& a, Double_t arg0)->Double_t { return a.Gaus(arg0); });
    t.method("Gaus", [](TRandom* a)->Double_t { return a->Gaus(); });
    t.method("Gaus", [](TRandom* a, Double_t arg0)->Double_t { return a->Gaus(arg0); });

    DEBUG_MSG("Adding wrapper for UInt_t TRandom::GetSeed() (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TRandom::GetSeed()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:40:22
    t.method("GetSeed", static_cast<UInt_t (TRandom::*)()  const>(&TRandom::GetSeed));

    DEBUG_MSG("Adding wrapper for UInt_t TRandom::Integer(UInt_t) (" __HERE__ ")");
    // signature to use in the veto list: UInt_t TRandom::Integer(UInt_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:41:22
    t.method("Integer", static_cast<UInt_t (TRandom::*)(UInt_t) >(&TRandom::Integer));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Landau(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Landau(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:42:22
    t.method("Landau", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::Landau));
    t.method("Landau", [](TRandom& a)->Double_t { return a.Landau(); });
    t.method("Landau", [](TRandom& a, Double_t arg0)->Double_t { return a.Landau(arg0); });
    t.method("Landau", [](TRandom* a)->Double_t { return a->Landau(); });
    t.method("Landau", [](TRandom* a, Double_t arg0)->Double_t { return a->Landau(arg0); });

    DEBUG_MSG("Adding wrapper for ULong64_t TRandom::Poisson(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: ULong64_t TRandom::Poisson(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:43:22
    t.method("Poisson", static_cast<ULong64_t (TRandom::*)(Double_t) >(&TRandom::Poisson));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::PoissonD(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::PoissonD(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:44:22
    t.method("PoissonD", static_cast<Double_t (TRandom::*)(Double_t) >(&TRandom::PoissonD));

    DEBUG_MSG("Adding wrapper for void TRandom::Rannor(Float_t &, Float_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Rannor(Float_t &, Float_t &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:45:22
    t.method("Rannor", static_cast<void (TRandom::*)(Float_t &, Float_t &) >(&TRandom::Rannor));

    DEBUG_MSG("Adding wrapper for void TRandom::Rannor(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Rannor(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:46:22
    t.method("Rannor", static_cast<void (TRandom::*)(Double_t &, Double_t &) >(&TRandom::Rannor));

    DEBUG_MSG("Adding wrapper for void TRandom::ReadRandom(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::ReadRandom(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:47:22
    t.method("ReadRandom", static_cast<void (TRandom::*)(const char *) >(&TRandom::ReadRandom));

    DEBUG_MSG("Adding wrapper for void TRandom::SetSeed(ULong_t) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::SetSeed(ULong_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:48:22
    t.method("SetSeed", static_cast<void (TRandom::*)(ULong_t) >(&TRandom::SetSeed));
    t.method("SetSeed", [](TRandom& a)->void { a.SetSeed(); });
    t.method("SetSeed", [](TRandom* a)->void { a->SetSeed(); });

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Rndm() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Rndm()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:49:14
    t.method("Rndm", static_cast<Double_t (TRandom::*)() >(&TRandom::Rndm));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Rndm(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Rndm(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:51:22
    t.method("Rndm", static_cast<Double_t (TRandom::*)(Int_t) >(&TRandom::Rndm));

    DEBUG_MSG("Adding wrapper for void TRandom::RndmArray(Int_t, Float_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::RndmArray(Int_t, Float_t *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:52:22
    t.method("RndmArray", static_cast<void (TRandom::*)(Int_t, Float_t *) >(&TRandom::RndmArray));

    DEBUG_MSG("Adding wrapper for void TRandom::RndmArray(Int_t, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::RndmArray(Int_t, Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:53:22
    t.method("RndmArray", static_cast<void (TRandom::*)(Int_t, Double_t *) >(&TRandom::RndmArray));

    DEBUG_MSG("Adding wrapper for void TRandom::Sphere(Double_t &, Double_t &, Double_t &, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Sphere(Double_t &, Double_t &, Double_t &, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:54:22
    t.method("Sphere", static_cast<void (TRandom::*)(Double_t &, Double_t &, Double_t &, Double_t) >(&TRandom::Sphere));

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Uniform(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Uniform(Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:55:22
    t.method("Uniform", static_cast<Double_t (TRandom::*)(Double_t) >(&TRandom::Uniform));
    t.method("Uniform", [](TRandom& a)->Double_t { return a.Uniform(); });
    t.method("Uniform", [](TRandom* a)->Double_t { return a->Uniform(); });

    DEBUG_MSG("Adding wrapper for Double_t TRandom::Uniform(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TRandom::Uniform(Double_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:56:22
    t.method("Uniform", static_cast<Double_t (TRandom::*)(Double_t, Double_t) >(&TRandom::Uniform));

    DEBUG_MSG("Adding wrapper for void TRandom::WriteRandom(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::WriteRandom(const char *)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:57:22
    t.method("WriteRandom", static_cast<void (TRandom::*)(const char *)  const>(&TRandom::WriteRandom));

    DEBUG_MSG("Adding wrapper for Version_t TRandom::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TRandom::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Class_Version", static_cast<Version_t (*)() >(&TRandom::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TRandom::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TRandom::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    t.method("IsA", static_cast<TClass * (TRandom::*)()  const>(&TRandom::IsA));

    DEBUG_MSG("Adding wrapper for void TRandom::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    t.method("StreamerNVirtual", static_cast<void (TRandom::*)(TBuffer &) >(&TRandom::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TRandom::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TRandom::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!DeclFileName", []() { return (std::string)TRandom::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TRandom::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TRandom::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!ImplFileLine", static_cast<int (*)() >(&TRandom::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TRandom::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TRandom::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!ImplFileName", []() { return (std::string)TRandom::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TRandom::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TRandom::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Class_Name", []() { return (std::string)TRandom::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TRandom::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TRandom::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Dictionary", static_cast<TClass * (*)() >(&TRandom::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TRandom::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TRandom::Class()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!Class", static_cast<TClass * (*)() >(&TRandom::Class));

    DEBUG_MSG("Adding wrapper for void TRandom::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TRandom::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    t.method("Streamer", static_cast<void (TRandom::*)(TBuffer &) >(&TRandom::Streamer));

    DEBUG_MSG("Adding wrapper for int TRandom::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TRandom::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TRandom.h:59:4
    module_.method("TRandom!DeclFileLine", static_cast<int (*)() >(&TRandom::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TRandom>> type_;
};
std::shared_ptr<Wrapper> newJlTRandom(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTRandom(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TFitResultPtr> : std::false_type { };
  template<> struct DefaultConstructible<TFitResultPtr> : std::false_type { };
}

// Class generating the wrapper for type TFitResultPtr
// signature to use in the veto file: TFitResultPtr
struct JlTFitResultPtr: public Wrapper {

  JlTFitResultPtr(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TFitResultPtr (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TFitResultPtr.h:32:7
    jlcxx::TypeWrapper<TFitResultPtr>  t = jlModule.add_type<TFitResultPtr>("TFitResultPtr");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TFitResultPtr>>(new jlcxx::TypeWrapper<TFitResultPtr>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TFitResultPtr>> type_;
};
std::shared_ptr<Wrapper> newJlTFitResultPtr(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTFitResultPtr(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH1C> : std::false_type { };
  template<> struct DefaultConstructible<TH1C> : std::false_type { };
template<> struct SuperType<TH1C> { typedef TH1 type; };
}

// Class generating the wrapper for type TH1C
// signature to use in the veto file: TH1C
struct JlTH1C: public Wrapper {

  JlTH1C(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH1C (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:457:7
    jlcxx::TypeWrapper<TH1C>  t = jlModule.add_type<TH1C>("TH1C",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH1C>>(new jlcxx::TypeWrapper<TH1C>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const char *, const char *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:461:4
    t.constructor<const char *, const char *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const char *, const char *, Int_t, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:462:4
    t.constructor<const char *, const char *, Int_t, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const char *, const char *, Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:463:4
    t.constructor<const char *, const char *, Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1C::TH1C(const TH1C &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:464:4
    t.constructor<const TH1C &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TH1C & TH1C::operator=(const TH1C &) (" __HERE__ ")");
    // signature to use in the veto list: TH1C & TH1C::operator=(const TH1C &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:465:10
    t.method("assign", static_cast<TH1C & (TH1C::*)(const TH1C &) >(&TH1C::operator=));

    DEBUG_MSG("Adding wrapper for void TH1C::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::AddBinContent(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:468:13
    t.method("AddBinContent", static_cast<void (TH1C::*)(Int_t) >(&TH1C::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1C::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:469:13
    t.method("AddBinContent", static_cast<void (TH1C::*)(Int_t, Double_t) >(&TH1C::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1C::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::Copy(TObject &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:470:13
    t.method("Copy", static_cast<void (TH1C::*)(TObject &)  const>(&TH1C::Copy));

    DEBUG_MSG("Adding wrapper for void TH1C::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:471:13
    t.method("Reset", static_cast<void (TH1C::*)(Option_t *) >(&TH1C::Reset));
    t.method("Reset", [](TH1C& a)->void { a.Reset(); });
    t.method("Reset", [](TH1C* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TH1C::SetBinsLength(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::SetBinsLength(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:472:13
    t.method("SetBinsLength", static_cast<void (TH1C::*)(Int_t) >(&TH1C::SetBinsLength));
    t.method("SetBinsLength", [](TH1C& a)->void { a.SetBinsLength(); });
    t.method("SetBinsLength", [](TH1C* a)->void { a->SetBinsLength(); });

    DEBUG_MSG("Adding wrapper for Version_t TH1C::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH1C::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!Class_Version", static_cast<Version_t (*)() >(&TH1C::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TH1C::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1C::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    t.method("IsA", static_cast<TClass * (TH1C::*)()  const>(&TH1C::IsA));

    DEBUG_MSG("Adding wrapper for void TH1C::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    t.method("StreamerNVirtual", static_cast<void (TH1C::*)(TBuffer &) >(&TH1C::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TH1C::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1C::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!DeclFileName", []() { return (std::string)TH1C::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH1C::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1C::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!ImplFileLine", static_cast<int (*)() >(&TH1C::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TH1C::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1C::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!ImplFileName", []() { return (std::string)TH1C::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH1C::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1C::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!Class_Name", []() { return (std::string)TH1C::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1C::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1C::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!Dictionary", static_cast<TClass * (*)() >(&TH1C::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TH1C::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1C::Class()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!Class", static_cast<TClass * (*)() >(&TH1C::Class));

    DEBUG_MSG("Adding wrapper for void TH1C::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1C::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    t.method("Streamer", static_cast<void (TH1C::*)(TBuffer &) >(&TH1C::Streamer));

    DEBUG_MSG("Adding wrapper for int TH1C::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1C::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TH1.h:474:4
    module_.method("TH1C!DeclFileLine", static_cast<int (*)() >(&TH1C::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH1C>> type_;
};
std::shared_ptr<Wrapper> newJlTH1C(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH1C(module));
}
