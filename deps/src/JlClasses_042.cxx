// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TGeoScale> : std::false_type { };
  template<> struct DefaultConstructible<TGeoScale> : std::false_type { };
template<> struct SuperType<TGeoScale> { typedef TGeoMatrix type; };
}

// Class generating the wrapper for type TGeoScale
// signature to use in the veto file: TGeoScale
struct JlTGeoScale: public Wrapper {

  JlTGeoScale(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoScale (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:253:7
    jlcxx::TypeWrapper<TGeoScale>  t = jlModule.add_type<TGeoScale>("TGeoScale",
      jlcxx::julia_base_type<TGeoMatrix>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoScale>>(new jlcxx::TypeWrapper<TGeoScale>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoScale::TGeoScale(const TGeoScale &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:258:4
    t.constructor<const TGeoScale &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoScale::TGeoScale(const TGeoMatrix &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:259:4
    t.constructor<const TGeoMatrix &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoScale::TGeoScale(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:260:4
    t.constructor<Double_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoScale::TGeoScale(const char *, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:261:4
    t.constructor<const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoScale & TGeoScale::operator=(const TGeoScale &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoScale & TGeoScale::operator=(const TGeoScale &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:264:15
    t.method("assign", static_cast<TGeoScale & (TGeoScale::*)(const TGeoScale &) >(&TGeoScale::operator=));

    DEBUG_MSG("Adding wrapper for TGeoScale & TGeoScale::operator=(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoScale & TGeoScale::operator=(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:265:15
    t.method("assign", static_cast<TGeoScale & (TGeoScale::*)(const TGeoMatrix &) >(&TGeoScale::operator=));

    DEBUG_MSG("Adding wrapper for TGeoScale & TGeoScale::operator*=(const TGeoScale &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoScale & TGeoScale::operator*=(const TGeoScale &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:266:15
    t.method("mult!", static_cast<TGeoScale & (TGeoScale::*)(const TGeoScale &) >(&TGeoScale::operator*=));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for TGeoScale TGeoScale::operator*(const TGeoScale &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoScale TGeoScale::operator*(const TGeoScale &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:267:14
    t.method("*", static_cast<TGeoScale (TGeoScale::*)(const TGeoScale &)  const>(&TGeoScale::operator*));

    DEBUG_MSG("Adding wrapper for TGeoHMatrix TGeoScale::operator*(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix TGeoScale::operator*(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:268:16
    t.method("*", static_cast<TGeoHMatrix (TGeoScale::*)(const TGeoMatrix &)  const>(&TGeoScale::operator*));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoScale::operator==(const TGeoScale &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoScale::operator==(const TGeoScale &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:269:11
    t.method("==", static_cast<Bool_t (TGeoScale::*)(const TGeoScale &)  const>(&TGeoScale::operator==));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for TGeoHMatrix TGeoScale::Inverse() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix TGeoScale::Inverse()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:271:16
    t.method("Inverse", static_cast<TGeoHMatrix (TGeoScale::*)()  const>(&TGeoScale::Inverse));

    DEBUG_MSG("Adding wrapper for void TGeoScale::SetScale(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::SetScale(Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:272:9
    t.method("SetScale", static_cast<void (TGeoScale::*)(Double_t, Double_t, Double_t) >(&TGeoScale::SetScale));

    DEBUG_MSG("Adding wrapper for void TGeoScale::SetScale(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::SetScale(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:273:9
    t.method("SetScale", static_cast<void (TGeoScale::*)(const TGeoMatrix &) >(&TGeoScale::SetScale));

    DEBUG_MSG("Adding wrapper for void TGeoScale::LocalToMaster(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::LocalToMaster(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:274:9
    t.method("LocalToMaster", static_cast<void (TGeoScale::*)(const Double_t *, Double_t *)  const>(&TGeoScale::LocalToMaster));

    DEBUG_MSG("Adding wrapper for Double_t TGeoScale::LocalToMaster(Double_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoScale::LocalToMaster(Double_t, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:275:13
    t.method("LocalToMaster", static_cast<Double_t (TGeoScale::*)(Double_t, const Double_t *)  const>(&TGeoScale::LocalToMaster));
    t.method("LocalToMaster", [](TGeoScale const& a, Double_t arg0)->Double_t { return a.LocalToMaster(arg0); });
    t.method("LocalToMaster", [](TGeoScale const* a, Double_t arg0)->Double_t { return a->LocalToMaster(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoScale::LocalToMasterVect(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::LocalToMasterVect(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:276:9
    t.method("LocalToMasterVect", static_cast<void (TGeoScale::*)(const Double_t *, Double_t *)  const>(&TGeoScale::LocalToMasterVect));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoScale::MakeClone() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoScale::MakeClone()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:280:16
    t.method("MakeClone", static_cast<TGeoMatrix * (TGeoScale::*)()  const>(&TGeoScale::MakeClone));

    DEBUG_MSG("Adding wrapper for void TGeoScale::MasterToLocal(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::MasterToLocal(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:281:9
    t.method("MasterToLocal", static_cast<void (TGeoScale::*)(const Double_t *, Double_t *)  const>(&TGeoScale::MasterToLocal));

    DEBUG_MSG("Adding wrapper for Double_t TGeoScale::MasterToLocal(Double_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TGeoScale::MasterToLocal(Double_t, const Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:282:13
    t.method("MasterToLocal", static_cast<Double_t (TGeoScale::*)(Double_t, const Double_t *)  const>(&TGeoScale::MasterToLocal));
    t.method("MasterToLocal", [](TGeoScale const& a, Double_t arg0)->Double_t { return a.MasterToLocal(arg0); });
    t.method("MasterToLocal", [](TGeoScale const* a, Double_t arg0)->Double_t { return a->MasterToLocal(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoScale::MasterToLocalVect(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::MasterToLocalVect(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:283:9
    t.method("MasterToLocalVect", static_cast<void (TGeoScale::*)(const Double_t *, Double_t *)  const>(&TGeoScale::MasterToLocalVect));

    DEBUG_MSG("Adding wrapper for void TGeoScale::ReflectX(Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::ReflectX(Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:287:9
    t.method("ReflectX", static_cast<void (TGeoScale::*)(Bool_t, Bool_t) >(&TGeoScale::ReflectX));

    DEBUG_MSG("Adding wrapper for void TGeoScale::ReflectY(Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::ReflectY(Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:292:9
    t.method("ReflectY", static_cast<void (TGeoScale::*)(Bool_t, Bool_t) >(&TGeoScale::ReflectY));

    DEBUG_MSG("Adding wrapper for void TGeoScale::ReflectZ(Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::ReflectZ(Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:297:9
    t.method("ReflectZ", static_cast<void (TGeoScale::*)(Bool_t, Bool_t) >(&TGeoScale::ReflectZ));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoScale::GetTranslation() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoScale::GetTranslation()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:303:20
    t.method("GetTranslation", static_cast<const Double_t * (TGeoScale::*)()  const>(&TGeoScale::GetTranslation));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoScale::GetRotationMatrix() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoScale::GetRotationMatrix()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:304:20
    t.method("GetRotationMatrix", static_cast<const Double_t * (TGeoScale::*)()  const>(&TGeoScale::GetRotationMatrix));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoScale::GetScale() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoScale::GetScale()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:305:20
    t.method("GetScale", static_cast<const Double_t * (TGeoScale::*)()  const>(&TGeoScale::GetScale));

    DEBUG_MSG("Adding wrapper for Version_t TGeoScale::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoScale::Class_Version()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!Class_Version", static_cast<Version_t (*)() >(&TGeoScale::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoScale::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoScale::IsA()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    t.method("IsA", static_cast<TClass * (TGeoScale::*)()  const>(&TGeoScale::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoScale::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    t.method("StreamerNVirtual", static_cast<void (TGeoScale::*)(TBuffer &) >(&TGeoScale::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoScale::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoScale::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!DeclFileName", []() { return (std::string)TGeoScale::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoScale::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoScale::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!ImplFileLine", static_cast<int (*)() >(&TGeoScale::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoScale::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoScale::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!ImplFileName", []() { return (std::string)TGeoScale::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoScale::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoScale::Class_Name()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!Class_Name", []() { return (std::string)TGeoScale::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoScale::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoScale::Dictionary()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!Dictionary", static_cast<TClass * (*)() >(&TGeoScale::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoScale::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoScale::Class()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!Class", static_cast<TClass * (*)() >(&TGeoScale::Class));

    DEBUG_MSG("Adding wrapper for void TGeoScale::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoScale::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    t.method("Streamer", static_cast<void (TGeoScale::*)(TBuffer &) >(&TGeoScale::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoScale::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoScale::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:307:4
    module_.method("TGeoScale!DeclFileLine", static_cast<int (*)() >(&TGeoScale::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoScale>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoScale(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoScale(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoCombiTrans> : std::false_type { };
  template<> struct DefaultConstructible<TGeoCombiTrans> : std::false_type { };
template<> struct SuperType<TGeoCombiTrans> { typedef TGeoMatrix type; };
}

// Class generating the wrapper for type TGeoCombiTrans
// signature to use in the veto file: TGeoCombiTrans
struct JlTGeoCombiTrans: public Wrapper {

  JlTGeoCombiTrans(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoCombiTrans (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:317:7
    jlcxx::TypeWrapper<TGeoCombiTrans>  t = jlModule.add_type<TGeoCombiTrans>("TGeoCombiTrans",
      jlcxx::julia_base_type<TGeoMatrix>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoCombiTrans>>(new jlcxx::TypeWrapper<TGeoCombiTrans>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::TGeoCombiTrans(const TGeoCombiTrans &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:323:4
    t.constructor<const TGeoCombiTrans &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::TGeoCombiTrans(const TGeoMatrix &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:324:4
    t.constructor<const TGeoMatrix &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::TGeoCombiTrans(const TGeoTranslation &, const TGeoRotation &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:325:4
    t.constructor<const TGeoTranslation &, const TGeoRotation &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::TGeoCombiTrans(const char *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:326:4
    t.constructor<const char *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::TGeoCombiTrans(Double_t, Double_t, Double_t, TGeoRotation *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:327:4
    t.constructor<Double_t, Double_t, Double_t, TGeoRotation *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::TGeoCombiTrans(const char *, Double_t, Double_t, Double_t, TGeoRotation *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:328:4
    t.constructor<const char *, Double_t, Double_t, Double_t, TGeoRotation *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoCombiTrans & TGeoCombiTrans::operator=(const TGeoCombiTrans &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoCombiTrans & TGeoCombiTrans::operator=(const TGeoCombiTrans &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:330:20
    t.method("assign", static_cast<TGeoCombiTrans & (TGeoCombiTrans::*)(const TGeoCombiTrans &) >(&TGeoCombiTrans::operator=));

    DEBUG_MSG("Adding wrapper for TGeoCombiTrans & TGeoCombiTrans::operator=(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoCombiTrans & TGeoCombiTrans::operator=(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:331:20
    t.method("assign", static_cast<TGeoCombiTrans & (TGeoCombiTrans::*)(const TGeoMatrix &) >(&TGeoCombiTrans::operator=));

    DEBUG_MSG("Adding wrapper for TGeoCombiTrans & TGeoCombiTrans::operator*=(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoCombiTrans & TGeoCombiTrans::operator*=(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:332:20
    t.method("mult!", static_cast<TGeoCombiTrans & (TGeoCombiTrans::*)(const TGeoMatrix &) >(&TGeoCombiTrans::operator*=));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for TGeoCombiTrans TGeoCombiTrans::operator*(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoCombiTrans TGeoCombiTrans::operator*(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:333:19
    t.method("*", static_cast<TGeoCombiTrans (TGeoCombiTrans::*)(const TGeoMatrix &)  const>(&TGeoCombiTrans::operator*));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoCombiTrans::operator==(const TGeoMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoCombiTrans::operator==(const TGeoMatrix &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:334:11
    t.method("==", static_cast<Bool_t (TGeoCombiTrans::*)(const TGeoMatrix &)  const>(&TGeoCombiTrans::operator==));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::Clear(Option_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:338:9
    t.method("Clear", static_cast<void (TGeoCombiTrans::*)(Option_t *) >(&TGeoCombiTrans::Clear));
    t.method("Clear", [](TGeoCombiTrans& a)->void { a.Clear(); });
    t.method("Clear", [](TGeoCombiTrans* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for TGeoHMatrix TGeoCombiTrans::Inverse() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix TGeoCombiTrans::Inverse()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:339:16
    t.method("Inverse", static_cast<TGeoHMatrix (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::Inverse));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoCombiTrans::MakeClone() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoCombiTrans::MakeClone()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:340:16
    t.method("MakeClone", static_cast<TGeoMatrix * (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::MakeClone));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::Multiply(const TGeoMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::Multiply(const TGeoMatrix *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:341:9
    t.method("Multiply", static_cast<void (TGeoCombiTrans::*)(const TGeoMatrix *) >(&TGeoCombiTrans::Multiply));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::RegisterYourself() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::RegisterYourself()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:342:9
    t.method("RegisterYourself", static_cast<void (TGeoCombiTrans::*)() >(&TGeoCombiTrans::RegisterYourself));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::RotateX(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::RotateX(Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:343:9
    t.method("RotateX", static_cast<void (TGeoCombiTrans::*)(Double_t) >(&TGeoCombiTrans::RotateX));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::RotateY(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::RotateY(Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:344:9
    t.method("RotateY", static_cast<void (TGeoCombiTrans::*)(Double_t) >(&TGeoCombiTrans::RotateY));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::RotateZ(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::RotateZ(Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:345:9
    t.method("RotateZ", static_cast<void (TGeoCombiTrans::*)(Double_t) >(&TGeoCombiTrans::RotateZ));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::ReflectX(Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::ReflectX(Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:346:9
    t.method("ReflectX", static_cast<void (TGeoCombiTrans::*)(Bool_t, Bool_t) >(&TGeoCombiTrans::ReflectX));
    t.method("ReflectX", [](TGeoCombiTrans& a, Bool_t arg0)->void { a.ReflectX(arg0); });
    t.method("ReflectX", [](TGeoCombiTrans* a, Bool_t arg0)->void { a->ReflectX(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::ReflectY(Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::ReflectY(Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:347:9
    t.method("ReflectY", static_cast<void (TGeoCombiTrans::*)(Bool_t, Bool_t) >(&TGeoCombiTrans::ReflectY));
    t.method("ReflectY", [](TGeoCombiTrans& a, Bool_t arg0)->void { a.ReflectY(arg0); });
    t.method("ReflectY", [](TGeoCombiTrans* a, Bool_t arg0)->void { a->ReflectY(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::ReflectZ(Bool_t, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::ReflectZ(Bool_t, Bool_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:348:9
    t.method("ReflectZ", static_cast<void (TGeoCombiTrans::*)(Bool_t, Bool_t) >(&TGeoCombiTrans::ReflectZ));
    t.method("ReflectZ", [](TGeoCombiTrans& a, Bool_t arg0)->void { a.ReflectZ(arg0); });
    t.method("ReflectZ", [](TGeoCombiTrans* a, Bool_t arg0)->void { a->ReflectZ(arg0); });

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetDx(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetDx(Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:350:9
    t.method("SetDx", static_cast<void (TGeoCombiTrans::*)(Double_t) >(&TGeoCombiTrans::SetDx));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetDy(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetDy(Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:351:9
    t.method("SetDy", static_cast<void (TGeoCombiTrans::*)(Double_t) >(&TGeoCombiTrans::SetDy));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetDz(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetDz(Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:352:9
    t.method("SetDz", static_cast<void (TGeoCombiTrans::*)(Double_t) >(&TGeoCombiTrans::SetDz));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetTranslation(const TGeoTranslation &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetTranslation(const TGeoTranslation &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:353:9
    t.method("SetTranslation", static_cast<void (TGeoCombiTrans::*)(const TGeoTranslation &) >(&TGeoCombiTrans::SetTranslation));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetTranslation(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetTranslation(Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:354:9
    t.method("SetTranslation", static_cast<void (TGeoCombiTrans::*)(Double_t, Double_t, Double_t) >(&TGeoCombiTrans::SetTranslation));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetTranslation(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetTranslation(Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:355:9
    t.method("SetTranslation", static_cast<void (TGeoCombiTrans::*)(Double_t *) >(&TGeoCombiTrans::SetTranslation));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetRotation(const TGeoRotation &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetRotation(const TGeoRotation &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:356:9
    t.method("SetRotation", static_cast<void (TGeoCombiTrans::*)(const TGeoRotation &) >(&TGeoCombiTrans::SetRotation));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::SetRotation(const TGeoRotation *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::SetRotation(const TGeoRotation *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:357:9
    t.method("SetRotation", static_cast<void (TGeoCombiTrans::*)(const TGeoRotation *) >(&TGeoCombiTrans::SetRotation));

    DEBUG_MSG("Adding wrapper for TGeoRotation * TGeoCombiTrans::GetRotation() (" __HERE__ ")");
    // signature to use in the veto list: TGeoRotation * TGeoCombiTrans::GetRotation()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:359:18
    t.method("GetRotation", static_cast<TGeoRotation * (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::GetRotation));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoCombiTrans::GetTranslation() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoCombiTrans::GetTranslation()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:361:20
    t.method("GetTranslation", static_cast<const Double_t * (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::GetTranslation));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoCombiTrans::GetRotationMatrix() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoCombiTrans::GetRotationMatrix()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:362:20
    t.method("GetRotationMatrix", static_cast<const Double_t * (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::GetRotationMatrix));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoCombiTrans::GetScale() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoCombiTrans::GetScale()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:363:20
    t.method("GetScale", static_cast<const Double_t * (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::GetScale));

    DEBUG_MSG("Adding wrapper for Version_t TGeoCombiTrans::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoCombiTrans::Class_Version()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!Class_Version", static_cast<Version_t (*)() >(&TGeoCombiTrans::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoCombiTrans::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoCombiTrans::IsA()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    t.method("IsA", static_cast<TClass * (TGeoCombiTrans::*)()  const>(&TGeoCombiTrans::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    t.method("StreamerNVirtual", static_cast<void (TGeoCombiTrans::*)(TBuffer &) >(&TGeoCombiTrans::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoCombiTrans::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoCombiTrans::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!DeclFileName", []() { return (std::string)TGeoCombiTrans::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoCombiTrans::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoCombiTrans::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!ImplFileLine", static_cast<int (*)() >(&TGeoCombiTrans::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoCombiTrans::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoCombiTrans::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!ImplFileName", []() { return (std::string)TGeoCombiTrans::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoCombiTrans::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoCombiTrans::Class_Name()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!Class_Name", []() { return (std::string)TGeoCombiTrans::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoCombiTrans::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoCombiTrans::Dictionary()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!Dictionary", static_cast<TClass * (*)() >(&TGeoCombiTrans::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoCombiTrans::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoCombiTrans::Class()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!Class", static_cast<TClass * (*)() >(&TGeoCombiTrans::Class));

    DEBUG_MSG("Adding wrapper for void TGeoCombiTrans::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoCombiTrans::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    t.method("Streamer", static_cast<void (TGeoCombiTrans::*)(TBuffer &) >(&TGeoCombiTrans::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoCombiTrans::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoCombiTrans::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:365:4
    module_.method("TGeoCombiTrans!DeclFileLine", static_cast<int (*)() >(&TGeoCombiTrans::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoCombiTrans>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoCombiTrans(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoCombiTrans(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoGenTrans> : std::false_type { };
  template<> struct DefaultConstructible<TGeoGenTrans> : std::false_type { };
template<> struct SuperType<TGeoGenTrans> { typedef TGeoCombiTrans type; };
}

// Class generating the wrapper for type TGeoGenTrans
// signature to use in the veto file: TGeoGenTrans
struct JlTGeoGenTrans: public Wrapper {

  JlTGeoGenTrans(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoGenTrans (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:375:7
    jlcxx::TypeWrapper<TGeoGenTrans>  t = jlModule.add_type<TGeoGenTrans>("TGeoGenTrans",
      jlcxx::julia_base_type<TGeoCombiTrans>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoGenTrans>>(new jlcxx::TypeWrapper<TGeoGenTrans>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::TGeoGenTrans(const char *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:380:4
    t.constructor<const char *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::TGeoGenTrans(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, TGeoRotation *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:381:4
    t.constructor<Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, TGeoRotation *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::TGeoGenTrans(const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, TGeoRotation *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:382:4
    t.constructor<const char *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, TGeoRotation *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::Clear(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGenTrans::Clear(Option_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:386:9
    t.method("Clear", static_cast<void (TGeoGenTrans::*)(Option_t *) >(&TGeoGenTrans::Clear));
    t.method("Clear", [](TGeoGenTrans& a)->void { a.Clear(); });
    t.method("Clear", [](TGeoGenTrans* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for TGeoHMatrix TGeoGenTrans::Inverse() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix TGeoGenTrans::Inverse()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:387:16
    t.method("Inverse", static_cast<TGeoHMatrix (TGeoGenTrans::*)()  const>(&TGeoGenTrans::Inverse));

    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::SetScale(Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGenTrans::SetScale(Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:388:9
    t.method("SetScale", static_cast<void (TGeoGenTrans::*)(Double_t, Double_t, Double_t) >(&TGeoGenTrans::SetScale));

    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::SetScale(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGenTrans::SetScale(Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:389:9
    t.method("SetScale", static_cast<void (TGeoGenTrans::*)(Double_t *) >(&TGeoGenTrans::SetScale));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoGenTrans::MakeClone() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoGenTrans::MakeClone()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:390:16
    t.method("MakeClone", static_cast<TGeoMatrix * (TGeoGenTrans::*)()  const>(&TGeoGenTrans::MakeClone));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoGenTrans::Normalize() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoGenTrans::Normalize()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:391:11
    t.method("Normalize", static_cast<Bool_t (TGeoGenTrans::*)() >(&TGeoGenTrans::Normalize));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoGenTrans::GetScale() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoGenTrans::GetScale()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:393:20
    t.method("GetScale", static_cast<const Double_t * (TGeoGenTrans::*)()  const>(&TGeoGenTrans::GetScale));

    DEBUG_MSG("Adding wrapper for Version_t TGeoGenTrans::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoGenTrans::Class_Version()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!Class_Version", static_cast<Version_t (*)() >(&TGeoGenTrans::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoGenTrans::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoGenTrans::IsA()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    t.method("IsA", static_cast<TClass * (TGeoGenTrans::*)()  const>(&TGeoGenTrans::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGenTrans::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    t.method("StreamerNVirtual", static_cast<void (TGeoGenTrans::*)(TBuffer &) >(&TGeoGenTrans::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoGenTrans::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoGenTrans::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!DeclFileName", []() { return (std::string)TGeoGenTrans::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoGenTrans::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoGenTrans::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!ImplFileLine", static_cast<int (*)() >(&TGeoGenTrans::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoGenTrans::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoGenTrans::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!ImplFileName", []() { return (std::string)TGeoGenTrans::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoGenTrans::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoGenTrans::Class_Name()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!Class_Name", []() { return (std::string)TGeoGenTrans::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoGenTrans::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoGenTrans::Dictionary()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!Dictionary", static_cast<TClass * (*)() >(&TGeoGenTrans::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoGenTrans::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoGenTrans::Class()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!Class", static_cast<TClass * (*)() >(&TGeoGenTrans::Class));

    DEBUG_MSG("Adding wrapper for void TGeoGenTrans::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoGenTrans::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    t.method("Streamer", static_cast<void (TGeoGenTrans::*)(TBuffer &) >(&TGeoGenTrans::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoGenTrans::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoGenTrans::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:395:4
    module_.method("TGeoGenTrans!DeclFileLine", static_cast<int (*)() >(&TGeoGenTrans::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoGenTrans>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoGenTrans(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoGenTrans(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoIdentity> : std::false_type { };
  template<> struct DefaultConstructible<TGeoIdentity> : std::false_type { };
template<> struct SuperType<TGeoIdentity> { typedef TGeoMatrix type; };
}

// Class generating the wrapper for type TGeoIdentity
// signature to use in the veto file: TGeoIdentity
struct JlTGeoIdentity: public Wrapper {

  JlTGeoIdentity(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoIdentity (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:406:7
    jlcxx::TypeWrapper<TGeoIdentity>  t = jlModule.add_type<TGeoIdentity>("TGeoIdentity",
      jlcxx::julia_base_type<TGeoMatrix>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoIdentity>>(new jlcxx::TypeWrapper<TGeoIdentity>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TGeoIdentity::TGeoIdentity(const char *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoMatrix.h:411:4
    t.constructor<const char *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TGeoHMatrix TGeoIdentity::Inverse() (" __HERE__ ")");
    // signature to use in the veto list: TGeoHMatrix TGeoIdentity::Inverse()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:414:16
    t.method("Inverse", static_cast<TGeoHMatrix (TGeoIdentity::*)()  const>(&TGeoIdentity::Inverse));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::LocalToMaster(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::LocalToMaster(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:415:9
    t.method("LocalToMaster", static_cast<void (TGeoIdentity::*)(const Double_t *, Double_t *)  const>(&TGeoIdentity::LocalToMaster));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::LocalToMasterVect(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::LocalToMasterVect(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:419:9
    t.method("LocalToMasterVect", static_cast<void (TGeoIdentity::*)(const Double_t *, Double_t *)  const>(&TGeoIdentity::LocalToMasterVect));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::LocalToMasterBomb(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::LocalToMasterBomb(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:423:9
    t.method("LocalToMasterBomb", static_cast<void (TGeoIdentity::*)(const Double_t *, Double_t *)  const>(&TGeoIdentity::LocalToMasterBomb));

    DEBUG_MSG("Adding wrapper for TGeoMatrix * TGeoIdentity::MakeClone() (" __HERE__ ")");
    // signature to use in the veto list: TGeoMatrix * TGeoIdentity::MakeClone()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:427:16
    t.method("MakeClone", static_cast<TGeoMatrix * (TGeoIdentity::*)()  const>(&TGeoIdentity::MakeClone));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::MasterToLocal(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::MasterToLocal(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:428:9
    t.method("MasterToLocal", static_cast<void (TGeoIdentity::*)(const Double_t *, Double_t *)  const>(&TGeoIdentity::MasterToLocal));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::MasterToLocalVect(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::MasterToLocalVect(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:432:9
    t.method("MasterToLocalVect", static_cast<void (TGeoIdentity::*)(const Double_t *, Double_t *)  const>(&TGeoIdentity::MasterToLocalVect));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::MasterToLocalBomb(const Double_t *, Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::MasterToLocalBomb(const Double_t *, Double_t *)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:436:9
    t.method("MasterToLocalBomb", static_cast<void (TGeoIdentity::*)(const Double_t *, Double_t *)  const>(&TGeoIdentity::MasterToLocalBomb));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoIdentity::GetTranslation() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoIdentity::GetTranslation()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:441:20
    t.method("GetTranslation", static_cast<const Double_t * (TGeoIdentity::*)()  const>(&TGeoIdentity::GetTranslation));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoIdentity::GetRotationMatrix() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoIdentity::GetRotationMatrix()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:442:20
    t.method("GetRotationMatrix", static_cast<const Double_t * (TGeoIdentity::*)()  const>(&TGeoIdentity::GetRotationMatrix));

    DEBUG_MSG("Adding wrapper for const Double_t * TGeoIdentity::GetScale() (" __HERE__ ")");
    // signature to use in the veto list: const Double_t * TGeoIdentity::GetScale()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:443:20
    t.method("GetScale", static_cast<const Double_t * (TGeoIdentity::*)()  const>(&TGeoIdentity::GetScale));

    DEBUG_MSG("Adding wrapper for Version_t TGeoIdentity::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoIdentity::Class_Version()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!Class_Version", static_cast<Version_t (*)() >(&TGeoIdentity::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoIdentity::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoIdentity::IsA()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    t.method("IsA", static_cast<TClass * (TGeoIdentity::*)()  const>(&TGeoIdentity::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    t.method("StreamerNVirtual", static_cast<void (TGeoIdentity::*)(TBuffer &) >(&TGeoIdentity::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoIdentity::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoIdentity::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!DeclFileName", []() { return (std::string)TGeoIdentity::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoIdentity::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoIdentity::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!ImplFileLine", static_cast<int (*)() >(&TGeoIdentity::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoIdentity::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoIdentity::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!ImplFileName", []() { return (std::string)TGeoIdentity::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoIdentity::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoIdentity::Class_Name()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!Class_Name", []() { return (std::string)TGeoIdentity::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoIdentity::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoIdentity::Dictionary()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!Dictionary", static_cast<TClass * (*)() >(&TGeoIdentity::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoIdentity::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoIdentity::Class()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!Class", static_cast<TClass * (*)() >(&TGeoIdentity::Class));

    DEBUG_MSG("Adding wrapper for void TGeoIdentity::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoIdentity::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    t.method("Streamer", static_cast<void (TGeoIdentity::*)(TBuffer &) >(&TGeoIdentity::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoIdentity::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoIdentity::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoMatrix.h:446:4
    module_.method("TGeoIdentity!DeclFileLine", static_cast<int (*)() >(&TGeoIdentity::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoIdentity>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoIdentity(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoIdentity(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TGeoBranchArray> : std::false_type { };
  template<> struct DefaultConstructible<TGeoBranchArray> : std::false_type { };
template<> struct SuperType<TGeoBranchArray> { typedef TObject type; };
}

// Class generating the wrapper for type TGeoBranchArray
// signature to use in the veto file: TGeoBranchArray
struct JlTGeoBranchArray: public Wrapper {

  JlTGeoBranchArray(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TGeoBranchArray (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:22:7
    jlcxx::TypeWrapper<TGeoBranchArray>  t = jlModule.add_type<TGeoBranchArray>("TGeoBranchArray",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TGeoBranchArray>>(new jlcxx::TypeWrapper<TGeoBranchArray>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for TGeoBranchArray * TGeoBranchArray::MakeInstance(size_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoBranchArray * TGeoBranchArray::MakeInstance(size_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:45:28
    module_.method("TGeoBranchArray!MakeInstance", static_cast<TGeoBranchArray * (*)(size_t) >(&TGeoBranchArray::MakeInstance));

    DEBUG_MSG("Adding wrapper for TGeoBranchArray * TGeoBranchArray::MakeInstanceAt(size_t, void *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoBranchArray * TGeoBranchArray::MakeInstanceAt(size_t, void *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:48:28
    module_.method("TGeoBranchArray!MakeInstanceAt", static_cast<TGeoBranchArray * (*)(size_t, void *) >(&TGeoBranchArray::MakeInstanceAt));

    DEBUG_MSG("Adding wrapper for TGeoBranchArray * TGeoBranchArray::MakeCopy(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoBranchArray * TGeoBranchArray::MakeCopy(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:51:28
    module_.method("TGeoBranchArray!MakeCopy", static_cast<TGeoBranchArray * (*)(const TGeoBranchArray &) >(&TGeoBranchArray::MakeCopy));

    DEBUG_MSG("Adding wrapper for TGeoBranchArray * TGeoBranchArray::MakeCopyAt(const TGeoBranchArray &, void *) (" __HERE__ ")");
    // signature to use in the veto list: TGeoBranchArray * TGeoBranchArray::MakeCopyAt(const TGeoBranchArray &, void *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:54:28
    module_.method("TGeoBranchArray!MakeCopyAt", static_cast<TGeoBranchArray * (*)(const TGeoBranchArray &, void *) >(&TGeoBranchArray::MakeCopyAt));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::ReleaseInstance(TGeoBranchArray *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::ReleaseInstance(TGeoBranchArray *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:57:16
    module_.method("TGeoBranchArray!ReleaseInstance", static_cast<void (*)(TGeoBranchArray *) >(&TGeoBranchArray::ReleaseInstance));

    DEBUG_MSG("Adding wrapper for TGeoBranchArray & TGeoBranchArray::operator=(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: TGeoBranchArray & TGeoBranchArray::operator=(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:60:21
    t.method("assign", static_cast<TGeoBranchArray & (TGeoBranchArray::*)(const TGeoBranchArray &) >(&TGeoBranchArray::operator=));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::CopyTo(TGeoBranchArray *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::CopyTo(TGeoBranchArray *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:63:9
    t.method("CopyTo", static_cast<void (TGeoBranchArray::*)(TGeoBranchArray *) >(&TGeoBranchArray::CopyTo));

    DEBUG_MSG("Adding wrapper for size_t TGeoBranchArray::SizeOf(size_t) (" __HERE__ ")");
    // signature to use in the veto list: size_t TGeoBranchArray::SizeOf(size_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:66:18
    module_.method("TGeoBranchArray!SizeOf", static_cast<size_t (*)(size_t) >(&TGeoBranchArray::SizeOf));

    DEBUG_MSG("Adding wrapper for size_t TGeoBranchArray::SizeOfInstance(size_t) (" __HERE__ ")");
    // signature to use in the veto list: size_t TGeoBranchArray::SizeOfInstance(size_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:69:18
    module_.method("TGeoBranchArray!SizeOfInstance", static_cast<size_t (*)(size_t) >(&TGeoBranchArray::SizeOfInstance));

    DEBUG_MSG("Adding wrapper for size_t TGeoBranchArray::SizeOf() (" __HERE__ ")");
    // signature to use in the veto list: size_t TGeoBranchArray::SizeOf()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:74:18
    t.method("SizeOf", static_cast<size_t (TGeoBranchArray::*)()  const>(&TGeoBranchArray::SizeOf));

    DEBUG_MSG("Adding wrapper for void * TGeoBranchArray::DataStart() (" __HERE__ ")");
    // signature to use in the veto list: void * TGeoBranchArray::DataStart()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:78:10
    t.method("DataStart", static_cast<void * (TGeoBranchArray::*)()  const>(&TGeoBranchArray::DataStart));

    DEBUG_MSG("Adding wrapper for size_t TGeoBranchArray::DataSize() (" __HERE__ ")");
    // signature to use in the veto list: size_t TGeoBranchArray::DataSize()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:81:11
    t.method("DataSize", static_cast<size_t (TGeoBranchArray::*)()  const>(&TGeoBranchArray::DataSize));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::UpdateArray(size_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::UpdateArray(size_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:85:9
    t.method("UpdateArray", static_cast<void (TGeoBranchArray::*)(size_t) >(&TGeoBranchArray::UpdateArray));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::operator==(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::operator==(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:90:11
    t.method("==", static_cast<Bool_t (TGeoBranchArray::*)(const TGeoBranchArray &)  const>(&TGeoBranchArray::operator==));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::operator!=(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::operator!=(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:91:11
    t.method("!=", static_cast<Bool_t (TGeoBranchArray::*)(const TGeoBranchArray &)  const>(&TGeoBranchArray::operator!=));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::operator>(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::operator>(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:92:11
    t.method(">", static_cast<Bool_t (TGeoBranchArray::*)(const TGeoBranchArray &)  const>(&TGeoBranchArray::operator>));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::operator<(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::operator<(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:93:11
    t.method("<", static_cast<Bool_t (TGeoBranchArray::*)(const TGeoBranchArray &)  const>(&TGeoBranchArray::operator<));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::operator>=(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::operator>=(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:94:11
    t.method(">=", static_cast<Bool_t (TGeoBranchArray::*)(const TGeoBranchArray &)  const>(&TGeoBranchArray::operator>=));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::operator<=(const TGeoBranchArray &) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::operator<=(const TGeoBranchArray &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:95:11
    t.method("<=", static_cast<Bool_t (TGeoBranchArray::*)(const TGeoBranchArray &)  const>(&TGeoBranchArray::operator<=));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::AddLevel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::AddLevel(Int_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:97:9
    t.method("AddLevel", static_cast<void (TGeoBranchArray::*)(Int_t) >(&TGeoBranchArray::AddLevel));

    DEBUG_MSG("Adding wrapper for Long64_t TGeoBranchArray::BinarySearch(Long64_t, const TGeoBranchArray **, TGeoBranchArray *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TGeoBranchArray::BinarySearch(Long64_t, const TGeoBranchArray **, TGeoBranchArray *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:98:20
    module_.method("TGeoBranchArray!BinarySearch", static_cast<Long64_t (*)(Long64_t, const TGeoBranchArray **, TGeoBranchArray *) >(&TGeoBranchArray::BinarySearch));

    DEBUG_MSG("Adding wrapper for Int_t TGeoBranchArray::Compare(const TObject *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TGeoBranchArray::Compare(const TObject *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:99:10
    t.method("Compare", static_cast<Int_t (TGeoBranchArray::*)(const TObject *)  const>(&TGeoBranchArray::Compare));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::CleanMatrix() (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::CleanMatrix()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:100:9
    t.method("CleanMatrix", static_cast<void (TGeoBranchArray::*)() >(&TGeoBranchArray::CleanMatrix));

    DEBUG_MSG("Adding wrapper for TGeoNode ** TGeoBranchArray::GetArray() (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode ** TGeoBranchArray::GetArray()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:101:15
    t.method("GetArray", static_cast<TGeoNode ** (TGeoBranchArray::*)()  const>(&TGeoBranchArray::GetArray));

    DEBUG_MSG("Adding wrapper for size_t TGeoBranchArray::GetLevel() (" __HERE__ ")");
    // signature to use in the veto list: size_t TGeoBranchArray::GetLevel()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:102:11
    t.method("GetLevel", static_cast<size_t (TGeoBranchArray::*)()  const>(&TGeoBranchArray::GetLevel));

    DEBUG_MSG("Adding wrapper for size_t TGeoBranchArray::GetMaxLevel() (" __HERE__ ")");
    // signature to use in the veto list: size_t TGeoBranchArray::GetMaxLevel()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:103:11
    t.method("GetMaxLevel", static_cast<size_t (TGeoBranchArray::*)()  const>(&TGeoBranchArray::GetMaxLevel));

    DEBUG_MSG("Adding wrapper for const TGeoHMatrix * TGeoBranchArray::GetMatrix() (" __HERE__ ")");
    // signature to use in the veto list: const TGeoHMatrix * TGeoBranchArray::GetMatrix()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:104:23
    t.method("GetMatrix", static_cast<const TGeoHMatrix * (TGeoBranchArray::*)()  const>(&TGeoBranchArray::GetMatrix));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoBranchArray::GetNode(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoBranchArray::GetNode(Int_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:105:14
    t.method("GetNode", static_cast<TGeoNode * (TGeoBranchArray::*)(Int_t)  const>(&TGeoBranchArray::GetNode));

    DEBUG_MSG("Adding wrapper for TGeoNode * TGeoBranchArray::GetCurrentNode() (" __HERE__ ")");
    // signature to use in the veto list: TGeoNode * TGeoBranchArray::GetCurrentNode()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:106:14
    t.method("GetCurrentNode", static_cast<TGeoNode * (TGeoBranchArray::*)()  const>(&TGeoBranchArray::GetCurrentNode));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::GetPath(TString &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::GetPath(TString &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:107:9
    t.method("GetPath", static_cast<void (TGeoBranchArray::*)(TString &)  const>(&TGeoBranchArray::GetPath));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::Init(TGeoNode **, TGeoMatrix *, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::Init(TGeoNode **, TGeoMatrix *, Int_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:108:9
    t.method("Init", static_cast<void (TGeoBranchArray::*)(TGeoNode **, TGeoMatrix *, Int_t) >(&TGeoBranchArray::Init));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::InitFromNavigator(TGeoNavigator *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::InitFromNavigator(TGeoNavigator *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:109:9
    t.method("InitFromNavigator", static_cast<void (TGeoBranchArray::*)(TGeoNavigator *) >(&TGeoBranchArray::InitFromNavigator));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::IsSortable() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::IsSortable()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:110:11
    t.method("IsSortable", static_cast<Bool_t (TGeoBranchArray::*)()  const>(&TGeoBranchArray::IsSortable));

    DEBUG_MSG("Adding wrapper for Bool_t TGeoBranchArray::IsOutside() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TGeoBranchArray::IsOutside()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:111:11
    t.method("IsOutside", static_cast<Bool_t (TGeoBranchArray::*)()  const>(&TGeoBranchArray::IsOutside));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::Print(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::Print(Option_t *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:112:9
    t.method("Print", static_cast<void (TGeoBranchArray::*)(Option_t *)  const>(&TGeoBranchArray::Print));
    t.method("Print", [](TGeoBranchArray const& a)->void { a.Print(); });
    t.method("Print", [](TGeoBranchArray const* a)->void { a->Print(); });

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::Sort(Int_t, TGeoBranchArray **, Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::Sort(Int_t, TGeoBranchArray **, Int_t *, Bool_t)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:113:16
    module_.method("TGeoBranchArray!Sort", static_cast<void (*)(Int_t, TGeoBranchArray **, Int_t *, Bool_t) >(&TGeoBranchArray::Sort));
    module_.method("TGeoBranchArray!Sort", [](Int_t arg0, TGeoBranchArray ** arg1, Int_t * arg2)->void { TGeoBranchArray::Sort(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::UpdateNavigator(TGeoNavigator *) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::UpdateNavigator(TGeoNavigator *)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:114:9
    t.method("UpdateNavigator", static_cast<void (TGeoBranchArray::*)(TGeoNavigator *)  const>(&TGeoBranchArray::UpdateNavigator));

    DEBUG_MSG("Adding wrapper for Version_t TGeoBranchArray::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TGeoBranchArray::Class_Version()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!Class_Version", static_cast<Version_t (*)() >(&TGeoBranchArray::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TGeoBranchArray::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoBranchArray::IsA()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    t.method("IsA", static_cast<TClass * (TGeoBranchArray::*)()  const>(&TGeoBranchArray::IsA));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    t.method("StreamerNVirtual", static_cast<void (TGeoBranchArray::*)(TBuffer &) >(&TGeoBranchArray::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TGeoBranchArray::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoBranchArray::DeclFileName()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!DeclFileName", []() { return (std::string)TGeoBranchArray::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TGeoBranchArray::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoBranchArray::ImplFileLine()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!ImplFileLine", static_cast<int (*)() >(&TGeoBranchArray::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TGeoBranchArray::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoBranchArray::ImplFileName()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!ImplFileName", []() { return (std::string)TGeoBranchArray::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TGeoBranchArray::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TGeoBranchArray::Class_Name()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!Class_Name", []() { return (std::string)TGeoBranchArray::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TGeoBranchArray::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoBranchArray::Dictionary()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!Dictionary", static_cast<TClass * (*)() >(&TGeoBranchArray::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TGeoBranchArray::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TGeoBranchArray::Class()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!Class", static_cast<TClass * (*)() >(&TGeoBranchArray::Class));

    DEBUG_MSG("Adding wrapper for void TGeoBranchArray::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TGeoBranchArray::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    t.method("Streamer", static_cast<void (TGeoBranchArray::*)(TBuffer &) >(&TGeoBranchArray::Streamer));

    DEBUG_MSG("Adding wrapper for int TGeoBranchArray::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TGeoBranchArray::DeclFileLine()
    // defined in /opt/root63206jll/include/TGeoBranchArray.h:116:4
    module_.method("TGeoBranchArray!DeclFileLine", static_cast<int (*)() >(&TGeoBranchArray::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TGeoBranchArray>> type_;
};
std::shared_ptr<Wrapper> newJlTGeoBranchArray(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTGeoBranchArray(module));
}
