// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TF1::TF1FunctorPointer> : std::false_type { };
  template<> struct DefaultConstructible<TF1::TF1FunctorPointer> : std::false_type { };
}

// Class generating the wrapper for type TF1::TF1FunctorPointer
// signature to use in the veto file: TF1::TF1FunctorPointer
struct JlTF1_TF1FunctorPointer: public Wrapper {

  JlTF1_TF1FunctorPointer(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1::TF1FunctorPointer (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF1.h:247:11
    jlcxx::TypeWrapper<TF1::TF1FunctorPointer>  t = jlModule.add_type<TF1::TF1FunctorPointer>("TF1!TF1FunctorPointer");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1::TF1FunctorPointer>>(new jlcxx::TypeWrapper<TF1::TF1FunctorPointer>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for TF1::TF1FunctorPointer * TF1::TF1FunctorPointer::Clone() (" __HERE__ ")");
    // signature to use in the veto list: TF1::TF1FunctorPointer * TF1::TF1FunctorPointer::Clone()
    // defined in /opt/root63206jll/include/TF1.h:249:36
    t.method("Clone", static_cast<TF1::TF1FunctorPointer * (TF1::TF1FunctorPointer::*)()  const>(&TF1::TF1FunctorPointer::Clone));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1::TF1FunctorPointer>> type_;
};
std::shared_ptr<Wrapper> newJlTF1_TF1FunctorPointer(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1_TF1FunctorPointer(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF2> : std::false_type { };
  template<> struct DefaultConstructible<TF2> : std::false_type { };
template<> struct SuperType<TF2> { typedef TF1 type; };
}

// Class generating the wrapper for type TF2
// signature to use in the veto file: TF2
struct JlTF2: public Wrapper {

  JlTF2(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF2 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF2.h:29:7
    jlcxx::TypeWrapper<TF2>  t = jlModule.add_type<TF2>("TF2",
      jlcxx::julia_base_type<TF1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF2>>(new jlcxx::TypeWrapper<TF2>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF2::TF2(const char *, const char *, Double_t, Double_t, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF2.h:39:4
    t.constructor<const char *, const char *>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF2::TF2(const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Int_t, Int_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF2.h:41:4
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *)>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Int_t>(/*finalize=*/true);
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Int_t, Int_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF2::TF2(const TF2 &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF2.h:83:4
    t.constructor<const TF2 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TF2 & TF2::operator=(const TF2 &) (" __HERE__ ")");
    // signature to use in the veto list: TF2 & TF2::operator=(const TF2 &)
    // defined in /opt/root63206jll/include/TF2.h:84:9
    t.method("assign", static_cast<TF2 & (TF2::*)(const TF2 &) >(&TF2::operator=));

    DEBUG_MSG("Adding wrapper for void TF2::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Copy(TObject &)
    // defined in /opt/root63206jll/include/TF2.h:86:13
    t.method("Copy", static_cast<void (TF2::*)(TObject &)  const>(&TF2::Copy));

    DEBUG_MSG("Adding wrapper for Int_t TF2::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF2::DistancetoPrimitive(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TF2.h:87:13
    t.method("DistancetoPrimitive", static_cast<Int_t (TF2::*)(Int_t, Int_t) >(&TF2::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TF2::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Draw(Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:88:13
    t.method("Draw", static_cast<void (TF2::*)(Option_t *) >(&TF2::Draw));
    t.method("Draw", [](TF2& a)->void { a.Draw(); });
    t.method("Draw", [](TF2* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for TF1 * TF2::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF2::DrawCopy(Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:89:13
    t.method("DrawCopy", static_cast<TF1 * (TF2::*)(Option_t *)  const>(&TF2::DrawCopy));
    t.method("DrawCopy", [](TF2 const& a)->TF1 * { return a.DrawCopy(); });
    t.method("DrawCopy", [](TF2 const* a)->TF1 * { return a->DrawCopy(); });

    DEBUG_MSG("Adding wrapper for TObject * TF2::DrawDerivative(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF2::DrawDerivative(Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:90:13
    t.method("DrawDerivative", static_cast<TObject * (TF2::*)(Option_t *) >(&TF2::DrawDerivative));
    t.method("DrawDerivative", [](TF2& a)->TObject * { return a.DrawDerivative(); });
    t.method("DrawDerivative", [](TF2* a)->TObject * { return a->DrawDerivative(); });

    DEBUG_MSG("Adding wrapper for TObject * TF2::DrawIntegral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF2::DrawIntegral(Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:91:13
    t.method("DrawIntegral", static_cast<TObject * (TF2::*)(Option_t *) >(&TF2::DrawIntegral));
    t.method("DrawIntegral", [](TF2& a)->TObject * { return a.DrawIntegral(); });
    t.method("DrawIntegral", [](TF2* a)->TObject * { return a->DrawIntegral(); });

    DEBUG_MSG("Adding wrapper for void TF2::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /opt/root63206jll/include/TF2.h:93:13
    t.method("ExecuteEvent", static_cast<void (TF2::*)(Int_t, Int_t, Int_t) >(&TF2::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for Int_t TF2::GetContour(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF2::GetContour(Double_t *)
    // defined in /opt/root63206jll/include/TF2.h:94:21
    t.method("GetContour", static_cast<Int_t (TF2::*)(Double_t *) >(&TF2::GetContour));
    t.method("GetContour", [](TF2& a)->Int_t { return a.GetContour(); });
    t.method("GetContour", [](TF2* a)->Int_t { return a->GetContour(); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetContourLevel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetContourLevel(Int_t)
    // defined in /opt/root63206jll/include/TF2.h:95:21
    t.method("GetContourLevel", static_cast<Double_t (TF2::*)(Int_t)  const>(&TF2::GetContourLevel));

    DEBUG_MSG("Adding wrapper for Int_t TF2::GetNpy() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF2::GetNpy()
    // defined in /opt/root63206jll/include/TF2.h:96:21
    t.method("GetNpy", static_cast<Int_t (TF2::*)()  const>(&TF2::GetNpy));

    DEBUG_MSG("Adding wrapper for char * TF2::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TF2::GetObjectInfo(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TF2.h:97:13
    t.method("GetObjectInfo", static_cast<char * (TF2::*)(Int_t, Int_t)  const>(&TF2::GetObjectInfo));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetRandom(TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetRandom(TRandom *, Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:98:13
    t.method("GetRandom", static_cast<Double_t (TF2::*)(TRandom *, Option_t *) >(&TF2::GetRandom));
    t.method("GetRandom", [](TF2& a)->Double_t { return a.GetRandom(); });
    t.method("GetRandom", [](TF2& a, TRandom * arg0)->Double_t { return a.GetRandom(arg0); });
    t.method("GetRandom", [](TF2* a)->Double_t { return a->GetRandom(); });
    t.method("GetRandom", [](TF2* a, TRandom * arg0)->Double_t { return a->GetRandom(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetRandom(Double_t, Double_t, TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetRandom(Double_t, Double_t, TRandom *, Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:99:13
    t.method("GetRandom", static_cast<Double_t (TF2::*)(Double_t, Double_t, TRandom *, Option_t *) >(&TF2::GetRandom));
    t.method("GetRandom", [](TF2& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF2& a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a.GetRandom(arg0, arg1, arg2); });
    t.method("GetRandom", [](TF2* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetRandom(arg0, arg1); });
    t.method("GetRandom", [](TF2* a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a->GetRandom(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TF2::GetRandom2(Double_t &, Double_t &, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::GetRandom2(Double_t &, Double_t &, TRandom *)
    // defined in /opt/root63206jll/include/TF2.h:100:21
    t.method("GetRandom2", static_cast<void (TF2::*)(Double_t &, Double_t &, TRandom *) >(&TF2::GetRandom2));
    t.method("GetRandom2", [](TF2& a, Double_t & arg0, Double_t & arg1)->void { a.GetRandom2(arg0, arg1); });
    t.method("GetRandom2", [](TF2* a, Double_t & arg0, Double_t & arg1)->void { a->GetRandom2(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TF2.h:102:13
    t.method("GetRange", static_cast<void (TF2::*)(Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TF2::GetRange));

    DEBUG_MSG("Adding wrapper for void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TF2.h:103:13
    t.method("GetRange", static_cast<void (TF2::*)(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)  const>(&TF2::GetRange));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetSave(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetSave(const Double_t *)
    // defined in /opt/root63206jll/include/TF2.h:104:13
    t.method("GetSave", static_cast<Double_t (TF2::*)(const Double_t *) >(&TF2::GetSave));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMinimumXY(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMinimumXY(Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TF2.h:105:21
    t.method("GetMinimumXY", static_cast<Double_t (TF2::*)(Double_t &, Double_t &)  const>(&TF2::GetMinimumXY));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMaximumXY(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMaximumXY(Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TF2.h:106:21
    t.method("GetMaximumXY", static_cast<Double_t (TF2::*)(Double_t &, Double_t &)  const>(&TF2::GetMaximumXY));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMinimum(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMinimum(Double_t *)
    // defined in /opt/root63206jll/include/TF2.h:109:21
    t.method("GetMinimum", static_cast<Double_t (TF2::*)(Double_t *)  const>(&TF2::GetMinimum));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMaximum(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMaximum(Double_t *)
    // defined in /opt/root63206jll/include/TF2.h:110:21
    t.method("GetMaximum", static_cast<Double_t (TF2::*)(Double_t *)  const>(&TF2::GetMaximum));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetYmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetYmin()
    // defined in /opt/root63206jll/include/TF2.h:111:21
    t.method("GetYmin", static_cast<Double_t (TF2::*)()  const>(&TF2::GetYmin));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetYmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetYmax()
    // defined in /opt/root63206jll/include/TF2.h:112:21
    t.method("GetYmax", static_cast<Double_t (TF2::*)()  const>(&TF2::GetYmax));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Integral(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Integral(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:114:21
    t.method("Integral", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Integral));
    t.method("Integral", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Integral(arg0, arg1, arg2, arg3); });
    t.method("Integral", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Integral(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Bool_t TF2::IsInside(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF2::IsInside(const Double_t *)
    // defined in /opt/root63206jll/include/TF2.h:115:13
    t.method("IsInside", static_cast<Bool_t (TF2::*)(const Double_t *)  const>(&TF2::IsInside));

    DEBUG_MSG("Adding wrapper for TH1 * TF2::CreateHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF2::CreateHistogram()
    // defined in /opt/root63206jll/include/TF2.h:116:13
    t.method("CreateHistogram", static_cast<TH1 * (TF2::*)() >(&TF2::CreateHistogram));

    DEBUG_MSG("Adding wrapper for void TF2::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Paint(Option_t *)
    // defined in /opt/root63206jll/include/TF2.h:117:13
    t.method("Paint", static_cast<void (TF2::*)(Option_t *) >(&TF2::Paint));
    t.method("Paint", [](TF2& a)->void { a.Paint(); });
    t.method("Paint", [](TF2* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for void TF2::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:118:13
    t.method("Save", static_cast<void (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Save));

    DEBUG_MSG("Adding wrapper for void TF2::SetNpy(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetNpy(Int_t)
    // defined in /opt/root63206jll/include/TF2.h:120:21
    t.method("SetNpy", static_cast<void (TF2::*)(Int_t) >(&TF2::SetNpy));
    t.method("SetNpy", [](TF2& a)->void { a.SetNpy(); });
    t.method("SetNpy", [](TF2* a)->void { a->SetNpy(); });

    DEBUG_MSG("Adding wrapper for void TF2::SetContour(Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetContour(Int_t, const Double_t *)
    // defined in /opt/root63206jll/include/TF2.h:121:21
    t.method("SetContour", static_cast<void (TF2::*)(Int_t, const Double_t *) >(&TF2::SetContour));
    t.method("SetContour", [](TF2& a)->void { a.SetContour(); });
    t.method("SetContour", [](TF2& a, Int_t arg0)->void { a.SetContour(arg0); });
    t.method("SetContour", [](TF2* a)->void { a->SetContour(); });
    t.method("SetContour", [](TF2* a, Int_t arg0)->void { a->SetContour(arg0); });

    DEBUG_MSG("Adding wrapper for void TF2::SetContourLevel(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetContourLevel(Int_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:122:21
    t.method("SetContourLevel", static_cast<void (TF2::*)(Int_t, Double_t) >(&TF2::SetContourLevel));

    DEBUG_MSG("Adding wrapper for void TF2::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetRange(Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:123:13
    t.method("SetRange", static_cast<void (TF2::*)(Double_t, Double_t) >(&TF2::SetRange));

    DEBUG_MSG("Adding wrapper for void TF2::SetRange(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetRange(Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:124:13
    t.method("SetRange", static_cast<void (TF2::*)(Double_t, Double_t, Double_t, Double_t) >(&TF2::SetRange));

    DEBUG_MSG("Adding wrapper for void TF2::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:125:13
    t.method("SetRange", static_cast<void (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::SetRange));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Moment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Moment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:128:21
    t.method("Moment2", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Moment2));
    t.method("Moment2", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Moment2(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("Moment2", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Moment2(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::CentralMoment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::CentralMoment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:129:21
    t.method("CentralMoment2", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::CentralMoment2));
    t.method("CentralMoment2", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.CentralMoment2(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("CentralMoment2", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->CentralMoment2(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::Mean2X(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Mean2X(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:131:21
    t.method("Mean2X", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Mean2X));
    t.method("Mean2X", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Mean2X(arg0, arg1, arg2, arg3); });
    t.method("Mean2X", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Mean2X(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::Mean2Y(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Mean2Y(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:132:21
    t.method("Mean2Y", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Mean2Y));
    t.method("Mean2Y", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Mean2Y(arg0, arg1, arg2, arg3); });
    t.method("Mean2Y", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Mean2Y(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::Variance2X(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Variance2X(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:134:21
    t.method("Variance2X", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Variance2X));
    t.method("Variance2X", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Variance2X(arg0, arg1, arg2, arg3); });
    t.method("Variance2X", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Variance2X(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::Variance2Y(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Variance2Y(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:135:21
    t.method("Variance2Y", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Variance2Y));
    t.method("Variance2Y", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Variance2Y(arg0, arg1, arg2, arg3); });
    t.method("Variance2Y", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Variance2Y(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Double_t TF2::Covariance2XY(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Covariance2XY(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF2.h:137:21
    t.method("Covariance2XY", static_cast<Double_t (TF2::*)(Double_t, Double_t, Double_t, Double_t, Double_t) >(&TF2::Covariance2XY));
    t.method("Covariance2XY", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Covariance2XY(arg0, arg1, arg2, arg3); });
    t.method("Covariance2XY", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Covariance2XY(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for Version_t TF2::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF2::Class_Version()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!Class_Version", static_cast<Version_t (*)() >(&TF2::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF2::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF2::IsA()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    t.method("IsA", static_cast<TClass * (TF2::*)()  const>(&TF2::IsA));

    DEBUG_MSG("Adding wrapper for void TF2::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TF2.h:143:4
    t.method("StreamerNVirtual", static_cast<void (TF2::*)(TBuffer &) >(&TF2::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF2::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF2::DeclFileName()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!DeclFileName", []() { return (std::string)TF2::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF2::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF2::ImplFileLine()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!ImplFileLine", static_cast<int (*)() >(&TF2::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF2::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF2::ImplFileName()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!ImplFileName", []() { return (std::string)TF2::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF2::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF2::Class_Name()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!Class_Name", []() { return (std::string)TF2::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF2::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF2::Dictionary()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!Dictionary", static_cast<TClass * (*)() >(&TF2::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF2::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF2::Class()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!Class", static_cast<TClass * (*)() >(&TF2::Class));

    DEBUG_MSG("Adding wrapper for void TF2::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TF2.h:143:4
    t.method("Streamer", static_cast<void (TF2::*)(TBuffer &) >(&TF2::Streamer));

    DEBUG_MSG("Adding wrapper for int TF2::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF2::DeclFileLine()
    // defined in /opt/root63206jll/include/TF2.h:143:4
    module_.method("TF2!DeclFileLine", static_cast<int (*)() >(&TF2::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF2>> type_;
};
std::shared_ptr<Wrapper> newJlTF2(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF2(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF12> : std::false_type { };
  template<> struct DefaultConstructible<TF12> : std::false_type { };
template<> struct SuperType<TF12> { typedef TF1 type; };
}

// Class generating the wrapper for type TF12
// signature to use in the veto file: TF12
struct JlTF12: public Wrapper {

  JlTF12(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF12 (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF12.h:25:7
    jlcxx::TypeWrapper<TF12>  t = jlModule.add_type<TF12>("TF12",
      jlcxx::julia_base_type<TF1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF12>>(new jlcxx::TypeWrapper<TF12>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF12::TF12(const char *, TF2 *, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF12.h:34:4
    t.constructor<const char *, TF2 *, Double_t>(/*finalize=*/true);
    t.constructor<const char *, TF2 *, Double_t, Option_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TF12::TF12(const TF12 &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TF12.h:35:4
    t.constructor<const TF12 &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void TF12::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::Copy(TObject &)
    // defined in /opt/root63206jll/include/TF12.h:37:13
    t.method("Copy", static_cast<void (TF12::*)(TObject &)  const>(&TF12::Copy));

    DEBUG_MSG("Adding wrapper for TF1 * TF12::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF12::DrawCopy(Option_t *)
    // defined in /opt/root63206jll/include/TF12.h:38:13
    t.method("DrawCopy", static_cast<TF1 * (TF12::*)(Option_t *)  const>(&TF12::DrawCopy));
    t.method("DrawCopy", [](TF12 const& a)->TF1 * { return a.DrawCopy(); });
    t.method("DrawCopy", [](TF12 const* a)->TF1 * { return a->DrawCopy(); });

    DEBUG_MSG("Adding wrapper for Double_t TF12::Eval(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF12::Eval(Double_t, Double_t, Double_t, Double_t)
    // defined in /opt/root63206jll/include/TF12.h:39:13
    t.method("Eval", static_cast<Double_t (TF12::*)(Double_t, Double_t, Double_t, Double_t)  const>(&TF12::Eval));
    t.method("Eval", [](TF12 const& a, Double_t arg0)->Double_t { return a.Eval(arg0); });
    t.method("Eval", [](TF12 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.Eval(arg0, arg1); });
    t.method("Eval", [](TF12 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](TF12 const* a, Double_t arg0)->Double_t { return a->Eval(arg0); });
    t.method("Eval", [](TF12 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->Eval(arg0, arg1); });
    t.method("Eval", [](TF12 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Eval(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Double_t TF12::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF12::EvalPar(const Double_t *, const Double_t *)
    // defined in /opt/root63206jll/include/TF12.h:40:13
    t.method("EvalPar", static_cast<Double_t (TF12::*)(const Double_t *, const Double_t *) >(&TF12::EvalPar));
    t.method("EvalPar", [](TF12& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); });
    t.method("EvalPar", [](TF12* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TF12::GetXY() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF12::GetXY()
    // defined in /opt/root63206jll/include/TF12.h:47:21
    t.method("GetXY", static_cast<Double_t (TF12::*)()  const>(&TF12::GetXY));

    DEBUG_MSG("Adding wrapper for void TF12::SetXY(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::SetXY(Double_t)
    // defined in /opt/root63206jll/include/TF12.h:49:21
    t.method("SetXY", static_cast<void (TF12::*)(Double_t) >(&TF12::SetXY));

    DEBUG_MSG("Adding wrapper for Version_t TF12::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF12::Class_Version()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!Class_Version", static_cast<Version_t (*)() >(&TF12::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TF12::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF12::IsA()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    t.method("IsA", static_cast<TClass * (TF12::*)()  const>(&TF12::IsA));

    DEBUG_MSG("Adding wrapper for void TF12::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TF12.h:51:4
    t.method("StreamerNVirtual", static_cast<void (TF12::*)(TBuffer &) >(&TF12::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TF12::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF12::DeclFileName()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!DeclFileName", []() { return (std::string)TF12::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF12::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF12::ImplFileLine()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!ImplFileLine", static_cast<int (*)() >(&TF12::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TF12::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF12::ImplFileName()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!ImplFileName", []() { return (std::string)TF12::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF12::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF12::Class_Name()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!Class_Name", []() { return (std::string)TF12::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF12::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF12::Dictionary()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!Dictionary", static_cast<TClass * (*)() >(&TF12::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TF12::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF12::Class()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!Class", static_cast<TClass * (*)() >(&TF12::Class));

    DEBUG_MSG("Adding wrapper for void TF12::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TF12.h:51:4
    t.method("Streamer", static_cast<void (TF12::*)(TBuffer &) >(&TF12::Streamer));

    DEBUG_MSG("Adding wrapper for int TF12::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF12::DeclFileLine()
    // defined in /opt/root63206jll/include/TF12.h:51:4
    module_.method("TF12!DeclFileLine", static_cast<int (*)() >(&TF12::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF12>> type_;
};
std::shared_ptr<Wrapper> newJlTF12(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF12(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TSpline> : std::false_type { };
  template<> struct DefaultConstructible<TSpline> : std::false_type { };
template<> struct SuperType<TSpline> { typedef TNamed type; };
}

// Class generating the wrapper for type TSpline
// signature to use in the veto file: TSpline
struct JlTSpline: public Wrapper {

  JlTSpline(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSpline (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TSpline.h:29:7
    jlcxx::TypeWrapper<TSpline>  t = jlModule.add_type<TSpline>("TSpline",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSpline>>(new jlcxx::TypeWrapper<TSpline>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TSpline::GetKnot(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::GetKnot(Int_t, Double_t &, Double_t &)
    // defined in /opt/root63206jll/include/TSpline.h:54:21
    t.method("GetKnot", static_cast<void (TSpline::*)(Int_t, Double_t &, Double_t &)  const>(&TSpline::GetKnot));

    DEBUG_MSG("Adding wrapper for Int_t TSpline::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline::DistancetoPrimitive(Int_t, Int_t)
    // defined in /opt/root63206jll/include/TSpline.h:55:13
    t.method("DistancetoPrimitive", static_cast<Int_t (TSpline::*)(Int_t, Int_t) >(&TSpline::DistancetoPrimitive));

    DEBUG_MSG("Adding wrapper for void TSpline::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::Draw(Option_t *)
    // defined in /opt/root63206jll/include/TSpline.h:56:13
    t.method("Draw", static_cast<void (TSpline::*)(Option_t *) >(&TSpline::Draw));
    t.method("Draw", [](TSpline& a)->void { a.Draw(); });
    t.method("Draw", [](TSpline* a)->void { a->Draw(); });

    DEBUG_MSG("Adding wrapper for void TSpline::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /opt/root63206jll/include/TSpline.h:57:13
    t.method("ExecuteEvent", static_cast<void (TSpline::*)(Int_t, Int_t, Int_t) >(&TSpline::ExecuteEvent));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::GetDelta() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::GetDelta()
    // defined in /opt/root63206jll/include/TSpline.h:58:21
    t.method("GetDelta", static_cast<Double_t (TSpline::*)()  const>(&TSpline::GetDelta));

    DEBUG_MSG("Adding wrapper for TH1F * TSpline::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1F * TSpline::GetHistogram()
    // defined in /opt/root63206jll/include/TSpline.h:59:21
    t.method("GetHistogram", static_cast<TH1F * (TSpline::*)()  const>(&TSpline::GetHistogram));

    DEBUG_MSG("Adding wrapper for Int_t TSpline::GetNp() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline::GetNp()
    // defined in /opt/root63206jll/include/TSpline.h:60:21
    t.method("GetNp", static_cast<Int_t (TSpline::*)()  const>(&TSpline::GetNp));

    DEBUG_MSG("Adding wrapper for Int_t TSpline::GetNpx() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline::GetNpx()
    // defined in /opt/root63206jll/include/TSpline.h:61:21
    t.method("GetNpx", static_cast<Int_t (TSpline::*)()  const>(&TSpline::GetNpx));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::GetXmin()
    // defined in /opt/root63206jll/include/TSpline.h:62:21
    t.method("GetXmin", static_cast<Double_t (TSpline::*)()  const>(&TSpline::GetXmin));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::GetXmax()
    // defined in /opt/root63206jll/include/TSpline.h:63:21
    t.method("GetXmax", static_cast<Double_t (TSpline::*)()  const>(&TSpline::GetXmax));

    DEBUG_MSG("Adding wrapper for void TSpline::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::Paint(Option_t *)
    // defined in /opt/root63206jll/include/TSpline.h:64:13
    t.method("Paint", static_cast<void (TSpline::*)(Option_t *) >(&TSpline::Paint));
    t.method("Paint", [](TSpline& a)->void { a.Paint(); });
    t.method("Paint", [](TSpline* a)->void { a->Paint(); });

    DEBUG_MSG("Adding wrapper for Double_t TSpline::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::Eval(Double_t)
    // defined in /opt/root63206jll/include/TSpline.h:65:21
    t.method("Eval", static_cast<Double_t (TSpline::*)(Double_t)  const>(&TSpline::Eval));

    DEBUG_MSG("Adding wrapper for void TSpline::SaveAs(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::SaveAs(const char *, Option_t *)
    // defined in /opt/root63206jll/include/TSpline.h:66:13
    t.method("SaveAs", static_cast<void (TSpline::*)(const char *, Option_t *)  const>(&TSpline::SaveAs));
    t.method("SaveAs", [](TSpline const& a)->void { a.SaveAs(); });
    t.method("SaveAs", [](TSpline const& a, const char * arg0)->void { a.SaveAs(arg0); });
    t.method("SaveAs", [](TSpline const* a)->void { a->SaveAs(); });
    t.method("SaveAs", [](TSpline const* a, const char * arg0)->void { a->SaveAs(arg0); });

    DEBUG_MSG("Adding wrapper for void TSpline::SetNpx(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::SetNpx(Int_t)
    // defined in /opt/root63206jll/include/TSpline.h:67:21
    t.method("SetNpx", static_cast<void (TSpline::*)(Int_t) >(&TSpline::SetNpx));

    DEBUG_MSG("Adding wrapper for Version_t TSpline::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSpline::Class_Version()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!Class_Version", static_cast<Version_t (*)() >(&TSpline::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TSpline::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline::IsA()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    t.method("IsA", static_cast<TClass * (TSpline::*)()  const>(&TSpline::IsA));

    DEBUG_MSG("Adding wrapper for void TSpline::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    t.method("StreamerNVirtual", static_cast<void (TSpline::*)(TBuffer &) >(&TSpline::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TSpline::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline::DeclFileName()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!DeclFileName", []() { return (std::string)TSpline::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSpline::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline::ImplFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!ImplFileLine", static_cast<int (*)() >(&TSpline::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TSpline::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline::ImplFileName()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!ImplFileName", []() { return (std::string)TSpline::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSpline::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline::Class_Name()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!Class_Name", []() { return (std::string)TSpline::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSpline::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline::Dictionary()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!Dictionary", static_cast<TClass * (*)() >(&TSpline::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TSpline::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline::Class()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!Class", static_cast<TClass * (*)() >(&TSpline::Class));

    DEBUG_MSG("Adding wrapper for void TSpline::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    t.method("Streamer", static_cast<void (TSpline::*)(TBuffer &) >(&TSpline::Streamer));

    DEBUG_MSG("Adding wrapper for int TSpline::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline::DeclFileLine()
    // defined in /opt/root63206jll/include/TSpline.h:69:4
    module_.method("TSpline!DeclFileLine", static_cast<int (*)() >(&TSpline::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSpline>> type_;
};
std::shared_ptr<Wrapper> newJlTSpline(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSpline(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH1F> : std::false_type { };
  template<> struct DefaultConstructible<TH1F> : std::false_type { };
template<> struct SuperType<TH1F> { typedef TH1 type; };
}

// Class generating the wrapper for type TH1F
// signature to use in the veto file: TH1F
struct JlTH1F: public Wrapper {

  JlTH1F(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH1F (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TH1.h:621:7
    jlcxx::TypeWrapper<TH1F>  t = jlModule.add_type<TH1F>("TH1F",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH1F>>(new jlcxx::TypeWrapper<TH1F>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const char *, const char *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TH1.h:625:4
    t.constructor<const char *, const char *, Int_t, Double_t, Double_t>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const char *, const char *, Int_t, const Float_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TH1.h:626:4
    t.constructor<const char *, const char *, Int_t, const Float_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const char *, const char *, Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TH1.h:627:4
    t.constructor<const char *, const char *, Int_t, const Double_t *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const TH1F &) (" __HERE__ ")");
    // defined in /opt/root63206jll/include/TH1.h:629:4
    t.constructor<const TH1F &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for TH1F & TH1F::operator=(const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F & TH1F::operator=(const TH1F &)
    // defined in /opt/root63206jll/include/TH1.h:630:10
    t.method("assign", static_cast<TH1F & (TH1F::*)(const TH1F &) >(&TH1F::operator=));

    DEBUG_MSG("Adding wrapper for void TH1F::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::AddBinContent(Int_t)
    // defined in /opt/root63206jll/include/TH1.h:635:13
    t.method("AddBinContent", static_cast<void (TH1F::*)(Int_t) >(&TH1F::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1F::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::AddBinContent(Int_t, Double_t)
    // defined in /opt/root63206jll/include/TH1.h:639:13
    t.method("AddBinContent", static_cast<void (TH1F::*)(Int_t, Double_t) >(&TH1F::AddBinContent));

    DEBUG_MSG("Adding wrapper for void TH1F::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::Copy(TObject &)
    // defined in /opt/root63206jll/include/TH1.h:641:13
    t.method("Copy", static_cast<void (TH1F::*)(TObject &)  const>(&TH1F::Copy));

    DEBUG_MSG("Adding wrapper for void TH1F::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::Reset(Option_t *)
    // defined in /opt/root63206jll/include/TH1.h:642:13
    t.method("Reset", static_cast<void (TH1F::*)(Option_t *) >(&TH1F::Reset));
    t.method("Reset", [](TH1F& a)->void { a.Reset(); });
    t.method("Reset", [](TH1F* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for void TH1F::SetBinsLength(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::SetBinsLength(Int_t)
    // defined in /opt/root63206jll/include/TH1.h:643:13
    t.method("SetBinsLength", static_cast<void (TH1F::*)(Int_t) >(&TH1F::SetBinsLength));
    t.method("SetBinsLength", [](TH1F& a)->void { a.SetBinsLength(); });
    t.method("SetBinsLength", [](TH1F* a)->void { a->SetBinsLength(); });

    DEBUG_MSG("Adding wrapper for Version_t TH1F::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH1F::Class_Version()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!Class_Version", static_cast<Version_t (*)() >(&TH1F::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TH1F::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1F::IsA()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    t.method("IsA", static_cast<TClass * (TH1F::*)()  const>(&TH1F::IsA));

    DEBUG_MSG("Adding wrapper for void TH1F::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::StreamerNVirtual(TBuffer &)
    // defined in /opt/root63206jll/include/TH1.h:645:4
    t.method("StreamerNVirtual", static_cast<void (TH1F::*)(TBuffer &) >(&TH1F::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TH1F::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1F::DeclFileName()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!DeclFileName", []() { return (std::string)TH1F::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH1F::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1F::ImplFileLine()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!ImplFileLine", static_cast<int (*)() >(&TH1F::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TH1F::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1F::ImplFileName()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!ImplFileName", []() { return (std::string)TH1F::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH1F::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1F::Class_Name()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!Class_Name", []() { return (std::string)TH1F::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1F::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1F::Dictionary()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!Dictionary", static_cast<TClass * (*)() >(&TH1F::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TH1F::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1F::Class()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!Class", static_cast<TClass * (*)() >(&TH1F::Class));

    DEBUG_MSG("Adding wrapper for void TH1F::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::Streamer(TBuffer &)
    // defined in /opt/root63206jll/include/TH1.h:645:4
    t.method("Streamer", static_cast<void (TH1F::*)(TBuffer &) >(&TH1F::Streamer));

    DEBUG_MSG("Adding wrapper for int TH1F::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1F::DeclFileLine()
    // defined in /opt/root63206jll/include/TH1.h:645:4
    module_.method("TH1F!DeclFileLine", static_cast<int (*)() >(&TH1F::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH1F>> type_;
};
std::shared_ptr<Wrapper> newJlTH1F(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH1F(module));
}
