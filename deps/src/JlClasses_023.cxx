// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TF1::TF1FunctorPointer> : std::false_type { };
  template<> struct DefaultConstructible<TF1::TF1FunctorPointer> : std::false_type { };
}

// Class generating the wrapper for type TF1::TF1FunctorPointer
// signature to use in the veto file: TF1::TF1FunctorPointer
struct JlTF1_TF1FunctorPointer: public Wrapper {

  JlTF1_TF1FunctorPointer(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF1::TF1FunctorPointer (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:247:11
    jlcxx::TypeWrapper<TF1::TF1FunctorPointer>  t = jlModule.add_type<TF1::TF1FunctorPointer>("TF1!TF1FunctorPointer");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF1::TF1FunctorPointer>>(new jlcxx::TypeWrapper<TF1::TF1FunctorPointer>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for TF1::TF1FunctorPointer * TF1::TF1FunctorPointer::Clone() (" __HERE__ ")");
    // signature to use in the veto list: TF1::TF1FunctorPointer * TF1::TF1FunctorPointer::Clone()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF1.h:249:36
    t.method("Clone", [](TF1::TF1FunctorPointer const& a)->TF1::TF1FunctorPointer * { return a.Clone(); }, jlcxx::arg("this"));
    t.method("Clone", [](TF1::TF1FunctorPointer const* a)->TF1::TF1FunctorPointer * { return a->Clone(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF1::TF1FunctorPointer>> type_;
};
std::shared_ptr<Wrapper> newJlTF1_TF1FunctorPointer(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF1_TF1FunctorPointer(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF2> : std::false_type { };
  template<> struct DefaultConstructible<TF2> : std::false_type { };
template<> struct SuperType<TF2> { typedef TF1 type; };
}

// Class generating the wrapper for type TF2
// signature to use in the veto file: TF2
struct JlTF2: public Wrapper {

  JlTF2(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF2 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:29:7
    jlcxx::TypeWrapper<TF2>  t = jlModule.add_type<TF2>("TF2",
      jlcxx::julia_base_type<TF1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF2>>(new jlcxx::TypeWrapper<TF2>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void TF2::TF2(const char *, const char *, Double_t, Double_t, Double_t, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:39:4
    t.constructor<const char *, const char *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula")    );
    t.constructor<const char *, const char *, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("xmin")    );
    t.constructor<const char *, const char *, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("xmin"), jlcxx::arg("xmax")    );
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin")    );
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax")    );
    t.constructor<const char *, const char *, Double_t, Double_t, Double_t, Double_t, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("formula"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax"), jlcxx::arg("opt")    );


    DEBUG_MSG("Adding wrapper for void TF2::TF2(const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Int_t, Int_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:41:4
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *)>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn")    );
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn"), jlcxx::arg("xmin")    );
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn"), jlcxx::arg("xmin"), jlcxx::arg("xmax")    );
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin")    );
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax")    );
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax"), jlcxx::arg("npar")    );
    t.constructor<const char *, Double_t (*)(const Double_t *, const Double_t *), Double_t, Double_t, Double_t, Double_t, Int_t, Int_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("fcn"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax"), jlcxx::arg("npar"), jlcxx::arg("ndim")    );


    DEBUG_MSG("Adding wrapper for void TF2::TF2(const TF2 &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:83:4
    t.constructor<const TF2 &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("f2")    );

    DEBUG_MSG("Adding wrapper for TF2 & TF2::operator=(const TF2 &) (" __HERE__ ")");
    // signature to use in the veto list: TF2 & TF2::operator=(const TF2 &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:84:9
    t.method("assign", [](TF2& a, const TF2 & arg0)->TF2 & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("rhs"));
    t.method("assign", [](TF2* a, const TF2 & arg0)->TF2 & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("rhs"));

    DEBUG_MSG("Adding wrapper for void TF2::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:86:13
    t.method("Copy", [](TF2 const& a, TObject & arg0)->void { a.Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("f2"));
    t.method("Copy", [](TF2 const* a, TObject & arg0)->void { a->Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("f2"));

    DEBUG_MSG("Adding wrapper for Int_t TF2::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF2::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:87:13
    t.method("DistancetoPrimitive", [](TF2& a, Int_t arg0, Int_t arg1)->Int_t { return a.DistancetoPrimitive(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("px"), jlcxx::arg("py"));
    t.method("DistancetoPrimitive", [](TF2* a, Int_t arg0, Int_t arg1)->Int_t { return a->DistancetoPrimitive(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("px"), jlcxx::arg("py"));

    DEBUG_MSG("Adding wrapper for void TF2::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:88:13
    t.method("Draw", [](TF2& a)->void { a.Draw(); }, jlcxx::arg("this"));
    t.method("Draw", [](TF2& a, Option_t * arg0)->void { a.Draw(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Draw", [](TF2* a)->void { a->Draw(); }, jlcxx::arg("this"));
    t.method("Draw", [](TF2* a, Option_t * arg0)->void { a->Draw(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for TF1 * TF2::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF2::DrawCopy(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:89:13
    t.method("DrawCopy", [](TF2 const& a)->TF1 * { return a.DrawCopy(); }, jlcxx::arg("this"));
    t.method("DrawCopy", [](TF2 const& a, Option_t * arg0)->TF1 * { return a.DrawCopy(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("DrawCopy", [](TF2 const* a)->TF1 * { return a->DrawCopy(); }, jlcxx::arg("this"));
    t.method("DrawCopy", [](TF2 const* a, Option_t * arg0)->TF1 * { return a->DrawCopy(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for TObject * TF2::DrawDerivative(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF2::DrawDerivative(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:90:13
    t.method("DrawDerivative", [](TF2& a)->TObject * { return a.DrawDerivative(); }, jlcxx::arg("this"));
    t.method("DrawDerivative", [](TF2& a, Option_t * arg0)->TObject * { return a.DrawDerivative(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("DrawDerivative", [](TF2* a)->TObject * { return a->DrawDerivative(); }, jlcxx::arg("this"));
    t.method("DrawDerivative", [](TF2* a, Option_t * arg0)->TObject * { return a->DrawDerivative(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for TObject * TF2::DrawIntegral(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TObject * TF2::DrawIntegral(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:91:13
    t.method("DrawIntegral", [](TF2& a)->TObject * { return a.DrawIntegral(); }, jlcxx::arg("this"));
    t.method("DrawIntegral", [](TF2& a, Option_t * arg0)->TObject * { return a.DrawIntegral(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("DrawIntegral", [](TF2* a)->TObject * { return a->DrawIntegral(); }, jlcxx::arg("this"));
    t.method("DrawIntegral", [](TF2* a, Option_t * arg0)->TObject * { return a->DrawIntegral(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for void TF2::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:93:13
    t.method("ExecuteEvent", [](TF2& a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a.ExecuteEvent(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("event"), jlcxx::arg("px"), jlcxx::arg("py"));
    t.method("ExecuteEvent", [](TF2* a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a->ExecuteEvent(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("event"), jlcxx::arg("px"), jlcxx::arg("py"));

    DEBUG_MSG("Adding wrapper for Int_t TF2::GetContour(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF2::GetContour(Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:94:21
    t.method("GetContour", [](TF2& a)->Int_t { return a.GetContour(); }, jlcxx::arg("this"));
    t.method("GetContour", [](TF2& a, Double_t * arg0)->Int_t { return a.GetContour(arg0); }, jlcxx::arg("this"), jlcxx::arg("levels"));
    t.method("GetContour", [](TF2* a)->Int_t { return a->GetContour(); }, jlcxx::arg("this"));
    t.method("GetContour", [](TF2* a, Double_t * arg0)->Int_t { return a->GetContour(arg0); }, jlcxx::arg("this"), jlcxx::arg("levels"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetContourLevel(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetContourLevel(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:95:21
    t.method("GetContourLevel", [](TF2 const& a, Int_t arg0)->Double_t { return a.GetContourLevel(arg0); }, jlcxx::arg("this"), jlcxx::arg("level"));
    t.method("GetContourLevel", [](TF2 const* a, Int_t arg0)->Double_t { return a->GetContourLevel(arg0); }, jlcxx::arg("this"), jlcxx::arg("level"));

    DEBUG_MSG("Adding wrapper for Int_t TF2::GetNpy() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TF2::GetNpy()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:96:21
    t.method("GetNpy", [](TF2 const& a)->Int_t { return a.GetNpy(); }, jlcxx::arg("this"));
    t.method("GetNpy", [](TF2 const* a)->Int_t { return a->GetNpy(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for char * TF2::GetObjectInfo(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: char * TF2::GetObjectInfo(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:97:13
    t.method("GetObjectInfo", [](TF2 const& a, Int_t arg0, Int_t arg1)->char * { return a.GetObjectInfo(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("px"), jlcxx::arg("py"));
    t.method("GetObjectInfo", [](TF2 const* a, Int_t arg0, Int_t arg1)->char * { return a->GetObjectInfo(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("px"), jlcxx::arg("py"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetRandom(TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetRandom(TRandom *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:98:13
    t.method("GetRandom", [](TF2& a)->Double_t { return a.GetRandom(); }, jlcxx::arg("this"));
    t.method("GetRandom", [](TF2& a, TRandom * arg0)->Double_t { return a.GetRandom(arg0); }, jlcxx::arg("this"), jlcxx::arg("rng"));
    t.method("GetRandom", [](TF2& a, TRandom * arg0, Option_t * arg1)->Double_t { return a.GetRandom(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("rng"), jlcxx::arg("opt"));
    t.method("GetRandom", [](TF2* a)->Double_t { return a->GetRandom(); }, jlcxx::arg("this"));
    t.method("GetRandom", [](TF2* a, TRandom * arg0)->Double_t { return a->GetRandom(arg0); }, jlcxx::arg("this"), jlcxx::arg("rng"));
    t.method("GetRandom", [](TF2* a, TRandom * arg0, Option_t * arg1)->Double_t { return a->GetRandom(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("rng"), jlcxx::arg("opt"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetRandom(Double_t, Double_t, TRandom *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetRandom(Double_t, Double_t, TRandom *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:99:13
    t.method("GetRandom", [](TF2& a, Double_t arg0, Double_t arg1)->Double_t { return a.GetRandom(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"));
    t.method("GetRandom", [](TF2& a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a.GetRandom(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("rng"));
    t.method("GetRandom", [](TF2& a, Double_t arg0, Double_t arg1, TRandom * arg2, Option_t * arg3)->Double_t { return a.GetRandom(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("rng"), jlcxx::arg("opt"));
    t.method("GetRandom", [](TF2* a, Double_t arg0, Double_t arg1)->Double_t { return a->GetRandom(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"));
    t.method("GetRandom", [](TF2* a, Double_t arg0, Double_t arg1, TRandom * arg2)->Double_t { return a->GetRandom(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("rng"));
    t.method("GetRandom", [](TF2* a, Double_t arg0, Double_t arg1, TRandom * arg2, Option_t * arg3)->Double_t { return a->GetRandom(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("rng"), jlcxx::arg("opt"));

    DEBUG_MSG("Adding wrapper for void TF2::GetRandom2(Double_t &, Double_t &, TRandom *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::GetRandom2(Double_t &, Double_t &, TRandom *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:100:21
    t.method("GetRandom2", [](TF2& a, Double_t & arg0, Double_t & arg1)->void { a.GetRandom2(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("xrandom"), jlcxx::arg("yrandom"));
    t.method("GetRandom2", [](TF2& a, Double_t & arg0, Double_t & arg1, TRandom * arg2)->void { a.GetRandom2(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("xrandom"), jlcxx::arg("yrandom"), jlcxx::arg("rng"));
    t.method("GetRandom2", [](TF2* a, Double_t & arg0, Double_t & arg1)->void { a->GetRandom2(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("xrandom"), jlcxx::arg("yrandom"));
    t.method("GetRandom2", [](TF2* a, Double_t & arg0, Double_t & arg1, TRandom * arg2)->void { a->GetRandom2(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("xrandom"), jlcxx::arg("yrandom"), jlcxx::arg("rng"));

    DEBUG_MSG("Adding wrapper for void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:102:13
    t.method("GetRange", [](TF2 const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a.GetRange(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"));
    t.method("GetRange", [](TF2 const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3)->void { a->GetRange(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"));

    DEBUG_MSG("Adding wrapper for void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::GetRange(Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:103:13
    t.method("GetRange", [](TF2 const& a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4, Double_t & arg5)->void { a.GetRange(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("zmin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"), jlcxx::arg("zmax"));
    t.method("GetRange", [](TF2 const* a, Double_t & arg0, Double_t & arg1, Double_t & arg2, Double_t & arg3, Double_t & arg4, Double_t & arg5)->void { a->GetRange(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("zmin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"), jlcxx::arg("zmax"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetSave(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetSave(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:104:13
    t.method("GetSave", [](TF2& a, const Double_t * arg0)->Double_t { return a.GetSave(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("GetSave", [](TF2* a, const Double_t * arg0)->Double_t { return a->GetSave(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMinimumXY(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMinimumXY(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:105:21
    t.method("GetMinimumXY", [](TF2 const& a, Double_t & arg0, Double_t & arg1)->Double_t { return a.GetMinimumXY(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));
    t.method("GetMinimumXY", [](TF2 const* a, Double_t & arg0, Double_t & arg1)->Double_t { return a->GetMinimumXY(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMaximumXY(Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMaximumXY(Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:106:21
    t.method("GetMaximumXY", [](TF2 const& a, Double_t & arg0, Double_t & arg1)->Double_t { return a.GetMaximumXY(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));
    t.method("GetMaximumXY", [](TF2 const* a, Double_t & arg0, Double_t & arg1)->Double_t { return a->GetMaximumXY(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMinimum(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMinimum(Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:109:21
    t.method("GetMinimum", [](TF2 const& a, Double_t * arg0)->Double_t { return a.GetMinimum(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("GetMinimum", [](TF2 const* a, Double_t * arg0)->Double_t { return a->GetMinimum(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetMaximum(Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetMaximum(Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:110:21
    t.method("GetMaximum", [](TF2 const& a, Double_t * arg0)->Double_t { return a.GetMaximum(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("GetMaximum", [](TF2 const* a, Double_t * arg0)->Double_t { return a->GetMaximum(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetYmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetYmin()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:111:21
    t.method("GetYmin", [](TF2 const& a)->Double_t { return a.GetYmin(); }, jlcxx::arg("this"));
    t.method("GetYmin", [](TF2 const* a)->Double_t { return a->GetYmin(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::GetYmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::GetYmax()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:112:21
    t.method("GetYmax", [](TF2 const& a)->Double_t { return a.GetYmax(); }, jlcxx::arg("this"));
    t.method("GetYmax", [](TF2 const* a)->Double_t { return a->GetYmax(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Integral(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Integral(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:114:21
    t.method("Integral", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Integral(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Integral", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a.Integral(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsrel"));
    t.method("Integral", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Integral(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Integral", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a->Integral(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsrel"));

    DEBUG_MSG("Adding wrapper for Bool_t TF2::IsInside(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Bool_t TF2::IsInside(const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:115:13
    t.method("IsInside", [](TF2 const& a, const Double_t * arg0)->Bool_t { return a.IsInside(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("IsInside", [](TF2 const* a, const Double_t * arg0)->Bool_t { return a->IsInside(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));

    DEBUG_MSG("Adding wrapper for TH1 * TF2::CreateHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1 * TF2::CreateHistogram()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:116:13
    t.method("CreateHistogram", [](TF2& a)->TH1 * { return a.CreateHistogram(); }, jlcxx::arg("this"));
    t.method("CreateHistogram", [](TF2* a)->TH1 * { return a->CreateHistogram(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF2::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:117:13
    t.method("Paint", [](TF2& a)->void { a.Paint(); }, jlcxx::arg("this"));
    t.method("Paint", [](TF2& a, Option_t * arg0)->void { a.Paint(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Paint", [](TF2* a)->void { a->Paint(); }, jlcxx::arg("this"));
    t.method("Paint", [](TF2* a, Option_t * arg0)->void { a->Paint(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for void TF2::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Save(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:118:13
    t.method("Save", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.Save(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax"), jlcxx::arg("zmin"), jlcxx::arg("zmax"));
    t.method("Save", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->Save(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"), jlcxx::arg("ymin"), jlcxx::arg("ymax"), jlcxx::arg("zmin"), jlcxx::arg("zmax"));

    DEBUG_MSG("Adding wrapper for void TF2::SetNpy(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetNpy(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:120:21
    t.method("SetNpy", [](TF2& a)->void { a.SetNpy(); }, jlcxx::arg("this"), jlcxx::arg("npy"));
    t.method("SetNpy", [](TF2& a, Int_t arg0)->void { a.SetNpy(arg0); }, jlcxx::arg("this"), jlcxx::arg("npy"));
    t.method("SetNpy", [](TF2* a)->void { a->SetNpy(); }, jlcxx::arg("this"), jlcxx::arg("npy"));
    t.method("SetNpy", [](TF2* a, Int_t arg0)->void { a->SetNpy(arg0); }, jlcxx::arg("this"), jlcxx::arg("npy"));

    DEBUG_MSG("Adding wrapper for void TF2::SetContour(Int_t, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetContour(Int_t, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:121:21
    t.method("SetContour", [](TF2& a)->void { a.SetContour(); }, jlcxx::arg("this"), jlcxx::arg("nlevels"), jlcxx::arg("levels"));
    t.method("SetContour", [](TF2& a, Int_t arg0)->void { a.SetContour(arg0); }, jlcxx::arg("this"), jlcxx::arg("nlevels"));
    t.method("SetContour", [](TF2& a, Int_t arg0, const Double_t * arg1)->void { a.SetContour(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("nlevels"), jlcxx::arg("levels"));
    t.method("SetContour", [](TF2* a)->void { a->SetContour(); }, jlcxx::arg("this"), jlcxx::arg("nlevels"), jlcxx::arg("levels"));
    t.method("SetContour", [](TF2* a, Int_t arg0)->void { a->SetContour(arg0); }, jlcxx::arg("this"), jlcxx::arg("nlevels"));
    t.method("SetContour", [](TF2* a, Int_t arg0, const Double_t * arg1)->void { a->SetContour(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("nlevels"), jlcxx::arg("levels"));

    DEBUG_MSG("Adding wrapper for void TF2::SetContourLevel(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetContourLevel(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:122:21
    t.method("SetContourLevel", [](TF2& a, Int_t arg0, Double_t arg1)->void { a.SetContourLevel(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("level"), jlcxx::arg("value"));
    t.method("SetContourLevel", [](TF2* a, Int_t arg0, Double_t arg1)->void { a->SetContourLevel(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("level"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for void TF2::SetRange(Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetRange(Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:123:13
    t.method("SetRange", [](TF2& a, Double_t arg0, Double_t arg1)->void { a.SetRange(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"));
    t.method("SetRange", [](TF2* a, Double_t arg0, Double_t arg1)->void { a->SetRange(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("xmax"));

    DEBUG_MSG("Adding wrapper for void TF2::SetRange(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetRange(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:124:13
    t.method("SetRange", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a.SetRange(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"));
    t.method("SetRange", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->void { a->SetRange(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"));

    DEBUG_MSG("Adding wrapper for void TF2::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::SetRange(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:125:13
    t.method("SetRange", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a.SetRange(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("zmin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"), jlcxx::arg("zmax"));
    t.method("SetRange", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->void { a->SetRange(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("xmin"), jlcxx::arg("ymin"), jlcxx::arg("zmin"), jlcxx::arg("xmax"), jlcxx::arg("ymax"), jlcxx::arg("zmax"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Moment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Moment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:128:21
    t.method("Moment2", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.Moment2(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Moment2", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.Moment2(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("Moment2", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->Moment2(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Moment2", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->Moment2(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::CentralMoment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::CentralMoment2(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:129:21
    t.method("CentralMoment2", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a.CentralMoment2(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("CentralMoment2", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a.CentralMoment2(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("CentralMoment2", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5)->Double_t { return a->CentralMoment2(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("CentralMoment2", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Double_t { return a->CentralMoment2(arg0, arg1, arg2, arg3, arg4, arg5, arg6); }, jlcxx::arg("this"), jlcxx::arg("nx"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ny"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Mean2X(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Mean2X(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:131:21
    t.method("Mean2X", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Mean2X(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Mean2X", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a.Mean2X(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("Mean2X", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Mean2X(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Mean2X", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a->Mean2X(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Mean2Y(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Mean2Y(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:132:21
    t.method("Mean2Y", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Mean2Y(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Mean2Y", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a.Mean2Y(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("Mean2Y", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Mean2Y(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Mean2Y", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a->Mean2Y(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Variance2X(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Variance2X(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:134:21
    t.method("Variance2X", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Variance2X(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Variance2X", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a.Variance2X(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("Variance2X", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Variance2X(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Variance2X", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a->Variance2X(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Variance2Y(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Variance2Y(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:135:21
    t.method("Variance2Y", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Variance2Y(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Variance2Y", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a.Variance2Y(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("Variance2Y", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Variance2Y(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Variance2Y", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a->Variance2Y(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Double_t TF2::Covariance2XY(Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF2::Covariance2XY(Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF2.h:137:21
    t.method("Covariance2XY", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Covariance2XY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Covariance2XY", [](TF2& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a.Covariance2XY(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));
    t.method("Covariance2XY", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Covariance2XY(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"));
    t.method("Covariance2XY", [](TF2* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Double_t { return a->Covariance2XY(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("ax"), jlcxx::arg("bx"), jlcxx::arg("ay"), jlcxx::arg("by"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for Version_t TF2::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF2::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TF2!Class_Version", []()->Version_t { return TF2::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF2::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF2::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TF2 const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TF2 const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF2::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TF2& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TF2* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TF2::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF2::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TF2!DeclFileName", []() { return (std::string)TF2::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF2::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF2::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TF2!ImplFileLine", []()->int { return TF2::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF2::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF2::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TF2!ImplFileName", []() { return (std::string)TF2::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF2::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF2::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TF2!Class_Name", []() { return (std::string)TF2::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF2::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF2::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TF2!Dictionary", []()->TClass * { return TF2::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF2::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF2::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TF2!Class", []()->TClass * { return TF2::Class(); });

    DEBUG_MSG("Adding wrapper for void TF2::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF2::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TF2& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TF2* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TF2::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF2::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TF2!DeclFileLine", []()->int { return TF2::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF2>> type_;
};
std::shared_ptr<Wrapper> newJlTF2(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF2(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TF12> : std::false_type { };
  template<> struct DefaultConstructible<TF12> : std::false_type { };
template<> struct SuperType<TF12> { typedef TF1 type; };
}

// Class generating the wrapper for type TF12
// signature to use in the veto file: TF12
struct JlTF12: public Wrapper {

  JlTF12(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TF12 (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:25:7
    jlcxx::TypeWrapper<TF12>  t = jlModule.add_type<TF12>("TF12",
      jlcxx::julia_base_type<TF1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TF12>>(new jlcxx::TypeWrapper<TF12>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void TF12::TF12(const char *, TF2 *, Double_t, Option_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:34:4
    t.constructor<const char *, TF2 *, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("f2"), jlcxx::arg("xy")    );
    t.constructor<const char *, TF2 *, Double_t, Option_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("f2"), jlcxx::arg("xy"), jlcxx::arg("option")    );


    DEBUG_MSG("Adding wrapper for void TF12::TF12(const TF12 &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:35:4
    t.constructor<const TF12 &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("f12")    );

    DEBUG_MSG("Adding wrapper for void TF12::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:37:13
    t.method("Copy", [](TF12 const& a, TObject & arg0)->void { a.Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("f12"));
    t.method("Copy", [](TF12 const* a, TObject & arg0)->void { a->Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("f12"));

    DEBUG_MSG("Adding wrapper for TF1 * TF12::DrawCopy(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TF1 * TF12::DrawCopy(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:38:13
    t.method("DrawCopy", [](TF12 const& a)->TF1 * { return a.DrawCopy(); }, jlcxx::arg("this"));
    t.method("DrawCopy", [](TF12 const& a, Option_t * arg0)->TF1 * { return a.DrawCopy(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("DrawCopy", [](TF12 const* a)->TF1 * { return a->DrawCopy(); }, jlcxx::arg("this"));
    t.method("DrawCopy", [](TF12 const* a, Option_t * arg0)->TF1 * { return a->DrawCopy(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for Double_t TF12::Eval(Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF12::Eval(Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:39:13
    t.method("Eval", [](TF12 const& a, Double_t arg0)->Double_t { return a.Eval(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("Eval", [](TF12 const& a, Double_t arg0, Double_t arg1)->Double_t { return a.Eval(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));
    t.method("Eval", [](TF12 const& a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a.Eval(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("z"));
    t.method("Eval", [](TF12 const& a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a.Eval(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("z"), jlcxx::arg("t"));
    t.method("Eval", [](TF12 const* a, Double_t arg0)->Double_t { return a->Eval(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("Eval", [](TF12 const* a, Double_t arg0, Double_t arg1)->Double_t { return a->Eval(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));
    t.method("Eval", [](TF12 const* a, Double_t arg0, Double_t arg1, Double_t arg2)->Double_t { return a->Eval(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("z"));
    t.method("Eval", [](TF12 const* a, Double_t arg0, Double_t arg1, Double_t arg2, Double_t arg3)->Double_t { return a->Eval(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"), jlcxx::arg("z"), jlcxx::arg("t"));

    DEBUG_MSG("Adding wrapper for Double_t TF12::EvalPar(const Double_t *, const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF12::EvalPar(const Double_t *, const Double_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:40:13
    t.method("EvalPar", [](TF12& a, const Double_t * arg0)->Double_t { return a.EvalPar(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("EvalPar", [](TF12& a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a.EvalPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("params"));
    t.method("EvalPar", [](TF12* a, const Double_t * arg0)->Double_t { return a->EvalPar(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("EvalPar", [](TF12* a, const Double_t * arg0, const Double_t * arg1)->Double_t { return a->EvalPar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for Double_t TF12::GetXY() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TF12::GetXY()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:47:21
    t.method("GetXY", [](TF12 const& a)->Double_t { return a.GetXY(); }, jlcxx::arg("this"));
    t.method("GetXY", [](TF12 const* a)->Double_t { return a->GetXY(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF12::SetXY(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::SetXY(Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TF12.h:49:21
    t.method("SetXY", [](TF12& a, Double_t arg0)->void { a.SetXY(arg0); }, jlcxx::arg("this"), jlcxx::arg("xy"));
    t.method("SetXY", [](TF12* a, Double_t arg0)->void { a->SetXY(arg0); }, jlcxx::arg("this"), jlcxx::arg("xy"));

    DEBUG_MSG("Adding wrapper for Version_t TF12::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TF12::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TF12!Class_Version", []()->Version_t { return TF12::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TF12::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF12::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TF12 const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TF12 const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TF12::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TF12& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TF12* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TF12::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF12::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TF12!DeclFileName", []() { return (std::string)TF12::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TF12::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF12::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TF12!ImplFileLine", []()->int { return TF12::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TF12::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF12::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TF12!ImplFileName", []() { return (std::string)TF12::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TF12::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TF12::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TF12!Class_Name", []() { return (std::string)TF12::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TF12::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF12::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TF12!Dictionary", []()->TClass * { return TF12::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TF12::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TF12::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TF12!Class", []()->TClass * { return TF12::Class(); });

    DEBUG_MSG("Adding wrapper for void TF12::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TF12::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TF12& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TF12* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TF12::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TF12::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TF12!DeclFileLine", []()->int { return TF12::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TF12>> type_;
};
std::shared_ptr<Wrapper> newJlTF12(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTF12(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TSpline> : std::false_type { };
  template<> struct DefaultConstructible<TSpline> : std::false_type { };
template<> struct SuperType<TSpline> { typedef TNamed type; };
}

// Class generating the wrapper for type TSpline
// signature to use in the veto file: TSpline
struct JlTSpline: public Wrapper {

  JlTSpline(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TSpline (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:29:7
    jlcxx::TypeWrapper<TSpline>  t = jlModule.add_type<TSpline>("TSpline",
      jlcxx::julia_base_type<TNamed>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TSpline>>(new jlcxx::TypeWrapper<TSpline>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TSpline::GetKnot(Int_t, Double_t &, Double_t &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::GetKnot(Int_t, Double_t &, Double_t &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:54:21
    t.method("GetKnot", [](TSpline const& a, Int_t arg0, Double_t & arg1, Double_t & arg2)->void { a.GetKnot(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("x"), jlcxx::arg("y"));
    t.method("GetKnot", [](TSpline const* a, Int_t arg0, Double_t & arg1, Double_t & arg2)->void { a->GetKnot(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("i"), jlcxx::arg("x"), jlcxx::arg("y"));

    DEBUG_MSG("Adding wrapper for Int_t TSpline::DistancetoPrimitive(Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline::DistancetoPrimitive(Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:55:13
    t.method("DistancetoPrimitive", [](TSpline& a, Int_t arg0, Int_t arg1)->Int_t { return a.DistancetoPrimitive(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("px"), jlcxx::arg("py"));
    t.method("DistancetoPrimitive", [](TSpline* a, Int_t arg0, Int_t arg1)->Int_t { return a->DistancetoPrimitive(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("px"), jlcxx::arg("py"));

    DEBUG_MSG("Adding wrapper for void TSpline::Draw(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::Draw(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:56:13
    t.method("Draw", [](TSpline& a)->void { a.Draw(); }, jlcxx::arg("this"));
    t.method("Draw", [](TSpline& a, Option_t * arg0)->void { a.Draw(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Draw", [](TSpline* a)->void { a->Draw(); }, jlcxx::arg("this"));
    t.method("Draw", [](TSpline* a, Option_t * arg0)->void { a->Draw(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for void TSpline::ExecuteEvent(Int_t, Int_t, Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::ExecuteEvent(Int_t, Int_t, Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:57:13
    t.method("ExecuteEvent", [](TSpline& a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a.ExecuteEvent(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("event"), jlcxx::arg("px"), jlcxx::arg("py"));
    t.method("ExecuteEvent", [](TSpline* a, Int_t arg0, Int_t arg1, Int_t arg2)->void { a->ExecuteEvent(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("event"), jlcxx::arg("px"), jlcxx::arg("py"));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::GetDelta() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::GetDelta()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:58:21
    t.method("GetDelta", [](TSpline const& a)->Double_t { return a.GetDelta(); }, jlcxx::arg("this"));
    t.method("GetDelta", [](TSpline const* a)->Double_t { return a->GetDelta(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for TH1F * TSpline::GetHistogram() (" __HERE__ ")");
    // signature to use in the veto list: TH1F * TSpline::GetHistogram()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:59:21
    t.method("GetHistogram", [](TSpline const& a)->TH1F * { return a.GetHistogram(); }, jlcxx::arg("this"));
    t.method("GetHistogram", [](TSpline const* a)->TH1F * { return a->GetHistogram(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Int_t TSpline::GetNp() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline::GetNp()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:60:21
    t.method("GetNp", [](TSpline const& a)->Int_t { return a.GetNp(); }, jlcxx::arg("this"));
    t.method("GetNp", [](TSpline const* a)->Int_t { return a->GetNp(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Int_t TSpline::GetNpx() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TSpline::GetNpx()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:61:21
    t.method("GetNpx", [](TSpline const& a)->Int_t { return a.GetNpx(); }, jlcxx::arg("this"));
    t.method("GetNpx", [](TSpline const* a)->Int_t { return a->GetNpx(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::GetXmin() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::GetXmin()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:62:21
    t.method("GetXmin", [](TSpline const& a)->Double_t { return a.GetXmin(); }, jlcxx::arg("this"));
    t.method("GetXmin", [](TSpline const* a)->Double_t { return a->GetXmin(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::GetXmax() (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::GetXmax()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:63:21
    t.method("GetXmax", [](TSpline const& a)->Double_t { return a.GetXmax(); }, jlcxx::arg("this"));
    t.method("GetXmax", [](TSpline const* a)->Double_t { return a->GetXmax(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TSpline::Paint(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::Paint(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:64:13
    t.method("Paint", [](TSpline& a)->void { a.Paint(); }, jlcxx::arg("this"));
    t.method("Paint", [](TSpline& a, Option_t * arg0)->void { a.Paint(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Paint", [](TSpline* a)->void { a->Paint(); }, jlcxx::arg("this"));
    t.method("Paint", [](TSpline* a, Option_t * arg0)->void { a->Paint(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for Double_t TSpline::Eval(Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TSpline::Eval(Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:65:21
    t.method("Eval", [](TSpline const& a, Double_t arg0)->Double_t { return a.Eval(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("Eval", [](TSpline const* a, Double_t arg0)->Double_t { return a->Eval(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));

    DEBUG_MSG("Adding wrapper for void TSpline::SaveAs(const char *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::SaveAs(const char *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:66:13
    t.method("SaveAs", [](TSpline const& a)->void { a.SaveAs(); }, jlcxx::arg("this"));
    t.method("SaveAs", [](TSpline const& a, const char * arg0)->void { a.SaveAs(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("SaveAs", [](TSpline const& a, const char * arg0, Option_t * arg1)->void { a.SaveAs(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("arg1"));
    t.method("SaveAs", [](TSpline const* a)->void { a->SaveAs(); }, jlcxx::arg("this"));
    t.method("SaveAs", [](TSpline const* a, const char * arg0)->void { a->SaveAs(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("SaveAs", [](TSpline const* a, const char * arg0, Option_t * arg1)->void { a->SaveAs(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("arg1"));

    DEBUG_MSG("Adding wrapper for void TSpline::SetNpx(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::SetNpx(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TSpline.h:67:21
    t.method("SetNpx", [](TSpline& a, Int_t arg0)->void { a.SetNpx(arg0); }, jlcxx::arg("this"), jlcxx::arg("n"));
    t.method("SetNpx", [](TSpline* a, Int_t arg0)->void { a->SetNpx(arg0); }, jlcxx::arg("this"), jlcxx::arg("n"));

    DEBUG_MSG("Adding wrapper for Version_t TSpline::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TSpline::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TSpline!Class_Version", []()->Version_t { return TSpline::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TSpline::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TSpline const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TSpline const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TSpline::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TSpline& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TSpline* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TSpline::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TSpline!DeclFileName", []() { return (std::string)TSpline::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TSpline::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TSpline!ImplFileLine", []()->int { return TSpline::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TSpline::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TSpline!ImplFileName", []() { return (std::string)TSpline::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TSpline::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TSpline::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TSpline!Class_Name", []() { return (std::string)TSpline::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TSpline::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TSpline!Dictionary", []()->TClass * { return TSpline::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TSpline::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TSpline::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TSpline!Class", []()->TClass * { return TSpline::Class(); });

    DEBUG_MSG("Adding wrapper for void TSpline::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TSpline::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TSpline& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TSpline* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TSpline::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TSpline::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TSpline!DeclFileLine", []()->int { return TSpline::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TSpline>> type_;
};
std::shared_ptr<Wrapper> newJlTSpline(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTSpline(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TH1F> : std::false_type { };
  template<> struct DefaultConstructible<TH1F> : std::false_type { };
template<> struct SuperType<TH1F> { typedef TH1 type; };
}

// Class generating the wrapper for type TH1F
// signature to use in the veto file: TH1F
struct JlTH1F: public Wrapper {

  JlTH1F(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TH1F (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:621:7
    jlcxx::TypeWrapper<TH1F>  t = jlModule.add_type<TH1F>("TH1F",
      jlcxx::julia_base_type<TH1>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TH1F>>(new jlcxx::TypeWrapper<TH1F>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const char *, const char *, Int_t, Double_t, Double_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:625:4
    t.constructor<const char *, const char *, Int_t, Double_t, Double_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("nbinsx"), jlcxx::arg("xlow"), jlcxx::arg("xup")    );


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const char *, const char *, Int_t, const Float_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:626:4
    t.constructor<const char *, const char *, Int_t, const Float_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("nbinsx"), jlcxx::arg("xbins")    );


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const char *, const char *, Int_t, const Double_t *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:627:4
    t.constructor<const char *, const char *, Int_t, const Double_t *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("title"), jlcxx::arg("nbinsx"), jlcxx::arg("xbins")    );


    DEBUG_MSG("Adding wrapper for void TH1F::TH1F(const TH1F &) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:629:4
    t.constructor<const TH1F &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("h1f")    );

    DEBUG_MSG("Adding wrapper for TH1F & TH1F::operator=(const TH1F &) (" __HERE__ ")");
    // signature to use in the veto list: TH1F & TH1F::operator=(const TH1F &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:630:10
    t.method("assign", [](TH1F& a, const TH1F & arg0)->TH1F & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("h1"));
    t.method("assign", [](TH1F* a, const TH1F & arg0)->TH1F & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("h1"));

    DEBUG_MSG("Adding wrapper for void TH1F::AddBinContent(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::AddBinContent(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:635:13
    t.method("AddBinContent", [](TH1F& a, Int_t arg0)->void { a.AddBinContent(arg0); }, jlcxx::arg("this"), jlcxx::arg("bin"));
    t.method("AddBinContent", [](TH1F* a, Int_t arg0)->void { a->AddBinContent(arg0); }, jlcxx::arg("this"), jlcxx::arg("bin"));

    DEBUG_MSG("Adding wrapper for void TH1F::AddBinContent(Int_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::AddBinContent(Int_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:639:13
    t.method("AddBinContent", [](TH1F& a, Int_t arg0, Double_t arg1)->void { a.AddBinContent(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("bin"), jlcxx::arg("w"));
    t.method("AddBinContent", [](TH1F* a, Int_t arg0, Double_t arg1)->void { a->AddBinContent(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("bin"), jlcxx::arg("w"));

    DEBUG_MSG("Adding wrapper for void TH1F::Copy(TObject &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::Copy(TObject &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:641:13
    t.method("Copy", [](TH1F const& a, TObject & arg0)->void { a.Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("hnew"));
    t.method("Copy", [](TH1F const* a, TObject & arg0)->void { a->Copy(arg0); }, jlcxx::arg("this"), jlcxx::arg("hnew"));

    DEBUG_MSG("Adding wrapper for void TH1F::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::Reset(Option_t *)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:642:13
    t.method("Reset", [](TH1F& a)->void { a.Reset(); }, jlcxx::arg("this"));
    t.method("Reset", [](TH1F& a, Option_t * arg0)->void { a.Reset(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));
    t.method("Reset", [](TH1F* a)->void { a->Reset(); }, jlcxx::arg("this"));
    t.method("Reset", [](TH1F* a, Option_t * arg0)->void { a->Reset(arg0); }, jlcxx::arg("this"), jlcxx::arg("option"));

    DEBUG_MSG("Adding wrapper for void TH1F::SetBinsLength(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::SetBinsLength(Int_t)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/TH1.h:643:13
    t.method("SetBinsLength", [](TH1F& a)->void { a.SetBinsLength(); }, jlcxx::arg("this"));
    t.method("SetBinsLength", [](TH1F& a, Int_t arg0)->void { a.SetBinsLength(arg0); }, jlcxx::arg("this"), jlcxx::arg("n"));
    t.method("SetBinsLength", [](TH1F* a)->void { a->SetBinsLength(); }, jlcxx::arg("this"));
    t.method("SetBinsLength", [](TH1F* a, Int_t arg0)->void { a->SetBinsLength(arg0); }, jlcxx::arg("this"), jlcxx::arg("n"));

    DEBUG_MSG("Adding wrapper for Version_t TH1F::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TH1F::Class_Version()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:293:68
    module_.method("TH1F!Class_Version", []()->Version_t { return TH1F::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1F::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1F::IsA()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:294:76
    t.method("IsA", [](TH1F const& a)->TClass * { return a.IsA(); }, jlcxx::arg("this"));
    t.method("IsA", [](TH1F const* a)->TClass * { return a->IsA(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void TH1F::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:300:9
    t.method("StreamerNVirtual", [](TH1F& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));
    t.method("StreamerNVirtual", [](TH1F* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); }, jlcxx::arg("this"), jlcxx::arg("ClassDef_StreamerNVirtual_b"));

    DEBUG_MSG("Adding wrapper for const char * TH1F::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1F::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:301:88
    module_.method("TH1F!DeclFileName", []() { return (std::string)TH1F::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TH1F::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1F::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:309:55
    module_.method("TH1F!ImplFileLine", []()->int { return TH1F::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TH1F::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1F::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:310:63
    module_.method("TH1F!ImplFileName", []() { return (std::string)TH1F::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TH1F::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TH1F::Class_Name()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:311:57
    module_.method("TH1F!Class_Name", []() { return (std::string)TH1F::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1F::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1F::Dictionary()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:312:47
    module_.method("TH1F!Dictionary", []()->TClass * { return TH1F::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TH1F::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TH1F::Class()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:313:63
    module_.method("TH1F!Class", []()->TClass * { return TH1F::Class(); });

    DEBUG_MSG("Adding wrapper for void TH1F::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TH1F::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:314:25
    t.method("Streamer", [](TH1F& a, TBuffer & arg0)->void { a.Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("Streamer", [](TH1F* a, TBuffer & arg0)->void { a->Streamer(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for int TH1F::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TH1F::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/a4f6424ccb8f5188e250f447149860af999a56a0/include/Rtypes.h:343:43
    module_.method("TH1F!DeclFileLine", []()->int { return TH1F::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TH1F>> type_;
};
std::shared_ptr<Wrapper> newJlTH1F(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTH1F(module));
}
