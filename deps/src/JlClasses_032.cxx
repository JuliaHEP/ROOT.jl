// this file was auto-generated by wrapit v1.4.0-3-g14eb9a6
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<THistRange> : std::false_type { };
  template<> struct DefaultConstructible<THistRange> : std::false_type { };
}

// Class generating the wrapper for type THistRange
// signature to use in the veto file: THistRange
struct JlTHistRange: public Wrapper {

  JlTHistRange(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THistRange (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THistRange.h:139:7
    jlcxx::TypeWrapper<THistRange>  t = jlModule.add_type<THistRange>("THistRange");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THistRange>>(new jlcxx::TypeWrapper<THistRange>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for THistRange::iterator THistRange::begin() (" __HERE__ ")");
    // signature to use in the veto list: THistRange::iterator THistRange::begin()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THistRange.h:145:13
    t.method("begin", [](THistRange& a)->THistRange::iterator { return a.begin(); });
    t.method("begin", [](THistRange* a)->THistRange::iterator { return a->begin(); });

    DEBUG_MSG("Adding wrapper for THistRange::iterator THistRange::end() (" __HERE__ ")");
    // signature to use in the veto list: THistRange::iterator THistRange::end()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THistRange.h:147:13
    t.method("end", [](THistRange& a)->THistRange::iterator { return a.end(); });
    t.method("end", [](THistRange* a)->THistRange::iterator { return a->end(); });


    DEBUG_MSG("Adding wrapper for void THistRange::THistRange(const TH1 *, TBinIterator::ERangeType) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THistRange.h:149:4
    t.constructor<const TH1 *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const TH1 *, TBinIterator::ERangeType>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THistRange>> type_;
};
std::shared_ptr<Wrapper> newJlTHistRange(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHistRange(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THLimitsFinder> : std::false_type { };
  template<> struct DefaultConstructible<THLimitsFinder> : std::false_type { };
template<> struct SuperType<THLimitsFinder> { typedef TObject type; };
}

// Class generating the wrapper for type THLimitsFinder
// signature to use in the veto file: THLimitsFinder
struct JlTHLimitsFinder: public Wrapper {

  JlTHLimitsFinder(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THLimitsFinder (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:28:7
    jlcxx::TypeWrapper<THLimitsFinder>  t = jlModule.add_type<THLimitsFinder>("THLimitsFinder",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THLimitsFinder>>(new jlcxx::TypeWrapper<THLimitsFinder>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:36:23
    t.method("FindGoodLimits", [](THLimitsFinder& a, TH1 * arg0, Double_t arg1, Double_t arg2)->Int_t { return a.FindGoodLimits(arg0, arg1, arg2); });
    t.method("FindGoodLimits", [](THLimitsFinder* a, TH1 * arg0, Double_t arg1, Double_t arg2)->Int_t { return a->FindGoodLimits(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:37:23
    t.method("FindGoodLimits", [](THLimitsFinder& a, TH1 * arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Int_t { return a.FindGoodLimits(arg0, arg1, arg2, arg3, arg4); });
    t.method("FindGoodLimits", [](THLimitsFinder* a, TH1 * arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4)->Int_t { return a->FindGoodLimits(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THLimitsFinder::FindGoodLimits(TH1 *, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:38:23
    t.method("FindGoodLimits", [](THLimitsFinder& a, TH1 * arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Int_t { return a.FindGoodLimits(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("FindGoodLimits", [](THLimitsFinder* a, TH1 * arg0, Double_t arg1, Double_t arg2, Double_t arg3, Double_t arg4, Double_t arg5, Double_t arg6)->Int_t { return a->FindGoodLimits(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::Optimize(Double_t, Double_t, Int_t, Double_t &, Double_t &, Int_t &, Double_t &, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::Optimize(Double_t, Double_t, Int_t, Double_t &, Double_t &, Int_t &, Double_t &, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:40:23
    module_.method("THLimitsFinder!Optimize", [](Double_t arg0, Double_t arg1, Int_t arg2, Double_t & arg3, Double_t & arg4, Int_t & arg5, Double_t & arg6)->void { THLimitsFinder::Optimize(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    module_.method("THLimitsFinder!Optimize", [](Double_t arg0, Double_t arg1, Int_t arg2, Double_t & arg3, Double_t & arg4, Int_t & arg5, Double_t & arg6, Option_t * arg7)->void { THLimitsFinder::Optimize(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::OptimizeLimits(Int_t, Int_t &, Double_t &, Double_t &, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::OptimizeLimits(Int_t, Int_t &, Double_t &, Double_t &, Bool_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:42:23
    module_.method("THLimitsFinder!OptimizeLimits", [](Int_t arg0, Int_t & arg1, Double_t & arg2, Double_t & arg3, Bool_t arg4)->void { THLimitsFinder::OptimizeLimits(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for THLimitsFinder * THLimitsFinder::GetLimitsFinder() (" __HERE__ ")");
    // signature to use in the veto list: THLimitsFinder * THLimitsFinder::GetLimitsFinder()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:43:27
    module_.method("THLimitsFinder!GetLimitsFinder", []()->THLimitsFinder * { return THLimitsFinder::GetLimitsFinder(); });

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::SetLimitsFinder(THLimitsFinder *) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::SetLimitsFinder(THLimitsFinder *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:44:23
    module_.method("THLimitsFinder!SetLimitsFinder", [](THLimitsFinder * arg0)->void { THLimitsFinder::SetLimitsFinder(arg0); });

    DEBUG_MSG("Adding wrapper for Version_t THLimitsFinder::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THLimitsFinder::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Class_Version", []()->Version_t { return THLimitsFinder::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * THLimitsFinder::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THLimitsFinder::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    t.method("IsA", [](THLimitsFinder const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](THLimitsFinder const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    t.method("StreamerNVirtual", [](THLimitsFinder& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](THLimitsFinder* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * THLimitsFinder::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THLimitsFinder::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!DeclFileName", []() { return (std::string)THLimitsFinder::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THLimitsFinder::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THLimitsFinder::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!ImplFileLine", []()->int { return THLimitsFinder::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * THLimitsFinder::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THLimitsFinder::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!ImplFileName", []() { return (std::string)THLimitsFinder::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THLimitsFinder::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THLimitsFinder::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Class_Name", []() { return (std::string)THLimitsFinder::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THLimitsFinder::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THLimitsFinder::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Dictionary", []()->TClass * { return THLimitsFinder::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * THLimitsFinder::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THLimitsFinder::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!Class", []()->TClass * { return THLimitsFinder::Class(); });

    DEBUG_MSG("Adding wrapper for void THLimitsFinder::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THLimitsFinder::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    t.method("Streamer", [](THLimitsFinder& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](THLimitsFinder* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int THLimitsFinder::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THLimitsFinder::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THLimitsFinder.h:46:4
    module_.method("THLimitsFinder!DeclFileLine", []()->int { return THLimitsFinder::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THLimitsFinder>> type_;
};
std::shared_ptr<Wrapper> newJlTHLimitsFinder(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHLimitsFinder(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THnIter> : std::false_type { };
  template<> struct DefaultConstructible<THnIter> : std::false_type { };
template<> struct SuperType<THnIter> { typedef TObject type; };
}

// Class generating the wrapper for type THnIter
// signature to use in the veto file: THnIter
struct JlTHnIter: public Wrapper {

  JlTHnIter(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnIter (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:330:7
    jlcxx::TypeWrapper<THnIter>  t = jlModule.add_type<THnIter>("THnIter",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnIter>>(new jlcxx::TypeWrapper<THnIter>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void THnIter::THnIter(const THnBase *, Bool_t) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:332:4
    t.constructor<const THnBase *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const THnBase *, Bool_t>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for Long64_t THnIter::Next(Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THnIter::Next(Int_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:340:13
    t.method("Next", [](THnIter& a)->Long64_t { return a.Next(); });
    t.method("Next", [](THnIter& a, Int_t * arg0)->Long64_t { return a.Next(arg0); });
    t.method("Next", [](THnIter* a)->Long64_t { return a->Next(); });
    t.method("Next", [](THnIter* a, Int_t * arg0)->Long64_t { return a->Next(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t THnIter::GetCoord(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Int_t THnIter::GetCoord(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:344:10
    t.method("GetCoord", [](THnIter const& a, Int_t arg0)->Int_t { return a.GetCoord(arg0); });
    t.method("GetCoord", [](THnIter const* a, Int_t arg0)->Int_t { return a->GetCoord(arg0); });

    DEBUG_MSG("Adding wrapper for Bool_t THnIter::HaveSkippedBin() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t THnIter::HaveSkippedBin()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:345:11
    t.method("HaveSkippedBin", [](THnIter const& a)->Bool_t { return a.HaveSkippedBin(); });
    t.method("HaveSkippedBin", [](THnIter const* a)->Bool_t { return a->HaveSkippedBin(); });

    DEBUG_MSG("Adding wrapper for Bool_t THnIter::RespectsAxisRange() (" __HERE__ ")");
    // signature to use in the veto list: Bool_t THnIter::RespectsAxisRange()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:346:11
    t.method("RespectsAxisRange", [](THnIter const& a)->Bool_t { return a.RespectsAxisRange(); });
    t.method("RespectsAxisRange", [](THnIter const* a)->Bool_t { return a->RespectsAxisRange(); });

    DEBUG_MSG("Adding wrapper for Version_t THnIter::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnIter::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!Class_Version", []()->Version_t { return THnIter::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * THnIter::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnIter::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    t.method("IsA", [](THnIter const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](THnIter const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void THnIter::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnIter::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    t.method("StreamerNVirtual", [](THnIter& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](THnIter* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * THnIter::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnIter::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!DeclFileName", []() { return (std::string)THnIter::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnIter::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnIter::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!ImplFileLine", []()->int { return THnIter::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * THnIter::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnIter::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!ImplFileName", []() { return (std::string)THnIter::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnIter::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnIter::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!Class_Name", []() { return (std::string)THnIter::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnIter::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnIter::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!Dictionary", []()->TClass * { return THnIter::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * THnIter::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnIter::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!Class", []()->TClass * { return THnIter::Class(); });

    DEBUG_MSG("Adding wrapper for void THnIter::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnIter::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    t.method("Streamer", [](THnIter& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](THnIter* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int THnIter::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnIter::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnBase.h:350:4
    module_.method("THnIter!DeclFileLine", []()->int { return THnIter::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnIter>> type_;
};
std::shared_ptr<Wrapper> newJlTHnIter(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnIter(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THnChain> : std::false_type { };
  template<> struct DefaultConstructible<THnChain> : std::false_type { };
template<> struct SuperType<THnChain> { typedef TObject type; };
}

// Class generating the wrapper for type THnChain
// signature to use in the veto file: THnChain
struct JlTHnChain: public Wrapper {

  JlTHnChain(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THnChain (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:49:7
    jlcxx::TypeWrapper<THnChain>  t = jlModule.add_type<THnChain>("THnChain",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THnChain>>(new jlcxx::TypeWrapper<THnChain>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void THnChain::THnChain(const char *) (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:55:13
    t.constructor<const char *>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void THnChain::AddFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void THnChain::AddFile(const char *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:57:9
    t.method("AddFile", [](THnChain& a, const char * arg0)->void { a.AddFile(arg0); });
    t.method("AddFile", [](THnChain* a, const char * arg0)->void { a->AddFile(arg0); });

    DEBUG_MSG("Adding wrapper for TAxis * THnChain::GetAxis(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: TAxis * THnChain::GetAxis(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:59:11
    t.method("GetAxis", [](THnChain const& a, Int_t arg0)->TAxis * { return a.GetAxis(arg0); });
    t.method("GetAxis", [](THnChain const* a, Int_t arg0)->TAxis * { return a->GetAxis(arg0); });

    DEBUG_MSG("Adding wrapper for TH1 * THnChain::Projection(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1 * THnChain::Projection(Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:61:9
    t.method("Projection", [](THnChain const& a, Int_t arg0)->TH1 * { return a.Projection(arg0); });
    t.method("Projection", [](THnChain const& a, Int_t arg0, Option_t * arg1)->TH1 * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnChain const* a, Int_t arg0)->TH1 * { return a->Projection(arg0); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Option_t * arg1)->TH1 * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH2 * THnChain::Projection(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2 * THnChain::Projection(Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:63:9
    t.method("Projection", [](THnChain const& a, Int_t arg0, Int_t arg1)->TH2 * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THnChain const& a, Int_t arg0, Int_t arg1, Option_t * arg2)->TH2 * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Int_t arg1)->TH2 * { return a->Projection(arg0, arg1); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Int_t arg1, Option_t * arg2)->TH2 * { return a->Projection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for TH3 * THnChain::Projection(Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH3 * THnChain::Projection(Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:65:9
    t.method("Projection", [](THnChain const& a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3 * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THnChain const& a, Int_t arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TH3 * { return a.Projection(arg0, arg1, arg2, arg3); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3 * { return a->Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THnChain const* a, Int_t arg0, Int_t arg1, Int_t arg2, Option_t * arg3)->TH3 * { return a->Projection(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for THnBase * THnChain::ProjectionND(Int_t, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: THnBase * THnChain::ProjectionND(Int_t, const Int_t *, Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:67:13
    t.method("ProjectionND", [](THnChain const& a, Int_t arg0, const Int_t * arg1)->THnBase * { return a.ProjectionND(arg0, arg1); });
    t.method("ProjectionND", [](THnChain const& a, Int_t arg0, const Int_t * arg1, Option_t * arg2)->THnBase * { return a.ProjectionND(arg0, arg1, arg2); });
    t.method("ProjectionND", [](THnChain const* a, Int_t arg0, const Int_t * arg1)->THnBase * { return a->ProjectionND(arg0, arg1); });
    t.method("ProjectionND", [](THnChain const* a, Int_t arg0, const Int_t * arg1, Option_t * arg2)->THnBase * { return a->ProjectionND(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for Version_t THnChain::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THnChain::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!Class_Version", []()->Version_t { return THnChain::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * THnChain::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnChain::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    t.method("IsA", [](THnChain const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](THnChain const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void THnChain::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnChain::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    t.method("StreamerNVirtual", [](THnChain& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](THnChain* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * THnChain::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnChain::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!DeclFileName", []() { return (std::string)THnChain::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THnChain::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnChain::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!ImplFileLine", []()->int { return THnChain::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * THnChain::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnChain::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!ImplFileName", []() { return (std::string)THnChain::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THnChain::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THnChain::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!Class_Name", []() { return (std::string)THnChain::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THnChain::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnChain::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!Dictionary", []()->TClass * { return THnChain::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * THnChain::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THnChain::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!Class", []()->TClass * { return THnChain::Class(); });

    DEBUG_MSG("Adding wrapper for void THnChain::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THnChain::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    t.method("Streamer", [](THnChain& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](THnChain* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int THnChain::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THnChain::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/THnChain.h:83:4
    module_.method("THnChain!DeclFileLine", []()->int { return THnChain::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THnChain>> type_;
};
std::shared_ptr<Wrapper> newJlTHnChain(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHnChain(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<TNDArray> : std::false_type { };
  template<> struct DefaultConstructible<TNDArray> : std::false_type { };
template<> struct SuperType<TNDArray> { typedef TObject type; };
}

// Class generating the wrapper for type TNDArray
// signature to use in the veto file: TNDArray
struct JlTNDArray: public Wrapper {

  JlTNDArray(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TNDArray (" __HERE__ ")");
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:46:7
    jlcxx::TypeWrapper<TNDArray>  t = jlModule.add_type<TNDArray>("TNDArray",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TNDArray>>(new jlcxx::TypeWrapper<TNDArray>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TNDArray::Init(Int_t, const Int_t *, bool) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::Init(Int_t, const Int_t *, bool)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:55:17
    t.method("Init", [](TNDArray& a, Int_t arg0, const Int_t * arg1)->void { a.Init(arg0, arg1); });
    t.method("Init", [](TNDArray& a, Int_t arg0, const Int_t * arg1, bool arg2)->void { a.Init(arg0, arg1, arg2); });
    t.method("Init", [](TNDArray* a, Int_t arg0, const Int_t * arg1)->void { a->Init(arg0, arg1); });
    t.method("Init", [](TNDArray* a, Int_t arg0, const Int_t * arg1, bool arg2)->void { a->Init(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void TNDArray::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::Reset(Option_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:66:17
    t.method("Reset", [](TNDArray& a)->void { a.Reset(); });
    t.method("Reset", [](TNDArray& a, Option_t * arg0)->void { a.Reset(arg0); });
    t.method("Reset", [](TNDArray* a)->void { a->Reset(); });
    t.method("Reset", [](TNDArray* a, Option_t * arg0)->void { a->Reset(arg0); });

    DEBUG_MSG("Adding wrapper for Int_t TNDArray::GetNdimensions() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TNDArray::GetNdimensions()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:68:10
    t.method("GetNdimensions", [](TNDArray const& a)->Int_t { return a.GetNdimensions(); });
    t.method("GetNdimensions", [](TNDArray const* a)->Int_t { return a->GetNdimensions(); });

    DEBUG_MSG("Adding wrapper for Long64_t TNDArray::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TNDArray::GetNbins()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:69:13
    t.method("GetNbins", [](TNDArray const& a)->Long64_t { return a.GetNbins(); });
    t.method("GetNbins", [](TNDArray const* a)->Long64_t { return a->GetNbins(); });

    DEBUG_MSG("Adding wrapper for Long64_t TNDArray::GetCellSize(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TNDArray::GetCellSize(Int_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:70:13
    t.method("GetCellSize", [](TNDArray const& a, Int_t arg0)->Long64_t { return a.GetCellSize(arg0); });
    t.method("GetCellSize", [](TNDArray const* a, Int_t arg0)->Long64_t { return a->GetCellSize(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t TNDArray::GetBin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TNDArray::GetBin(const Int_t *)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:72:13
    t.method("GetBin", [](TNDArray const& a, const Int_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](TNDArray const* a, const Int_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t TNDArray::AtAsDouble(ULong64_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TNDArray::AtAsDouble(ULong64_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:81:21
    t.method("AtAsDouble", [](TNDArray const& a, ULong64_t arg0)->Double_t { return a.AtAsDouble(arg0); });
    t.method("AtAsDouble", [](TNDArray const* a, ULong64_t arg0)->Double_t { return a->AtAsDouble(arg0); });

    DEBUG_MSG("Adding wrapper for void TNDArray::SetAsDouble(ULong64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::SetAsDouble(ULong64_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:82:17
    t.method("SetAsDouble", [](TNDArray& a, ULong64_t arg0, Double_t arg1)->void { a.SetAsDouble(arg0, arg1); });
    t.method("SetAsDouble", [](TNDArray* a, ULong64_t arg0, Double_t arg1)->void { a->SetAsDouble(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TNDArray::AddAt(ULong64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::AddAt(ULong64_t, Double_t)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:83:17
    t.method("AddAt", [](TNDArray& a, ULong64_t arg0, Double_t arg1)->void { a.AddAt(arg0, arg1); });
    t.method("AddAt", [](TNDArray* a, ULong64_t arg0, Double_t arg1)->void { a->AddAt(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for Version_t TNDArray::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TNDArray::Class_Version()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!Class_Version", []()->Version_t { return TNDArray::Class_Version(); });

    DEBUG_MSG("Adding wrapper for TClass * TNDArray::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNDArray::IsA()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    t.method("IsA", [](TNDArray const& a)->TClass * { return a.IsA(); });
    t.method("IsA", [](TNDArray const* a)->TClass * { return a->IsA(); });

    DEBUG_MSG("Adding wrapper for void TNDArray::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    t.method("StreamerNVirtual", [](TNDArray& a, TBuffer & arg0)->void { a.StreamerNVirtual(arg0); });
    t.method("StreamerNVirtual", [](TNDArray* a, TBuffer & arg0)->void { a->StreamerNVirtual(arg0); });

    DEBUG_MSG("Adding wrapper for const char * TNDArray::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNDArray::DeclFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!DeclFileName", []() { return (std::string)TNDArray::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TNDArray::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TNDArray::ImplFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!ImplFileLine", []()->int { return TNDArray::ImplFileLine(); });

    DEBUG_MSG("Adding wrapper for const char * TNDArray::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNDArray::ImplFileName()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!ImplFileName", []() { return (std::string)TNDArray::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TNDArray::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNDArray::Class_Name()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!Class_Name", []() { return (std::string)TNDArray::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TNDArray::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNDArray::Dictionary()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!Dictionary", []()->TClass * { return TNDArray::Dictionary(); });

    DEBUG_MSG("Adding wrapper for TClass * TNDArray::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNDArray::Class()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!Class", []()->TClass * { return TNDArray::Class(); });

    DEBUG_MSG("Adding wrapper for void TNDArray::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    t.method("Streamer", [](TNDArray& a, TBuffer & arg0)->void { a.Streamer(arg0); });
    t.method("Streamer", [](TNDArray* a, TBuffer & arg0)->void { a->Streamer(arg0); });

    DEBUG_MSG("Adding wrapper for int TNDArray::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TNDArray::DeclFileLine()
    // defined in /home/pgras/.julia/artifacts/0d9da00603833dced24b998321d9c01c63ed469f/include/TNDArray.h:87:4
    module_.method("TNDArray!DeclFileLine", []()->int { return TNDArray::DeclFileLine(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TNDArray>> type_;
};
std::shared_ptr<Wrapper> newJlTNDArray(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTNDArray(module));
}
