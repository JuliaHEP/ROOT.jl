// this file was auto-generated by wrapit v1.4.0
#include "Wrapper.h"

#include "jlROOT.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TNDArray> : std::false_type { };
  template<> struct DefaultConstructible<TNDArray> : std::false_type { };
template<> struct SuperType<TNDArray> { typedef TObject type; };
}

// Class generating the wrapper for type TNDArray
// signature to use in the veto file: TNDArray
struct JlTNDArray: public Wrapper {

  JlTNDArray(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TNDArray (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:46:7
    jlcxx::TypeWrapper<TNDArray>  t = jlModule.add_type<TNDArray>("TNDArray",
      jlcxx::julia_base_type<TObject>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TNDArray>>(new jlcxx::TypeWrapper<TNDArray>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void TNDArray::Init(Int_t, const Int_t *, bool) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::Init(Int_t, const Int_t *, bool)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:55:17
    t.method("Init", static_cast<void (TNDArray::*)(Int_t, const Int_t *, bool) >(&TNDArray::Init));
    t.method("Init", [](TNDArray& a, Int_t arg0, const Int_t * arg1)->void { a.Init(arg0, arg1); });
    t.method("Init", [](TNDArray* a, Int_t arg0, const Int_t * arg1)->void { a->Init(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void TNDArray::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:66:17
    t.method("Reset", static_cast<void (TNDArray::*)(Option_t *) >(&TNDArray::Reset));
    t.method("Reset", [](TNDArray& a)->void { a.Reset(); });
    t.method("Reset", [](TNDArray* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for Int_t TNDArray::GetNdimensions() (" __HERE__ ")");
    // signature to use in the veto list: Int_t TNDArray::GetNdimensions()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:68:10
    t.method("GetNdimensions", static_cast<Int_t (TNDArray::*)()  const>(&TNDArray::GetNdimensions));

    DEBUG_MSG("Adding wrapper for Long64_t TNDArray::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TNDArray::GetNbins()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:69:13
    t.method("GetNbins", static_cast<Long64_t (TNDArray::*)()  const>(&TNDArray::GetNbins));

    DEBUG_MSG("Adding wrapper for Long64_t TNDArray::GetCellSize(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TNDArray::GetCellSize(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:70:13
    t.method("GetCellSize", static_cast<Long64_t (TNDArray::*)(Int_t)  const>(&TNDArray::GetCellSize));

    DEBUG_MSG("Adding wrapper for Long64_t TNDArray::GetBin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t TNDArray::GetBin(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:72:13
    t.method("GetBin", static_cast<Long64_t (TNDArray::*)(const Int_t *)  const>(&TNDArray::GetBin));

    DEBUG_MSG("Adding wrapper for Double_t TNDArray::AtAsDouble(ULong64_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t TNDArray::AtAsDouble(ULong64_t)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:81:21
    t.method("AtAsDouble", static_cast<Double_t (TNDArray::*)(ULong64_t)  const>(&TNDArray::AtAsDouble));

    DEBUG_MSG("Adding wrapper for void TNDArray::SetAsDouble(ULong64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::SetAsDouble(ULong64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:82:17
    t.method("SetAsDouble", static_cast<void (TNDArray::*)(ULong64_t, Double_t) >(&TNDArray::SetAsDouble));

    DEBUG_MSG("Adding wrapper for void TNDArray::AddAt(ULong64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::AddAt(ULong64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:83:17
    t.method("AddAt", static_cast<void (TNDArray::*)(ULong64_t, Double_t) >(&TNDArray::AddAt));

    DEBUG_MSG("Adding wrapper for Version_t TNDArray::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t TNDArray::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!Class_Version", static_cast<Version_t (*)() >(&TNDArray::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * TNDArray::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNDArray::IsA()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    t.method("IsA", static_cast<TClass * (TNDArray::*)()  const>(&TNDArray::IsA));

    DEBUG_MSG("Adding wrapper for void TNDArray::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    t.method("StreamerNVirtual", static_cast<void (TNDArray::*)(TBuffer &) >(&TNDArray::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * TNDArray::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNDArray::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!DeclFileName", []() { return (std::string)TNDArray::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int TNDArray::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TNDArray::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!ImplFileLine", static_cast<int (*)() >(&TNDArray::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * TNDArray::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNDArray::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!ImplFileName", []() { return (std::string)TNDArray::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * TNDArray::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * TNDArray::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!Class_Name", []() { return (std::string)TNDArray::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * TNDArray::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNDArray::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!Dictionary", static_cast<TClass * (*)() >(&TNDArray::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * TNDArray::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * TNDArray::Class()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!Class", static_cast<TClass * (*)() >(&TNDArray::Class));

    DEBUG_MSG("Adding wrapper for void TNDArray::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void TNDArray::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    t.method("Streamer", static_cast<void (TNDArray::*)(TBuffer &) >(&TNDArray::Streamer));

    DEBUG_MSG("Adding wrapper for int TNDArray::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int TNDArray::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/TNDArray.h:87:4
    module_.method("TNDArray!DeclFileLine", static_cast<int (*)() >(&TNDArray::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TNDArray>> type_;
};
std::shared_ptr<Wrapper> newJlTNDArray(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTNDArray(module));
}

namespace jlcxx {
  template<> struct IsMirroredType<THn> : std::false_type { };
  template<> struct DefaultConstructible<THn> : std::false_type { };
template<> struct SuperType<THn> { typedef THnBase type; };
}

// Class generating the wrapper for type THn
// signature to use in the veto file: THn
struct JlTHn: public Wrapper {

  JlTHn(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type THn (" __HERE__ ")");
    // defined in /home/pgras/.julia/conda/3/include/THn.h:30:7
    jlcxx::TypeWrapper<THn>  t = jlModule.add_type<THn>("THn",
      jlcxx::julia_base_type<THnBase>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<THn>>(new jlcxx::TypeWrapper<THn>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for THn * THn::CreateHn(const char *, const char *, const TH1 *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::CreateHn(const char *, const char *, const TH1 *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:46:16
    module_.method("THn!CreateHn", static_cast<THn * (*)(const char *, const char *, const TH1 *) >(&THn::CreateHn));

    DEBUG_MSG("Adding wrapper for THn * THn::CreateHn(const char *, const char *, const THnBase *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::CreateHn(const char *, const char *, const THnBase *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:49:16
    module_.method("THn!CreateHn", static_cast<THn * (*)(const char *, const char *, const THnBase *) >(&THn::CreateHn));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetNbins() (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetNbins()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:54:13
    t.method("GetNbins", static_cast<Long64_t (THn::*)()  const>(&THn::GetNbins));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:56:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Int_t *)  const>(&THn::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Double_t *) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Double_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:59:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Double_t *)  const>(&THn::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const char *[]) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const char *[])
    // defined in /home/pgras/.julia/conda/3/include/THn.h:67:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const char *[])  const>(&THn::GetBin));

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Int_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Int_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:76:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Int_t *, Bool_t) >(&THn::GetBin));
    t.method("GetBin", [](THn& a, const Int_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THn* a, const Int_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const Double_t *, Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const Double_t *, Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:79:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const Double_t *, Bool_t) >(&THn::GetBin));
    t.method("GetBin", [](THn& a, const Double_t * arg0)->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THn* a, const Double_t * arg0)->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for Long64_t THn::GetBin(const char *[], Bool_t) (" __HERE__ ")");
    // signature to use in the veto list: Long64_t THn::GetBin(const char *[], Bool_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:82:13
    t.method("GetBin", static_cast<Long64_t (THn::*)(const char *[], Bool_t) >(&THn::GetBin));
    t.method("GetBin", [](THn& a, const char * arg0[])->Long64_t { return a.GetBin(arg0); });
    t.method("GetBin", [](THn* a, const char * arg0[])->Long64_t { return a->GetBin(arg0); });

    DEBUG_MSG("Adding wrapper for void THn::FillBin(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::FillBin(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:87:9
    t.method("FillBin", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::FillBin));

    DEBUG_MSG("Adding wrapper for void THn::SetBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::SetBinContent(const Int_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:97:9
    t.method("SetBinContent", static_cast<void (THn::*)(const Int_t *, Double_t) >(&THn::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THn::SetBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::SetBinContent(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:100:9
    t.method("SetBinContent", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::SetBinContent));

    DEBUG_MSG("Adding wrapper for void THn::SetBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::SetBinError2(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:103:9
    t.method("SetBinError2", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::SetBinError2));

    DEBUG_MSG("Adding wrapper for void THn::AddBinContent(const Int_t *, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::AddBinContent(const Int_t *, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:109:9
    t.method("AddBinContent", static_cast<void (THn::*)(const Int_t *, Double_t) >(&THn::AddBinContent));
    t.method("AddBinContent", [](THn& a, const Int_t * arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THn* a, const Int_t * arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THn::AddBinContent(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::AddBinContent(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:112:9
    t.method("AddBinContent", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::AddBinContent));
    t.method("AddBinContent", [](THn& a, Long64_t arg0)->void { a.AddBinContent(arg0); });
    t.method("AddBinContent", [](THn* a, Long64_t arg0)->void { a->AddBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for void THn::AddBinError2(Long64_t, Double_t) (" __HERE__ ")");
    // signature to use in the veto list: void THn::AddBinError2(Long64_t, Double_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:115:9
    t.method("AddBinError2", static_cast<void (THn::*)(Long64_t, Double_t) >(&THn::AddBinError2));

    DEBUG_MSG("Adding wrapper for Double_t THn::GetBinContent(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THn::GetBinContent(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:120:13
    t.method("GetBinContent", static_cast<Double_t (THn::*)(const Int_t *)  const>(&THn::GetBinContent));

    DEBUG_MSG("Adding wrapper for Double_t THn::GetBinContent(Long64_t, Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THn::GetBinContent(Long64_t, Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:124:13
    t.method("GetBinContent", static_cast<Double_t (THn::*)(Long64_t, Int_t *)  const>(&THn::GetBinContent));
    t.method("GetBinContent", [](THn const& a, Long64_t arg0)->Double_t { return a.GetBinContent(arg0); });
    t.method("GetBinContent", [](THn const* a, Long64_t arg0)->Double_t { return a->GetBinContent(arg0); });

    DEBUG_MSG("Adding wrapper for Double_t THn::GetBinError2(Long64_t) (" __HERE__ ")");
    // signature to use in the veto list: Double_t THn::GetBinError2(Long64_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:136:13
    t.method("GetBinError2", static_cast<Double_t (THn::*)(Long64_t)  const>(&THn::GetBinError2));

    DEBUG_MSG("Adding wrapper for const TNDArray & THn::GetArray() (" __HERE__ ")");
    // signature to use in the veto list: const TNDArray & THn::GetArray()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:140:28
    t.method("GetArray", static_cast<const TNDArray & (THn::*)()  const>(&THn::GetArray));

    DEBUG_MSG("Adding wrapper for TNDArray & THn::GetArray() (" __HERE__ ")");
    // signature to use in the veto list: TNDArray & THn::GetArray()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:141:22
    t.method("GetArray", static_cast<TNDArray & (THn::*)() >(&THn::GetArray));

    DEBUG_MSG("Adding wrapper for void THn::Sumw2() (" __HERE__ ")");
    // signature to use in the veto list: void THn::Sumw2()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:143:9
    t.method("Sumw2", static_cast<void (THn::*)() >(&THn::Sumw2));

    DEBUG_MSG("Adding wrapper for TH1D * THn::Projection(Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH1D * THn::Projection(Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:147:15
    t.method("Projection", static_cast<TH1D * (THn::*)(Int_t, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0)->TH1D * { return a.Projection(arg0); });
    t.method("Projection", [](THn const* a, Int_t arg0)->TH1D * { return a->Projection(arg0); });

    DEBUG_MSG("Adding wrapper for TH2D * THn::Projection(Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH2D * THn::Projection(Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:153:15
    t.method("Projection", static_cast<TH2D * (THn::*)(Int_t, Int_t, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0, Int_t arg1)->TH2D * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THn const* a, Int_t arg0, Int_t arg1)->TH2D * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for TH3D * THn::Projection(Int_t, Int_t, Int_t, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: TH3D * THn::Projection(Int_t, Int_t, Int_t, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:160:15
    t.method("Projection", static_cast<TH3D * (THn::*)(Int_t, Int_t, Int_t, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a.Projection(arg0, arg1, arg2); });
    t.method("Projection", [](THn const* a, Int_t arg0, Int_t arg1, Int_t arg2)->TH3D * { return a->Projection(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for THn * THn::Projection(Int_t, const Int_t *, Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::Projection(Int_t, const Int_t *, Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:165:15
    t.method("Projection", static_cast<THn * (THn::*)(Int_t, const Int_t *, Option_t *)  const>(&THn::Projection));
    t.method("Projection", [](THn const& a, Int_t arg0, const Int_t * arg1)->THn * { return a.Projection(arg0, arg1); });
    t.method("Projection", [](THn const* a, Int_t arg0, const Int_t * arg1)->THn * { return a->Projection(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for THn * THn::Rebin(Int_t) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::Rebin(Int_t)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:170:15
    t.method("Rebin", static_cast<THn * (THn::*)(Int_t)  const>(&THn::Rebin));

    DEBUG_MSG("Adding wrapper for THn * THn::Rebin(const Int_t *) (" __HERE__ ")");
    // signature to use in the veto list: THn * THn::Rebin(const Int_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:173:15
    t.method("Rebin", static_cast<THn * (THn::*)(const Int_t *)  const>(&THn::Rebin));

    DEBUG_MSG("Adding wrapper for void THn::Reset(Option_t *) (" __HERE__ ")");
    // signature to use in the veto list: void THn::Reset(Option_t *)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:177:9
    t.method("Reset", static_cast<void (THn::*)(Option_t *) >(&THn::Reset));
    t.method("Reset", [](THn& a)->void { a.Reset(); });
    t.method("Reset", [](THn* a)->void { a->Reset(); });

    DEBUG_MSG("Adding wrapper for Version_t THn::Class_Version() (" __HERE__ ")");
    // signature to use in the veto list: Version_t THn::Class_Version()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!Class_Version", static_cast<Version_t (*)() >(&THn::Class_Version));

    DEBUG_MSG("Adding wrapper for TClass * THn::IsA() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THn::IsA()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    t.method("IsA", static_cast<TClass * (THn::*)()  const>(&THn::IsA));

    DEBUG_MSG("Adding wrapper for void THn::StreamerNVirtual(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THn::StreamerNVirtual(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    t.method("StreamerNVirtual", static_cast<void (THn::*)(TBuffer &) >(&THn::StreamerNVirtual));

    DEBUG_MSG("Adding wrapper for const char * THn::DeclFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THn::DeclFileName()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!DeclFileName", []() { return (std::string)THn::DeclFileName(); });

    DEBUG_MSG("Adding wrapper for int THn::ImplFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THn::ImplFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!ImplFileLine", static_cast<int (*)() >(&THn::ImplFileLine));

    DEBUG_MSG("Adding wrapper for const char * THn::ImplFileName() (" __HERE__ ")");
    // signature to use in the veto list: const char * THn::ImplFileName()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!ImplFileName", []() { return (std::string)THn::ImplFileName(); });

    DEBUG_MSG("Adding wrapper for const char * THn::Class_Name() (" __HERE__ ")");
    // signature to use in the veto list: const char * THn::Class_Name()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!Class_Name", []() { return (std::string)THn::Class_Name(); });

    DEBUG_MSG("Adding wrapper for TClass * THn::Dictionary() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THn::Dictionary()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!Dictionary", static_cast<TClass * (*)() >(&THn::Dictionary));

    DEBUG_MSG("Adding wrapper for TClass * THn::Class() (" __HERE__ ")");
    // signature to use in the veto list: TClass * THn::Class()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!Class", static_cast<TClass * (*)() >(&THn::Class));

    DEBUG_MSG("Adding wrapper for void THn::Streamer(TBuffer &) (" __HERE__ ")");
    // signature to use in the veto list: void THn::Streamer(TBuffer &)
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    t.method("Streamer", static_cast<void (THn::*)(TBuffer &) >(&THn::Streamer));

    DEBUG_MSG("Adding wrapper for int THn::DeclFileLine() (" __HERE__ ")");
    // signature to use in the veto list: int THn::DeclFileLine()
    // defined in /home/pgras/.julia/conda/3/include/THn.h:183:4
    module_.method("THn!DeclFileLine", static_cast<int (*)() >(&THn::DeclFileLine));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<THn>> type_;
};
std::shared_ptr<Wrapper> newJlTHn(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTHn(module));
}
